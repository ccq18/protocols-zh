# RFC 5321 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs5001-5500/rfc5321.txt

网络工作组                                         J. Klensin
意见请求编号：5321                                  2008年10月
废止：2821
更新：1123
类别：标准轨道


                     简单邮件传输协议（SMTP）

本备忘录的状态

   本文件为互联网社区制定的互联网标准轨道协议，旨在征求讨论和改进建议。请参阅当前版本的《互联网官方协议标准》（STD 1）以了解该协议的标准化状态和最新情况。本备忘录的发行不受限制。

摘要

   本文件是关于互联网电子邮件传输基本协议的规范。它整合、更新并澄清了若干之前的文档，使其中大部分或全部内容变得过时。内容涵盖了SMTP的扩展机制及其在当代互联网中的最佳实践，但未涉及具体扩展的详细信息。虽然SMTP最初设计为一种邮件传输和投递协议，但本规范也包含了对其作为“邮件提交”协议在“分离用户代理（User Agent）”邮件读取系统和移动环境中使用的重要信息。






















Klensin                     标准轨道                     [第1页]


RFC 5321                          SMTP                      2008年10月


目录

   1.  引言 . . . . . . . . . . . . . . . . . . . . . . . . .  5
     1.1.  电子邮件的传输 . . . . . . . . . . . . . . . .  5
     1.2.  本文档的背景与历史 . . . . . . . . . . . . .  5
     1.3.  文档约定 . . . . . . . . . . . . . . . . . . .  6
   2.  SMTP模型 . . . . . . . . . . . . . . . . . . . . . .  7
     2.1.  基本结构 . . . . . . . . . . . . . . . . . . .  7
     2.2.  扩展模型 . . . . . . . . . . . . . . . . . . .  9
       2.2.1.  背景 . . . . . . . . . . . . . . . . . . .  9
       2.2.2.  扩展的定义与注册 . . . . . . . . . . . 10
       2.2.3. 扩展的特殊问题 . . . . . . . . . . . . 11
     2.3.  SMTP术语 . . . . . . . . . . . . . . . . . . .  11
       2.3.1.  邮件对象 . . . . . . . . . . . . . . .  11
       2.3.2.  发送者与接收者 . . . . . . . . . .  12
       2.3.3.  邮件代理与消息存储 . . . . . . .  12
       2.3.4.  主机 . . . . . . . . . . . . . . .  13
       2.3.5.  域名 . . . . . . . . . . . . . .  13
       2.3.6.  缓冲区与状态表 . . . . . . .  14
       2.3.7.  命令与应答 . . . . . . .  14
       2.3.8.  行 . . . . . . . . . . .  14
       2.3.9.  消息内容与邮件数据 . . .  15
       2.3.10. 发起者、投递、转发与网关系统 .  15
       2.3.11. 邮箱与地址 . . . . . .  15
     2.4.  一般语法原则与事务模型 . . . .  16
   3.  SMTP操作流程概述 . . . . . . . . . . . .  17
     3.1.  会话启动 . . . . . . . . . . . .  18
     3.2.  客户端发起 . . . . . . . . .  18
     3.3.  邮件事务 . . . . . . . .  19
     3.4.  转发以更正或更新地址 . . .  21
     3.5.  用于调试地址的命令 . . . .  22
       3.5.1.  概述 . . . . . . . .  22
       3.5.2.  VRFY正常响应 . . .  24
       3.5.3.  VRFY或EXPN成功响应的含义 .  25
       3.5.4.  EXPN的语义与应用 .  26
     3.6.  转发与邮件路由 . . . .  26
       3.6.1.  源路由与转发 . . .  26
       3.6.2.  邮件交换记录与转发 .  26
       3.6.3.  作为中继的消息提交服务器 .  27
     3.7.  邮件网关 . . . . . . .  28
       3.7.1.  网关中的头字段 . . .  28
       3.7.2.  网关中的Received行 .  29
       3.7.3.  网关中的地址 . . .  29
       3.7.4.  其他头字段 . . .  29
       3.7.5.  网关中的信封 . . .  30
     3.8.  终止会话与连接 . . . .  30
     3.9.  邮件列表与别名 . . . .  31
       3.9.1.  别名 . . . . . . .  31



Klensin                     标准轨道                     [第2页]


RFC 5321                          SMTP                      2008年10月
```

3.9.2. 列表.................................................31  
4.  SMTP规范..............................................32  
  4.1.  SMTP命令...........................................32  
    4.1.1.  命令语义与语法..................................32  
    4.1.2.  命令参数语法....................................41  
    4.1.3.  地址字面值......................................43  
    4.1.4.  命令顺序........................................44  
    4.1.5.  私有使用命令....................................46  
  4.2.  SMTP应答...........................................46  
    4.2.1.  应答码的严重程度与理论..........................48  
    4.2.2.  按功能组分类的应答码............................50  
    4.2.3.  数值顺序的应答码................................52  
    4.2.4.  应答码502........................................53  
    4.2.5.  DATA命令后及随后的<CRLF>.<CRLF>应答................53  
  4.3.  命令与应答的序列..................................54  
    4.3.1.  序列概述........................................54  
    4.3.2.  命令-应答序列..................................55  
  4.4.  跟踪信息...........................................57  
  4.5.  其他实现问题.......................................61  
    4.5.1.  最低实现要求....................................61  
    4.5.2.  透明性..........................................62  
    4.5.3.  大小限制与超时..................................62  
      4.5.3.1.  大小限制与最小值............................62  
        4.5.3.1.1.  本地部分..................................63  
        4.5.3.1.2.  域........................................63  
        4.5.3.1.3.  路径......................................63  
        4.5.3.1.4.  命令行....................................63  
        4.5.3.1.5.  应答行....................................63  
        4.5.3.1.6.  文本行....................................63  
        4.5.3.1.7.  消息内容..................................63  
        4.5.3.1.8.  收件人缓冲区..............................64  
        4.5.3.1.9.  超出限制的处理............................64  
        4.5.3.1.10.  收件人过多的应答码.......................64  
      4.5.3.2.  超时..........................................65  
        4.5.3.2.1.  初始220消息：5分钟.......................65  
        4.5.3.2.2.  MAIL命令：5分钟..........................65  
        4.5.3.2.3.  RCPT命令：5分钟..........................65  
        4.5.3.2.4.  DATA启动：2分钟..........................66  
        4.5.3.2.5.  数据块：3分钟............................66  
        4.5.3.2.6.  DATA终止：10分钟..........................66  
        4.5.3.2.7.  服务器超时：5分钟..........................66  
    4.5.4.  重试策略........................................66  
    4.5.5.  具有空反向路径的消息............................68  
5.  地址解析与邮件处理....................................69  
  5.1.  定位目标主机........................................69  
  5.2.  IPv6与MX记录........................................71  
6.  问题检测与处理..........................................71  

Klensin                     标准追踪                     [第3页]  

RFC 5321                          SMTP                      2008年10月  

  6.1.  可靠投递与电子邮件应答............................71  
  6.2.  不需要的、未请求的以及“攻击”消息..................72  
  6.3.  循环检测............................................73  
  6.4.  弥补不规则性........................................73  
7.  安全考虑................................................75  
  7.1.  邮件安全与伪造......................................75  
  7.2.  “盲”副本............................................76  
  7.3.  VRFY、EXPN与安全性..................................76  
  7.4.  基于251和551应答码的邮件重定向....................77  
  7.5.  通告中的信息泄露....................................77  
  7.6.  跟踪字段中的信息泄露................................78  
  7.7.  消息转发中的信息泄露................................78  
  7.8.  抵抗攻击............................................78  
  7.9.  SMTP服务器的操作范围................................78  
8.  IANA注意事项............................................79  
9.  致谢....................................................80  
10. 参考文献.................................................81  
  10.1.  标准性参考文献....................................81  
  10.2.  资料性参考文献....................................82  
附录A.  TCP传输服务........................................85  
附录B.  根据RFC 822头字段生成SMTP命令....................85  
附录C.  源路由............................................86  
附录D.  场景..............................................87  
  D.1.  一个典型的SMTP事务场景............................88  
  D.2.  中止的SMTP事务场景.................................89  
  D.3.  转发邮件场景.......................................90  
  D.4.  验证与发送场景.....................................92  
附录E.  其他网关问题.......................................92  
附录F.  RFC 821的废弃特性..................................93  
  F.1.  TURN..............................................93  
  F.2.  源路由............................................93  
  F.3.  HELO..............................................93  
  F.4.  #-字面值..........................................94  
  F.5.  日期与年份........................................94  
  F.6.  发送与邮寄........................................94  

1.  引言

1.1.  电子邮件的传输

   简单邮件传输协议（SMTP）的目标是可靠且高效地传输邮件。

   SMTP独立于特定的传输子系统，只需要一个可靠的有序数据流通道。虽然本文专门讨论基于TCP的传输，但也存在其他传输方式。RFC 821的附录[1]描述了其中一些。

   SMTP的一个重要特性是其跨多个网络传输邮件的能力，通常称为“SMTP邮件中继”（见第3.6节）。一个网络由在公共互联网中相互可通过TCP访问的主机、在防火墙隔离的TCP/IP内联网中的主机，或在其他局域网或广域网环境中利用非TCP传输层协议的主机组成。通过SMTP，进程可以将邮件传输到同一网络上的另一个进程，或通过中继或网关过程传输到其他网络。

   这样，邮件可以在发件人和最终收件人之间经过多个中继或网关主机。域名系统（RFC 1035[2]、RFC 974[12]及本文第5节中的内容）中的邮件交换机制被用来识别传输中消息的下一跳目标。

本文档是关于互联网电子邮件传输基本协议的规范。它整合、更新并澄清了以下内容，但未添加新功能或更改现有功能：

- RFC 821 [1] 中的原始SMTP（简单邮件传输协议）规范；
- RFC 1035 [2] 和 RFC 974 [12] 中关于域名系统（DNS）对邮件传输的要求和影响；
- RFC 1123 [3] 中的澄清和适用性声明；
- RFC 1869 [13] 中关于SMTP扩展机制的内容。

此外，本文档对RFC 2821 [14] 进行了编辑和澄清，以使其达到草案标准（Draft Standard）。它取代了RFC 821、RFC 974、RFC 1869和RFC 2821，并更新了RFC 1123（替换了RFC 1123中的邮件传输部分）。然而，RFC 821中规定的一些功能在1990年代中期已不再广泛使用（在附录中还包括一些额外的传输模型）。出于清晰和简洁的考虑，这些部分在此省略；需要这些内容的读者应参考RFC 821。

本文档还包含一些来自RFC 1123的补充材料，这些内容经过多次确认，主要通过跟踪各种邮件列表和新闻组中的讨论，以及在SMTP扩展部署过程中出现的异常解读或解释问题而确定。当本规范超出整合范围并与早期文档存在差异时，它在技术和文本上都取代了它们。

虽然SMTP最初设计为邮件传输和投递协议，但本规范也包含一些关于其作为“邮件提交”协议的重要信息，特别是作为邮局协议（POP，RFC 937 [15] 和 RFC 1939 [16]）和IMAP（RFC 3501 [17]）的推荐方案。一般而言，RFC 4409 [18]中规定的单独邮件提交协议已优先于直接使用SMTP；关于此主题的更多讨论请参见该文档。

第2.3节定义了本文档特有的术语。除非为了澄清历史术语，否则本文使用“客户端”和“服务器”这两个术语，分别指代SMTP的发送端和接收端。

配套文档RFC 5322 [4]讨论了消息头部和正文的结构与格式。

1.3  文档约定

本文档中的关键词“必须（MUST）”、“不得（MUST NOT）”、“要求（REQUIRED）”、“应（SHALL）”、“不得（SHALL NOT）”、“建议（SHOULD）”、“不建议（SHOULD NOT）”、“推荐（RECOMMENDED）”、“可以（MAY）”和“可选（OPTIONAL）”的解释遵循RFC 2119 [5]的定义。由于这些术语经过精心选择以增强电子邮件的互操作性，每次使用都应视为合规性要求。

鉴于本文档具有悠久的历史，为避免各种错误以及混淆读者和引用本文档的其他文档，大部分示例及其域名仍沿用RFC 2821中的内容。提醒读者，这些示例仅为说明用途，不应在实际代码或配置文件中使用。

2.  SMTP模型

2.1  基本结构

SMTP的设计可以如下图所示：

                  +----------+                +----------+
      +------+    |          |                |          |
      | 用户 |<-->|          |      SMTP      |          |
      +------+    |  客户端- |命令/应答| 服务器-  |
      +------+    |   SMTP   |<-------------->|    SMTP  |    +------+
      | 文件 |<-->|          |    和邮件      |          |<-->| 文件 |
      | 系统 |    |          |                |          |    | 系统 |
      +------+    +----------+                +----------+    +------+

SMTP客户端在有消息要传输时，会建立一条双向传输通道与SMTP服务器通信。SMTP客户端的责任是将邮件消息传送到一个或多个SMTP服务器，或报告其未能完成此操作。

邮件消息如何呈现给SMTP客户端，以及客户端如何确定要传输的域名（“名称”）是本地事项，不在本文档范围内。在某些情况下，指定的域名或由SMTP客户端确定的域名会标识邮件的最终目的地；在其他情况下（如与POP或IMAP协议实现相关的客户端，或在隔离的传输环境中），所确定的域名可能代表中间转发的中转目的地。那些无论目标域名如何都传输所有流量，或不维护重试队列的SMTP客户端，虽然符合本规范，但不被视为完全能力的实现。完整支持排队、重试和备用地址功能的SMTP实现（包括这些能力较弱的中继）及其目标，预计都应支持本规范中讨论的所有功能。在许多场景和配置中，上述能力较弱的客户端应使用邮件提交协议（RFC 4409 [18]）而非SMTP。

一旦确定目标域名，SMTP客户端会找到对应的SMTP服务器，建立双向通道，将邮件副本传输到该服务器。SMTP客户端通过解析目标域名，找到中间的邮件交换（MX）主机或最终目标主机。

SMTP服务器可以是最终目的地，也可以是中继“转发”服务器（在接收消息后充当SMTP客户端）或“网关”（使用其他协议转发消息）。SMTP命令由SMTP客户端生成并发给SMTP服务器，SMTP服务器则以应答回复。

换句话说，邮件传输可以在原始SMTP发件人与最终收件人之间的单一连接中完成，也可以通过多个中继系统逐跳完成。一旦服务器在邮件数据结束时发出成功响应，责任正式转交：协议要求服务器必须承担传递邮件或正确报告失败的责任（见第6.1、6.2和7.8节）。

建立传输通道并完成初始握手后，SMTP客户端通常会发起邮件事务。该事务包括一系列命令，指定发件人和收件人，以及传输邮件内容（包括头部和其他结构中的行）。当同一邮件发给多个收件人时，协议鼓励只传输一份数据到所有收件人所在的同一目标（或中继）主机。

服务器对每个命令都作出应答；应答可能表示命令已接受、期待后续命令，或存在临时或永久错误。发件人或收件人的命令可能包含服务器允许的SMTP扩展请求（详见第2.2节）。对话严格按顺序进行，一次处理一个命令，但可以通过协商扩展（如命令流水线RFC 2920 [19]）进行修改。

一旦邮件传输完成，客户端可以请求关闭连接或发起其他邮件事务。此外，SMTP客户端还可以利用连接进行辅助服务，如验证电子邮件地址或检索邮件列表订阅地址。

如上所述，本协议提供了邮件传输的机制。历史上，邮件通常由发件人主机直接传输到收件人主机（当两者连接同一传输服务时）；当不在同一传输服务时，则通过一个或多个中继SMTP服务器转发。当前互联网中非常常见的情况是，将原始邮件提交到一个中间的“邮件提交”服务器（类似中继，但具有额外特性），这在第2.3.10节和RFC 4409 [18]中有详细讨论。作为SMTP中继或进入其他传输环境的中间主机，通常通过域名系统（DNS）邮件交换（MX）记录来选择。

通常，中继主机通过DNS MX记录确定，而不是通过显式的“源路由”（详见第5节及附录C和F.2节）。

2.2  扩展模型

2.2.1  背景

自1990年起开始的努力，距RFC 821完成约十年后，协议引入了“服务扩展”模型，允许客户端和服务器协商使用超出原始SMTP要求的共享功能。SMTP扩展机制定义了一种方式，使扩展的SMTP客户端和服务器可以相互识别，服务器也可以通知客户端其支持的服务扩展。

现代SMTP实现必须支持基本的扩展机制。例如，服务器必须支持EHLO命令，即使未实现任何特定扩展，客户端也应优先使用EHLO而非HELO（但为了兼容旧实现，SMTP客户端和服务器必须支持原始的HELO机制作为后备）。除非为了互操作性需要区分HELO的不同特性，否则本文档只讨论EHLO。

SMTP已广泛部署，优质实现证明其非常稳健。然而，互联网社区现在认为一些在协议设计时未预料的重要服务需要支持。如果要添加这些服务，必须确保旧实现仍能正常工作。扩展框架包括：

- 替代HELO的SMTP命令EHLO；
- SMTP服务扩展的注册表；
- 对SMTP MAIL和RCPT命令的附加参数；
- 以及对协议中定义命令（如DATA）进行可选替换的机制（如用于非ASCII传输的RFC 3030 [20]）。

SMTP的优势主要在于其简洁性。经验表明，选项较少的协议更易普及，而选项繁多的协议则可能变得晦涩难懂。

每个扩展，无论其带来何种益处，都必须经过仔细审查，考虑其实现、部署和互操作性成本。在许多情况下，扩展SMTP服务的成本可能超过其带来的好处。

2.2.2  扩展的定义与注册

IANA维护SMTP服务扩展的注册表。每个扩展都关联一个EHLO关键词值。注册到IANA的每个扩展必须在正式的标准轨道或经IESG批准的实验性协议文档中定义。定义内容应包括：

- SMTP服务扩展的文本名称；
- 与之关联的EHLO关键词值；
- 相关参数的语法和可能值；
- 与扩展相关的其他SMTP动词（通常与EHLO关键词相同，但不一定）；
- 该扩展与MAIL或RCPT动词相关联的任何新参数；
- 支持该扩展对服务器和客户端SMTP行为的影响描述；
- 以及该扩展在命令MAIL和/或RCPT的最大长度上增加的字节数（相较于本标准规定的最大长度）。

以上内容确保每个扩展都经过正式定义和注册，以便在实际部署中正确识别和使用。

此外，任何以大写或小写字母“X”开头的EHLO关键字值，均指仅通过双边协议使用的本地SMTP服务扩展。以“X”开头的关键字不得用于注册的服务扩展。相反，在EHLO响应中出现的、不以“X”开头的关键字值，必须对应由IANA注册的标准、标准轨道或已获IESG批准的实验性SMTP服务扩展。符合规范的服务器不得提供未在注册扩展中描述的非“X”前缀的关键字值。

附加的动词和参数名的绑定规则与EHLO关键字相同；具体而言，以“X”开头的动词是本地扩展，可能未注册或未标准化。相反，不以“X”开头的动词必须已注册。

2.2.3. 扩展的特殊问题

允许更改SMTP操作中相当基本属性的扩展。本文其他部分的内容必须在此背景下理解。特别是，扩展可以更改第4.5.3节中规定的最小限制，可以更改上述提到的ASCII字符集要求，或引入一些可选的消息处理模式。

尤其是，如果某个扩展意味着传递路径通常支持该扩展的特殊功能，而中间SMTP系统发现下一跳不支持所需的扩展，则可以根据具体扩展和情况选择重新排队消息，稍后再试和/或尝试备用的MX主机。如果采用此策略，回退到未扩展格式（如果有的话）的超时时间应少于将邮件标记为无法投递的正常超时时间（例如，如果正常超时为三天，则在尝试在没有扩展的情况下传输邮件之前的重新排队超时时间可能为一天）。

2.3. SMTP术语

2.3.1. 邮件对象

SMTP传输邮件对象。邮件对象包含信封和内容。

SMTP信封作为一系列SMTP协议单元（详见第3节）发送。它由发件人地址（错误报告应指向的地址）、一个或多个收件人地址，以及可选的协议扩展材料组成。历史上，反向路径（发件人）地址的变体命令（MAIL）可用于指定备用的投递方式，例如立即显示；这些变体现已被废弃（参见附录F和F.6）。

SMTP内容在DATA协议单元中发送，包含两个部分：头部和正文。如果内容符合其他现代标准，头部由一组头字段组成，每个字段由字段名、冒号和数据组成，结构如消息格式规范（RFC 5322 [4]）；结构化的正文则根据MIME（RFC 2045 [21]）定义。内容本质上是文本，使用US-ASCII字符集表达[6]。虽然SMTP扩展（如“8BITMIME”，RFC 1652 [22]）可能放宽对正文内容的限制，但内容头字段始终使用US-ASCII编码。两个MIME扩展（RFC 2047 [23]和RFC 2231 [24]）定义了在US-ASCII字符集之外表示头字段值的算法，同时仍使用US-ASCII编码。

2.3.2. 发送者和接收者

在RFC 821中，参与SMTP事务的两个主机被描述为“SMTP发件人”和“SMTP收件人”。本文件已更新以反映当前行业术语，因此分别称为“SMTP客户端”（或简称“客户端”）和“SMTP服务器”（或简称“服务器”）。由于在中继场景中，某个主机可能同时作为服务器和客户端，因此在需要明确时仍使用“接收者”和“发件人”的术语。

2.3.3. 邮件代理和消息存储

RFC 821发布后，额外的邮件系统术语变得普遍，并在本规范中酌情使用。特别是，SMTP服务器和客户端提供邮件传输服务，因此被称为“邮件传输代理”（MTA）。“邮件用户代理”（MUA或UA）通常被视为邮件的源头和目标。在源头，MUA可能收集用户要传输的邮件并交给MTA；最终的（“投递”）MTA会将邮件交给MUA（或至少将责任转移给它，例如将消息存入“消息存储”）。然而，虽然在其他环境中这些术语的使用似乎非常精确，但在实际的互联网邮件中，MUA和MTA之间的界限往往并不完全符合常规和符合规范的实践。因此，读者在推断这些术语可能暗示的强关系和责任时应保持谨慎。

2.3.4. 主机

在本规范中，主机指连接到互联网（或在某些情况下，连接到私有TCP/IP网络）并支持SMTP协议的计算机系统。主机以名称识别（见下一节）；不应以数字地址（即第4.1.2节所述的地址字面量）识别。

2.3.5. 域名

域名（或简称“域”）由一个或多个组成部分组成，用点分隔（如果有多个）。在单独使用的顶级域名（如电子邮件地址中的顶级域）中，使用单一字符串，无点。这一点在涉及顶级域时尤为重要，因为SMTP交易中只允许出现完全限定域名（FQDN）。这些组成部分（在DNS术语中称为“标签”，RFC 1035 [2]）仅限于由ASCII字符集中的字母、数字和连字符组成。域名用作主机名和域名层次结构中其他实体的名称。例如，域名可以指代别名（CNAME记录的标签）或邮件交换（MX）记录的标签，用于投递邮件，而不是代表主机名。详见RFC 1035 [2]和本规范第5节。

根据本文和RFC 1035 [2]的定义，域名是完整的、全限定的名称（常称为“FQDN”）。非FQDN形式的域名仅为本地别名。SMTP中不得出现非FQDN的域名。换句话说，允许解析为MX记录或A/AAAA地址记录的名称（详见第5节），以及目标可解析为MX或地址记录的CNAME记录。不得使用本地昵称或未限定的名称。关于FQDN的两个例外：

- EHLO命令中提供的域名必须是主机名（可解析为地址RR的域名）或，如果没有名称，则为地址字面量（详见第4.1.3节，及第4.1.4节中的EHLO讨论）。

- 保留邮箱名“postmaster”可以在RCPT命令中使用，无需域名限定（见第4.1.1.3节），且必须接受。

2.3.6. 缓冲区和状态表

SMTP会话是有状态的，双方都要仔细维护当前状态的共同视图。在本文件中，我们用虚拟的“缓冲区”和“状态表”模型描述此状态，服务器端的客户端可以用它来“清空缓冲区”或“重置状态表”，从而丢弃缓冲中的信息并将状态恢复到某个先前状态。

2.3.7. 命令和应答

SMTP命令和（除服务扩展修改外）消息数据通过传输通道以“行”形式从发件人传送到收件人。

SMTP应答是由接收方发回发件方的确认（正面或负面），也是以“行”形式通过传输通道响应命令。应答的基本格式是一个数字完成码（表示成功或失败），通常后跟一段文本字符串。数字码供程序使用，文本通常为人类用户设计。RFC 3463 [25]进一步规范了应答字符串的结构，包括使用补充和更具体的完成码（参见RFC 5248 [26]）。

2.3.8. 行

行由零个或多个数据字符组成，以ASCII字符“CR”（十六进制0D）终止，紧接着是ASCII字符“LF”（十六进制0A）。此终止序列在本文中记作<CRLF>。符合规范的实现必须不识别或生成任何其他字符或字符序列作为行终止符。服务器可能对行长度施加限制（见第4节）。

此外，文本中出现“裸露”的“CR”或“LF”字符（即没有配对的字符）历史上一直会引发邮件实现和应用中的问题。SMTP客户端实现必须不传输这些字符，除非它们作为行终止符使用，并且必须如上所述仅作为<CRLF>序列传输。

2.3.9. 消息内容和邮件数据

本文中，“消息内容”和“邮件数据”是互换使用的术语，用于描述在DATA命令被接受后、数据结束指示发出之前传输的内容。消息内容包括消息头部和可能的结构化消息体。MIME规范（RFC 2045 [21]）提供了结构化消息体的标准机制。

2.3.10. 发件系统、投递系统、转发系统和网关系统

本规范区分四类SMTP系统，依据它们在传输电子邮件中的角色。一个“发起”系统（有时称为SMTP发起者）将邮件引入互联网或更广泛的传输服务环境。“投递”SMTP系统接收邮件并将其交付给邮件用户代理（MUA）或存入消息存储，供邮件用户随后访问。“中继”SMTP系统（通常简称“中继”）从SMTP客户端接收邮件，未经修改（除添加追踪信息外）直接转发到另一个SMTP服务器以进行进一步中继或投递。

“网关”SMTP系统（通常简称“网关”）从一个传输环境中的客户端系统接收邮件，并将其传输到另一个传输环境中的服务器系统。两端传输环境之间协议或消息语义的差异可能要求网关系统对消息进行变换，而这在SMTP中是不允许的。对于本规范而言，重写地址的防火墙应视为网关，即使两端都使用SMTP（参见RFC 2979 [27]）。

2.3.11. 邮箱和地址

在本规范中，“地址”是一个字符字符串，用于标识将接收邮件的用户或存放邮件的位置。“邮箱”指的是存放邮件的存储空间。除非区分邮件存放位置（邮箱）和对其的引用（地址）很重要，否则这两个术语通常可以互换。地址通常由用户和域名组成。标准的邮箱命名格式为“local-part@domain”；现代用法允许比简单“用户名”更广泛的应用。因此，由于历史上中间主机试图处理的各种问题，使用这些术语时应谨慎。

通过修改传输方式来优化它们，必须仅由地址中的域部分指定的主机来解释和赋予本地部分语义。

2.4 一般语法原则与事务模型

SMTP命令和应答具有严格的语法。所有命令都以命令动词开头。所有应答都以三个数字组成的代码开头。在某些命令和应答中，动词或应答码之后需要跟参数。有些命令不接受参数（在动词之后），而某些应答码后面有时可选地跟随自由格式的文本。在这两种情况下，出现文本时，文本与动词或应答码之间用空格字符隔开。命令和应答的完整定义见第4节。

动词和参数值（例如RCPT命令中的“TO:”或“to:”以及扩展名关键词）不区分大小写，唯一的例外是本规范中特别规定的邮箱本地部分（SMTP扩展可能会明确规定区分大小写）。也就是说，命令动词、除邮箱本地部分外的参数值，以及自由格式的文本可以用大写、小写或任何大小写混合编码，而不会影响其含义。邮箱的本地部分必须被视为区分大小写。因此，SMTP实现必须注意保持邮箱本地部分的大小写。特别是，对于某些主机，用户“smith”与用户“Smith”是不同的。然而，利用邮箱本地部分的大小写敏感性会阻碍互操作性，因此不鼓励这样做。邮箱域名遵循正常的DNS规则，因此不区分大小写。

一些SMTP服务器违反本规范（以及RFC 821）要求客户端必须用大写字母编码命令动词。实现者可能希望采用这种编码方式，以适应这些服务器。

参数部分由一个可变长度的字符字符串组成，以行尾的字符序列<CRLF>结束。接收方在收到完整的字符序列之前不会采取任何行动。

每个命令的语法在对应的命令讨论中给出。常用元素和参数在第4.1.2节中列出。

命令和应答由ASCII字符集中的字符组成[6]。当传输服务提供8位字节（八位字节）传输通道时，每个7位字符都以右对齐的方式在一个高位比特清零的八位字节中传输。更具体地说，未扩展的SMTP服务仅提供7位传输。未成功协商适当扩展的发起SMTP客户端不得在八位字节的高位比特中传输信息（参见下一段）。如果违反此规则传输了此类消息，接收的SMTP服务器可以清除高位比特或将消息视为无效而拒绝。一般而言，转发SMTP应假定其接收的消息内容有效，并在信封允许的情况下，直接转发而不检查内容。当然，如果内容被错误标记，且数据路径不能接受实际内容，最终可能会将严重乱码的消息送达收件人。交付SMTP系统可以拒绝此类消息，或将其作为不可送达返回，而不是投递。除非服务器明确提供扩展允许，否则发件SMTP系统不得用除US-ASCII之外的字符集发送信封命令。接收系统应拒绝此类命令，通常返回“500 语法错误 - 无效字符”。

客户端可以使用扩展SMTP功能（如“8BITMIME”扩展，RFC 1652 [22]）请求服务器支持8位消息内容传输。SMTP服务器应支持8BITMIME。然而，这并不意味着允许传输无限制的8位内容，也不代表8BITMIME授权传输非ASCII的信封内容。发件人不得请求传输带有高位的非MIME格式内容，除非使用了适当的内容传输编码，否则服务器可能会拒绝此类消息。

本文档中使用的元语言符号对应于其他互联网邮件系统文档中使用的“增强BNF”。不熟悉该语法的读者应查阅RFC 5234 [7]中的ABNF规范。正文中使用尖括号（如<CRLF>）标示元语言术语以提高清晰度。提醒读者，元语言表达的语法并不全面，文本中的许多规定会限制或修改语法或语义。

3. SMTP过程概述

本节介绍SMTP中使用的各种过程：会话启动、邮件事务、转发邮件、验证邮箱名和扩展邮件列表，以及开启和关闭会话。最后还包括关于中继、邮件域名的说明和角色变更的讨论。附录D中提供了几个完整的场景示例。

3.1 会话启动

SMTP会话在客户端建立连接并收到服务器的欢迎信息时开始。

SMTP服务器实现可以在连接问候应答中（220代码之后）包含其软件和版本信息，以便更高效地隔离和修复问题。实现可以考虑让SMTP服务器在安全考虑下禁用软件和版本信息的公布。虽然一些系统也会标明其邮件问题的联系方式，但这不能替代维护“postmaster”地址（见第4节）的要求。

SMTP协议允许服务器正式拒绝邮件会话，同时仍允许建立初始连接：可以在初始连接问候中返回554应答，而不是220。采用此方法的服务器必须在关闭连接前等待客户端发送QUIT命令（见第4.1.1.10节），并应对任何中间命令返回“503 错误的命令序列”。由于尝试连接此类系统可能是误操作，返回554应答的服务器应在应答文本中提供足够信息以便调试。

3.2 客户端发起

一旦服务器发送问候信息，客户端收到后，通常会向服务器发送EHLO命令，表明客户端身份。除了开启会话外，使用EHLO还表明客户端支持服务扩展，并请求服务器提供支持的扩展列表。不支持服务扩展的旧SMTP系统，以及不需要支持扩展的现代客户端，可以使用HELO代替EHLO。服务器不得对HELO命令返回扩展的EHLO样式应答。如果某次连接中，服务器对EHLO返回“命令未识别”应答，客户端应能退回使用HELO。

在EHLO命令中，发出命令的主机标识自己；该命令可以理解为“你好，我是<域名>”（在EHLO的情况下，还表示“我支持服务扩展请求”）。

3.3 邮件事务

SMTP邮件事务包括三个步骤。事务以MAIL命令开始，提供发件人信息（通常在没有进行中的邮件事务时发送；见第4.1.4节）。接着是一系列RCPT命令，提供收件人信息。最后，DATA命令开始传输邮件内容，并由“邮件结束”数据指示符终止，确认事务。

第一步是MAIL命令：

```
MAIL FROM:<反向路径> [SP <邮件参数>] <CRLF>
```

此命令通知SMTP接收方，新的邮件事务开始，重置所有状态表和缓冲区，包括任何收件人和邮件数据。<反向路径>部分（在“<”和“>”括号内）包含源邮箱（用于报告错误，详见第4节的错误报告讨论）。如果接受，SMTP服务器返回“250 OK”。如果邮箱规格不接受，服务器必须返回指示失败是永久性（再次尝试会失败）或临时性（稍后重试可能成功）的应答。尽管如此，在某些情况下，反向路径的可接受性可能要等到一个或多个正向路径（在RCPT命令中）被检查后才能确定。在这些情况下，服务器可以合理地接受反向路径（返回250应答），然后在收到并检查正向路径后报告问题。通常，失败会返回550或553应答。

历史上，<反向路径>允许包含除邮箱之外的内容，但现代系统应避免使用源路由（参见附录C）。

可选的<邮件参数>与协商的SMTP扩展相关（见第2.2节）。

第二步是RCPT命令。此步骤可以多次重复。

```
RCPT TO:<正向路径> [SP <收件参数>] <CRLF>
```

此命令的第一个或唯一参数包括正向路径（通常是邮箱和域名，始终用“<”和“>”括起），标识一个收件人。若接受，SMTP服务器返回“250 OK”并存储正向路径；若收件人被判定为不可投递地址，服务器返回550，应答中通常带有“无此用户”之类的字符串和邮箱名（其他情况和应答码也可能出现）。

<正向路径>可以包含除邮箱之外的内容。历史上，<正向路径>允许包含源路由列表（主机和目标邮箱），但现代SMTP客户端应避免使用源路由（参见附录C）。服务器应能识别正向路径中的源路由列表，但应忽略路由或拒绝支持其中暗示的中继功能。同样，服务器可以拒绝接受面向其他主机或系统的邮件。这些限制使得服务器作为不支持完整SMTP功能的客户端的中继变得无用。因此，受限能力的客户端不得假设任何互联网SMTP服务器都可以用作其邮件处理（中继）站点。如果在没有先发MAIL命令的情况下出现RCPT命令，服务器必须返回“503 命令序列错误”。可选的<收件参数>与协商的SMTP扩展相关（见第2.2节）。

由于这是常见的错误源，值得注意的是，MAIL命令中的FROM和RCPT命令中的TO后面冒号两边不允许有空格。语法严格如上所示。

第三步是DATA命令（或某些服务扩展中指定的替代命令）：

```
DATA <CRLF>
```

若接受，SMTP服务器返回354中间应答，认为直到“邮件结束”数据指示符之前的所有行都是邮件内容。当成功接收并存储完邮件内容后，SMTP接收方会返回“250 OK”。

由于邮件内容在传输通道上传送，必须用结束符指示邮件数据的结束，以便恢复命令和应答的对话。SMTP用只含一个“.”（句点或点号）的行来表示邮件数据的结束。为防止此符号干扰用户文本，采用透明处理（参见第4.5.2节）。

邮件数据结束指示符还确认了邮件事务，并通知SMTP服务器开始处理存储的收件人和邮件数据。如果被接受，SMTP服务器会返回“250 OK”的回复。在协议交换中，DATA命令可能只在两个点失败：

1. 如果没有MAIL命令，或没有RCPT命令，或者所有此类命令都被拒绝，服务器可能会对DATA命令返回“命令序列错误”(503)或“无有效收件人”(554)的回复。如果收到这些回复（或任何其他5yz类回复），客户端必须不发送邮件内容；更一般而言，除非收到354回复，否则不得发送邮件数据。

2. 如果最初接受了该动词并发出了354回复，DATA命令应仅在邮件事务不完整（例如，没有收件人）、资源不可用（包括服务器意外变得不可用）或服务器出于政策或其他原因决定拒绝该消息时失败。

然而，实际上，一些服务器在收到邮件正文后才进行收件人验证。这些服务器应将对一个或多个收件人的失败视为“后续失败”，并按照第6节，特别是第6.1节的讨论返回一条邮件消息。在数据被接受后使用“550邮箱未找到”(或等效)的回复码，会使客户端难以或无法判断哪些收件人失败。

当使用RFC 822格式（[28], [4]）时，邮件数据包括诸如Date、Subject、To、Cc和From等头字段。SMTP服务器系统不应因RFC 822或MIME（RFC 2045 [21]）消息头或消息正文中的感知缺陷而拒绝消息。特别是，它们不得拒绝Resent-header字段数量不匹配或Resent-to出现但Resent-from和/或Resent-date缺失的消息。

邮件事务命令必须按上述顺序使用。

3.4 转发以进行地址更正或更新

转发支持通常用于整合和简化企业内部或相关地址，较少用于建立连接个人之前的地址与当前地址的机制。在现代互联网中，为安全或保密目的，静默转发（不通知发件人）也很常见。

在企业和“新地址”场景中，信息隐藏（有时也涉及安全）考虑反对通过SMTP协议暴露“最终”地址作为转发活动的副作用。这尤其重要当最终地址甚至可能无法由发件人访问时。因此，RFC 821第3.2节描述的“转发”机制，特别是RCPT的251（已更正的目标）和551回复码，必须由实现者和配置系统的人员仔细评估（另见第7.4节）。

具体而言：

- 服务器在知道地址变更时可以转发邮件。在这样做时，可以用251码提供地址更新信息，也可以“静默”转发并返回250码。然而，如果使用251码，必须不假设客户端会实际更新地址信息或将该信息返回给用户。

或者，

- 服务器在无法准确投递到指定地址时，可以拒绝邮件或返回不可投递状态。当这样做时，可以用551码提供地址更新信息，也可以用550码拒绝邮件且不提供地址相关信息。然而，如果使用551码，必须不假设客户端会实际更新地址信息或将该信息返回给用户。

支持251和/或551回复码的SMTP服务器实现应提供配置机制，以便那些认为不应泄露信息的站点可以禁用或限制其使用。

3.5 调试地址的命令

3.5.1 概述

SMTP提供命令以验证用户名或获取邮件列表内容。这通过VRFY和EXPN命令实现，它们带有字符字符串参数。实现应支持VRFY和EXPN（但见第3.5.2节和第7.3节）。

对于VRFY命令，字符串可以是用户名或用户名加域名（见下文）。如果返回正常（即250）响应，响应应包括用户的全名，并且必须包括用户的邮箱。格式应为：

- 用户名 <local-part@domain>
- local-part@domain

当VRFY的参数可能对应多个邮箱时，服务器可以指出歧义或列出备选项。换句话说，以下任何响应都是合法的：

- 553 用户歧义

或

- 553-歧义；可能性包括
  553-Joe Smith <jsmith@foo.com>
  553-Harry Smith <hsmith@foo.com>
  553-Melvin Smith <dweep@foo.com>

或

- 553-歧义；可能性
  553- <jsmith@foo.com>
  553- <hsmith@foo.com>
  553 <dweep@foo.com>

在正常情况下，收到553回复的客户端应向用户显示结果。使用上述格式和“用户歧义”或“歧义”关键词，可能还会辅以RFC 3463 [25]中描述的扩展回复码，以便自动翻译成其他语言。自然，自动化程度高或使用非英语的客户端可能会尝试将响应翻译成其他指示，而不是字面文本，或在向用户报告前进行一些自动操作（如咨询目录服务以获取更多信息）。

对于EXPN命令，字符串标识一个邮件列表，成功（即250）多行响应应包括用户的全名，并必须列出邮件列表中的邮箱。

在某些主机中，邮件列表和单一邮箱的别名之间的区别较模糊，因为可能存有同时包含两者的通用数据结构，也可能存在只有一个邮箱的邮件列表。如果对邮件列表应用VRFY请求，若消息会投递给列表中的所有人，则可以给出肯定响应，否则应报告错误（例如，“550 这是一个邮件列表，不是用户”或“252 无法验证邮件列表成员”）。如果请求展开用户名，服务器可以返回一个包含一个名称的肯定响应，或报告错误（例如，“550 这是一个用户名，不是邮件列表”）。

对于成功的多行响应（EXPN正常情况），每行应指定一个邮箱。歧义请求的情况如上所述。

“用户名”是一个模糊术语，故意如此使用。实现VRFY或EXPN命令必须至少识别本地邮箱为“用户名”。但鉴于当前互联网实践中，一个主机常为多个域处理邮件，特别是提供此功能的主机，应接受“local-part@domain”形式作为“用户名”；主机也可以选择识别其他字符串为“用户名”。

展开邮箱列表时，需多行响应，例如：

```
C: EXPN Example-People
S: 250-Jon Postel <Postel@isi.edu>
S: 250-Fred Fonebone <Fonebone@physics.foo-u.edu>
S: 250 Sam Q. Smith <SQSmith@specific.generic.com>
```

或

```
C: EXPN Executive-Washroom-List
S: 550 你无权访问。
```

由于用户名称和邮箱列表的概念实现多样，VRFY和EXPN命令的字符参数不能进一步限制。某些系统中，EXPN命令的参数可能是包含邮件列表的文件名，但互联网中存在多种文件命名约定。类似地，这些命令返回内容的历史变动也较大，应非常谨慎地解释响应，通常仅用于诊断。

3.5.2 VRFY正常响应

当VRFY或EXPN请求返回正常（2yz或551）响应时，回复必须包含使用“<local-part@domain>”格式的邮箱名，其中“domain”是完全限定域名。在特殊情况下，为了违反本规范的意图，可以返回自由格式文本。为了便于计算机和人类解析，地址应出现在尖括号内。当返回的不是自由格式调试信息，而是地址时，EXPN和VRFY必须只返回在SMTP RCPT命令中可用的有效域名地址。因此，如果地址指向某个程序或系统，必须提供到达该目标的邮箱名。路径（显式源路由）不得由VRFY或EXPN返回。

实现应支持VRFY和EXPN。出于安全考虑，可能提供配置选项，允许禁用其中一个或两个命令（见第7.3节）。支持这些命令时，不要求在中继时也能工作。由于在RFC 821中它们都是可选的，但在RFC 1123 [3]中VRFY变为强制，如果支持EXPN，则必须在EHLO响应中列出为服务扩展。VRFY可以作为便利列出，但由于支持它是必须的，SMTP客户端在使用前无需检查扩展列表中是否支持。

3.5.3 VRFY或EXPN成功响应的含义

服务器不得对VRFY或EXPN命令返回250码，除非实际验证了地址。特别是，如果只验证了语法有效性，不应返回250。此时，应返回502（命令未实现）或500（语法错误，命令无法识别）。如前所述，强烈建议实现VRFY和EXPN的实际验证（验证地址和返回信息）。因此，返回500或502的实现不完全符合本规范。

在某些情况下，地址看似有效但无法实时验证，尤其当服务器作为另一台服务器或域的邮件交换器时，“表面有效性”通常至少涉及语法检查，可能还包括验证指定的域是否为主机预期中能中继邮件的域。在这些情况下，应返回252码。这些情况与第2.1节中RCPT验证的讨论类似。第3.4节中的讨论也适用于使用251和551码的VRFY（和EXPN），以指示已识别但可能被转发或拒绝的地址。通常，VRFY的地址验证应比RCPT更积极，即使这可能花费更长时间。

3.5.4 EXPN的语义和应用

EXPN（扩展）在调试和理解邮件列表以及多目标地址别名的问题时通常非常有用。一些系统曾试图利用邮件列表的源扩展作为消除重复的手段。由于互联网主机（通常具有MX和CNAME DNS记录）、邮箱（各种类型的本地主机别名）以及各种代理安排中别名系统的传播，使得这些策略难以始终如一地奏效，因此邮件系统不应尝试使用它们。

3.6. 转发与邮件路由

3.6.1. 源路由与转发

一般来说，域名系统（RFC 1035 [2]，RFC 974 [12]）中存在的邮件交换（MX）记录，使得在互联网邮件系统中显式使用源路由变得不必要。历史上对显式源路由的解释存在许多问题，这使得其使用变得不受欢迎。SMTP客户端应避免生成显式源路由，除非在特殊情况下。SMTP服务器可以拒绝作为中继或接受指定源路由的地址。当遇到路由信息时，SMTP服务器可以忽略该信息，直接将邮件发送到路由中的最后一个目标地址（即最后一个元素所指定的地址），并应如此做。曾经存在一种不正确的做法，即使用在DNS中未出现的名称作为目标名称，发件人依赖源路由中指定的中间主机来解决任何问题。如果源路由被剥离，这种做法将导致失败。这也是SMTP客户端不得生成无效源路由或依赖连续解析名称的原因之一。

当不使用源路由时，RFC 821中描述的从正向路径构建反向路径的过程不再适用，交付时的反向路径将仅是MAIL命令中出现的地址。

3.6.2. 邮件交换记录与转发

中继SMTP服务器通常由DNS MX记录指向，而不是最终的投递系统。中继服务器可以像对待本地用户一样接受或拒绝转发邮件的任务。如果接受该任务，它就成为SMTP客户端，建立到DNS中指定的下一个SMTP服务器的传输通道（遵循第5节的规则），并将邮件发送给它。如果出于策略原因拒绝将邮件中继到某个地址，应返回550响应。

本规范未涉及用于投递通知的回路径验证。近年来，SPF [29] 和 DKIM [30][31] 等工作已在进行，旨在提供验证地址有效性或归属的手段。服务器可以尝试在使用回路径进行投递通知前进行验证，但此类方法未在此定义，也未推荐采用任何特定方法。

3.6.3. 作为中继的消息提交服务器

许多发信客户端，尤其是结合POP3或IMAP接收邮件的客户端，支持的功能有限，难以满足本规范的一些要求，比如排队等待后续投递的能力。对于这些客户端，常见做法是私下安排，将所有消息发送到单一服务器进行处理和后续分发。这里所述的SMTP（如本文所述）并不理想地适用于此角色。已开发出一种标准化的邮件提交协议（RFC 4409 [18]），逐步取代基于SMTP的做法。无论如何，由于这些安排是私有的，超出本规范范围，因此未在此详细描述。

值得注意的是，MX记录可以指向作为其他环境网关的SMTP服务器，而不仅仅是中继和最终投递系统；详见第3.7节和第5节。

如果SMTP服务器已接受中继任务，但后来发现目标地址错误或因其他原因无法投递，应构造一条“无法投递的邮件”通知消息，并将其发回给原始发件人（由反向路径指示）。应尽可能采用其他标准（如RFC 3461 [32]和RFC 3464 [33]）规定的非投递报告格式。

此通知必须由中继主机或首次确认无法投递的主机发出。当然，SMTP服务器不得就传输通知消息的问题发送通知。为了防止错误报告中的循环，可以在通知消息的MAIL命令中指定空的反向路径。当传输此类消息时，反向路径必须设置为空（详见第4.5.5节的补充讨论）。带有空反向路径的MAIL命令示例如下：

```
MAIL FROM:<>
```

如第6.4节所述，中继SMTP无需检查或处理消息数据的头部或正文，除非是为了添加自己的“Received:”头字段（第4.4节）或尝试检测邮件系统中的循环（第6.3节）。当然，这一限制也适用于对这些头字段或文本的任何修改（另见第7.9节）。

3.7. 邮件网关

虽然上述中继功能在互联网SMTP传输服务环境中运行，但MX记录或各种显式路由可能要求中间SMTP服务器在不同传输服务之间进行转换。正如第2.3.10节所述，当此类系统位于两个传输环境的边界时，我们称之为“网关”或“网关SMTP”。

在不同邮件环境（如不同的邮件格式和协议）之间进行网关操作复杂，难以标准化。然而，可以为互联网与其他邮件环境之间的网关提出一些通用要求。

3.7.1. 网关中的头字段

在跨越邮件环境边界时，头字段可以在必要时被重写。这可能涉及检查消息正文或解释目标地址的本地部分，尽管第6.4节中有相关限制。

连接到互联网的其他邮件系统通常使用RFC 822头部的子集，或用不同语法提供类似功能，但其中一些系统没有等同于SMTP信封的概念。因此，当消息离开互联网环境时，可能需要将SMTP信封信息折叠到消息头部中。一个可能的方案是创建新的头字段来携带信封信息（如“X-SMTP-MAIL:”和“X-SMTP-RCPT:”）；但这需要修改外部环境中的邮件程序，且可能泄露私密信息（详见第7.2节）。

3.7.2. 网关中的Received行

在将消息转发到或从互联网环境时，网关必须在消息头中添加Received:行，但不得更改已存在的Received:行。来自其他环境的消息的Received:行可能不完全符合本规范，但其最重要的用途是调试邮件故障。试图“修正”Received:行的善意网关可能会严重阻碍调试工作。由于非SMTP环境中可能出现追踪头字段，接收系统不得因格式问题拒绝邮件，应具备极强的容错能力。

网关应在其提供的Received头字段中的“via”子句中指明环境和协议。

3.7.3. 网关中的地址

从互联网一端，网关应接受所有有效的SMTP命令和RFC 822头字段中的地址，以及所有有效的RFC 822消息。由网关生成的地址和头字段必须符合相关标准（包括本规范和RFC 5322 [4]）。当然，网关在处理源路由时也应遵守第3.3节中描述的规则。

3.7.4. 网关中的其他头字段

网关必须确保其转发到互联网邮件环境的所有头字段符合互联网邮件的要求。特别是，“From:”、“To:”、“Cc:”等头字段中的所有地址（如有必要）都应转换为符合RFC 5322 [4]的标准格式，只引用完全限定域名，并且应能有效支持回复。将邮件从互联网协议转换到其他环境协议的翻译算法，应确保来自外部邮件环境的错误信息能通过SMTP信封的反向路径送达，而不是送到“From:”、“Sender:”或类似头字段中的地址。

3.7.5. 网关中的信封

同样地，从其他环境转发消息到互联网时，网关应根据外部环境提供的错误返回地址设置信封的返回路径。如果外部环境没有对应的概念，网关必须选择并使用最接近的方案，默认使用消息发起者的地址作为最后的备选。

3.8. 终止会话与连接

SMTP连接在客户端发送QUIT命令后终止。服务器应回复正面响应码，然后关闭连接。

除非满足以下条件，否则SMTP服务器不得在正常操作中故意关闭连接（详见第7.8节）：

- 收到QUIT命令并回复221。

- 发现需要关闭SMTP服务时，返回421响应码。此响应码可以在收到任何命令后发出，或在必要时异步发出（假设客户端在发出下一条命令后会收到它）。

- 在等待客户端发出命令或数据时，发生超时（详见第4.5.3.2节）。

特别是，服务器若因无法识别的命令而关闭连接，违反了本规范。服务器应对未知命令表现出宽容，发出500响应并等待客户端的进一步指示。

被外部强制关闭的SMTP服务器应在退出前尝试向SMTP客户端发送包含421响应码的行。客户端通常会在发出下一条命令后读取到该响应。

由于非由自己控制的原因导致连接关闭、重置或其他通信故障的SMTP客户端（违反本规范的意图，但有时不可避免）应为保持邮件系统的鲁棒性，将此类情况视为收到451响应，并相应处理。

3.9. 邮件列表与别名

支持SMTP的主机应支持地址扩展的两种模型：别名模型和列表模型。当邮件被投递或转发到扩展列表中的每个地址时，信封中的“MAIL FROM:”地址必须更改为由列表管理员管理的地址。然而，邮件头部（RFC 5322 [4]）部分不得更改，特别是“From”字段保持不变。

一项重要的邮件功能是多目的地投递机制，它通过将伪邮箱地址（或称“扩展”或“爆炸”地址）转换成一份目标邮箱地址列表，实现单一消息的多目标投递。当一条消息被发送到这样的伪邮箱（有时称为“爆炸器”）时，副本会被转发或重新分配到扩展列表中的每个邮箱。服务器应当仅使用列表中的地址；强烈不建议应用启发式或其他匹配规则来排除某些地址，例如发件人地址。我们将此类伪邮箱根据扩展规则分类为“别名”或“列表”。

3.9.1. 别名

扩展别名时，收件服务器只需将信封中的伪邮箱地址依次替换为扩展后的每个地址；信封的其他部分和消息正文保持不变。然后，消息会被投递或转发到每个扩展地址。

3.9.2. 列表

邮件列表的运作方式可以说是“重新分发”而非“转发”。扩展列表时，收件服务器将信封中的伪邮箱地址依次替换为扩展后的每个地址。信封中的返回（逆向指向）地址会被更改，以确保所有由最终投递产生的错误信息都返回给列表管理员，而不是发件人。发件人通常无法控制列表内容，错误信息也会让其感到烦恼。注意，处理别名（第3.9.1节）和转发（本节）之间的关键区别在于后者会更改信封中的逆向指向地址。当列表仅限于此处描述的有限修改和操作时，它试图模拟邮件传输代理（MTA）；此类列表可以视为邮件传输中的延续。

此外，还有一些邮件列表会对消息及其信封进行额外甚至广泛的修改。这类邮件列表应被视为完整的邮件用户代理（MUA），它们接受投递并发布新消息。

4. SMTP规范

4.1. SMTP命令

4.1.1. 命令语义与语法

SMTP命令定义了用户请求的邮件传输或邮件系统功能。SMTP命令是以字符字符串形式出现，以<CRLF>结尾。命令本身由字母字符组成，若后续有参数，则在<SP>后续，若无参数则直接以<CRLF>结束。（为了增强互操作性，SMTP接收方应容忍命令后面有多余的空白字符。）邮箱的本地部分语法必须符合接收方站点的惯例及第4.1.2节的规范。以下将讨论SMTP命令，响应内容在第4.2节。

一次邮件事务涉及多个数据对象，这些对象作为参数传递给不同的命令。反向路径作为MAIL命令的参数，正向路径作为RCPT命令的参数，邮件内容作为DATA命令的参数。这些参数或数据对象必须在传输过程中保存，直到通过邮件数据结束指示确认事务完成。模型上，提供不同缓冲区存放不同类型的数据：反向路径缓冲区、正向路径缓冲区和邮件数据缓冲区。特定命令会向某个缓冲区追加信息，或清空一个或多个缓冲区。

一些命令（如RSET、DATA、QUIT）被规定不允许携带参数。在没有服务器提供且被客户端接受的特定扩展的情况下，客户端不得发送带参数的此类命令，服务器也应拒绝带参数的命令，视为语法错误。

4.1.1.1. 扩展问候（EHLO）或问候（HELO）

这些命令用于标识SMTP客户端。参数部分应包含SMTP客户端的完全限定域名（如果有的话）。在客户端系统没有有效域名（如动态分配地址且没有反向映射记录）的情况下，客户端应发送地址字面值（详见第4.1.3节）。

RFC 2821及一些早期非正式做法鼓励在字面值后附加信息以帮助识别客户端系统，但此做法未被广泛支持，许多SMTP服务器视其为错误。为了互操作性，服务器应准备好处理此字符串，但SMTP客户端不应发送。

SMTP服务器在连接问候和对该命令的响应中会标识自己。客户端应以EHLO命令开始SMTP会话。如果服务器支持SMTP扩展，将返回成功、失败或错误响应；如果不支持任何扩展，服务器会返回错误响应。较旧的客户端SMTP系统（如RFC 821中定义的HELO）也应支持HELO命令，服务器必须支持并正确响应。无论如何，客户端在开始邮件事务前必须先发HELO或EHLO。

这些命令及其“250 OK”响应确认客户端和服务器都处于初始状态，即没有进行中的事务，所有状态表和缓冲区已清空。

语法示例：

```
ehlo           = "EHLO" SP ( 域名 / 地址字面值 ) CRLF
helo           = "HELO" SP 域名 CRLF
```

通常，EHLO的响应为多行回复。每行包含一个关键词和（可选）参数。多行回复遵循以下格式：除最后一行外，代码（250）后跟连字符“-”，最后一行代码后跟空格“ ”。使用RFC 5234的ABNF符号，正面响应的语法为：

```
ehlo-ok-rsp    = ( "250" SP 域名 [ SP ehlo-greet ] CRLF )
                / ( "250-" 域名 [ SP ehlo-greet ] CRLF
                *( "250-" ehlo-line CRLF )
                "250" SP ehlo-line CRLF )
```

其中：

```
ehlo-greet     = 1*(%d0-9 / %d11-12 / %d14-127)
               ; 任何非CR或LF字符组成的字符串

ehlo-line      = ehlo-keyword *( SP ehlo-param )

ehlo-keyword   = (ALPHA / DIGIT) *(ALPHA / DIGIT / "-")
               ; 额外的ehlo参数语法依赖于ehlo-keyword

ehlo-param     = 1*(%d33-126)
               ; 任何除空格和控制字符（US-ASCII 0-31及127）之外的字符
```

虽然EHLO关键词可以用大写、小写或混合大小写书写，但必须以不区分大小写的方式识别和处理。这是RFC 821和第2.4节的扩展。

EHLO响应必须包含所有未在第4.5.1节中列为“必需”的命令的关键词（及必要的参数），除非是第4.1.5节描述的私用命令。私用命令可以列出。

4.1.1.2. MAIL（发件人）

此命令用于启动邮件事务，指示邮件数据将被投递到SMTP服务器，服务器可能会将其投递到一个或多个邮箱，或转发到其他系统（可能使用SMTP）。参数部分包含反向路径（发件人邮箱）及可选参数。通常，MAIL命令在没有进行中的事务时发出（详见第4.1.4节）。

反向路径由发件人邮箱组成。历史上，可能会在邮箱前附加一串主机名，但此行为现已废弃（见附录C）。在某些报告消息中（如投递成功或失败通知），反向路径可以为空（详见第3.6节）。

此命令会清空反向路径缓冲区、正向路径缓冲区和邮件数据缓冲区，并将其参数中的反向路径信息存入反向路径缓冲区。

如果协商了服务扩展，MAIL命令还可以携带特定扩展的参数。

语法示例：

```
mail = "MAIL FROM:" Reverse-path [SP Mail-parameters] CRLF
```

4.1.1.3. RCPT（收件人）

此命令用于指定邮件的单个收件人；多个收件人通过多次使用此命令实现。参数部分包含正向路径（目标邮箱）及可选参数。

正向路径通常只包括目标邮箱。发件系统不应生成源路由（源路由在历史上可能作为可选项出现，但应避免使用）。接收系统必须识别源路由语法，但应剥离源路由信息，只用邮箱关联的域名。

中继主机也应剥离或忽略源路由，且名称不得复制到反向路径中。当邮件到达最终目的地（正向路径只包含目标邮箱）时，SMTP服务器会根据其主机邮件规则将邮件投递到目标邮箱。

此命令会将其正向路径参数附加到正向路径缓冲区，不会更改反向路径或邮件数据缓冲区。

示例：在中继主机xyz.com收到的邮件，信封命令如下：

```
MAIL FROM:<userx@y.foo.org>
RCPT TO:<@hosta.int,@jkl.org:userc@d.bar.org>
```

通常会直接投递到d.bar.org，信封命令为：

```
MAIL FROM:<userx@y.foo.org>
RCPT TO:<userc@d.bar.org>
```

如附录C所述，xyz.com也可以选择将消息中继到hosta.int，使用信封命令：

```
MAIL FROM:<userx@y.foo.org>
RCPT TO:<@hosta.int,@jkl.org:userc@d.bar.org>
```

或中继到jkl.org，信封命令为：

```
MAIL FROM:<userx@y.foo.org>
RCPT TO:<@jkl.org:userc@d.bar.org>
```

尝试这样中继现已强烈不推荐。由于主机不要求中继邮件，xyz.com也可以在收到RCPT命令时直接拒绝（返回550代码，出于“策略原因”）。

如果协商了扩展，RCPT命令还可以携带由服务器提供的特定扩展参数。客户端不得传送除EHLO响应中服务器提供的扩展参数之外的参数。

语法示例：

```
rcpt = "RCPT TO:" ( "<Postmaster@" 域名 ">" / "<Postmaster>" / 正向路径 ) [SP Rcpt-parameters] CRLF
```

注意：在偏离通常本地部分规则的情况下，上述“Postmaster”字符串视为不区分大小写。

4.1.1.4. DATA（数据）

服务器通常对DATA命令返回354响应，然后将命令后续的行（以<CRLF>结尾的字符串）视为发件人的邮件内容。此命令会将邮件内容追加到邮件数据缓冲区。邮件内容可以包含任何128个ASCII字符，但经验表明，除空格、水平制表符、回车和换行外的控制字符可能引发问题，应尽量避免使用。

邮件内容以仅包含一个点的行结束，即“<CRLF>.<CRLF>”，其中第一个<CRLF>是前一行的结束（详见第4.5.2节）。这是邮件数据的终止指示。此终止序列的第一个<CRLF>也是数据（消息正文）最后一行的结束符，或者如果没有邮件内容，则是DATA命令的结束（“无邮件内容”情况不符合本规范，因为这会要求不传输本规范要求的头字段或RFC 5322第4节的消息头部分）。不得添加额外的<CRLF>，否则会在消息中加入空行。除非消息本身有特殊情况，否则不应违反此规则。

正文内容被传递给发起SMTP的发送方时，必须以一个“行”作为结束，该行不能以<CRLF>结尾；在这种情况下，发起SMTP系统必须要么将消息视为无效并拒绝，要么在消息末尾添加<CRLF>，以便接收SMTP服务器识别“数据结束”条件。

为了容忍某些UNIX系统的不符合规范的行为，接受仅以<LF>结尾的行的做法曾经被采用，但事实证明这会带来比解决的问题更多的互操作性问题，因此SMTP服务器系统绝不能这样做，即使是为了增强鲁棒性。特别是，序列“<LF>.<LF>”（没有回车符的纯换行符）绝不能被视为等同于<CRLF>.<CRLF>，作为邮件数据结束的标志。

接收到邮件数据结束的指示后，服务器必须处理存储的邮件事务信息。这一处理过程会消耗反向路径缓冲区、正向路径缓冲区和邮件数据缓冲区中的信息，处理完成后，这些缓冲区会被清空。如果处理成功，接收方必须发送“250 OK”的回复；如果处理失败，必须发送失败的回复。在此阶段，SMTP模型不允许部分失败：要么消息被服务器接受并返回正面响应，要么不被接受并返回失败响应。在对数据结束指示返回“250 OK”成功完成回复时，接收方对该消息承担全部责任（详见第6.1节）。随后诊断出的错误必须通过邮件消息报告，如第4.4节所述。

当SMTP服务器接受一条消息用于中继或最终投递时，会在邮件数据顶部插入一条追踪记录（也称为“时间戳行”或“Received行”）。这条追踪记录显示发件主机的身份、收件主机的身份（以及插入时间戳的时间）以及消息的接收日期和时间。中继的消息会有多条时间戳行。这些行的格式和语法详见第4.4节。

关于DATA命令的操作的更多讨论，见第3.3节。

语法：
```
data = "DATA" CRLF
```

（以下为第4.1.1.5节内容略）

---

请注意，以上内容为部分节选，完整内容涉及SMTP命令的定义、参数语法、地址格式等详细规范，建议结合原文逐步学习理解。

内容如下：

```
dcontent       = %d33-90 / ; 可打印的美国ASCII字符
                  %d94-126 ; 不包括 "[", "\", "]"

Snum           = 1*3DIGIT
                  ; 表示一个十进制整数
                  ; 取值范围为0到255

IPv6-addr      = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp

IPv6-hex       = 1*4HEXDIG

IPv6-full      = IPv6-hex 7(":" IPv6-hex)

IPv6-comp      = [IPv6-hex *5(":" IPv6-hex)] "::"
                  [IPv6-hex *5(":" IPv6-hex)]
                  ; “::” 表示至少两个16位组的零。除了“::”之外，最多还可以有6个组。

IPv6v4-full    = IPv6-hex 5(":" IPv6-hex) ":" IPv4-address-literal

IPv6v4-comp    = [IPv6-hex *3(":" IPv6-hex)] "::"
                  [IPv6-hex *3(":" IPv6-hex) ":"]
                  IPv4-address-literal
                  ; “::” 表示至少两个16位组的零。除了“::”和IPv4地址字面量之外，最多还可以有4个组。

4.1.4. 命令的顺序

   这些命令的使用顺序有限制。

   包含邮件事务的会话必须首先使用EHLO命令进行初始化。SMTP服务器应接受非邮件事务（如VRFY或EXPN）的命令，无需此初始化。

   客户端可以在会话中稍后发出EHLO命令。如果在会话开始后发出，并且SMTP服务器接受该命令，服务器必须清空所有缓冲区并重置状态，就像发出了RSET命令一样。换句话说，紧接着RSET后发出EHLO是多余的，但不会造成危害，除了会带来不必要的性能开销。

   如果SMTP服务器不接受EHLO命令，则必须返回501、500、502或550的失败回复。服务器在发送这些回复后，必须保持在发出回复前的状态。

   客户端必须尽可能确保EHLO命令的域参数是主机名，如第2.3.5节所述。如果无法做到（例如，客户端地址是动态分配且没有明显的名称），应用地址字面量代替域名。

   SMTP服务器可以验证EHLO命令中的域名是否对应客户端的IP地址，但验证失败时不得拒绝接受邮件。验证信息仅用于日志和追踪。注意，这一限制仅适用于域名与IP地址的匹配，关于拒绝连接或邮件的更详细讨论请参见第7.9节。

   NOOP、HELP、EXPN、VRFY和RSET命令可以在任何时间使用，或在未初始化会话的情况下使用。即使未收到EHLO命令，SMTP服务器也应正常处理这些命令（即不返回503代码）；客户端应在发送这些命令前先用EHLO开启会话。

   遵循这些规则，RFC 821中的示例“对你拒绝访问550”响应EXPN命令的情况是不正确的，除非在EXPN之前发出了EHLO命令，或者拒绝访问是基于客户端IP或其他认证机制。

   MAIL命令（或已废弃的SEND、SOML或SAML命令）开始一次邮件事务。一旦开始，邮件事务包括一个事务开始命令、一个或多个RCPT命令和一个DATA命令，按此顺序。邮件事务可以通过RSET、新的EHLO或QUIT命令中止。会话中可以有零个或多个事务。如果已经开启了邮件事务，不能再发MAIL（或SEND、SOML、SAML）命令，除非没有事务在进行，或者前一个事务已成功结束（通过DATA命令），或已中止（如用RSET或新EHLO）。

   如果事务开始命令的参数不可接受，必须返回501失败回复，且服务器状态不变。如果事务中的命令顺序错误，无法被服务器处理，也必须返回503失败。

   会话中的最后一个命令必须是QUIT。客户端应使用QUIT请求关闭连接，即使没有发出会话开启命令。

4.1.5. 私有命令

   如第2.2.2节所述，以“X”开头的命令可以由客户端（发送方）和服务器（接收方）SMTP代理通过双边协议使用。未识别此类命令的SMTP服务器应回复“500 Command not recognized”。扩展SMTP服务器可以在EHLO响应中列出这些私有命令的功能名。

   由非“X”开头的SMTP系统发送或接受的命令，必须符合第2.2.2节的要求。

4.2. SMTP回复

   SMTP命令的回复用于确保邮件传输过程中请求与操作的同步，并保证SMTP客户端始终了解SMTP服务器的状态。每个命令必须产生恰好一个回复。

   命令-回复的详细流程在第4.3节中描述。

   SMTP回复由一个三位数字（作为三个数字字符传输）和一些文本组成，除非本文另有说明。数字用于自动机判断下一步状态；文本供人类用户阅读。三位数字包含足够的编码信息，SMTP客户端无需检查文本，可以丢弃或传递给用户，视情况而定。特殊情况除外，例如220、221、251、421和551回复码对应的消息文本必须由机器解析和解释。通常，文本可能依赖于接收方或上下文，因此每个回复码可能有不同的文本。关于回复码的理论详见第4.2.1节。正式定义，回复由三位数字代码、<SP>、一行文本和<CRLF>组成，或多行回复（定义在同一节中）。由于违反本规范，有时文本未被发送，未收到文本的客户端应准备仅处理代码（可能带或不带尾随空格）。在正常情况下，只有EHLO、EXPN和HELP命令预期会产生多行回复，但任何命令都可以有多行回复。

   在ABNF中，服务器响应为：

   Greeting       = ( "220 " (Domain / address-literal)
                  [ SP textstring ] CRLF ) /
                  ( "220-" (Domain / address-literal)
                  [ SP textstring ] CRLF
                  *( "220-" [ textstring ] CRLF )
                  "220" [ SP textstring ] CRLF )

   textstring     = 1*(%d09 / %d32-126) ; 水平制表符、空格、可打印的US-ASCII字符

   Reply-line     = *( Reply-code "-" [ textstring ] CRLF )
                  Reply-code [ SP textstring ] CRLF

   Reply-code     = %x32-35 %x30-35 %x30-39

   其中，“Greeting”仅出现在220响应中，表示服务器开始连接（其他连接响应遵循Reply-line的语法）。

   SMTP服务器应只发送本文列出的回复码。应在适当情况下使用示例中的文本。

   SMTP客户端必须仅通过回复码判断行动，而非文本（除非是“地址变更”相关的251和551，以及必要时的220、221和421回复）；在一般情况下，任何文本（包括无文本）都应被接受（尽管发件人不应只发码）。回复码后空格（空白字符）视为文本的一部分。接收方SMTP应尽可能检查回复码的首位数字（严重性指示）。

   以下列出的回复码不应被视为永久性。虽然新增码应为少见且重要的活动，且应优先考虑响应中的补充信息，但新码可以随着新标准或标准轨道规范的发布而添加。因此，发件方SMTP应准备处理未在本文中列出的码，只需解释首位数字。

   在未与客户端协商扩展的情况下，SMTP服务器不得发送首位数字非2、3、4或5的回复码。收到此类码的客户端应通常将其视为严重错误并终止邮件事务。

4.2.1. 回复码的严重性与理论

   回复码的三位数字具有特殊意义。首位数字表示响应是良好、错误或不完整。简单的SMTP客户端或收到意外码的客户端，可以通过检查首位数字决定下一步（如继续、重试、放弃等）。想了解大致错误类型（如邮件系统错误、命令语法错误）的SMTP客户端，可以检查第二位数字。第三位数字及任何补充信息用于最细粒度的区分。

   回复码首位数字的四个值为：

   2yz  正常完成
      请求的操作已成功完成。可以发起新的请求。

   3yz  正常中间
      命令已接受，但请求的操作暂时搁置，等待进一步信息。SMTP客户端应发出另一个命令以提供此信息（如在DATA中）。

   4yz  临时性负面完成
      命令未被接受，操作未发生，但错误是临时的，可以重试。发件人应返回命令序列的起点（如果有）。“临时”一词的定义较模糊，可能因不同站点（接收方和发件方）而异。每个此类回复可能有不同的时间值，但SMTP客户端应尝试重试。判断回复属于4yz还是5yz的经验法则是：如果重复命令不变仍能成功，则为4yz。

   5yz  永久性负面完成
      命令未被接受，操作未发生。SMTP客户端不应重复相同请求（相同顺序）。某些“永久”错误可以修正，用户可能会指示SMTP客户端在未来某个时间点重新发起命令（如更正拼写或更改账户状态）。

   值得注意的是，文件传输协议（FTP）[34]采用类似的码架构，SMTP码基于FTP模型。然而，SMTP采用一命令一响应的模型（FTP是异步的），FTP的1yz码不属于SMTP模型。

   第二位数字编码特定类别的响应：

x0z  语法：这些回复涉及语法错误、语法正确但不属于任何功能类别的命令，以及未实现或多余的命令。

x1z  信息：这些是对请求信息（如状态或帮助）的回复。

x2z  连接：这些是关于传输通道的回复。

x3z  未指明。

x4z  未指明。

x5z  邮件系统：这些回复指示接收邮件系统关于请求的传输或其他邮件系统操作的状态。

第二个数字在每个类别中提供更细的意义层次。回复列表展示了这一点。每个回复文本是建议性的而非强制性的，甚至可能根据所关联的命令而变化。另一方面，回复代码必须严格遵循本节的规范。接收端实现不应为与此处描述略有不同的情况自行发明新代码，而应采用已定义的代码。

例如，像NOOP这样的命令，其成功执行不会向SMTP客户端提供任何新信息，将返回250回复。当命令请求未实现的非站点特定操作时，返回502。当命令已实现，但请求未实现的参数时，返回504。

回复文本可以多于一行；在这种情况下，必须标明完整文本，以便SMTP客户端知道何时可以停止读取回复。这需要一种特殊格式来指示多行回复。

多行回复的格式要求：每行（除最后一行）以回复码开头，紧跟一个连字符“-”，后面是文本。最后一行以回复码开头，紧跟一个空格<SP>，可选的文本，以及<CRLF>。如上所述，服务器应在没有后续文本时发送<SP>，但客户端必须准备好可能省略。

例如：

```
250-第一行
250-第二行
250-234以数字开头的文本
250 最后一行
```

在多行回复中，每行的回复码必须相同。客户端可以依赖这一点，以便根据任何一行的码做出处理决策，假设其他行也相同。在某些情况下，回复“文本”中包含对客户端重要的数据，客户端可以根据当前上下文识别这些情况。

4.2.2 按功能组分类的回复码

- 500  语法错误，命令无法识别（可能包括命令行过长等错误）
- 501  参数或参数列表的语法错误
- 502  命令未实现（见4.2.4节）
- 503  命令顺序错误
- 504  命令参数未实现

- 211  系统状态或系统帮助回复
- 214  帮助信息（关于如何使用接收方或特定非标准命令的含义；此回复仅对人类用户有用）

- 220  <域名> 服务就绪
- 221  <域名> 服务关闭传输通道
- 421  <域名> 服务不可用，关闭传输通道（如果服务知道必须关闭，可能对任何命令作出此回复）

- 250  请求的邮件操作成功完成
- 251  用户不在本地；将转发到<转发路径>（见3.4节）
- 252  无法验证用户，但会接受消息并尝试投递（见3.5.3节）
- 455  服务器无法容纳参数
- 555  MAIL FROM/RCPT TO参数未识别或未实现
- 450  请求的邮件操作未执行：邮箱不可用（例如，邮箱繁忙或因策略暂时阻塞）
- 550  请求的操作未执行：邮箱不可用（例如，找不到邮箱、无访问权限或因策略被拒绝）
- 451  请求的操作中止：处理时出错
- 551  用户不在本地；请尝试<转发路径>（见3.4节）
- 452  请求的操作未执行：系统存储不足
- 552  请求的邮件操作中止：存储空间超限
- 553  请求的操作未执行：邮箱名不允许（例如，邮箱语法错误）
- 354  开始邮件输入；以<CRLF>.<CRLF>结束
- 554 事务失败（或在连接开启响应中，显示“此处无SMTP服务”）

4.2.3 按数字顺序排列的回复码

（列出所有码，顺序为：211、214、220、221、250、251、252、354、421、450、451、452、455、500、501、502、503、504、550、551、552、553、554、555）

4.2.4 502码的说明

关于何时应返回502（命令未实现）码存在疑问。应在命令被SMTP服务器识别但未实现时使用502。如果命令未被识别，应返回500。扩展SMTP系统不得对EHLO响应列出将返回502（或500）回复的能力。

4.2.5 DATA命令后及随后的<CRLF>.<CRLF>的回复码

当SMTP服务器在DATA命令完成后（以<CRLF>.<CRLF>结束）返回正面完成状态（2yz码）时，表示其负责：

- 投递消息（如果收件邮箱存在），或
- 如果投递失败（暂时性条件），在第4.5.4节规定的间隔内尝试多次重试，
- 如果因永久性条件失败，或多次尝试因暂时性条件失败，向原始发件人（使用SMTP MAIL命令中的地址）发出适当通知。

当SMTP服务器在DATA命令后返回临时错误状态（4yz码）时，不得再次尝试投递该消息。SMTP客户端仍负责投递该消息，可以返回给用户或重新排队（见4.5.4.1节）。

发起消息的用户应能理解临时失败状态的返回（通过邮件或其他方式）为未投递的指示，就像永久失败一样。如果客户端成功处理这些情况，用户将不会收到此类回复。

当SMTP服务器在DATA命令后返回永久错误状态（5yz码）时，不得再次尝试投递该消息。与临时错误码类似，SMTP客户端仍负责该消息，但应在用户审查和干预后再尝试投递。

4.3 命令与回复的顺序

4.3.1 顺序概述

发件人和收件人之间的通信是由发件人控制的交替对话。发件人发出命令，接收方回应。除非通过服务扩展协商了其他安排，发件人必须等待响应后才能发出下一条命令。一个重要的回复是连接问候。通常，接收方在连接完成时会发出220“服务就绪”的回复。发件人应等待此问候消息后再发出任何命令。

注意：所有问候类回复的官方名称（完全限定的主域名）是回复码之后的第一个词。有时主机没有有意义的名称。关于这些情况的替代方案，请参见4.1.3节。

例如：

```
220 ISIF.USC.EDU 服务就绪
```

或

```
220 mail.example.com SuperSMTP v 6.1.2 服务就绪
```

或

```
220 [10.0.0.1] 无头绪的主机服务就绪
```

下表列出了每个命令的替代成功和失败回复，应严格遵守。接收端可以在回复中替换文本，但代码数字和特定命令回复序列所暗示的含义和行为必须保持不变。

4.3.2 命令-回复序列

每个命令都列出了其可能的回复。前缀“I”表示中间状态，“S”表示成功，“E”表示错误。由于某些服务器在特殊情况下可能生成其他回复，为了未来扩展，SMTP客户端应尽可能只解析回复的第一位数字，并准备处理未识别的回复码（只解析第一位数字）。除非使用第2.2节描述的机制扩展，否则SMTP服务器不得向SMTP客户端发送非三位数字的回复码，或以2至5之间的数字开头。

这些顺序规则以及原则上，代码本身可以由服务器提供的扩展或客户端请求的扩展进行扩展或修改。然而，如果目标是更精确的代码粒度，而非全新用途的代码，应优先采用RFC 3463 [25]中描述的系统，而非自行发明新代码。

除了下列列出的代码外，任何SMTP命令在遇到特殊情况时还可以返回以下代码：

- 500  命令行过长或命令未识别。注意：对某些命令返回“命令未识别”错误，违反本规范。对短于512字符的命令行返回“命令过长”消息，也违反第4.5.3.1.4节的规定。
- 501  命令或参数语法错误。为支持未来扩展，未接受参数的命令（DATA、RSET、QUIT）在未声明扩展的情况下提供参数时，应返回501。
- 421  服务关闭，传输通道关闭。

具体序列示例（略）……

（后续内容为命令的具体交互流程和状态码示例，详见原文。）

以下是英文内容的中文流畅翻译：

```
         S: 250, 251, 252
         E: 550, 551, 553, 502, 504

      EXPN

         S: 250, 252
         E: 550, 500, 502, 504




Klensin                     标准追踪                     [第56页]


RFC 5321                          SMTP                      2008年10月


      HELP

         S: 211, 214
         E: 502, 504

      NOOP

         S: 250

      QUIT

         S: 221

4.4.  跟踪信息

   当SMTP服务器接收一条消息以进行投递或进一步处理时，必须在消息内容的开头插入跟踪（“时间戳”或“Received”）信息，具体如第4.1.1.4节所述。

   这行信息必须按照以下结构：

   o  FROM子句，在SMTP环境中必须提供，应该包含（1）在EHLO命令中显示的源主机名，以及（2）由TCP连接确定的源IP地址的地址字面值。

   o  ID子句可以包含RFC 822建议的“@”符号，但这不是必需的。

   o  如果出现FOR子句，必须恰好包含一个<path>条目，即使已发出多个RCPT命令。多个<path>会引发一些安全问题，已被弃用，详见第7.2节。

   互联网邮件程序不得更改或删除之前添加到消息头部的Received行。SMTP服务器必须在消息中添加Received行，且不得更改已有行的顺序或在其他位置插入Received行。

   随着互联网的发展，Received头字段的可比性对于检测问题（尤其是缓慢中继）非常重要。创建Received头字段的SMTP服务器应使用明确的时间偏移（例如-0800），而非任何类型的时区名称。尽可能使用本地时间（带偏移），而非UTC。这种表达方式允许提供关于本地情况的更多信息。如果需要UTC，接收方只需进行简单的算术转换即可。使用UTC会丢失服务器的时区位置信息。如果希望提供时区名称，应将其包含在注释中。

   当SMTP服务器完成消息的“最终投递”时，会在邮件数据的开头插入一个Return-Path行。这一Return-Path的使用是必须的，邮件系统必须支持。Return-Path行保存了MAIL命令中的<reverse-path>信息。这里的“最终投递”意味着消息已离开SMTP环境。通常，这意味着已投递到目标用户或相关的邮件存储，但在某些情况下，可能会由其他邮件系统进行进一步处理和传输。

   可能存在返回路径中的邮箱与实际发件人邮箱不同的情况，例如，错误响应被送到专门的错误处理邮箱，而非发件人。当涉及邮件列表时，这种安排很常见，也很有用，因为它可以将错误导向列表维护者而非发件人。

   上述内容意味着，最终的邮件数据将以一行Return-Path开始，后跟一个或多个时间戳行。这些行之后是邮件的其余部分：首先是邮件头部的剩余部分，然后是正文（参见RFC 5322 [4]）。

   有时，SMTP服务器难以判断是否为最终投递，因为在接受消息后可能会发生转发或其他操作。因此，任何后续（转发、网关或中继）系统可以删除Return-Path，并根据需要重建MAIL命令，以确保在投递的消息中只出现一行。

   发起邮件的SMTP系统不应发送已包含Return-Path头字段的消息。执行中继功能的SMTP服务器不得检查消息内容，尤其不应检查是否存在Return-Path头字段。进行最终投递的SMTP服务器可以在添加自己的路径前删除Return-Path头。

   Return-Path的主要作用是指定在投递失败或其他邮件系统故障时应将通知发送到的地址。为了避免歧义，消息在投递时应恰好有一个Return-Path。使用RFC 822语法和非SMTP传输的系统应指定一个明确的地址，与传输信封相关联，用于接收错误报告（如投递失败通知）。

   历史说明：RFC 822中关于Return-Path头字段（或MAIL命令中的反向路径地址）作为错误消息目的地的内容，似乎与实际用法相矛盾，但在互联网中不适用。反向路径地址（复制到Return-Path中）必须作为任何包含投递错误信息的邮件的目标地址。

   具体而言：
   o  从SMTP到其他系统的网关应插入Return-Path头字段，除非已知“其他”传输也使用互联网域名地址并单独维护信封发件人地址。

   o  从其他系统到SMTP的网关应删除消息中的Return-Path头字段，并将该信息复制到SMTP信封中，或与其他传输系统的信封信息结合，构造MAIL命令中的反向路径参数。

   服务器必须对在邮件数据结束后处理仅部分成功的情况给予特殊处理。这可能发生在接受多个收件人和邮件数据后，发现部分收件人可以成功投递，而部分不能。在这种情况下，对DATA命令的响应必须是“OK”。但SMTP服务器必须向发件人发送一条“不可投递邮件”的通知。

   必须为每个失败的收件人单独或以列表形式发送通知。为了节省处理资源，优先使用合并通知（即列出所有失败收件人），但也可以单独通知。处理别名（第3.9.1节）和转发（本节）之间的主要区别在于地址的变化。所有关于不可投递邮件的通知都必须通过MAIL命令发送（即使是由过时的SEND、SOML或SAML命令处理产生的），并且必须使用空的Return-Path，如第3.6节所述。

   时间戳行和Return-Path行的正式定义如下（“FWS”和“CFWS”的定义见RFC 5322 [4]）：

   Return-path行  = "Return-Path:" FWS Reverse-path <CRLF>

   时间戳行      = "Received:" FWS Stamp <CRLF>

   Stamp          = From-domain By-domain Opt-info [CFWS] ";" FWS date-time
                  ; 其中“date-time”定义见RFC 5322 [4]
                  ; 但“obs-”形式，尤其是两位数年份，在SMTP中禁止使用。

   From-domain    = "FROM" FWS Extended-Domain

   By-domain      = CFWS "BY" FWS Extended-Domain

   Extended-Domain  = Domain /
                      ( Domain FWS "(" TCP-info ")" ) /
                      ( address-literal FWS "(" TCP-info ")" )

   TCP-info       = address-literal / ( Domain FWS address-literal )
                  ; 由服务器从TCP连接中获取的信息，不是客户端EHLO信息。

   Opt-info       = [Via] [With] [ID] [For]
                  [其他注册的标准子句]

   Via            = CFWS "VIA" FWS Link

   With           = CFWS "WITH" FWS Protocol

   ID             = CFWS "ID" FWS ( Atom / msg-id )
                  ; msg-id定义见RFC 5322 [4]

   For            = CFWS "FOR" FWS ( Path / Mailbox )

   其他注册子句  = CFWS Atom FWS String
                  ; 未来标准和注册（由IANA）可能在此添加额外标准子句。SMTP服务器不应使用未注册的名称。详见第8节。

   Link           = "TCP" / Addtl-Link

   Addtl-Link     = Atom
                  ; 其他标准链路名称由互联网号码管理局（IANA）注册。“VIA”主要用于非互联网传输。SMTP服务器不应使用未注册的名称。

   Protocol       = "ESMTP" / "SMTP" / Attdl-Protocol

   Attdl-Protocol = Atom
                  ; 其他标准协议名称由IANA在“邮件参数”注册表中注册[9]。SMTP服务器不应使用未注册的名称。

4.5. 其他实现问题

4.5.1.  最低实现要求

   为确保SMTP的基本功能，所有接收方必须提供以下最低支持的实现。必须支持以下命令以符合本规范：

      EHLO
      HELO
      MAIL
      RCPT
      DATA
      RSET
      NOOP
      QUIT
      VRFY

   任何支持邮件中继或投递的SMTP服务器系统，必须支持保留邮箱“postmaster”，且不区分大小写作为本地名称。若服务器在连接开启时总返回554（详见第3.1节），则不严格需要此postmaster地址。支持postmaster的要求意味着，RCPT命令必须支持指定任何域名的postmaster邮箱，以及“RCPT TO:<Postmaster>”（无域名）这一特殊情况。

   SMTP系统应尽一切合理努力接受发往Postmaster的邮件，无论来自互联网的哪个系统。在极端情况下——如为防止拒绝服务攻击或其他安全漏洞——SMTP服务器可以阻止发往Postmaster的邮件，但此类措施应尽可能有限，以避免阻挡非攻击性邮件。

4.5.2.  透明性

   若没有数据透明的机制，字符序列“<CRLF>.<CRLF>”会结束邮件正文，用户无法发送此序列。通常用户不知晓此类“禁止”序列。为了让所有用户自行编写的文本能透明传输，采用以下措施：

   o  在发送邮件文本行之前，SMTP客户端检查该行第一个字符。如果是点（.），就在行首插入一个点。

   o  当SMTP服务器收到一行邮件文本时，会检查该行。如果该行仅由一个点组成，则视为邮件结束标志；如果第一个字符是点且行中有其他字符，则删除第一个点。

   邮件数据可以包含所有128个ASCII字符，包括空格、垂直和水平制表符及其他控制字符。若传输通道支持8位字节（八位字节流），则传输7位ASCII码，右对齐，放在八位字节中，高位清零。详见第3.6节关于在中继功能中特殊处理这些条件的说明。

   在某些系统中，可能需要在接收和存储数据时进行转换。这对于使用不同字符集（非ASCII）作为本地字符集、以记录而非字符串存储数据，或在邮箱内部使用特殊字符序列作为分隔符的系统尤为重要。如果需要进行此类转换，必须是可逆的，尤其是在中继传输时。

4.5.3.  大小限制与超时

4.5.3.1.  大小限制与最低值
```

有几个对象具有最小/最大尺寸的要求。每个实现必须能够接收至少符合这些尺寸的对象。尽可能应避免使用超出这些尺寸的对象。然而，一些互联网邮件结构，例如编码的X.400地址（RFC 2156 [35]），通常需要更大的对象。客户端可以尝试传输这些对象，但必须准备好服务器可能会拒绝它们（如果无法处理的话）。在最大程度上，应采用不对这些对象长度施加限制的实现技术。

Klensin                     标准轨道                    [第62页]

RFC 5321                          SMTP                      2008年10月

对SMTP的扩展可能涉及使用占用多个字节的字符。因此，本节特别规定长度以字节为单位，而非字符数，以明确长度的绝对值。

4.5.3.1.1.  本地部分

用户名称或其他本地部分的最大总长度为64字节。

4.5.3.1.2.  域名

域名或数字的最大总长度为255字节。

4.5.3.1.3.  路径

反向路径或正向路径的最大总长度为256字节（包括标点符号和元素分隔符）。

4.5.3.1.4.  命令行

包括命令词和<CRLF>在内的命令行最大总长度为512字节。可以使用SMTP扩展来增加此限制。

4.5.3.1.5.  回复行

包括回复码和<CRLF>在内的回复行最大总长度为512字节。可以通过多行回复传达更多信息。

4.5.3.1.6.  文本行

包括<CRLF>在内的文本行最大总长度为1000字节（不包括为透明起见重复的前导点）。此数字可以通过SMTP服务扩展增加。

4.5.3.1.7.  消息内容

消息内容（包括任何消息头部分和正文）的最大总长度必须至少为64K字节。自从互联网多媒体邮件标准（RFC 2045 [21]）引入以来，互联网中的消息长度已大幅增长，应尽量避免对消息大小的限制。必须施加限制的SMTP服务器系统应实现RFC 1870 [10]的“SIZE”服务扩展，发送大消息的SMTP客户端也应在可能的情况下使用它。

Klensin                     标准轨道                    [第63页]

RFC 5321                          SMTP                      2008年10月

4.5.3.1.8.  收件人缓冲区

必须缓冲的最小收件人总数为100个。少于100个RCPT命令的消息拒绝将违反本规范。SMTP中继服务器不得（必须不）对消息头字段中的收件人总数进行验证，交付SMTP服务器也应如此。限制收件人数的服务器必须有序地处理，例如拒绝超出限制的附加地址，而不是悄无声息地丢弃已接受的地址。需要传送包含超过100个RCPT命令的消息的客户端，应准备好以“块”方式（每次100个收件人）传输，如果服务器拒绝接受超过100个收件人的消息。

4.5.3.1.9.  超出限制的处理

超出这些限制的错误可以通过回复码报告。以下是一些示例回复码：

- 500 行过长。

- 501 路径过长。

- 452 收件人过多（见下文）。

- 552 邮件数据过多。

4.5.3.1.10.  收件人过多的错误码

RFC 821 [1]错误地将SMTP服务器在耗尽RCPT命令数量限制时的错误（“收件人过多”）列为回复码552。正确的回复码应为452。在这种情况下，客户端应将552视为临时性失败，而非永久性失败，以确保以下逻辑成立。

当符合规范的SMTP服务器遇到此情况时，其收件人缓冲区中至少有100个成功的RCPT命令。如果服务器能够接受消息，则至少这100个地址会从SMTP客户端的队列中移除。当客户端尝试重新传输那些收到452响应的地址时，至少有100个地址能适配到SMTP服务器的收件人缓冲区。每次重传能成功传送的消息，都能处理至少100个收件人。

如果SMTP服务器在RCPT命令数量上有实现限制且已耗尽，必须使用响应码452（但客户端也应准备好应对552，如上所述）。如果服务器配置了站点策略限制RCPT命令的数量，可以改用5yz系列响应码。特别是，如果意图禁止超过站点指定人数的消息，而非仅限制单次邮件中的收件人数，则在收到452（或552）码后，任何后续的DATA命令都应返回503响应，或者在DATA后直接返回503，而不返回之前的负面响应。

4.5.3.2.  超时

SMTP客户端必须提供超时机制。应使用每个命令的超时，而不是尝试对整个邮件事务进行计时。超时应易于重新配置，最好无需重新编译SMTP代码。为此，为每个SMTP命令和每个数据传输缓冲区设置计时器。后者意味着整体超时与消息大小成正比。

根据对繁忙邮件中继主机的丰富经验，最小的每命令超时值应如下：

4.5.3.2.1.  初始220消息：5分钟

SMTP客户端需要区分TCP连接失败和接收初始220问候消息的延迟。许多SMTP服务器接受TCP连接，但会延迟220消息的传递，直到系统负载允许处理更多邮件。

4.5.3.2.2.  MAIL命令：5分钟

4.5.3.2.3.  RCPT命令：5分钟

如果在处理邮件列表和别名时不推迟到消息被接受后再处理，则需要更长的超时时间。

4.5.3.2.4.  DATA启动：2分钟

等待DATA命令的“354开始输入”回复时。

4.5.3.2.5.  数据块：3分钟

等待每次TCP发送调用完成，即传输一块数据时。

4.5.3.2.6.  DATA结束：10分钟

等待“250 OK”回复时。当接收方收到终止消息数据的最后一个点时，通常会进行处理，将消息投递到用户邮箱。此时的意外超时会非常浪费资源，且通常会导致多份消息的投递，因为消息已成功发送，服务器已承担投递责任。详见第6.1节。

4.5.3.2.7.  服务器超时：5分钟

SMTP服务器在等待下一个命令时，至少应有5分钟的超时。

4.5.4.  重试策略

主机SMTP实现的常见结构包括用户邮箱、一个或多个中转队列区域，以及一个或多个守护进程用于收发邮件。具体结构会根据主机用户需求和支持的邮件列表数量与大小而变化。我们描述几种已被证明有用的优化策略，特别适用于高流量邮件。

任何排队策略都必须在所有活动上设置逐命令的超时。排队策略不得在任何情况下对错误消息作出错误响应。

4.5.4.1.  发送策略

SMTP客户端的基本模型是一个或多个周期性尝试传送外发邮件的进程。在典型系统中，负责组装消息的程序应有请求立即处理新外发邮件的方法，而不能立即传送的邮件必须排队，定期由发件人重试。邮件队列条目不仅包括消息本身，还包括信封信息。

发件人在一次失败后必须延迟重试特定目标。一般而言，重试间隔应至少为30分钟；但当SMTP客户端能判断未投递的原因时，更复杂和可变的策略会更有益。

重试持续进行，直到消息成功传送或发件人放弃；放弃时间通常应至少为4-5天。对于未投递通知和类似错误消息，可能应设置更短的最大重试次数。重试参数必须可配置。

客户端应保存无法联系的主机列表及相应的连接超时，而不是仅仅重试排队的邮件。

经验表明，失败通常是暂时的（目标系统或连接崩溃），因此在消息排队的前一小时内进行两次连接尝试较为合理，然后每隔两三小时减少一次。

SMTP客户端可以与SMTP服务器合作缩短排队延迟。例如，如果从某个地址收到邮件，可能可以立即向该主机发送邮件。应用此原则在许多情况下可以省去显式的“立即发送队列”功能（如ETRN，RFC 1985 [36]）。

策略还可以根据每个主机的多个地址进行调整，以优化投递时间与资源使用。

SMTP客户端可能会为每个不可用的目标主机拥有大量待发消息队列。如果每次重试都对所有消息进行尝试，将造成过多的互联网开销，且发件系统会长时间阻塞。注意，SMTP客户端通常只有在超时几分钟后，才能判断一次投递是否失败，即使每次连接超时一分钟，也会因对同一主机的数十甚至数百条排队消息反复重试而造成巨大延迟。

同时，SMTP客户端应谨慎缓存服务器的负面响应。在极端情况下，如果在同一SMTP连接中多次发出EHLO，服务器可能返回不同的答案。更重要的是，MAIL命令的5yz响应码不得被缓存。

如上所述，当SMTP服务器接收到来自特定主机地址的邮件时，它可以激活自身的SMTP排队机制，以重试该主机地址待处理的任何邮件。

4.5.5. 具有空反向路径的消息

有几类通知消息根据现有和拟议的标准要求必须使用空反向路径（null reverse-path）进行发送，即第3.7节所讨论的未投递通知、其他类型的投递状态通知（DSNs，RFC 3461 [32]）以及消息处理通知（MDNs，RFC 3798 [37]）。这些消息都是关于之前消息的通知，它们会被发送到前一封邮件的反向路径。（如果此类通知消息的投递失败，通常表示目标主机的邮件系统存在问题。出于这个原因，在某些主机上，邮件传输代理（MTA）会被设置为将此类失败的通知消息转发给能够修复邮件系统问题的人员，例如通过postmaster别名。）

所有其他类型的消息（即，不是由标准追踪RFC要求必须具有空反向路径的消息）应使用有效的、非空的反向路径进行发送。

自动化电子邮件处理程序的实现者应当确保正确处理各种具有空反向路径的消息。特别是，这些系统不应对空反向路径的消息作出回复，也不应在转发时为此类消息添加非空反向路径，或将空反向路径更改为非空。

5. 地址解析与邮件处理

5.1. 定位目标主机

一旦SMTP客户端在词法上识别出将要投递邮件的域（如第2.3.5节和3.6节所述），必须进行DNS查询以解析该域名（RFC 1035 [2]）。域名应为完全限定域名（FQDN）：从部分名称或本地别名推断FQDN的机制不在本规范范围内。由于历史问题，用于初始提交的SMTP服务器不应进行此类推断（消息提交服务器[18]在这方面具有更大的灵活性），中继SMTP服务器也不得进行推断。

查询首先尝试找到与该名称关联的MX记录。如果找到CNAME记录，则将结果名称作为初始名称进行处理。如果返回不存在域的错误，则必须将此情况报告为错误。如果返回临时错误，邮件必须被排队并在稍后重试（参见第4.5.4.1节）。如果返回空的MX列表，则将该地址视为与隐式MX记录（优先级为0）相关联，指向该主机。如果存在MX记录，但都不可用，或隐式MX不可用，也必须报告为错误。

如果为某个名称找到一个或多个MX记录，SMTP系统不得使用与该名称关联的任何地址RR，除非它们是通过MX RR找到的；上述“隐式MX”规则仅在没有MX记录时适用。如果存在MX记录，但都不可用，也必须报告为错误。

当查找与某个MX RR关联的域名时，获得的响应数据字段必须包含一个域名。该域名在查询时必须返回至少一个地址记录（如A或AAAA RR），提供SMTP服务器的IP地址，以便将邮件投递到正确的服务器。任何其他响应，特别是会返回CNAME记录的值，超出本标准的范围。关于数据中标签不能解析为CNAME的限制，详见RFC 2181第10.3节[38]。

当查找成功后，映射可能会产生一组备用投递地址，而非单一地址，因为可能存在多个MX记录、多宿主（multihoming）或两者兼有。为了确保可靠的邮件传输，SMTP客户端必须能够尝试（并重试）这组地址中的每一个，直到投递成功为止。当然，也可以对备用地址的尝试次数设置限制。无论如何，SMTP客户端应至少尝试两个地址。

用于排序主机地址的两类信息是：多个MX记录和多宿主。

MX记录包含一个优先级指示，若出现多个此类记录，必须用来排序（见下文）。优先级数值越低越优先。如果多个目的地具有相同优先级，且没有明显理由偏向某一地址（例如，易于访问的地址），则发件SMTP必须随机化它们，以在特定组织的多个邮件交换机之间分散负载。

目标主机（可能取自首选的MX记录）可能是多宿主的，此时域名解析器会返回一组备用IP地址。域名解析器接口应根据优先级（优先级越低越优先）对这组地址进行排序，SMTP发件方必须按此顺序尝试。

虽然必须支持尝试多个备用地址的能力，但具体实现可能会限制或禁用备用地址的使用。关于是否应尝试多宿主主机的不同地址进行重试的问题，存在争议。支持多地址的主要理由是最大化及时投递的概率，甚至有时是任何投递成功的概率；反对者则认为可能会造成不必要的资源浪费。请注意，资源使用还受到第4.5.4.1节中讨论的发送策略的强烈影响。

如果SMTP服务器收到一个目标为其作为指定邮件交换机的消息，它可以中继该消息（可能在此过程中重写MAIL FROM和/或RCPT TO地址）、进行最终投递，或通过SMTP之外的机制交付。后两者都不要求进一步检查MX记录。

如果决定中继而不重写地址，必须对MX记录进行排序以确定投递候选。记录首先按优先级排序，优先级最低的最优。中继主机应检查列表中是否有其在邮件交易中可能识别的名称或地址。如果找到匹配的记录，则必须丢弃所有同一优先级及更高优先级的记录。如果没有剩余的记录，则视为错误，邮件应被退回为无法投递。如果仍有记录，应按优先级顺序尝试。

5.2. IPv6与MX记录

在现代互联网中，SMTP客户端和服务器可以运行在IPv4系统、IPv6系统或兼容两者的双栈系统上。MX记录指向的主机域名可能包含“A RR”（IPv4）、“AAAA RR”（IPv6）或两者的组合。虽然RFC 3974 [39]讨论了在混合环境中的一些操作经验，但其内容不够全面，未能促成标准化，其部分建议也与本规范不一致。具体应采取的措施将取决于本地环境条件，例如相关网络的性能和可能需要的转换，或者是显而易见的（例如，IPv6-only客户端无需尝试查找A记录或连接IPv4-only服务器）。设计可能在IPv6或双栈环境中运行的SMTP实现时，应研究上述程序，特别是关于多宿主主机的评论，并尽可能提供机制以便在IPv4和IPv6系统之间进行操作调优和邮件互通，同时考虑本地环境。

6. 问题检测与处理

6.1. 可靠投递与邮件回复

当接收SMTP接受一封邮件（通过对DATA命令返回“250 OK”）时，即表示其承担了投递或中继该邮件的责任。它必须认真履行此责任。不得因琐碎原因（如主机崩溃或资源短缺）而丢失邮件。下一节和第7.8节将讨论一些不被视为琐碎的原因。

如果在接受邮件后发生投递失败，接收SMTP必须生成并发送通知消息。此通知必须使用空反向路径（“<>”）在信封中。通知的收件人必须是信封返回路径（或Return-Path行）中的地址。然而，

如果该地址为空（“<>”），接收SMTP不得发送通知。显然，本节中的任何内容都不应阻止本地决定（即在与接收SMTP相同的系统环境中）记录或以其他方式传输空地址事件的信息。如果地址是显式的源路由，则必须将其简化到最终跳。

例如，假设必须为一条到达的消息发送错误通知，该消息的MAIL FROM为：<@a,@b:user@d>，则通知消息必须使用：

RCPT TO:<user@d>

某些投递失败在邮件被SMTP接受后是不可避免的。例如，接收SMTP服务器可能无法验证RCPT命令中的所有投递地址，原因可能是“软”域系统错误、目标是邮件列表（参见前述RCPT讨论），或服务器作为中继，没有立即访问投递系统的权限。

为了避免因超时而收到重复的消息，接收SMTP必须尽量缩短响应最终<CRLF>.<CRLF>数据结束指示的时间。关于此问题的详细讨论，请参见RFC 1047 [40]。

6.2. 不需要的、未请求的及“攻击”消息

互联网邮件系统的实用性和可预测性要求，能投递的消息都应被投递，无论这些消息的语法或内容是否存在缺陷。如果不能投递，且在SMTP事务中不能被拒绝，则应如前所述进行“弹回”（返回未投递通知消息）。在当今许多SMTP服务器运营者发现大量垃圾邮件远远超过正常邮件、接受一条消息可能会引发额外的不良流量（如验证地址）之时，这些原则可能难以完全实现。

正如第7.8节和7.9节所讨论，实际上允许在没有通知发件人的情况下丢弃邮件。然而，这极其危险，违反了邮件要么投递成功、要么退回的长久传统和社区预期。如果滥用静默丢弃，可能会严重削弱公众对互联网邮件系统可靠性的信任。因此，除非有充分的理由相信这些消息极度欺诈或不当，否则应避免静默丢弃。

为了尽可能进一步扩展交付原则，合理的策略可能是不投递带有无效退回地址的邮件，尽管网络的历史经验表明，用户通常通过投递任何可以投递的消息来获得更好的服务。可靠地判断退回地址是否无效可能是一个困难且耗时的过程，尤其是在假定的发信系统无法直接访问或不完全支持VRFY命令的情况下。即使采用“对无效退回地址的消息进行丢弃”的策略，也应仅在几乎可以确定退回地址确实无效的情况下才应用。

相反，如果一封邮件因包含恶意内容而被拒绝（此决定超出了本文档定义的SMTP服务器的范围），除非接收站点有信心这些拒绝通知（bounce）消息能够被有效投递，否则不应发送拒绝通知。在这种情况下，优先和默认的做法是避免在检测到入站邮件含有恶意内容时发送非投递通知。

6.3. 循环检测

简单统计邮件中“Received:”头字段的数量已被证明是一种有效（尽管很少是最优的）检测邮件系统中循环的方法。使用此技术的SMTP服务器应设定较高的拒绝阈值，通常至少为100个“Received:”条目。无论采用何种机制，服务器都必须具备检测和阻止简单循环的措施。

6.4. 异常情况的补偿

不幸的是，互联网邮件协议存在变异、创造性解释甚至明显违反协议的情况；有人甚至认为这些情况相当频繁。关于一个行为良好的SMTP接收或中继服务器应拒绝格式错误的消息、尝试不加改动地转发，还是尝试修复以增加成功投递（或后续回复）几率的争论，从网络邮件结构出现之初就开始，并且尚未平息。支持拒绝的观点认为，修复措施很少能完全有效，拒绝不良消息是促使相关软件修正的唯一途径。而支持“修复”或“无论如何都投递”的观点则认为，用户更希望邮件尽可能通过，且市场压力也倾向于此。在实际操作中，这些市场压力可能对某些供应商比严格遵守标准更为重要，无论开发者的偏好如何。

邮件格式不规范带来的问题在引入分离用户代理（split-UA）邮件读取协议（如POP2、POP3、IMAP2和PCMAIL）后变得更加严重。这些协议鼓励使用SMTP作为消息提交协议，以及SMTP服务器作为这些客户端（通常间歇性连接互联网）之间的中继系统。历史上，许多客户端缺乏SMTP（甚至RFC 822 [28]）所假设的机制和信息。有的不能准确追踪时间，有的没有时区概念，有的无法识别自己的名称或地址，更不用说满足RFC 822中关于认证地址的假设。

为应对这些弱SMTP客户端，许多SMTP系统现在会接受不完整或错误的消息，并尽可能完成投递。这种策略在服务器能识别或验证客户端身份、且双方已有事先协议时通常是合理的。相反，对于中继或投递SMTP服务器在不了解用户或客户端的情况下进行修正的行为，存在较大担忧。许多此类问题通过使用专门的消息提交协议（如RFC 4409 [18]定义的协议）而非依赖起源SMTP服务器得以缓解。

在处理过程中，发起SMTP服务器或作为初始提交协议目标的SMTP服务器可以在必要时对消息进行以下修改：

- 添加缺失的Message-ID字段
- 添加缺失的日期、时间或时区信息
- 将地址修正为正确的FQDN格式

服务器对客户端信息的了解越少，这些修正越可能不正确，因此在决定是否进行修正时应更加谨慎和保守。这些修正绝不能由提供中继功能的SMTP服务器执行。

在所有情况下，提供正确、完整信息的客户端优先于由SMTP服务器进行的修正。所有操作应在追踪头字段和/或头字段注释中有明确记录。

7. 安全考虑

7.1. 邮件安全与伪造

SMTP邮件本质上不安全，普通用户甚至可以直接与接收和中继SMTP服务器交互，制造出误导收件人相信邮件来自其他地方的消息。即使由专家也难以检测“伪造”行为，虽然难度较大，但并非无法实现。因此，随着对互联网邮件的了解增加，人们也逐渐认识到SMTP邮件在传输层无法实现身份验证或完整性校验。真正的邮件安全只能通过端到端的方法实现，比如数字签名（参见RFC 1847 [43]，以及RFC 4880 [44]中的Pretty Good Privacy（PGP）或RFC 3851 [45]中的安全/多用途互联网邮件扩展（S/MIME））。

一些协议扩展和配置选项（如SMTP客户端到服务器的认证）在一定程度上改善了传统状况，但通常只验证一台服务器，而非一串中继和用户机器，更不用说验证用户或用户机器了。除非在设计良好的信任环境中伴随责任的严格交接，否则它们的安全性仍远不及使用数字签名的端到端机制。

试图阻止用户将Envelope返回路径和“From”头字段指向非自己地址的努力大多是误导：它们会妨碍合法应用，比如代表他人发送邮件、错误或正常回复应发向特定地址、或一封邮件发给多个不同主机的收件人（如提供便捷修改这些头字段的系统，应为用户建立一个主要且永久的邮箱地址，以便合理生成“Sender”头字段）。本规范未进一步解决SMTP相关的身份验证问题，但建议不要为了提供一些微小的保护而禁用有用的功能。

7.2. “盲抄” (BCC)

在SMTP会话中，未出现在邮件头中的地址可能出现在RCPT命令中，原因包括：用作“列表爆破器”的邮件地址（单一地址解析成多个地址）或“盲抄”地址。尤其当存在多个RCPT命令时，为避免破坏这些机制的部分目的，SMTP客户端和服务器不应将全部RCPT参数复制到邮件头中，无论是作为追踪头字段还是信息或私有扩展头字段。由于此规则在实践中常被违反且难以强制执行，支持“bcc”用法的SMTP系统可以考虑将每个盲抄作为单独的消息事务处理，只包含一个RCPT命令。

SMTP事务中的“反向”地址（MAIL、SAML等命令）或“正向”地址（RCPT）与邮件头中的地址没有固有关系。接收系统不应试图推断这种关系，也不应利用它们来修改消息的头部以实现投递。流行的“Apparently-to”头字段就是违反此原则的例子，也常引发意外的信息泄露，不应使用。

7.3. VRFY、EXPN与安全

如第3.5节所述，出于安全考虑，某些站点可能会禁用VRFY或EXPN命令。实现中必须确保禁用后，返回的响应不能误导为已验证的地址。如果站点出于安全原因禁用这些命令，SMTP服务器必须返回252响应码，而非可能被误解为验证成功或失败的代码。

用VRFY命令验证地址后仅检查语法就返回250响应码，违反了此规则。当然，支持VRFY但总返回550（无论地址是否有效）的实现也不符合规范。

在公共互联网中，邮件列表的内容已成为“垃圾邮件者”收集地址的常用资源。随着列表管理员采取措施防止滥用，EXPN命令用于“收集”地址的情况有所增加，但VRFY和EXPN仍在经过身份验证的用户和管理域内有用。例如，用于内部审查邮件路由，确保没有敏感邮件被自动转发到组织外部。启用SMTP认证的站点可以选择只对已验证请求者开放VRFY和EXPN。实现应支持EXPN，但应权衡利弊。

禁用VRFY是否能带来实际安全提升，取决于其他条件。在许多情况下，RCPT命令也能提供地址有效性信息。尤其是在收到DATA命令后才判断地址有效性的场景中，RCPT可能不返回任何信息，而VRFY会尝试验证地址的有效性（参见前述讨论）。

7.4. 基于251和551响应码的邮件重定向

在客户端使用RCPT命令返回的251或551响应码自动更新未来行为（如更新地址簿）之前，应确保服务器的真实性，否则可能受到中间人攻击。

7.5. 公告中的信息泄露

关于在问候响应或HELP命令中公布服务器类型、版本（甚至域名）以便调试，与暴露可能被恶意利用信息的缺点之间，存在持续的争论。调试信息的价值毋庸置疑。支持公开的观点认为，实际上应优先确保SMTP服务器的安全，而不是试图通过隐藏服务器身份来规避已知漏洞。建议站点权衡此类信息披露的利弊，至少应以某种方式向其他网络主机提供类型和版本信息。

7.6 追踪字段中的信息泄露

在某些情况下，例如当邮件源自局域网（LAN）内部，且这些主机未直接连接到公共互联网时，按照本规范生成的“Received”追踪（"Received"）头字段可能会泄露主机名或类似信息，而这些信息通常不应被公开。这通常不构成问题，但对名称泄露有特殊关注的站点应对此保持警觉。此外，在涉及多个收件人的情况下，建议谨慎或避免提供可选的FOR子句，以免无意中将“盲抄”收件人的身份泄露给其他人。

7.7 转发消息中的信息泄露

如第3.4节所述，使用251或551回复码来标识与邮箱相关的替换地址，可能会无意中泄露敏感信息。对此类问题敏感的站点应确保正确选择和配置服务器。

7.8 抵抗攻击

近年来，对SMTP服务器的攻击日益增多，这些攻击可能伴随试图发现发件地址以发送垃圾邮件，或纯粹为了使服务器无法被他人访问（即应用层的拒绝服务攻击）。虽然这些攻击手段超出本标准的范围，但合理的操作行为要求服务器能够检测此类攻击并采取措施自我防御。例如，如果服务器检测到大量RCPT TO命令被发送，且大部分或全部地址无效，作为攻击的一部分，服务器可以在生成一定数量的5yz（通常为550）回复后关闭连接。

7.9 SMTP服务器的操作范围

一个公认原则是，SMTP服务器可以基于任何合理的操作或技术原因拒绝接受邮件，只要这些原因对提供该服务器的站点来说合理。然而，站点之间的合作使得互联网成为可能。如果站点过度利用拒绝流量的权利，电子邮件的普及性（互联网的优势之一）将受到威胁；因此，如果站点决定对接受和处理的流量进行选择，应谨慎行事并保持平衡。

近年来，通过任意站点使用中继功能，成为隐藏邮件实际来源的敌对行为的一部分。一些站点已决定限制中继功能仅用于已知或可识别的来源，实施此类过滤的能力应被支持。当邮件因政策原因被拒绝时，应在对EHLO（或HELO）、MAIL或RCPT的响应中使用550码。

8. IANA考虑事项

IANA维护支持本规范的三个注册表，这些注册表均为RFC 2821或更早版本创建。本文件扩展了第三个注册表，具体如下。以下列出的注册表参考信息截至本文件出版时；IANA不保证URL的具体位置。注册表如下：

- 第一个“简单邮件传输协议（SMTP）服务扩展” [46]，包括SMTP服务扩展及相关关键词，必要时还包括参数和动词。根据第2.2.2节的规定，不能在此注册表中注册以“X”开头的条目。仅可为已在标准轨道或经IESG特别批准的实验性RFC中定义的服务扩展（及其关键词、参数或动词）注册。

- 第二个“地址字面标签” [47]，包括识别除IPv4地址（在RFC 821和本文件中定义）之外的域名字面形式的“标签”。该注册表的初始条目为IPv6地址（在本文件中定义）。其他字面类型在使用前需标准化，目前尚无预期。

- 第三个“邮件传输类型” [46]，由RFC 821建立并由本规范续订，用于“via”和“with”子句中“Received:”头字段的链路和协议标识符。除本文件定义的标识符外，其他标识符只能通过标准化或RFC记录的、经IESG批准的实验性协议扩展进行注册。此命名空间用于标识，且规模无限：鼓励IESG基于清晰的文档、实际使用或强烈的使用意向批准注册，而非偏好某种方法的属性。

在“VIA链路类型”和“WITH协议类型”注册表的子节中，新增了“Additional-registered-clauses”注册项，用于注册上述描述的“附加注册子句”。注册表将包含子句名称、描述、相关字符串的语法摘要和参考文献。随着新子句的定义，原则上可以为其创建专属注册表（如果字符串由保留词或关键词组成，而非限制较少的字符串）。与链路和协议标识符一样，额外子句的注册也只能通过标准化或RFC记录的、经IESG批准的实验性协议扩展进行。此命名空间用于标识，规模无限：鼓励基于清晰的文档、实际使用或强烈的使用意向批准注册，而非偏好子句的属性。

此外，如果未来创建了除Return-path和Received之外的其他追踪头字段，这些字段必须加入由BCP 90（RFC 3864） [11]建立的IANA注册表，用于RFC 5322 [4]。

9. 致谢

许多人士为RFC 2821的发展做出了贡献。相关致谢请参阅该文档。对于本文件，编辑和社区特别感谢Dawn Mann和Tony Hansen，他们在编辑和将文档内部格式从一种系统转换到另一种系统的艰难过程中提供了帮助。

没有已故Jon Postel的众多贡献和见解，本文件和RFC 2821都无法完成。这些贡献当然包括RFC 821中对SMTP的最初定义。RFC 821中的大量内容仍在本文件中出现，包括一些Jon最初的示例，这些示例仅在必要时进行了更新以反映规范的其他变更。

许多人在邮件列表或给作者的笔记中提出了意见或建议。多位人士提出了重要的修正或澄清，包括Matti Aarnio、Glenn Anderson、Derek J. Balling、Alex van den Bogaerdt、Stephane Bortzmeyer、Vint Cerf、Jutta Degener、Steve Dorner、Lisa Dusseault、Frank Ellerman、Ned Freed、Randy Gellens、Sabahattin Gucukoglu、Philip Guenther、Arnt Gulbrandsen、Eric Hall、Richard O. Hammer、Tony Hansen、Peter J. Holzer、Kari Hurtta、Bryon Roche Kain、Valdis Kletnieks、Mathias Koerber、John Leslie、Bruce Lilly、Jeff Macdonald、Mark E. Mallett、Mark Martinec、S. Moonesamy、Lyndon Nerenberg、Chris Newman、Douglas Otis、Pete Resnick、Robert A. Rosenberg、Vince Sabio、Hector Santos、David F. Skoll、Paul Smith 和 Brett Watson。

特别感谢区域主管Lisa Dusseault、Ted Hardie和Chris Newman，他们推动此项工作重新启动并持续推进，以及与之合作的临时委员会。该委员会成员（按字母顺序）包括：Dave Crocker、Cyrus Daboo、Tony Finch、Ned Freed、Randal Gellens、Tony Hansen、作者本人和Alexey Melnikov。Tony Hansen还在邮件列表上担任临时主席，审阅本文件；没有他的努力、平衡感、公正性和耐心，这一切都难以实现。

10. 参考文献

10.1 强制性参考文献

[1] Postel, J.，“简单邮件传输协议”，STD 10，RFC 821，1982年8月。

[2] Mockapetris, P.，“域名——实现与规范”，STD 13，RFC 1035，1987年11月。

[3] Braden, R.，“互联网主机需求——应用与支持”，STD 3，RFC 1123，1989年10月。

[4] Resnick, P.，“互联网消息格式”，RFC 5322，2008年10月。

[5] Bradner, S.，“在RFC中用以指示需求级别的关键词”，BCP 14，RFC 2119，1997年3月。

[6] 美国国家标准协会（前美国标准协会），“美国信息交换代码”，ANSI X3.4-1968，1968年。

  ANSI X3.4-1968已被较新版本取代，略有修改，但1968版仍为互联网的权威标准。

[7] Crocker, D. 和 P. Overell，“语法规范的增强BNF：ABNF”，STD 68，RFC 5234，2008年1月。

[8] Hinden, R. 和 S. Deering，“IP第6版地址架构”，RFC 4291，2006年2月。

[9] Newman, C.，“ESMTP和LMTP传输类型注册”，RFC 3848，2004年7月。

[10] Klensin, J.，Freed, N. 和 K. Moore，“用于消息大小声明的SMTP服务扩展”，STD 10，RFC 1870，1995年11月。

[11] Klyne, G.，Nottingham, M. 和 J. Mogul，“消息头字段的注册程序”，BCP 90，RFC 3864，2004年9月。

10.2 说明性参考文献

[12] Partridge, C.，“邮件路由与域名系统”，RFC 974，1986年1月。

[13] Klensin, J.，Freed, N.，Rose, M.，Stefferud, E. 和 D. Crocker，“SMTP服务扩展”，STD 10，RFC 1869，1995年11月。

[14] Klensin, J.，“简单邮件传输协议”，RFC 2821，2001年4月。

[15] Butler, M.，Postel, J.，Chase, D.，Goldberger, J. 和 J. Reynolds，“邮局协议第2版”，RFC 937，1985年2月。

[16] Myers, J. 和 M. Rose，“邮局协议第3版”，STD 53，RFC 1939，1996年5月。

[17] Crispin, M.，“互联网消息访问协议第4rev1版”，RFC 3501，2003年3月。

[18] Gellens, R. 和 J. Klensin，“邮件提交的消息提交协议”，RFC 4409，2006年4月。

[19] Freed, N.，“SMTP命令流水线的服务扩展”，STD 60，RFC 2920，2000年9月。

[20] Vaudreuil, G.，“大容量和二进制MIME消息传输的SMTP服务扩展”，RFC 3030，2000年12月。

[21] Freed, N. 和 N. Borenstein，“多用途互联网邮件扩展（MIME）第一部分：互联网消息体的格式”，RFC 2045，1996年11月。

[22] Klensin, J.，Freed, N.，Rose, M.，Stefferud, E. 和 D. Crocker，“8bit-MIME传输的SMTP服务扩展”，RFC 1652，1994年7月。

[23] Moore, K.，“MIME（多用途互联网邮件扩展）第三部分：非ASCII文本的消息头扩展”，RFC 2047，1996年11月。

[24] Freed, N. 和 K. Moore，“MIME参数值和编码字扩展：字符集、语言和续行”，RFC 2231，1997年11月。

[25] Vaudreuil, G.，“增强邮件系统状态码”，RFC 3463，2003年1月。

[26] Hansen, T. 和 J. Klensin，“SMTP增强邮件系统状态码注册表”，BCP 138，RFC 5248，2008年6月。

[27] Freed, N.，“互联网防火墙的行为与要求”，RFC 2979，2000年10月。

[28] Crocker, D.，“ARPA互联网文本消息格式标准”，STD 11，RFC 822，1982年8月。

[29] Wong, M. 和 W. Schlitt，“发件人策略框架（SPF）——授权使用域名的版本1”，RFC 4408，2006年4月。

[30] Fenton, J.，“域名密钥识别邮件（DKIM）”威胁分析，RFC 4686，2006年9月。

[31] Allman, E.，Callas, J.，Delany, M.，Libbey, M.，Fenton, J. 和 M. Thomas，“域名密钥识别邮件（DKIM）签名”，RFC 4871，2007年5月。

[32] Moore, K.，“用于投递状态通知（DSNs）的简单邮件传输协议（SMTP）服务扩展”，RFC 3461，2003年1月。

[33] Moore, K. 和 G. Vaudreuil，“用于投递状态通知的可扩展消息格式”，RFC 3464，2003年1月。

[34] Postel, J. 和 J. Reynolds，“文件传输协议”，STD 9，RFC 959，1985年10月。

[35] Kille, S.，“MIXER（Mime Internet X.400增强中继）：X.400与RFC 822/MIME的映射”，RFC 2156，1998年1月。

[36] De Winter, J.，“远程消息队列启动的SMTP服务扩展”，RFC 1985，1996年8月。

[37] Hansen, T. 和 G. Vaudreuil，"消息处置通知"，RFC 3798，2004年5月。

[38] Elz, R. 和 R. Bush，"对DNS规范的澄清"，RFC 2181，1997年7月。

Klensin                     标准轨道                    [第83页]

RFC 5321                          SMTP                      2008年10月

[39] Nakamura, M. 和 J. Hagino，"在混合IPv4/IPv6环境中的SMTP操作经验"，RFC 3974，2005年1月。

[40] Partridge, C.，"重复消息与SMTP"，RFC 1047，1988年2月。

[41] Crispin, M.，"交互式邮件访问协议：版本2"，RFC 1176，1990年8月。

[42] Lambert, M.，"PCMAIL：面向个人计算机的分布式邮件系统"，RFC 1056，1988年6月。

[43] Galvin, J.，Murphy, S.，Crocker, S.，和 N. Freed，"MIME的安全多部分：签名多部分和加密多部分"，RFC 1847，1995年10月。

[44] Callas, J.，Donnerhacke, L.，Finney, H.，Shaw, D.，和 R. Thayer，"OpenPGP消息格式"，RFC 4880，2007年11月。

[45] Ramsdell, B.，"安全/多用途互联网邮件扩展（S/MIME）第3.1版消息规范"，RFC 3851，2004年7月。

[46] 互联网分配号码管理局（IANA），"IANA邮件参数"，2007年，<http://www.iana.org/assignments/mail-parameters>。

[47] 互联网分配号码管理局（IANA），"地址字面标签"，2007年，<http://www.iana.org/assignments/address-literal-tags>。

---

Klensin                     标准轨道                    [第84页]

RFC 5321                          SMTP                      2008年10月

附录A. TCP传输服务

TCP连接支持8位字节的传输。SMTP数据为7位ASCII字符。每个字符作为一个8位字节传输，高位比特应清零。服务扩展可能会修改此规则，以允许在消息体中传输完整的8位字节，或者在SMTP命令或响应中专门设计允许如此。

附录B. 从RFC 822头字段生成SMTP命令

一些系统在邮件提交协议中仅使用RFC 822头部部分，或在将消息交付给中继传输代理（MTA）时，从RFC 822头字段生成SMTP命令。虽然MTA-用户代理（UA）协议是私有的，不属于任何互联网标准，但这种做法存在问题。例如，关于“密件抄送（bcc）”副本和分发列表的正确处理经常出现问题，特别是当本应属于邮件信封的信息在处理早期未与头字段信息分离（或未保持分离）时。

建议用户代理（UA）为其初始的（“提交客户端”）MTA提供一个与消息本身分离的信封（envelope）。如果未提供信封，则应按以下方式生成SMTP命令：

1. 从TO、CC或BCC头字段中复制每个收件人地址到RCPT命令（如果需要排队或投递，则可能生成多个消息副本）。这包括RFC 822“组”中列出的任何地址。然后，应从头部中删除任何BCC头字段。在完成此过程后，应检查剩余的头字段，确保至少有一个TO、CC或BCC头字段存在。如果没有，应插入一个没有其他信息的BCC头字段，如[4]中所述。

2. MAIL命令中的返回地址应尽可能从提交（本地）用户的系统身份中派生，否则应从“From:”头字段中派生。如果有系统身份信息，应将其复制到“Sender:”头字段（如果不同于“From:”中的地址）。任何已存在的“Sender:”头字段应被删除。系统可以提供覆盖信封返回地址的方式，但可能限制仅限特权用户使用。这不能防止邮件伪造，但可以减少其发生频率；详见第7.1节。

当以这种方式使用MTA时，MTA有责任确保传输的消息有效。验证有效性的方法，以及处理（或返回）在到达时无效的消息，是MUA-MTA接口的一部分，不在本规范范围内。

仅基于标准RFC 822信息的提交协议不得用作将来自非SMTP（外来）邮件系统的消息网关到SMTP环境中。必须从其他环境中获取额外信息（如补充头字段或外来系统的信封）以构建信封。

仅使用消息头中的“To”和“Cc”字段进行网关传输的尝试，反复导致邮件循环和其他不利于互联网邮件正常运行的行为。尤其是在消息源自互联网邮件列表并通过信封信息分发到外部环境时，这些问题尤为常见。当这些消息由仅处理头部部分的中继器处理时，几乎不可避免会出现回环（返回互联网环境或邮件列表的情况）。

---

附录C. 源路由

历史上，<reverse-path>是一个反向源路由列表，包括主机和发信邮箱。<reverse-path>中的第一个主机通常是发出MAIL命令的主机；但现在，反向路径中不应出现源路由。类似地，<forward-path>可能是一个源路由列表，包括主机和目标邮箱，但通常<forward-path>应只包含邮箱和域名，依赖域名系统提供必要的路由信息。源路由的使用已被弃用（参见附录F.2）；虽然服务器必须准备好接收和处理它们（详见第3.3节和附录F.2），但客户端不应传输源路由。本节仅为提供背景而加入，内容略有修改自RFC 821，以防止服务器行为误导客户端或不支持完整源路由的后续服务器。

出于中继目的，<forward-path>可以是类似“@ONE,@TWO:JOE@THREE”的源路由，其中ONE、TWO和THREE必须是完全限定域名。此形式强调地址与路由的区别。邮箱（如JOE@THREE）是绝对地址，路由是到达方式的信息。两者不应混淆。

如果使用源路由，须参考RFC 821及以下文本，了解构建和更新<forward-path>的机制。通过源路由到达的服务器（如其域名出现在<forward-path>的第一位）必须在转发前从任何包含其域名的<forward-path>中删除其域名，并可以删除其他源路由信息。符合本规范的服务器不得更新反向路径。

注意，<forward-path>和<reverse-path>出现在SMTP命令和应答中，但不一定出现在消息中。也就是说，这些路径和语法不必出现在消息头的“To:”、“From:”、“CC:”等字段中。相反，SMTP服务器不得从消息头字段中推导出最终的消息路由信息。

尽管有上述建议，若路径列表仍出现，则为“反向”源路由，表示邮件经过列表中的每个中继（列表中第一个是最近的中继）。此列表用于将未投递通知返回给发件人。如果某些中继添加了自己的名字到反向源路由的开头，而其他中继没有，则会在路由列表中产生断点。这也是服务器应忽略源路由，仅使用邮箱中的域名的原因之一。

---

附录D. 场景

本节展示几种类型的SMTP会话完整场景。在示例中，“C:”表示SMTP客户端的发言，“S:”表示SMTP服务器的回应。

D.1. 典型SMTP事务场景

此示例显示由host bar.com的Smith发出的邮件，收件人为host foo.com上的Jones、Green和Brown。假设host bar.com直接联系host foo.com。邮件被接受给Jones和Brown，Green在foo.com没有邮箱。

S: 220 foo.com 简单邮件传输服务准备就绪
C: EHLO bar.com
S: 250-foo.com问候bar.com
S: 250-8BITMIME
S: 250-SIZE
S: 250-DSN
S: 250 HELP
C: MAIL FROM:<Smith@bar.com>
S: 250 确认
C: RCPT TO:<Jones@foo.com>
S: 250 确认
C: RCPT TO:<Green@foo.com>
S: 550 无此用户
C: RCPT TO:<Brown@foo.com>
S: 250 确认
C: DATA
S: 354 开始邮件输入，以<CRLF>.<CRLF>结束
C: 这是邮件内容...
C: ...等等
C: .
S: 250 确认
C: QUIT
S: 221 foo.com 关闭传输通道

---

D.2. 中止的SMTP事务场景

S: 220 foo.com 简单邮件传输服务准备就绪
C: EHLO bar.com
S: 250-foo.com问候bar.com
S: 250-8BITMIME
S: 250-SIZE
S: 250-DSN
S: 250 HELP
C: MAIL FROM:<Smith@bar.com>
S: 250 确认
C: RCPT TO:<Jones@foo.com>
S: 250 确认
C: RCPT TO:<Green@foo.com>
S: 550 无此用户
C: RSET
S: 250 确认
C: QUIT
S: 221 foo.com 关闭传输通道

---

D.3. 中继邮件场景

步骤1——源主机到中继主机

源主机对XYZ.COM（目标地址）进行DNS查询，找到优先级最高的MX记录指向xyz.com，次优先级指向foo.com。尝试连接xyz.com失败后，改为连接foo.com，过程如下：

S: 220 foo.com 简单邮件传输服务准备就绪
C: EHLO bar.com
S: 250-foo.com问候bar.com
S: 250-8BITMIME
S: 250-SIZE
S: 250-DSN
S: 250 HELP
C: MAIL FROM:<JQP@bar.com>
S: 250 确认
C: RCPT TO:<Jones@XYZ.COM>
S: 250 确认
C: DATA
S: 354 开始邮件输入，以<CRLF>.<CRLF>结束
C: 日期：1998年5月21日 05:33:29 -0700
C: From: John Q. Public <JQP@bar.com>
C: 主题：董事会的下次会议
C: 收件人：Jones@xyz.com
C:
C: Bill:
C: 董事会的下次会议将在星期二举行。
C: John.
C: .
S: 250 确认
C: QUIT
S: 221 foo.com 关闭传输通道

步骤2——中继主机到目标主机

foo.com收到消息后，对xyz.com进行DNS查询，找到相同的MX记录，但不能使用指向自己的记录（或指向其他更差优先级的主机）。它尝试连接xyz.com成功后，过程如下：

S: 220 xyz.com 简单邮件传输服务准备就绪
C: EHLO foo.com
S: 250 xyz.com在线
C: MAIL FROM:<JQP@bar.com>
S: 250 确认
C: RCPT TO:<Jones@XYZ.COM>
S: 250 确认
C: DATA
S: 354 开始邮件输入，以<CRLF>.<CRLF>结束
C: 来自：bar.com由foo.com转发；1998年5月21日 05:33:22 -0700
C: 日期：1998年5月21日 05:33:22 -0700
C: From: John Q. Public <JQP@bar.com>
C: 主题：董事会的下次会议
C: 收件人：Jones@xyz.com
C:
C: Bill:
C: 董事会的下次会议将在星期二举行。
C: 由John。
C: .
S: 250 确认
C: QUIT
S: 221 foo.com 关闭传输通道

---

D.4. 验证与发送场景

以下是英文内容的中文翻译：

```
      S: 220 foo.com 简单邮件传输服务准备就绪
      C: EHLO bar.com
      S: 250-foo.com 欢迎 bar.com
      S: 250-8BITMIME
      S: 250-SIZE
      S: 250-DSN
      S: 250-VRFY
      S: 250 HELP
      C: VRFY Crispin
      S: 250 Mark Crispin <Admin.MRC@foo.com>
      C: MAIL FROM:<EAK@bar.com>
      S: 250 OK
      C: RCPT TO:<Admin.MRC@foo.com>
      S: 250 OK
      C: DATA
      S: 354 开始邮件输入；以 <CRLF>.<CRLF> 结束
      C: 胡扯一堆话……
      C: …等等等等
      C: .
      S: 250 OK
      C: QUIT
      S: 221 foo.com 关闭传输通道

附录E. 其他网关问题

   一般而言，互联网与其他邮件系统之间的网关应尽量在两个邮件系统的边界上保持任何层次语义的完整。试图通过映射（例如，将信封信息从一个系统映射到另一个系统的消息头部或正文中）来走捷径的网关转换方法，通常在重要方面被证明是不充分的。在不支持信封和消息头部同时存在的环境中进行转换的系统，必须理解一些信息几乎不可避免地会丢失。














Klensin                     标准追踪                     [第92页]


RFC 5321                          SMTP                      2008年10月


附录F. RFC 821的废弃特性

   RFC 821中的一些特性已被证明存在问题，不应在互联网邮件中使用。

F.1.  TURN命令

   该命令在RFC 821中描述，由于在没有强认证请求主机进行角色切换的情况下，容易被用来误导邮件到错误的目的地，因此存在重要的安全问题。该命令已被废弃；除非服务器能验证客户端身份，否则SMTP系统不应使用它。

F.2.  源路由

   RFC 821利用显式源路由的概念，通过一系列中继将邮件从一个主机传递到另一个主机。随着域名系统“MX”记录的引入，使用源路由的需求被取消，而在RFC 1123中引入的明确要求所有“@”后面的地址都必须是完全限定域名，进一步削弱了源路由的必要性。因此，剩余支持源路由的理由仅限于支持非常旧的SMTP客户端或邮件用户代理（MUA），以及在调试邮件系统时使用。然而，在调试或绕过严重但临时的问题（如DNS记录问题）时，源路由仍可能有用。

   SMTP服务器必须继续接受本文主体和RFC 1123中规定的源路由语法。如果必要，可以忽略路由，只使用目标域名。在使用源路由时，必须将邮件发送到地址中显示的第一个域名。特别地，服务器不得猜测源路由中的捷径。

   客户端除非在特殊情况下（如调试或绕过防火墙或邮件系统配置错误）应避免使用显式源路由。

F.3.  HELO

   如第3.1节和4.1.1节所述，当服务器支持时，应使用EHLO而非HELO。服务器必须继续接受和处理HELO，以支持较旧的客户端。

F.4.  #-字面值

   RFC 821允许用井号“#”前缀的十进制整数主机号来指定互联网地址。实际上，自TCP/IP引入以来，这种形式已被废弃。它已被弃用，不能使用。

F.5.  日期和年份

   当SMTP客户端或服务器在消息中插入日期（例如在追踪头字段中）时，必须使用四位数年份。两位数年份已被废弃；三位数年份在互联网邮件系统中从未被允许。

F.6.  发送与邮寄

   除了提供将消息投递到用户邮箱的机制外，RFC 821还提供了额外的、可选的命令，用于直接将消息投递到用户终端屏幕。这些命令（SEND、SAML、SOML）很少被实现，工作站技术的变化和其他协议的引入可能使它们变得过时，即使已实现也如此。

   客户端不应提供SEND、SAML或SOML作为服务。服务器可以实现它们。如果由服务器实现，必须采用RFC 821中规定的实现模型，并在对EHLO命令的响应中公布这些命令的名称。

作者联系方式

   John C. Klensin
   1770 Massachusetts Ave, Suite 322
   剑桥，马萨诸塞州 02140
   美国

   电子邮件：john+smtp@jck.com












Klensin                     标准追踪                     [第94页]


RFC 5321                          SMTP                      2008年10月


完整版权声明

   版权所有 (C) IETF Trust (2008)。

   本文档受BCP 78中的权利、许可证和限制的约束，除非另有说明，作者保留所有权利。

   本文档及其中包含的信息按“原样”提供，且贡献者、其代表的组织（如有）、互联网协会、IETF信托和互联网工程任务组（IETF）不对其作任何明示或暗示的保证，包括但不限于不侵犯任何权利或对其适销性和特定用途适用性的任何默示保证。

知识产权

   IETF不对本文件中描述的技术的实现或使用可能涉及的任何知识产权或其他权利的有效性或范围发表任何立场，也不保证已进行任何独立努力以识别此类权利。关于RFC文档中权利的程序信息，请参见BCP 78和BCP 79。

   有关向IETF秘书处提交的知识产权披露的副本，以及任何关于授权许可的保证或为实现或使用本规范而尝试获得的通用许可或权限的结果，可以在IETF的在线知识产权存储库中查阅，网址为：http://www.ietf.org/ipr。

   IETF欢迎任何相关方就可能涉及实现本标准所需技术的版权、专利或专利申请或其他专有权利提出意见。请将相关信息发送至IETF：ietf-ipr@ietf.org。












Klensin                     标准追踪                     [第95页]
```
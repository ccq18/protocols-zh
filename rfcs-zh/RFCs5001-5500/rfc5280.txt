# RFC 5280 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs5001-5500/rfc5280.txt

网络工作组                                          D. Cooper
评论请求编号：5280                                          NIST
废止：3280, 4325, 4630                                 S. Santesson
类别：标准轨道                                      微软公司
                                                          S. Farrell
                                              都柏林三一学院
                                                          S. Boeyen
                                                             Entrust
                                                          R. Housley
                                                      Vigil Security
                                                          W. Polk
                                                             NIST
                                                          2008年5月


         互联网X.509公钥基础设施证书
             及证书吊销列表（CRL）配置文件

本备忘录的状态

   本文件为互联网社区制定的互联网标准轨道协议，旨在征求讨论和改进建议。请参阅当前版本的《互联网官方协议标准》（STD 1）以了解该协议的标准化状态和最新进展。本备忘录的发布不受限制。

摘要

   本备忘录定义了用于互联网的X.509 v3证书和X.509 v2证书吊销列表（CRL）的配置文件。作为引言，提供了该方法和模型的概述。详细描述了X.509 v3证书格式，并补充了关于互联网名称形式的格式和语义信息。介绍了标准证书扩展，并定义了两个互联网特定的扩展。规定了一组必需的证书扩展。详细描述了X.509 v2 CRL格式，包括标准和互联网特定的扩展。还描述了X.509认证路径验证的算法。附录中提供了ASN.1模块和示例。

目录

   1. 引言 ....................................................4
   2. 需求与假设 ............................................6
      2.1. 通信与拓扑 .........................................7
      2.2. 可接受性标准 .......................................7
      2.3. 用户期望 ............................................7
      2.4. 管理员期望 ..........................................8
   3. 方法概述 ................................................8
      3.1. X.509第3版证书 ......................................9
      3.2. 认证路径与信任 ....................................10
      3.3. 撤销 ...............................................13
      3.4. 操作协议 ...........................................14
      3.5. 管理协议 ...........................................14
   4. 证书及扩展配置文件 ....................................16
      4.1. 基本证书字段 .......................................16
           4.1.1. 证书字段 ....................................17
                  4.1.1.1. tbsCertificate .........................18
                  4.1.1.2. signatureAlgorithm ....................18
                  4.1.1.3. signatureValue .........................18
           4.1.2. 待签名证书 ....................................18
                  4.1.2.1. 版本 ..................................19
                  4.1.2.2. 序列号 ................................19
                  4.1.2.3. 签名 ..................................19
                  4.1.2.4. 颁发者 ................................20
                  4.1.2.5. 有效期 ................................22
                           4.1.2.5.1. UTCTime ....................23
                           4.1.2.5.2. GeneralizedTime ............23
                  4.1.2.6. 主体 ..................................23
                  4.1.2.7. 主体公钥信息 ..........................25
                  4.1.2.8. 唯一标识符 ............................25
                  4.1.2.9. 扩展 ..................................26
      4.2. 证书扩展 .............................................26
           4.2.1. 标准扩展 ......................................27
                  4.2.1.1. 颁发者密钥标识符 ......................27
                  4.2.1.2. 主体密钥标识符 ........................28
                  4.2.1.3. 密钥用途 ................................29
                  4.2.1.4. 证书策略 ................................32
                  4.2.1.5. 策略映射 ................................35
                  4.2.1.6. 主体备用名称 ............................35
                  4.2.1.7. 颁发者备用名称 ..........................38
                  4.2.1.8. 主体目录属性 ............................39
                  4.2.1.9. 基本约束 ................................39
                  4.2.1.10. 名称约束 .................................40
                  4.2.1.11. 策略约束 .................................43
                  4.2.1.12. 扩展密钥用途 .............................44
                  4.2.1.13. CRL分发点 .................................45
                  4.2.1.14. 禁用anyPolicy ............................48
                  4.2.1.15. 最新CRL（又称Delta CRL）分发点 ..........48
           4.2.2. 私有互联网扩展 ................................49
                  4.2.2.1. 颁发者信息访问 ..........................49
                  4.2.2.2. 主体信息访问 ............................51
   5. CRL及扩展配置文件 ......................................54
      5.1. CRL字段 ..............................................55
           5.1.1. 证书列表字段 ..................................56
                  5.1.1.1. tbsCertList .............................56
                  5.1.1.2. signatureAlgorithm ....................57
                  5.1.1.3. signatureValue ..........................57
           5.1.2. 待签名证书列表 ................................58
                  5.1.2.1. 版本 ..................................58
                  5.1.2.2. 签名 ..................................58
                  5.1.2.3. 颁发者名称 ..............................58
                  5.1.2.4. 本次更新 .................................58
                  5.1.2.5. 下次更新 .................................59
                  5.1.2.6. 被吊销的证书 ............................59
                  5.1.2.7. 扩展 ..................................60
      5.2. CRL扩展 ..............................................60
           5.2.1. 颁发者密钥标识符 ..............................60
           5.2.2. 颁发者备用名称 ................................60
           5.2.3. CRL编号 ........................................61
           5.2.4. Delta CRL指示 ..................................62
           5.2.5. 发行分发点 ....................................65
           5.2.6. 最新CRL（又称Delta CRL）分发点 .................67
           5.2.7. 颁发者信息访问 ................................67
      5.3. CRL条目扩展 .........................................69
           5.3.1. 原因码 ........................................69
           5.3.2. 无效日期 ......................................70
           5.3.3. 证书颁发者 ....................................70
   6. 认证路径验证 ............................................71
      6.1. 基本路径验证 ........................................72
           6.1.1. 输入 ...........................................75
           6.1.2. 初始化 .........................................77
           6.1.3. 基本证书处理 ..................................80
           6.1.4. 为证书i+1做准备 ...............................84
           6.1.5. 完成程序 .......................................87
           6.1.6. 输出 ...........................................89
      6.2. 使用路径验证算法 ....................................89
      6.3. CRL验证 ..............................................90
           6.3.1. 撤销输入 .......................................91
           6.3.2. 初始化与撤销状态变量 ..........................91
           6.3.3. CRL处理 ........................................92
   7. 国际化名称的处理规则 ....................................95
      7.1. 识别名中的国际化名称 ................................96
      7.2. 一般名称中的国际化域名 ................................97
      7.3. 识别名中的国际化域名 ................................98
      7.4. 国际化资源标识符 ....................................98
      7.5. 国际化电子邮件地址 ..................................100
   8. 安全考虑 .................................................100
   9. IANA注意事项 ............................................105
   10. 致谢 ....................................................105
   11. 参考文献 ...............................................105
      11.1. 标准性参考 .......................................105
      11.2. 资料性参考 .......................................107
   附录A. 伪ASN.1结构与OID ....................................110
      A.1. 显式标记模块，1988语法 ............................110
      A.2. 隐式标记模块，1988语法 ............................125
   附录B. ASN.1笔记 ............................................133
   附录C. 示例 .................................................136
      C.1. RSA自签名证书 ......................................137
      C.2. 使用RSA的终端实体证书 ............................140
      C.3. 使用DSA的终端实体证书 ............................143
      C.4. 证书吊销列表 ......................................147

1. 引言

   本规范是X.509公钥基础设施（PKI）系列标准中的一部分，面向互联网。

   本规范定义了互联网PKI中证书和证书吊销列表（CRL）的格式和语义。还描述了在互联网环境中处理认证路径的程序。最后，附录中提供了所有定义或引用的数据结构的ASN.1模块。

   第2节介绍了互联网PKI的需求和影响本文件范围的假设。第3节提出了架构模型，并描述了其与之前的IETF和ISO/IEC/ITU-T标准的关系。特别是，说明了本文件与IETF PEM规范和ISO/IEC/ITU-T X.509文件的关系。

   第4节定义了X.509第3版证书的配置文件，第5节定义了X.509第2版CRL的配置文件。这些配置文件包括了在互联网PKI中可能有用的ISO/IEC/ITU-T和ANSI扩展的识别。配置文件采用1988年版的ASN.1表示，而非最新的1997年ASN.1语法。

   第6节包含认证路径验证程序。这些程序基于ISO/IEC/ITU-T的定义。实现必须得出相同的结果，但不要求使用特定的程序。

   公钥材料和数字签名的识别与编码程序定义在[RFC3279]、[RFC4055]和[RFC4491]中。实现本规范不要求使用任何特定的密码算法，但符合这些规范的实现必须按照其描述识别和编码公钥材料及数字签名。

   最后，提供了三个附录以帮助实现者。附录A包含本规范中定义或引用的所有ASN.1结构。与前述一样，采用1988年ASN.1表示。附录B提供了关于本规范中ASN.1符号较少使用特性的说明。附录C包含符合规范的证书和CRL示例。

   本规范取代了[RFC3280]。与RFC 3280的主要差异总结如下：

      * 在第7节中增强了对国际化名称的支持，规定了国际化域名、国际化资源标识符（IRI）和区分名的编码与比较规则。这些规则与当前RFC（如[RFC3490]、[RFC3987]、[RFC4518]）中的比较规则保持一致。

      * 第4.1.2.4节和第4.1.2.6节结合了对遗留文本编码方案持续使用条件的说明，这些条件在[RFC4630]中定义。在已建立的PKI中，过渡到UTF8String可能引发因名称链失败或名称约束处理不当而导致的拒绝服务。

      * 移除了[RFC3280]中第4.2.1.4节关于私钥使用期限扩展（已弃用其使用）的内容。该ISO标准扩展在互联网PKI中既不弃用，也不建议使用。

      * 第4.2.1.5节建议将策略映射扩展标记为关键。RFC 3280要求该扩展为非关键。

      * 第4.2.1.11节要求将策略约束扩展标记为关键。RFC 3280允许其为关键或非关键。

      * 增加了第5.2.7节，定义了颁发者信息访问（AIA）CRL扩展，内容来自[RFC4325]。

      * 第5.2节和第5.3节明确了对未识别CRL扩展和CRL条目扩展的处理规则。

      * 移除了第6.3.2节中的holdInstructionCode CRL条目扩展。

      * 认证路径验证算法不再追踪证书策略扩展的关键性信息。这一信息在[RFC3280]中会返回给依赖方。

      * 安全考虑部分讨论了在CRL分发点、颁发者信息访问或主体信息访问扩展中使用https或类似方案可能引发的循环依赖风险。

      * 安全考虑部分还涉及名称歧义带来的风险。

      * 安全考虑部分引用RFC 4210，说明信号CA操作变更的程序。

   附录A中的ASN.1模块与[RFC3280]保持一致，唯一变化是将ub-emailaddress-length由128改为255，以符合PKCS #9 [RFC2985]。

   本文件中的“必须”、“不必须”、“要求”、“应”、“不应”、“建议”、“不建议”、“推荐”、“可以”和“可选”这些关键词，按[RFC2119]的定义解释。

2. 需求与假设

   本规范旨在制定一个配置文件，以促进X.509证书在互联网应用中的使用，特别是面向希望采用X.509技术的社区。这些应用可能包括万维网（WWW）、电子邮件、用户认证和IPsec。为了降低使用X.509证书的门槛，本文定义了一个配置文件，以推动证书管理系统、应用工具的开发以及政策驱动的互操作性。

   某些社区可能需要补充或甚至取代本配置文件，以满足特定应用领域或环境中的额外授权、保障或操作需求。然而，对于基本应用，定义了常用属性的通用表示，以便应用开发者无需考虑特定证书或CRL的发行者即可获取必要信息。

   证书用户在依赖某个证书中的公钥进行认证或不可否认性服务之前，应审查由认证机构（CA）生成的证书策略。该标准不规定具有法律约束力的规则或义务。

   随着属性证书等补充授权和属性管理工具的出现，可能会限制在证书中包含的已认证属性。这些管理工具可能提供更合适的方式传达许多已认证的属性。

2.1. 通信与拓扑

   证书用户将在各种环境中操作，尤其是使用安全电子邮件的用户。该配置文件支持没有高带宽、实时IP连接或高连接可用性的用户。此外，也允许存在防火墙或其他过滤通信的情况。

   本配置文件不假设部署了X.500目录系统或轻量级目录访问协议（LDAP）目录系统。虽然不禁止使用X.500或LDAP目录，但任何分发证书和CRL的手段都可以使用。

2.2. 可接受性标准

   互联网公钥基础设施（PKI）的目标是满足确定性、自动化的识别、认证、访问控制和授权需求。这些服务的支持决定了证书中包含的属性以及证书中的辅助控制信息（如策略数据和认证路径约束）。

2.3. 用户期望

   互联网PKI的用户包括使用客户端软件的人员和流程，这些用户是证书中所列的主体。这些用途包括电子邮件的读写、万维网浏览器的客户端、Web服务器，以及路由器中的IPsec密钥管理器。本配置文件认识到这些用户平台的局限性。

使用者自身在配置责任、平台使用限制、证书路径约束以及应用程序自动化验证功能方面的能力有限，这些限制表现为：用户对配置的责任最小（例如，信任的CA密钥和规则），证书中明确的平台使用限制，证书路径的约束可以防止用户遭受许多恶意行为，以及合理自动化验证功能的应用。

2.4 管理员期望

与用户期望类似，互联网PKI（公钥基础设施）配置文件旨在支持通常运营CA的人员。赋予管理员无限制的选择会增加细微错误导致大范围安全漏洞的风险。此外，无限制的选择也会极大增加处理和验证由CA创建的证书的软件复杂性。

3. 方法概述

以下是基于X.509（PKIX）规范的公共密钥基础设施（PKI）假设的架构模型的简化视图。

该模型的组成部分包括：

- 终端实体：使用PKI证书的用户和/或作为证书主题的终端系统；
- CA（证书授权中心）：负责签发和管理证书；
- RA（注册机构）：一个可选系统，CA将部分管理职能委托给它；
- CRL发行者：生成并签署证书吊销列表（CRL）的系统；
- 存储库：存储证书和CRL的系统或分布式系统集合，用于向终端实体分发这些证书和CRL。

CA负责指示其签发证书的吊销状态。吊销状态信息可以通过在线证书状态协议（OCSP）[RFC2560]、CRL或其他机制提供。通常情况下，使用CRL提供吊销状态时，CA也是CRL的发行者。然而，CA也可以将CRL的发行责任委托给其他实体。

注意，属性授权机构（AA）也可能选择将CRL的发布委托给CRL发行者。

（图示略）

图1：PKI实体

3.1. X.509第3版证书

公共密钥的用户需要确信其关联的私钥由正确的远程实体（个人或系统）拥有，以便进行加密或数字签名。此信任通过使用绑定公钥到实体的数据结构——即证书——实现。该绑定由受信任的CA通过数字签名证书来确认。CA可以基于技术手段（如通过挑战-响应协议证明持有私钥）、私钥的展示或实体的声明来做出此确认。证书具有有限的有效期，这在其签名内容中有所指示。由于证书的签名和时效性可以由证书使用客户端独立验证，证书可以通过不受信的通信渠道和服务器系统分发，也可以在不安全的存储中缓存。

ITU-T X.509（前身为CCITT X.509）或ISO/IEC 9594-8，首次于1988年作为X.500目录推荐的一部分发布，定义了标准的证书格式[X.509]。1988年的标准采用第一版（v1）格式。1993年X.500修订时，增加了两个字段，形成第二版（v2）格式。

1993年发布的互联网隐私增强邮件（PEM）RFC中包含基于X.509 v1证书的PKI规范[RFC1422]。在尝试部署RFC 1422的过程中，发现v1和v2证书格式在多个方面存在不足。最主要的是，需要更多字段来携带PEM设计和实现经验证明必要的信息。为满足这些新需求，ISO/IEC、ITU-T和ANSI X9开发了X.509第3版（v3）证书格式。v3在v2基础上增加了扩展字段的支持。特定的扩展字段类型可以在标准中定义，也可以由任何组织或社区定义和注册。1996年6月，基本的v3格式标准化完成[X.509]。

ISO/IEC、ITU-T和ANSI X9还开发了用于v3扩展字段的标准扩展[X.509][X9.55]，这些扩展可以传递附加的主题识别信息、密钥属性、策略信息和证书路径约束等数据。

然而，这些标准扩展具有广泛的适用性。为了实现互联网环境中X.509 v3系统的互操作性，有必要制定专门的配置文件，针对互联网使用场景定制X.509 v3扩展的应用。本文件的目标之一是为互联网WWW、电子邮件和IPsec应用制定配置文件。具有额外需求的环境可以在此基础上扩展或替代。

3.2. 认证路径与信任

需要了解公钥的安全服务用户，通常需要获取并验证包含所需公钥的证书。如果用户手中没有由签发该证书的CA的公钥、CA的名称及相关信息（如有效期或名称约束）的可靠副本，则可能需要额外的证书来获取该公钥。通常，可能需要一条由多个证书组成的链（认证路径），包括由一个CA签发的终端实体的证书，以及由其他CA签发的多个中间CA证书。这些链（认证路径）之所以必要，是因为公钥用户只被初始化为信任有限数量的CA公钥。

不同的CA配置方式可以帮助公钥用户找到认证路径。例如，PEM中定义了严格的层级结构，包含三类CA：

(a) 互联网策略注册机构（IPRA）：由互联网协会运营，作为PEM认证层级的根，位于第一层。只签发给下一层的PCAs（策略认证机构）证书。所有认证路径都始于IPRA。

(b) 策略认证机构（PCA）：位于第二层，由IPRA认证。每个PCA应制定并公布其认证策略，满足不同用户需求。例如，一个组织PCA支持商业组织的电子邮件需求，另一个高保障PCA则满足法律约束的数字签名需求。

(c) 认证机构（CA）：位于第三层或更低层，由PCAs认证。代表特定组织、组织单位（如部门、组、分区）或地理区域。

RFC 1422还规定了名称从属规则，CA只能为其名称在X.500命名树中从属的实体签发证书。PEM认证路径的信任由PCA名称暗示。名称从属规则确保下级CA在其可签发的实体范围内受到合理限制（例如，组织的CA只能签发该组织名称树中的实体证书）。证书用户系统可以机械地验证是否遵循了该规则。

（图示略）

使用X.509 v1证书格式的RFC 1422存在一些限制，导致必须施加多项结构限制，以明确关联策略信息或限制证书的实用性，包括：

(a) 纯粑层级结构，所有认证路径起点为IPRA；
(b) 限制CA实体名称的命名从属规则；
(c) 使用PCA概念，验证链时需要知道各个PCA的具体信息。

引入X.509 v3后，大部分由RFC 1422解决的问题可以通过证书扩展实现，无需限制CA结构。特别是，策略相关的扩展取代了PCA的需求，约束扩展取代了命名从属规则。这使得架构更具灵活性，包括：

(a) 认证路径可以从用户域内某个CA的公钥开始，或从层级顶端的公钥开始。在用户域内的CA公钥具有某些优势，比如在某些环境中，本地域被视为最可信。

(b) 可以通过在证书中明确包含名称约束扩展来施加名称限制，但不是必须的。

(c) 策略扩展和策略映射取代了PCA概念，支持更高程度的自动化。应用程序可以根据证书内容判断路径是否可接受，而无需预先知道PCA信息，从而实现认证路径处理的自动化。

X.509 v3还引入了一个扩展，用于标识证书的主题是CA还是终端实体，减少了对PEM中所要求的带外信息的依赖。

本规范涵盖两类证书：CA证书和终端实体证书。CA证书可细分为三类：交叉证书、自签名证书和自签证书。交叉证书是指发行者和主题不同的CA证书，描述两CA之间的信任关系。自签名证书是发行者和主题相同的CA证书，用于支持策略或操作变更。自签证书是由自己签发、可以用其公钥验证签名的证书，用于开始认证路径。终端实体证书则发给未被授权签发证书的实体。

3.3. 撤销

证书一经签发，预期在其有效期内持续使用。然而，可能出现各种情况导致证书在有效期内变得无效，包括更名、主体与CA之间关系变更（如员工离职）、私钥被泄露或怀疑泄露等。在这些情况下，CA需要撤销相关证书。

X.509定义了一种证书吊销的方法。这种方法涉及每个证书授权中心（CA）定期发布一份签名的数据结构，称为证书吊销列表（CRL）。CRL是一个带有时间戳的列表，用于标识已被吊销的证书，该列表由CA或CRL发行者签名，并在公共存储库中免费提供。每个被吊销的证书都通过其序列号在CRL中进行标识。当一个使用证书的系统（例如，用于验证远程用户的数字签名）使用某个证书时，该系统不仅会检查证书的签名和有效性，还会获取一份较新的CRL，并检查该证书的序列号是否在CRL中。这里的“较新”可能因本地政策而异，但通常指的是最新发行的CRL。CRL会定期发行（例如每小时、每日或每周一次）。在通知吊销后，下一次更新时会在CRL中添加一条记录。在吊销的证书的有效期之外，CRL中的记录不得被删除，直到出现下一份定期发行的CRL。

这种吊销方法的优点在于CRL可以通过与证书相同的方式分发，即通过不受信任的服务器和不受信任的通信渠道。

使用不受信任的通信和服务器进行CRL吊销的限制在于，吊销的时间粒度受CRL发行周期的限制。例如，如果现在报告了吊销，相关信息不会被可靠地通知给使用证书的系统，直到所有当前已发行的CRL都被安排更新——这可能需要最多一小时、一天或一周，具体取决于CRL的发行频率。

与X.509 v3证书格式一样，为了促进多个供应商之间的互操作性，X.509 v2 CRL格式需要进行互联网使用的配置文件。本文件的一个目标是定义该配置文件。然而，该配置文件并不要求必须发行CRL。支持在线吊销通知的消息格式和协议在其他PKIX规范中定义。在线吊销通知的方法在某些环境中可以作为X.509 CRL的替代方案。在线吊销检查可以显著减少吊销报告到信息分发给依赖方之间的延迟。一旦CA接受吊销报告为真实有效，任何对在线服务的查询都能正确反映吊销对证书验证的影响。然而，这些方法提出了新的安全要求：证书验证者需要信任在线验证服务，而存储库本身则不需要被信任。

3.4 运营协议

运营协议用于将证书和CRL（或状态信息）传递给使用证书的客户端系统。需要提供多种不同的证书和CRL传递方式，包括基于LDAP、HTTP、FTP和X.500的分发程序。支持这些功能的运营协议在其他PKIX规范中定义。这些规范可能包括消息格式和支持上述所有操作环境的程序定义或引用，包括适当的MIME内容类型。

3.5 管理协议

管理协议用于支持PKI用户与管理实体之间的在线交互。例如，管理协议可能在CA与与之关联密钥对的客户端系统之间使用，或在两个交叉认证的CA之间使用。可能需要支持的管理功能包括：

(a) 注册：用户首次向CA（直接或通过注册机构RA）表明身份，之后CA为该用户颁发证书。

(b) 初始化：在客户端系统能够安全操作之前，必须安装与基础设施中其他位置存储的密钥具有适当关系的密钥材料。例如，客户端需要安全初始化，获得受信任CA的公钥和其他可靠信息，用于验证证书路径。此外，客户端通常还需要初始化自己的密钥对。

(c) 认证：CA为用户的公钥颁发证书，并将该证书返回给用户的客户端系统或存放在存储库中。

(d) 密钥对恢复：作为可选项，用户的密钥材料（如用于加密的私钥）可以由CA或密钥备份系统进行备份。如果用户需要恢复这些备份的密钥材料（例如因忘记密码或丢失密钥链文件），可能需要进行在线协议交换以支持此类恢复。

(e) 密钥对更新：所有密钥对都需要定期更新，即用新密钥对替换旧的密钥对，并颁发新的证书。

(f) 吊销请求：授权人员通知CA出现异常情况，要求吊销证书。

(g) 交叉认证：两个CA交换用于建立交叉证书的信息。交叉证书是由一个CA颁发给另一个CA的证书，包含用于颁发证书的CA签名密钥。

请注意，在线协议并不是实现上述功能的唯一方式。对于所有功能，都存在离线实现相同结果的方法，本规范不强制要求使用在线协议。例如，使用硬件令牌时，许多功能可以作为物理令牌交付的一部分实现。此外，上述某些功能可以合并为一次协议交换。特别是，注册、初始化和认证中的两个或多个功能可以合并为一次协议交换。

PKIX系列规范定义了一套支持上述功能的标准消息格式。这些消息在不同环境（如电子邮件、文件传输和WWW）中的传输协议也在相关规范中描述。

4 证书及其扩展配置文件

本节提出了一个公共密钥证书的配置文件，旨在促进互操作性和可重用的PKI。该配置文件基于X.509 v3证书格式及其定义的标准扩展（见[X.509]）。ISO/IEC和ITU-T文件采用1997版ASN.1，而本文档使用1988 ASN.1语法，但编码的证书和标准扩展是等价的。本节还定义了支持互联网社区PKI所需的私有扩展。

证书可用于广泛的应用和环境，涵盖不同的互操作性目标以及更广泛的操作和保障需求。本文件的目标是为需要广泛互操作性和有限特殊用途的通用应用建立一个共同的基础。特别是，重点支持X.509 v3证书在非正式互联网电子邮件、IPsec和WWW应用中的使用。

4.1 基本证书字段

X.509 v3证书的基本语法如下。签名计算时，待签名的数据采用ASN.1 DER编码（[X.690]）。ASN.1 DER编码是每个元素的标签、长度和值的编码系统。

证书 ::= SEQUENCE {
  tbsCertificate       TBSCertificate,
  signatureAlgorithm   AlgorithmIdentifier,
  signatureValue       BIT STRING
}

TBSCertificate ::= SEQUENCE {
  version              [0] EXPLICIT Version DEFAULT v1,
  serialNumber         CertificateSerialNumber,
  signature            AlgorithmIdentifier,
  issuer               Name,
  validity             Validity,
  subject              Name,
  subjectPublicKeyInfo SubjectPublicKeyInfo,
  issuerUniqueID     [1] IMPLICIT UniqueIdentifier OPTIONAL,
                       -- 若存在，版本必须为v2或v3
  subjectUniqueID    [2] IMPLICIT UniqueIdentifier OPTIONAL,
                       -- 若存在，版本必须为v2或v3
  extensions         [3] EXPLICIT Extensions OPTIONAL
                       -- 若存在，版本必须为v3
}

版本 ::= INTEGER { v1(0), v2(1), v3(2) }

证书序列号 ::= INTEGER

有效期 ::= SEQUENCE {
  notBefore      Time,
  notAfter       Time
}

Time ::= CHOICE {
  utcTime        UTCTime,
  generalTime    GeneralizedTime
}

唯一标识符 ::= BIT STRING

主体公钥信息 ::= SEQUENCE {
  algorithm            AlgorithmIdentifier,
  subjectPublicKey     BIT STRING
}

扩展 ::= SEQUENCE SIZE (1..MAX) OF Extension

扩展项 ::= SEQUENCE {
  extnID      OBJECT IDENTIFIER,
  critical    BOOLEAN DEFAULT FALSE,
  extnValue   OCTET STRING
                -- 包含ASN.1值的DER编码，对应扩展类型由extnID标识
}

以下内容描述了用于互联网的X.509 v3证书。

4.1.1 证书字段

证书是由三个必需字段组成的SEQUENCE。详细描述如下。

4.1.1.1 tbsCertificate

该字段包含主体和发行者的名称、与主体相关联的公钥、有效期以及其他相关信息。详细内容在4.1.2节中描述，tbsCertificate通常还包括扩展，详见4.2节。

4.1.1.2 signatureAlgorithm

该字段包含CA用以签署此证书的密码算法标识符。[RFC3279]、[RFC4055]和[RFC4491]列出了支持的签名算法，但也可以支持其他签名算法。

算法标识符由以下ASN.1结构定义：

AlgorithmIdentifier ::= SEQUENCE {
  algorithm               OBJECT IDENTIFIER,
  parameters              ANY DEFINED BY algorithm OPTIONAL
}

该标识符用于识别密码算法。OBJECT IDENTIFIER部分标识算法（如带SHA-1的DSA）。可选参数字段的内容根据所识别的算法而变化。

此字段必须与tbsCertificate中的签名字段使用的算法标识符相同（详见4.1.2.3节）。

4.1.1.3 signatureValue

该字段包含基于ASN.1 DER编码的tbsCertificate的数字签名。DER编码的tbsCertificate作为签名函数的输入。签名值以BIT STRING编码，并包含在签名字段中。具体过程在[RFC3279]、[RFC4055]和[RFC4491]中定义。

通过生成此签名，CA证明tbsCertificate字段中信息的有效性，特别是证明公钥材料与证书主体之间的绑定关系。

4.1.2 TBSCertificate

TBSCertificate序列包含与证书主体和颁发该证书的CA相关的信息。每个TBSCertificate都包括主体和发行者的名称、主体的公钥、有效期、版本号、序列号，有些还包含可选的唯一标识符字段。本节后续将描述这些字段的语法和语义。通常，TBSCertificate还包括扩展，互联网PKI的扩展在4.2节中描述。

4.1.2.1 版本

该字段描述编码证书的版本。当使用扩展（如本配置文件所预期）时，版本必须为3（值为2）。如果没有扩展，但存在唯一标识符，则版本应为2（值为1）；但版本也可以为3。如果只包含基本字段，版本应为1（默认值，省略不写）；也可以为2或3。

实现应能接受任何版本的证书。符合规范的实现至少应识别版本3的证书。

基于本配置文件的实现不预期生成版本2的证书。

4.1.2.2 序列号

序列号必须是CA为每个证书分配的正整数。每个由同一CA颁发的证书，其序列号必须唯一（即，发行者名称和序列号共同唯一标识一份证书）。CA必须确保序列号为非负整数。

鉴于上述的唯一性要求，序列号应包含长整数。证书用户必须能够处理最多20个八位字节的serialNumber值。符合规范的证书授权机构（CA）不得使用超过20个八位字节的序列号值。

注意：不符合规范的CA可能会签发序列号为负数或零的证书。证书用户应做好准备，优雅地处理此类证书。

4.1.2.3. 签名

该字段包含CA用于签署证书的算法标识符。

该字段必须与序列中的签名算法（Section 4.1.1.2）中的签名算法标识符相同。可选参数字段的内容将根据所识别的算法而变化。[RFC3279]、[RFC4055]和[RFC4491]列出了支持的签名算法，但也可以支持其他签名算法。

4.1.2.4. 发行者

发行者字段标识签署并颁发证书的实体。该字段必须包含非空的唯一名称（DN）。发行者字段定义为X.501类型的名称（Name）[X.501]。名称由以下ASN.1结构定义：

```
Name ::= CHOICE { -- 目前只有一个可能性 --
  rdnSequence  RDNSequence }

RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

RelativeDistinguishedName ::=
  SET SIZE (1..MAX) OF AttributeTypeAndValue

AttributeTypeAndValue ::= SEQUENCE {
  type     AttributeType,
  value    AttributeValue }

AttributeType ::= OBJECT IDENTIFIER

AttributeValue ::= ANY -- 由 AttributeType 定义

DirectoryString ::= CHOICE {
      teletexString           TeletexString (SIZE (1..MAX)),
      printableString         PrintableString (SIZE (1..MAX)),
      universalString         UniversalString (SIZE (1..MAX)),
      utf8String              UTF8String (SIZE (1..MAX)),
      bmpString               BMPString (SIZE (1..MAX)) }
```

名称描述由多个属性组成的层次结构名称，例如国家名（如US）及其对应的值。组件AttributeValue的类型由AttributeType决定；通常为DirectoryString。

DirectoryString类型定义为PrintableString、TeletexString、BMPString、UTF8String和UniversalString的选择。符合本规范的CA必须使用PrintableString或UTF8String编码DirectoryString，除两个例外：一是如果CA之前签发的证书中，issuer字段的属性使用TeletexString、BMPString或UniversalString编码，则可以继续使用这些编码以保持向后兼容；二是在某个域中新增的CA，如果该域中的现有CA使用上述编码，则新CA也可以使用相同编码。

如上所述，名称由属性组成。本规范不限制名称中出现的属性类型，但符合规范的实现必须能处理包含以下属性类型的issuer和subject名称：

- 国家（country）
- 组织（organization）
- 组织单位（organizational unit）
- 颁发者名称限定符（distinguished name qualifier）
- 州或省（state or province）
- 公共名（common name，例如“Susan Housley”）
- 序列号（serial number）

此外，建议实现还应能处理以下标准属性类型：

- 所在地（locality）
- 职称（title）
- 姓（surname）
- 名（given name）
- 首字母（initials）
- 假名（pseudonym）
- 世代限定符（generation qualifier，例如“Jr.”、“3rd”或“IV”）

这些属性类型的语法和相关对象标识符（OIDs）在附录A的ASN.1模块中定义。

此外，符合本规范的实现还必须能处理domainComponent属性（定义见[RFC4519]）。域名系统（DNS）提供了层次化的资源标签系统，该属性为希望使用与DNS名称平行的DN的组织提供了便利。这不是替代备用名称扩展中的dNSName组件。实现无需将此类名称转换为DNS名称。该属性类型的语法和OID在附录A的ASN.1模块中定义。关于国际化域名的编码规则（用于domainComponent属性）详见第7.3节。

证书用户必须准备好处理issuer和subject的名称字段（Section 4.1.2.6），以进行名称链验证（Section 6）。名称链验证通过将一个证书中的issuer名称与CA证书中的subject名称匹配实现。名称比较规则详见第7.1节。如果issuer和subject字段中的名称符合第7.1节的规则，则该证书为自签名证书。

4.1.2.5. 有效期

证书的有效期是CA保证其维护证书状态信息的时间段。该字段由两个日期组成的序列（SEQUENCE）表示：开始日期（notBefore）和结束日期（notAfter）。两者都可以用UTCTime或GeneralizedTime编码。

符合本规范的CA必须始终用UTCTime编码2049年前的有效期日期；2050年及以后，必须用GeneralizedTime编码。符合规范的应用程序应能处理用UTCTime或GeneralizedTime编码的有效期日期。

证书的有效期从notBefore到notAfter（含）时间段。

在某些情况下，设备可能会获得没有明确到期日期的证书。例如，设备的证书可能绑定其型号和序列号到其公钥，此类证书旨在设备整个生命周期内有效。

若要表示证书没有明确的到期日期，应将notAfter设置为值为99991231235959Z的GeneralizedTime。

当发行者无法在notAfter日期（包括值为99991231235959Z）之前维护状态信息时，必须确保在状态信息维护终止后不存在有效的认证路径。这可以通过吊销所有包含用于验证签名的公钥的CA证书，或停止使用该公钥作为信任锚来实现。

4.1.2.5.1. UTCTime

UTCTime是一种标准ASN.1类型，用于表示日期和时间。它用两位数字表示年份（低位两位），时间精确到分钟或秒。UTCTime可以包括Z（Zulu时间，即格林威治时间）或时间差。

在本规范中，UTCTime值必须用格林威治时间（Z）表示，并且必须包含秒（即YYMMDDHHMMSSZ），即使秒数为零。符合系统应按以下规则解释年份字段（YY）：

- 如果YY ≥ 50，则年份为19YY；
- 如果YY < 50，则年份为20YY。

4.1.2.5.2. GeneralizedTime

GeneralizedTime是一种ASN.1标准类型，用于以可变精度表示时间。可选地，它可以包含本地时间与格林威治时间的差异。

在本规范中，GeneralizedTime值必须用格林威治时间（Z）表示，并且必须包含秒（即YYYYMMDDHHMMSSZ），即使秒数为零。不得包含小数秒。

4.1.2.6. 主题

主题字段标识与存储在subject公钥字段中的公钥相关的实体。主题名可以在subject字段和/或subjectAltName扩展中携带。如果主题是CA（例如，基本约束扩展中的cA为TRUE，详见Section 4.2.1.9），则subject字段必须填充非空的唯一名称（DN），且该名称必须与该CA签发的所有证书中的issuer字段内容匹配。如果主题是CRL发行者（例如，密钥用法扩展中的cRLSign为TRUE，详见Section 4.2.1.3），则subject字段必须填充非空的唯一名称，且该名称必须与该CRL发行者签发的所有CRL中的issuer字段内容匹配。如果主题信息仅在subjectAltName扩展中（例如，只绑定到电子邮件地址或URI的密钥），则subject名称必须为空序列，且subjectAltName扩展必须为关键扩展。

当subject字段非空时，必须包含X.500的唯一名称（DN）。每个由同一CA签发的证书中的DN必须唯一。CA可以对同一主体实体签发多个具有相同DN的证书。

subject字段定义为X.501类型的Name。实现要求与issuer字段（Section 4.1.2.4）相同。必须准备好接收包含issuer字段所需属性类型的subject名称。建议还应能接收包含推荐属性类型的subject名称。属性类型的语法和OID在附录A的ASN.1模块中定义。实现可以使用第7.1节中的比较规则处理不熟悉的属性类型（如用于名称链的属性值使用DirectoryString的编码选项之一）。当属性值的编码选项不同于DirectoryString时，应使用二进制比较，以便处理包含不熟悉属性的证书。

在编码DirectoryString类型的属性值时，符合规范的CA必须使用PrintableString或UTF8String编码，除非：

(a) 证书的主题是CA，且该CA在所有签发的证书中，issuer字段的属性也用相同编码（Section 4.1.2.4）；
(b) 证书的主题是CRL发行者，且该CRL在所有由其签发的CRL中，issuer字段的编码相同（Section 5.1.2.3）；
(c) TeletexString、BMPString和UniversalString用于向后兼容，不应在新主题的证书中使用，但可以在已建立的名称中使用，包括向现有主题签发新证书或向新主题签发证书时，若之前的证书中已使用这些编码。证书用户应准备好接收包含这些类型的证书。

遗留实现中存在一种情况，即在主题区分名中嵌入电子邮件地址，作为emailAddress属性[RFC2985]。emailAddress属性的值类型为IA5String，以允许包含字符“@”，而“@”不属于PrintableString字符集。emailAddress属性的值不区分大小写（例如，“subscriber@example.com”与“SUBSCRIBER@EXAMPLE.COM”视为相同）。

符合规范的实现若要生成带有电子邮件地址的新证书，必须在主题备用名称扩展（第4.2.1.6节）中使用rfc822Name来描述此类身份。为了支持遗留实现，主题区分名中同时包含emailAddress属性的做法已被弃用，但仍被允许。

4.1.2.7. 主题公钥信息

此字段用于携带公钥，并标识该公钥所用的算法（例如RSA、DSA或Diffie-Hellman）。算法通过第4.1.1.2节定义的AlgorithmIdentifier结构进行标识。支持的算法的对象标识符以及公钥材料（公钥和参数）的编码方法在[RFC3279]、[RFC4055]和[RFC4491]中有详细规定。

4.1.2.8. 唯一标识符

这些字段仅在版本为2或3（第4.1.2.1节）时出现。版本为1的证书不得包含这些字段。主题和颁发者的唯一标识符用于应对主题名和/或颁发者名在不同时间的重用问题。该配置文件建议不要为不同实体重复使用名称，也不建议在互联网证书中使用唯一标识符。符合此配置文件的CA不得生成带有唯一标识符的证书。符合此配置文件的应用程序应能解析包含唯一标识符的证书，但对唯一标识符没有强制处理要求。

4.1.2.9. 扩展

此字段仅在版本为3（第4.1.2.1节）时出现。如存在，此字段为一个或多个证书扩展的序列。互联网PKI中证书扩展的格式和内容在第4.2节中定义。

4.2. 证书扩展

为X.509 v3证书定义的扩展提供了将附加属性与用户或公钥关联以及管理CA之间关系的方法。X.509 v3证书格式还允许社区定义私有扩展，以携带特定社区的专用信息。证书中的每个扩展都被标记为关键（critical）或非关键（non-critical）。如果系统遇到未识别的关键扩展或包含无法处理信息的关键扩展，必须拒绝该证书。非关键扩展可以忽略（如果未被识别），但必须处理（如果被识别）。以下章节介绍了互联网证书中推荐使用的扩展及其标准位置。社区可以选择使用其他扩展，但应谨慎采用关键扩展，以免影响通用性。

每个扩展包括一个OID和一个ASN.1结构。当扩展出现在证书中时，OID作为extnID字段出现，相应的ASN.1 DER编码结构作为extnValue的值。一个证书不得包含同一扩展的多个实例。例如，证书中只能有一个authorityKeyIdentifier扩展（第4.2.1.1节）。扩展包含一个布尔值critical，默认值为FALSE。每个扩展的说明中会指明符合此配置文件的CA所接受的critical字段的取值。

符合规范的CA必须支持以下扩展：密钥用法（第4.2.1.3节）、证书策略（第4.2.1.4节）、主题备用名（第4.2.1.6节）、基本约束（第4.2.1.9节）、名称约束（第4.2.1.10节）、策略约束（第4.2.1.11节）、扩展密钥用法（第4.2.1.12节）以及禁止anyPolicy（第4.2.1.14节）。如果CA颁发的证书中subject字段为空序列，则必须支持主题备用名扩展（第4.2.1.6节）。其他扩展的支持为可选。符合此配置文件的CA可以支持未在本规范中定义的扩展，但应注意将关键扩展标记为关键可能会阻碍互操作性。

最低限度，符合此配置文件的应用程序必须识别以下扩展：密钥用法（第4.2.1.3节）、证书策略（第4.2.1.4节）、主题备用名（第4.2.1.6节）、基本约束（第4.2.1.9节）、名称约束（第4.2.1.10节）、策略约束（第4.2.1.11节）、扩展密钥用法（第4.2.1.12节）以及禁止anyPolicy（第4.2.1.14节）。

此外，符合此配置文件的应用程序应支持识别颁发者和主题密钥标识符（第4.2.1.1节和第4.2.1.2节）以及策略映射（第4.2.1.5节）扩展。

4.2.1. 标准扩展

本节列出在[X.509]中定义的，用于互联网PKI的标准证书扩展。每个扩展都关联一个在[X.509]中定义的OID。这些OID属于id-ce（证书扩展）域，定义如下：

id-ce   OBJECT IDENTIFIER ::=  { joint-iso-ccitt(2) ds(5) 29 }

4.2.1.1. 颁发者密钥标识符

颁发者密钥标识符扩展提供一种识别用于签发证书的私钥对应的公钥的方法。当颁发者拥有多个签名密钥（可能因多重并发密钥对或更换）时使用。识别可以基于密钥标识符（即颁发者证书中的主题密钥标识符）或颁发者名称和序列号。

颁发者密钥标识符扩展中的keyIdentifier字段必须包含在符合规范的CA生成的所有证书中，以便构建认证路径。唯一的例外是：当CA以“自签名”证书形式分发其公钥时，可以省略该字段。自签名证书的签名由与证书主题公钥相关的私钥生成（证明颁发者拥有公私钥对）。在这种情况下，主题和颁发者的密钥标识符会相同，但在路径构建中只需主题密钥标识符。

keyIdentifier字段的值应由用于验证证书签名的公钥或生成唯一值的方法派生。生成密钥标识符的常用方法在第4.2.1.2节中描述。若未预先建立密钥标识符，建议采用这些方法之一或类似方法（使用不同的哈希算法）生成。若已预先建立密钥标识符，CA应使用已知的标识符。

本配置文件建议所有证书用户支持密钥标识符扩展。

符合规范的CA必须将此扩展标记为非关键。

id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 35 }

AuthorityKeyIdentifier ::= SEQUENCE {
   keyIdentifier             [0] KeyIdentifier           OPTIONAL,
   authorityCertIssuer       [1] GeneralNames            OPTIONAL,
   authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL }

KeyIdentifier ::= OCTET STRING

4.2.1.2. 主题密钥标识符

主题密钥标识符扩展提供识别包含特定公钥的证书的方法。

为了便于路径构建，此扩展必须出现在所有符合规范的CA证书中，即所有包含基本约束扩展（第4.2.1.9节）且cA值为TRUE的证书。在符合规范的CA证书中，主题密钥标识符的值必须与由该证书的主题颁发的证书中的颁发者密钥标识符扩展（第4.2.1.1节）中的keyIdentifier字段的值相匹配。应用程序在路径验证时不必验证密钥标识符是否匹配。

对于CA证书，主题密钥标识符应由公钥或生成唯一值的方法派生。常用的生成方法包括：

（1）keyIdentifier由公钥的160位SHA-1哈希值组成（不包括标签、长度和未用比特数的BIT STRING值）。

（2）keyIdentifier由一个四位类型字段（值为0100）加上SHA-1哈希值的最低有效60位组成（不包括标签、长度和未用比特数的BIT STRING值）。

其他生成唯一数字的方法也被接受。

对于终端实体证书，主题密钥标识符扩展提供识别包含特定公钥的证书的手段。尤其当终端实体拥有多个证书（可能来自多个CA）时，主题密钥标识符可以快速识别包含特定公钥的证书集。为了帮助应用程序识别合适的终端实体证书，应在所有终端实体证书中包含此扩展。

终端实体证书的主题密钥标识符应由公钥派生。上述两种方法是常用的生成方式。

若未预先建立密钥标识符，建议采用上述方法之一或类似方法（使用不同的哈希算法）生成。若已预先建立，CA应使用已知的标识符。

符合规范的CA必须将此扩展标记为非关键。

id-ce-subjectKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 14 }

SubjectKeyIdentifier ::= KeyIdentifier

4.2.1.3.  密钥用法

密钥用法扩展定义了证书中密钥的用途（如加密、签名、证书签发等）。当密钥用途受到限制时，此扩展可以限制密钥的操作。例如，为了让RSA密钥仅用于验证非证书和CRL上的签名，应激活digitalSignature和/或nonRepudiation位。类似地，为了让RSA密钥仅用于密钥管理，应激活keyEncipherment位。

符合规范的CA必须在用于验证其他公钥证书或CRL的数字签名的证书中包含此扩展。当存在时，建议将此扩展标记为关键。

id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }

KeyUsage ::= BIT STRING {
   digitalSignature        (0),
   nonRepudiation          (1), -- 近期版本的X.509将此位改名为contentCommitment
   keyEncipherment         (2),
   dataEncipherment        (3),
   keyAgreement            (4),
   keyCertSign             (5),
   cRLSign                 (6),
   encipherOnly            (7),
   decipherOnly            (8) }

KeyUsage中的各位用途如下：

- digitalSignature：当公钥用于验证数字签名（除证书和CRL签名外）时激活，用于实体认证、数据源认证和/或完整性服务。

- nonRepudiation：当公钥用于验证数字签名（除证书和CRL签名外）时激活，用于提供不可否认性服务，防止签名实体虚假否认某个操作。在发生争议时，可信第三方可以验证签名数据的真实性。（注意：近期版本的X.509已将nonRepudiation改名为contentCommitment。）

- keyEncipherment：当公钥用于加密私钥或密钥（即密钥传输）时激活。例如，用于用RSA公钥加密对称内容解密密钥或非对称私钥时，应激活此位。

- dataEncipherment：当公钥用于直接加密原始用户数据（不使用中间对称密码）时激活。注意，此用途极少见，几乎所有应用都采用密钥传输或密钥协商来建立对称密钥。

当主题公钥用于密钥协商时，keyAgreement 位会被置位。例如，当要使用Diffie-Hellman密钥进行密钥管理时，此位会被设置。

当主题公钥用于验证公钥证书上的签名时，keyCertSign 位会被置位。如果该位被置位，则基本约束扩展（第4.2.1.9节）中的 cA 位也必须被置位。

当主题公钥用于验证证书吊销列表（如CRLs、Delta CRLs或ARLs）上的签名时，cRLSign 位会被置位。

在没有 keyAgreement 位的情况下，encipherOnly 位的含义未定义。当 encipherOnly 位被置位且同时设置了 keyAgreement 位时，主题公钥只能用于在密钥协商过程中进行数据加密。

在没有 keyAgreement 位的情况下，decipherOnly 位的含义未定义。当 decipherOnly 位被置位且同时设置了 keyAgreement 位时，主题公钥只能用于在密钥协商过程中进行数据解密。

如果存在 keyUsage 扩展，则除非相应的 keyCertSign 或 cRLSign 位被置位，否则主题公钥不得用于验证证书或CRL上的签名。如果主题公钥仅用于验证证书和/或CRL上的签名，则建议不要设置 digitalSignature 和 nonRepudiation 位。然而，如果主题公钥还用于验证其他对象的签名，则可以在设置 keyCertSign 和/或 cRLSign 位的同时，设置 digitalSignature 和/或 nonRepudiation 位。

在 keyUsage 证书扩展中结合使用 nonRepudiation 位与其他 keyUsage 位，可能会带来安全影响，具体取决于证书的使用场景。数字签名和不可否认性（nonRepudiation）位的具体区别可能在特定的证书策略中有所说明。

本配置文件不限制在 keyUsage 扩展中可以设置的位的组合。然而，针对特定算法，keyUsage 扩展的适当值在 [RFC3279]、[RFC4055] 和 [RFC4491] 中有具体规定。当证书中出现 keyUsage 扩展时，至少应设置其中一位为1。

---

4.2.1.4 证书策略

证书策略扩展包含一个或多个策略信息项，每个项由一个对象标识符（OID）和可选的限定符组成。可选的限定符（如果存在）不会改变策略的定义。一个证书策略的OID在扩展中不得出现多于一次。

在终端实体证书中，这些策略信息项指示证书的颁发策略及其用途。在CA证书中，这些策略信息项限制包含该证书的认证路径所允许的策略集。如果CA不希望限制认证路径中的策略集，可以声明特殊策略 anyPolicy，其值为 { 2 5 29 32 0 }。

具有特定策略要求的应用应列出其接受的策略列表，并将证书中的策略OID与该列表进行比较。如果此扩展被标记为关键，则路径验证软件必须能够解释此扩展（包括可选的限定符），否则必须拒绝该证书。

为了促进互操作性，本配置文件建议策略信息项仅由OID组成。当仅用OID不足以表达策略时，强烈建议限制限定符的使用，仅使用本节中定义的限定符。当与特殊策略 anyPolicy 一起使用限定符时，也应限制在本节中定义的限定符范围内。只有路径验证结果中返回的限定符才被视为有效。

本规范定义了两种策略限定符类型，供证书策略制定者和签发者使用：CPS指针和用户通知。

CPS指针限定符包含指向由CA发布的认证实践声明（CPS）的指针，形式为URI。对该限定符的处理要求由本地决定，本规范不强制任何操作，无论其是否为关键。

用户通知旨在在依赖方使用证书时显示。只有路径验证中返回的用户通知才应显示给用户。如果存在重复的通知，只需显示一份。为了避免重复，建议此限定符仅出现在终端实体证书和发给其他组织的CA证书中。

用户通知有两个可选字段：noticeRef 和 explicitText。符合规范的CA不应使用 noticeRef。

- noticeRef 字段（如果使用）指定一个组织及其编号，指向该组织准备的特定文本声明。例如，可能指向“CertsRUs”组织的通知编号1。通常，应用软件会有一个通知文件，存放CertsRUs的所有通知，软件从中提取通知文本并显示。通知可以多语言，软件可根据环境选择相应语言。

- explicitText 字段直接在证书中包含文本声明，最大长度为200字符。符合规范的CA应使用UTF8String编码，但也可以使用IA5String。不得将explicitText编码为VisibleString或BMPString。该字符串不应包含控制字符（如U+0000至U+001F和U+007F至U+009F）。使用UTF8String编码时，应按照Unicode规范的规范化形式C（NFC）进行标准化。

如果在一个限定符中同时包含 noticeRef 和 explicitText，且应用软件能找到 noticeRef 指示的通知文本，则应显示该文本；否则，应显示 explicitText。

注意：虽然 explicitText 最大为200字符，但一些不符合规范的CA可能超出此限制。因此，证书用户应能优雅处理超过200字符的explicitText。

---

4.2.1.5  策略映射

此扩展用于CA证书，列出一对或多对OID，分别为 issuerDomainPolicy 和 subjectDomainPolicy。该配对表示，签发CA认为其 issuerDomainPolicy 等同于目标CA的 subjectDomainPolicy。

某些应用中，用户可能接受某些应用的 issuerDomainPolicy。策略映射定义了与目标CA相关联的策略列表，这些策略可以被接受为与 issuerDomainPolicy 相当。

在策略映射扩展中列出的每个 issuerDomainPolicy，理应也在同一证书的证书策略扩展中声明。策略不得映射到或从特殊值 anyPolicy（第4.2.1.4节）中。

通常，出现在 policyMappings 扩展中的 issuerDomainPolicy 不被视为后续证书中可接受的策略。在某些情况下，CA可能希望将一个策略（p1）映射到另一个策略（p2），但仍希望 p1 被视为后续证书中可接受的策略。例如，CA在从策略p1过渡到策略p2的过程中，可能会在其签发的证书中包含两个策略映射：一个映射中的 issuerDomainPolicy为p1，另一个映射中的 subjectDomainPolicy分别为p1和p2。

此扩展可以由CA和/或应用支持。符合规范的CA应将此扩展标记为关键。

id-ce-policyMappings对象标识符定义如下：
- id-ce OBJECT IDENTIFIER ::= { id-ce 33 }
- PolicyMappings ::= 序列（大小为1到MAX）包含多个序列，每个序列包括：
  - issuerDomainPolicy（CertPolicyId）
  - subjectDomainPolicy（CertPolicyId）

---

4.2.1.6  主题备用名称

主题备用名称扩展允许在证书中绑定多个身份。这些身份可以附加在主题字段之外或替代主题字段中的身份。定义的选项包括电子邮件地址、DNS名称、IP地址和统一资源标识符（URI）。也可以定义其他本地选项。可以包含多种名称形式及多重实例。若要在证书中绑定此类身份，必须使用主题备用名称（或发行人备用名称）扩展；但也可以在主题字段中用domainComponent属性表示DNS名称（详见第4.1.2.4节）。注意，使用主题字段表示的名称，实施时不要求转换为DNS名称。

由于主题备用名称被视为与公钥的绑定是确定无疑的，CA必须验证备用名称的所有部分。

此外，如果证书中唯一的主题身份是备用名称（如电子邮件地址），则主题名称（DN）必须为空（空序列），且必须包含主题备用名称扩展。如果主题字段为空序列，则发行CA必须包含一个标记为关键的主题备用名称扩展。在包含非空主题名称的证书中，符合规范的CA应将主题备用名称扩展标记为非关键。

当主题备用名称包含电子邮件地址时，地址必须存储在 rfc822Name 中。rfc822Name的格式为“Mailbox”，定义在 [RFC2821]的第4.1.2节中。Mailbox的格式为“本地部分@域名”。注意，Mailbox前没有短语（如通用名），后没有括号中的注释，也不被 "<" 和 ">" 包围。国际化域名的电子邮件地址编码规则详见第7.5节。

当主题备用名称包含IP地址时，地址必须以“网络字节序”的八位字节字符串存储，符合 [RFC791]的规定。每个字节的最低有效位（LSB）对应网络地址中的相应字节。对于IPv4（[RFC791]定义），必须恰好4个字节；对于IPv6（[RFC2460]定义），必须恰好16个字节。

当subjectAltName扩展包含域名系统标签时，域名必须存储在dNSName（一个IA5String）中。该名称必须采用[RFC1034]第3.5节规定的“首选名称语法”，并根据[RFC1123]第2.1节的修改进行调整。请注意，虽然域名中允许使用大写和小写字母，但对大小写不赋予任何意义。

此外，虽然字符串“ ”是合法的域名，但带有dNSName为“ ”的subjectAltName扩展不得使用。最后，不得使用互联网邮件地址的DNS表示（例如使用subscriber.example.com而非subscriber@example.com）；此类身份应编码为rfc822Name。关于国际化域名的编码规则，详见第7.2节。

当subjectAltName扩展包含URI时，名称必须存储在uniformResourceIdentifier（一个IA5String）中。该名称不得为相对URI，且必须遵循[RFC3986]中规定的URI语法和编码规则。名称必须包括方案（如“http”或“ftp”）以及方案特定部分。包含权限（[RFC3986]第3.2节）的URI必须包括完全限定的域名或IP地址作为主机。关于国际化资源标识符（IRI）的编码规则，详见第7.4节。

根据[RFC3986]，方案名不区分大小写（例如“http”与“HTTP”相等）。如果存在主机部分，也不区分大小写，但方案特定部分的其他组成部分可能区分大小写。URI的比较规则详见第7.4节。

当subjectAltName扩展包含目录名（DN）时，编码规则与第4.1.2.4节中规定的发行者字段相同。每个由同一CA认证的主体实体的DN必须唯一。CA可以对同一主体实体颁发多个具有相同DN的证书。

subjectAltName还可以通过otherName字段携带其他类型的名称。名称的格式和语义由type-id字段中的对象标识符（OID）指示。名称本身作为otherName中的value字段传达。例如，Kerberos [RFC4120]格式的名称可以编码到otherName中，使用Kerberos 5主体名的OID以及Realm和PrincipalName的序列。

subjectAltName可以通过使用第4.2.1.10节描述的名称约束扩展，受到与主体区分名相同的限制。

如果存在subjectAltName扩展，序列中必须至少包含一个条目。与主体字段不同，符合规范的CA不得颁发subjectAltNames中包含空GeneralName字段的证书。例如，rfc822Name以IA5String表示。虽然空字符串是有效的IA5String，但此配置在本规范中不被允许。遇到此类证书时，客户端在处理路径时的行为未在本规范中定义。

最后，关于包含通配符字符（如占位符表示一组名称）的subject alternative names的语义，本规范未作规定。具有特定需求的应用可以使用此类名称，但必须定义其语义。

id-ce-subjectAltName对象标识符为：{id-ce 17}

SubjectAltName ::= GeneralNames

GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName

GeneralName可以选择以下类型：
- otherName [0] OtherName
- rfc822Name [1] IA5String
- dNSName [2] IA5String
- x400Address [3] ORAddress
- directoryName [4] Name
- ediPartyName [5] EDIPartyName
- uniformResourceIdentifier [6] IA5String
- iPAddress [7] OCTET STRING
- registeredID [8] OBJECT IDENTIFIER

OtherName ::= SEQUENCE {
  type-id OBJECT IDENTIFIER,
  value [0] EXPLICIT ANY DEFINED BY type-id }

EDIPartyName ::= SEQUENCE {
  nameAssigner [0] DirectoryString OPTIONAL,
  partyName [1] DirectoryString }

4.2.1.7. 发行者备用名称

与第4.2.1.6节相同，此扩展用于将互联网风格的身份与证书发行者关联。发行者备用名称必须按照第4.2.1.6节的编码方式进行编码。发行者备用名称不作为路径验证算法的一部分进行处理（即，不用于名称链和名称约束的强制执行）。

如果存在，符合规范的CA应将此扩展标记为非关键。

id-ce-issuerAltName OBJECT IDENTIFIER ::= {id-ce 18}

IssuerAltName ::= GeneralNames

4.2.1.8. 主题目录属性

主题目录属性扩展用于传达主体的识别属性（如国籍）。该扩展定义为一个或多个属性的序列。符合规范的CA必须将此扩展标记为非关键。

id-ce-subjectDirectoryAttributes OBJECT IDENTIFIER ::= {id-ce 9}

SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute

4.2.1.9. 基本约束

基本约束扩展用于指示证书的主体是否为CA，以及包含此证书的有效认证路径的最大深度。

cA布尔值指示认证的公钥是否可用于验证证书签名。如果未声明cA布尔值，则keyUsage扩展中的keyCertSign位不得声明。如果在版本3证书中未包含基本约束扩展，或包含但未声明cA布尔值，则不得使用该公钥验证证书签名。

pathLenConstraint字段仅在cA布尔值声明且keyUsage扩展（如果存在）声明keyCertSign位时有意义。在这种情况下，它表示在有效路径中，紧随此证书之后的非自签中间证书的最大数量（注意：路径中的最后一个证书不是中间证书，也不计入此限制，通常是终端实体证书，但也可能是CA证书）。pathLenConstraint为零表示在有效路径中不得有非自签中间CA证书。该字段必须大于或等于零；如果未出现，则不设限制。

符合规范的CA必须在所有用于验证证书数字签名的CA证书中包含此扩展，并将其标记为关键。此扩展也可以在仅用于其他目的（非验证数字签名）的CA证书中作为关键或非关键扩展出现。此类证书包括仅用于验证CRL数字签名的公钥和用于证书注册协议的密钥管理公钥。终端实体证书中此扩展也可以作为关键或非关键。

CA不得在cA布尔值未声明且keyUsage扩展未声明keyCertSign位时包含pathLenConstraint字段。

id-ce-basicConstraints OBJECT IDENTIFIER ::= {id-ce 19}

BasicConstraints ::= SEQUENCE {
  cA BOOLEAN DEFAULT FALSE,
  pathLenConstraint INTEGER (0..MAX) OPTIONAL }

4.2.1.10. 名称约束

名称约束扩展（仅应在CA证书中使用）指示在后续证书的认证路径中，所有主体名称必须位于的名称空间内。限制适用于主体区分名和主体备用名称。仅在指定的名称形式存在时，限制才生效。如果证书中没有该类型的名称，则该证书是可接受的。

名称约束不应用于自签名证书（除非该证书是路径中的最后一个证书）。这可能阻止使用名称约束的CA使用自签名证书实现密钥轮换。

限制以允许或排除的名称子树的形式定义。任何匹配excludedSubtrees字段中限制的名称，无论在permittedSubtrees中是否出现，都是无效的。符合规范的CA必须将此扩展标记为关键，并且不应对x400Address、ediPartyName或registeredID名称形式施加名称约束。符合规范的CA不得颁发名称约束为空序列的证书，即，permittedSubtrees或excludedSubtrees必须存在其一。

符合本规范的应用程序必须能够处理施加在directoryName名称形式上的名称约束，并应能处理施加在rfc822Name、uniformResourceIdentifier、dNSName和iPAddress名称形式上的约束。如果关键标记的名称约束扩展对某一名称形式施加了限制，而后续证书的主体字段或subjectAltName扩展中出现了该名称形式的实例，则应用程序必须要么处理该限制，要么拒绝该证书。

在本规范中，minimum和maximum字段不用于任何名称形式，因此，minimum必须为零，maximum必须不存在。然而，如果应用程序遇到关键的名称约束扩展，规定了后续证书中某一名称形式的其他值（如minimum或maximum），则必须要么处理这些字段，要么拒绝证书。

对于URI，限制适用于名称的主机部分。限制必须以完全限定域名的形式指定，可以指定主机或域。例如，“host.example.com”和“.example.com”。当限制以点开头时，可以用一个或多个标签扩展。例如，“.example.com”既满足“host.example.com”，也满足“my.host.example.com”，但不满足“example.com”。当限制不以点开头时，表示一个主机。如果将限制应用于uniformResourceIdentifier名称形式，且后续证书中的subjectAltName扩展包含未包括完全限定域名的authority部分的URI，则应用程序必须拒绝该证书。

互联网邮件地址的名称约束可以指定特定邮箱、某个主机的所有地址或某个域中的所有邮箱。要指示特定邮箱，限制为完整的邮件地址，例如“root@example.com”，表示“example.com”主机上的根邮箱。要指示某个主机的所有互联网邮件地址，限制以主机名表示，例如“example.com”，满足该主机上的任何邮件地址。要表示域内的任何地址，限制以点开头（如URI），例如“.example.com”，表示“example.com”域中的所有互联网邮件地址，但不包括“example.com”主机上的地址。

DNS名称限制以host.example.com的形式表达。任何通过在名称左侧添加零个或多个标签构造的DNS名称都满足该限制。例如，www.host.example.com满足限制，而host1.example.com不满足。

存在一些遗留实现，其中电子邮件地址嵌入在主题区分名的emailAddress属性中（第4.1.2.6节）。当对rfc822Name名称形式施加限制，但证书未包含主题备用名称时，必须将rfc822Name限制应用于主题区分名中的emailAddress属性。emailAddress的ASN.1语法和对应的OID在附录A中提供。

以下是英文内容的中文流畅翻译：

---

必须对证书中的 subject 字段（当证书包含非空 subject 字段时）以及 subjectAltName 扩展中的任何类型为 directoryName 的名称应用形式为 directoryName 的限制。对于 x400Address 类型的名称，必须在 subjectAltName 扩展中应用 x400Address 形式的限制。

在应用 directoryName 形式的限制时，实施者必须比较 DN（Distinguished Name）属性。至少，实施者必须按照第7.1节中规定的 DN 比较规则进行比较。颁发具有此类限制的证书的证书授权机构（CA）不应依赖于完整的 ISO DN 名称比较算法的实现。这意味着，名称限制必须与在 subject 字段或 subjectAltName 扩展中使用的编码方式完全一致。

iPAddress 的语法必须符合第4.2.1.6节的描述，并为名称约束特别添加以下内容。对于 IPv4 地址，GeneralName 中的 iPAddress 字段必须包含八个（8）字节，采用 RFC 4632（CIDR）样式编码，以表示地址范围 [RFC4632]。对于 IPv6 地址，iPAddress 字段必须包含 32 个字节，采用类似编码。例如，"class C" 子网 192.0.2.0 的名称约束可表示为字节 C0 00 02 00 FF FF FF 00，代表 CIDR 表示法 192.0.2.0/24（掩码 255.255.255.0）。

关于名称约束的编码和处理的其他规则在第7节中有详细说明。

其他名称（otherName）、ediPartyName 和注册ID（registeredID）对应的名称约束的语法和语义未在本规范中定义，但其他文档可能会规定这些名称形式的名称约束的语法和语义。

```
id-ce-nameConstraints OBJECT IDENTIFIER ::= { id-ce 30 }

NameConstraints ::= SEQUENCE {
     permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
     excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }

GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree

Cooper 等人，等，标准追踪 [第42页]

RFC 5280  PKIX 证书与 CRL 配置文件 2008年5月

GeneralSubtree ::= SEQUENCE {
     base                    GeneralName,
     minimum         [0]     BaseDistance DEFAULT 0,
     maximum         [1]     BaseDistance OPTIONAL }

BaseDistance ::= INTEGER (0..MAX)
```

### 4.2.1.11. 策略约束（Policy Constraints）

策略约束扩展可以在颁发给 CA 的证书中使用。该扩展通过两种方式限制路径验证：一是禁止策略映射，二是要求路径中的每个证书都包含可接受的策略标识符。

如果存在 inhibitPolicyMapping 字段，其值表示在策略映射不再允许之前，路径中可以出现的附加证书数量。例如，值为1表示策略映射可以在由本证书的主体颁发的证书中处理，但在路径中的其他证书中不允许。

如果存在 requireExplicitPolicy 字段，其值表示在整个路径中需要显式策略之前，可以出现的附加证书数量。当需要显式策略时，路径中的所有证书都必须在证书策略扩展中包含可接受的策略标识符。可接受的策略标识符是用户所需的策略标识符，或通过策略映射声明为等价的策略。

符合规范的应用程序必须能够处理 requireExplicitPolicy 字段，并应能处理 inhibitPolicyMapping 字段。支持 inhibitPolicyMapping 字段的应用程序还必须实现对 policyMappings 扩展的支持。如果 policyConstraints 扩展被标记为关键且存在 inhibitPolicyMapping 字段，则未实现支持该字段的应用程序必须拒绝该证书。

符合规范的 CA 不得颁发 policyConstraints 为空序列的证书。也就是说，必须存在 inhibitPolicyMapping 或 requireExplicitPolicy 字段。遇到空的策略约束字段时，客户端的行为未在本配置文件中规定。

符合规范的 CA 必须将此扩展标记为关键。

```
id-ce-policyConstraints OBJECT IDENTIFIER ::= { id-ce 36 }

PolicyConstraints ::= SEQUENCE {
     requireExplicitPolicy           [0] SkipCerts OPTIONAL,
     inhibitPolicyMapping            [1] SkipCerts OPTIONAL }

SkipCerts ::= INTEGER (0..MAX)
```

### 4.2.1.12. 扩展密钥用法（Extended Key Usage）

此扩展指示证书的公钥可以用于一个或多个目的，作为密钥用法（key usage）扩展的补充或替代。通常，此扩展只出现在终端实体证书中。其定义如下：

```
id-ce-extKeyUsage OBJECT IDENTIFIER ::= { id-ce 37 }

ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId

KeyPurposeId ::= OBJECT IDENTIFIER
```

密钥用途可以由任何有需求的组织定义。用于标识密钥用途的对象标识符（OID）必须按照 IANA 或 ITU-T 推荐 X.660 [X.660] 进行分配。

此扩展可以由证书颁发者选择标记为关键或非关键。

如果存在此扩展，证书只能用于其中指示的目的。如果指示多个目的，应用程序不必识别所有目的，只要包含预期的目的即可。使用此扩展的证书应用可能会要求扩展密钥用法扩展必须存在，并且必须指明特定的用途，才能被该应用接受。

如果 CA 包含扩展密钥用法以满足这些应用，但不希望限制密钥的用途，可以在特定用途之外，额外包含特殊的 KeyPurposeId：anyExtendedKeyUsage。符合规范的 CA 不应将此扩展标记为关键。如果存在此 KeyPurposeId，应用程序可能会拒绝包含此 OID 但不包含特定用途 OID 的证书。

如果证书同时包含密钥用法扩展和扩展密钥用法扩展，则两个扩展都必须被独立处理，且证书只能用于同时符合两个扩展的目的。如果没有共同的用途，则该证书不得用于任何目的。

定义的密钥用途包括：

```
anyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 }

id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }

id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 }
-- TLS 服务器身份验证
-- 可能符合的密钥用法：digitalSignature、keyEncipherment 或 keyAgreement

id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 }
-- TLS 客户端身份验证
-- 可能符合的密钥用法：digitalSignature 和/或 keyAgreement

id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 }
-- 代码签名（可下载执行代码）
-- 可能符合的密钥用法：digitalSignature

id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 }
-- 电子邮件保护
-- 可能符合的密钥用法：digitalSignature、nonRepudiation 和/或 (keyEncipherment 或 keyAgreement)

id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 }
-- 时间戳绑定
-- 可能符合的密钥用法：digitalSignature 和/或 nonRepudiation

id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }
-- OCSP 响应签名
-- 可能符合的密钥用法：digitalSignature 和/或 nonRepudiation
```

### 4.2.1.13. CRL 分发点（CRL Distribution Points）

CRL 分发点扩展标识如何获取 CRL 信息。该扩展应为非关键，但本配置文件建议 CA 和应用程序支持此扩展。关于 CRL 管理的详细讨论在第5节中。

cRLDistributionPoints 扩展是一个包含多个 DistributionPoint 的序列。每个 DistributionPoint 由三个可选字段组成：distributionPoint、reasons 和 cRLIssuer。虽然这些字段都是可选的，但一个 DistributionPoint 不能只包含 reasons 字段；必须包含 distributionPoint 或 cRLIssuer。如果证书的颁发者不是 CRL 的颁发者，则必须包含 cRLIssuer 字段，并指明 CRL 颁发者的名称。如果证书的颁发者也是 CRL 的颁发者，则符合规范的 CA 必须省略 cRLIssuer 字段，并包含 distributionPoint 字段。

当存在 distributionPoint 字段时，它可以是一个包含多个通用名称的序列，或是一个单一值 nameRelativeToCRLIssuer。如果包含多个值，每个名称描述获取相同 CRL 的不同机制，例如通过 LDAP 和 HTTP。

如果该字段为 directoryName，则该目录的条目包含当前的 CRL（针对相关 reasons），且由相关的 cRLIssuer 颁发。CRL 可以存储在 certificateRevocationList 或 authorityRevocationList 属性中。应用程序应从本地配置的目录服务器获取 CRL，访问协议（如 DAP 或 LDAP）由本地决定。

如果该字段为 URI 类型的通用名称，则必须假定：URI 指向相关 reasons 的当前 CRL，由相关的 cRLIssuer 颁发。当使用 HTTP 或 FTP URI scheme 时，URI 必须指向一个单一的 DER 编码的 CRL，符合 [RFC2585] 的规定。通过 URI 访问的 HTTP 服务器应在响应的 content-type 头中指定 media type 为 application/pkix-crl。当使用 LDAP URI scheme [RFC4516] 时，URI 必须包含一个 <dn> 字段，指明存放 CRL 的条目的区别名（DN）；还应包含一个 <attrdesc>，描述存放 CRL 的属性（符合 [RFC4523]）；并建议包含一个 <host>（例如：<ldap://ldap.example.com/cn=example%20CA,dc=example,dc=com?certificateRevocationList;binary>）。省略 <host>（如：<ldap:///cn=CA,dc=example,dc=com?authorityRevocationList;binary>）则依赖客户端预先知道联系合适的服务器。存在时，DistributionPointName 至少应包含一个 LDAP 或 HTTP URI。

如果该字段为 nameRelativeToCRLIssuer，则值为一个区别名片段（DN fragment），该片段附加到 CRL 颁发者的 X.500 区分名（DN）上以形成分发点名称。如果 DistributionPoint 中的 cRLIssuer 字段存在，则名称片段附加到该字段中的区别名；否则，附加到证书颁发者的区别名。符合规范的 CA 不应使用 nameRelativeToCRLIssuer 来指定分发点名称。当 cRLIssuer 包含多个区别名时，DistributionPointName 不得使用此方式。

如果省略 reasons 字段，则 CRL 必须包含所有原因的吊销信息。建议不要按原因码对 CRL 进行分段。当符合规范的 CA 在证书中包含 cRLDistributionPoints 扩展时，必须至少包含一个指向覆盖所有原因的 CRL 的分发点。

cRLIssuer 标识签发和颁发 CRL 的实体。如果存在，cRLIssuer 只能包含指向该 CRL 的发行者字段（DN），且编码必须与 CRL 中的 issuer 字段完全一致。如果包含且该 DN 不对应存放 CRL 的 X.500 或 LDAP 目录条目，则必须包含 distributionPoint 字段。

```
id-ce-cRLDistributionPoints OBJECT IDENTIFIER ::= { id-ce 31 }

CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint

DistributionPoint ::= SEQUENCE {
     distributionPoint       [0]     DistributionPointName OPTIONAL,
     reasons                 [1]     ReasonFlags OPTIONAL,
     cRLIssuer               [2]     GeneralNames OPTIONAL }

DistributionPointName ::= CHOICE {
     fullName                [0]     GeneralNames,
     nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }

ReasonFlags ::= BIT STRING {
     unused                  (0),
     keyCompromise           (1),
     cACompromise            (2),
     affiliationChanged      (3),
     superseded              (4),
     cessationOfOperation    (5),
     certificateHold         (6),
     privilegeWithdrawn      (7),
     aACompromise            (8) }
```

---

以上为全文的中文翻译。

inhibit anyPolicy 扩展可以用于颁发给证书颁发机构（CAs）的证书中。该扩展指示特殊的 anyPolicy OID（值为 { 2 5 29 32 0 }）不会被视为其他证书策略的明确匹配，除非它出现在中间自签名CA证书中。该值表示在路径中可能出现的非自签名证书的额外数量，超过这个数量后，anyPolicy 就不再被允许。例如，值为一表示在由该证书的主题颁发的证书中可以处理 anyPolicy，但在路径中的其他证书中则不行。

符合规范的CA必须将此扩展标记为关键。

id-ce-inhibitAnyPolicy  OBJECT IDENTIFIER ::=  { id-ce 54 }

InhibitAnyPolicy  ::=  SkipCerts

SkipCerts  ::=  INTEGER (0..MAX)

4.2.1.15.  最新CRL（又名Delta CRL分发点）

最新CRL扩展标识如何获取Delta CRL信息。符合规范的CA必须将此扩展标记为非关键。关于CRL管理的更多讨论请参见第5节。

此扩展与cRLDistributionPoints扩展使用相同的语法，详见第4.2.1.13节。两者遵循相同的约定。

id-ce-freshestCRL  OBJECT IDENTIFIER ::=  { id-ce 46 }

FreshestCRL  ::=  CRLDistributionPoints

---

合作等人，标准追踪 [第48页]

RFC 5280  PKIX 证书与CRL配置文件 2008年5月

---

4.2.2.  私有互联网扩展

本节定义了两个用于互联网公共密钥基础设施（PKI）的扩展。这些扩展可用于引导应用程序访问关于颁发者或主题的在线信息。每个扩展包含一系列访问方法和访问位置。访问方法是一个对象标识符，指示可用信息的类型；访问位置是一个GeneralName，隐含地指定信息的位置和格式，以及获取信息的方法。

私有扩展的对象标识符在id-pe弧下定义，属于id-pkix弧。未来为互联网PKI定义的扩展也预计在id-pe弧下定义。

      id-pkix  OBJECT IDENTIFIER  ::=
               { iso(1) 其他组织(3) dod(6) 互联网(1)
                       安全(5) 机制(5) pkix(7) }

      id-pe  OBJECT IDENTIFIER  ::=  { id-pkix 1 }

---

4.2.2.1.  颁发者信息访问（Authority Information Access）

该扩展指示如何访问证书颁发者的相关信息和服务，包括在线验证服务和CA策略数据（CRL位置未在此扩展中指定，相关信息由cRLDistributionPoints扩展提供）。此扩展可包含在终端实体或CA证书中。符合规范的CA必须将此扩展标记为非关键。

id-pe-authorityInfoAccess  OBJECT IDENTIFIER ::= { id-pe 1 }

AuthorityInfoAccessSyntax  ::=  SEQUENCE  {  SIZE (1..MAX) OF  AccessDescription  }

AccessDescription  ::=  SEQUENCE  {
           accessMethod          OBJECT IDENTIFIER,
           accessLocation        GeneralName  }

id-ad  OBJECT IDENTIFIER ::= { id-pkix 48 }

id-ad-caIssuers  OBJECT IDENTIFIER ::= { id-ad 2 }

id-ad-ocsp  OBJECT IDENTIFIER ::= { id-ad 1 }

每个AuthorityInfoAccessSyntax序列中的条目描述了由证书颁发者提供的附加信息的格式和位置。信息的类型和格式由accessMethod字段指定；accessLocation字段指定信息的位置。检索机制可以由accessMethod暗示，也可以由accessLocation指定。

此配置文件定义了两个accessMethod OID：id-ad-caIssuers和id-ad-ocsp。

在公钥证书中，当附加信息列出颁发该证书的CA的证书时，id-ad-caIssuers OID被使用。引用的CA发行者描述旨在帮助证书用户选择以受信任点终止的认证路径。

当accessMethod为id-ad-caIssuers时，accessLocation描述引用的描述服务器和获取描述的协议。accessLocation定义为GeneralName，可以有多种形式。

如果accessLocation为directoryName，信息由应用程序从本地配置的目录服务器获取。目录名条目中包含的CA证书在crossCertificatePair和/或cACertificate属性中（详见[RFC4523]）。访问目录的协议（如DAP或LDAP）由本地决定。

如果信息通过LDAP提供，accessLocation应为统一资源标识符（URI）。LDAP URI [RFC4516]必须包含一个<dn>字段，指示存放证书的条目的区别名（DN）；还必须包含<attributes>字段，列出存放DER编码证书或交叉证书对的相关属性描述；还应包含<host>（例如<ldap://ldap.example.com/cn=CA,dc=example,dc=com?cACertificate;binary,crossCertificatePair;binary>）。省略<host>（如<ldap:///cn=exampleCA,dc=example,dc=com?cACertificate;binary>）意味着依赖客户端已有的先验知识联系合适的服务器。

如果信息通过HTTP或FTP提供，accessLocation必须为URI，且URI应指向单个DER编码证书（详见[RFC2585]）或以BER/DER编码的“仅证书”CMS消息（详见[RFC2797]）。支持HTTP或FTP访问证书的应用程序必须能接受单个DER编码证书，并应能接受“仅证书”CMS消息。

通过URI访问的HTTP服务器应在响应的Content-Type头中指定媒体类型：单个DER证书应为application/pkix-cert [RFC2585]，而“仅证书”CMS消息应为application/pkcs7-mime [RFC2797]。FTP文件名应以“.cer”结尾（符合[RFC2585]），包含单个DER证书；以“.p7c”结尾（符合[RFC2797]），包含“仅证书”CMS消息。客户端可以根据媒体类型或文件扩展名猜测内容，但不应仅依赖于此。

其他形式的id-ad-caIssuers访问位置的语义未定义。

一个authorityInfoAccess扩展可以包含多个id-ad-caIssuers实例。这些实例可以指向不同信息或采用不同访问方法。当使用id-ad-caIssuers时，至少应有一个实例的accessLocation为HTTP [RFC2616]或LDAP [RFC4516] URI。

id-ad-ocsp OID用于当撤销信息通过在线证书状态协议（OCSP）[RFC2560]提供时。

当id-ad-ocsp作为accessMethod出现时，accessLocation字段指示OCSP响应器的位置，遵循[RFC2560]中的约定。

其他访问描述符可能在其他PKIX规范中定义。

---

4.2.2.2.  主题信息访问（Subject Information Access）

该扩展指示如何访问证书主题的相关信息和服务。当主题为CA时，信息和服务可能包括证书验证服务和CA策略数据；当主题为终端实体时，描述所提供服务的类型及其访问方式。在这种情况下，扩展内容由支持的服务协议定义。

此扩展可包含在终端实体或CA证书中。符合规范的CA必须将此扩展标记为非关键。

id-pe-subjectInfoAccess  OBJECT IDENTIFIER ::= { id-pe 11 }

SubjectInfoAccessSyntax  ::=  SEQUENCE  {  SIZE (1..MAX) OF  AccessDescription  }

AccessDescription  ::=  SEQUENCE  {
           accessMethod          OBJECT IDENTIFIER,
           accessLocation        GeneralName  }

每个SubjectInfoAccessSyntax条目描述了由证书主题提供的附加信息的格式和位置。信息的类型和格式由accessMethod字段指定；accessLocation字段指定信息位置。信息检索机制可以由accessMethod暗示，也可以由accessLocation指定。

此配置文件定义了两个访问方法：一个用于CA（id-ad-caRepository），一个用于终端实体（未在此段中具体列出）。未来可能在其他服务的协议规范中定义更多。

当主题为CA且发布其颁发证书的存储库时，使用id-ad-caRepository OID。accessLocation为GeneralName，可以有多种形式。

如果为directoryName，信息由应用程序从本地配置的目录服务器获取。目录名中包含的CA证书在crossCertificatePair和/或cACertificate属性中（详见[RFC4523]）。访问目录的协议（如DAP或LDAP）由本地决定。

如果通过LDAP，accessLocation应为URI，必须包含<dn>（存放证书的条目区别名）和<attributes>（列出存放DER编码证书或交叉证书对的属性描述）字段，还应包含<host>（如<ldap://ldap.example.com/cn=CA,dc=example,dc=com?cACertificate;binary,crossCertificatePair;binary>）。省略<host>意味着依赖客户端已有的先验知识联系服务器。

如果信息通过HTTP或FTP提供，accessLocation必须为URI，指向单个DER证书或“仅证书”CMS消息（详见前述）。客户端应能接受这些内容，但不应仅依赖媒体类型或文件扩展名。

其他形式的访问位置语义未定义。

一个subjectInfoAccess扩展可以包含多个实例，指向不同信息或采用不同访问方法。至少应有一个实例的accessLocation为HTTP或LDAP URI。

当提供时间戳服务（使用[RFC3161]定义的时间戳协议）时，id-ad-timeStamping OID被使用。若通过HTTP或FTP提供，accessLocation为URI；若通过电子邮件提供，必须为rfc822Name；若通过TCP/IP提供，可用dNSName或iPAddress。其他名称形式的语义未在本规范中定义。

其他PKIX规范中可能定义更多访问描述符。

id-ad  OBJECT IDENTIFIER ::= { id-pkix 48 }

id-ad-caRepository  OBJECT IDENTIFIER ::= { id-ad 5 }

id-ad-timeStamping  OBJECT IDENTIFIER ::= { id-ad 3 }

---

5.  CRL及CRL扩展配置文件

正如上文所述，此X.509 v2 CRL（证书吊销列表）配置文件的目标之一是促进互联网公钥基础设施（PKI）的互操作性和可重用性。为了实现这一目标，规范了扩展的使用指南，并对CRL中包含信息的性质做出了一些假设。

CRL可以在各种应用和环境中使用，涵盖广泛的互操作性目标，以及更为广泛的操作和保证要求。本配置文件为需要广泛互操作性的通用应用建立了一个共同的基础。该配置文件定义了一组在每个CRL中都可以预期包含的信息，同时也定义了CRL中常用属性的常见位置以及这些属性的常见表示方式。

CRL由CRL发行者发布。发行者可以是证书颁发机构（CA），也可以是经CA授权的实体。CA发布CRL以提供其颁发证书的状态信息，但CA也可以将此责任委托给其他受信任的权威机构。

每个CRL都有特定的范围。CRL的范围是指可能出现在该CRL上的证书集合。例如，范围可以是“由CA X颁发的所有证书”、“由CA X颁发的所有CA证书”、“因密钥泄露或CA被攻破而被吊销的由CA X颁发的所有证书”，或者基于任意本地信息的证书集合，比如“位于博尔德的NIST员工所持有的所有证书”。

完整的CRL列出在其范围内所有未过期且因CRL范围内涵盖的原因被吊销的证书。一个完整的CRL列出由某个CA颁发的所有未过期证书，无论吊销原因如何（注意，由于CA和CRL发行者是通过名称识别的，CRL的范围不受签名所用密钥或签名证书的影响）。

如果CRL的范围包括由除CRL发行者之外的实体颁发的一个或多个证书，则该CRL为间接CRL。间接CRL的范围可以限制为由单一CA颁发的证书，也可以包括由多个CA颁发的证书。如果间接CRL的发行者是CA，则其范围也可以包括由CRL发行者自己颁发的证书。

CRL发行者还可以生成增量CRL（delta CRL）。增量CRL仅列出自引用的完整CRL发行以来状态发生变化的证书。引用的完整CRL称为基础CRL。增量CRL的范围必须与其引用的基础CRL相同。

本配置文件定义了一个私有互联网CRL扩展，但未定义任何私有CRL条目扩展。

具有额外或特殊用途需求的环境可以在此基础上构建，或用其他配置取代。

符合规范的CA在提供其他吊销或证书状态机制的情况下，不必非得发布CRL。当发布CRL时，CRL必须是版本2的，必须在nextUpdate字段中包含下一次CRL发行的日期，必须包含CRL编号扩展和颁发者密钥标识符扩展。支持CRL的符合应用程序必须处理提供所有由单一CA颁发的证书吊销信息的版本1和版本2完整CRL。应用程序不必支持增量CRL、间接CRL或范围非仅限于由单一CA颁发的CRL。

5.1 CRL字段

X.509 v2 CRL的语法如下。签名计算时，待签名的数据须进行ASN.1 DER编码。ASN.1 DER编码是一种标签、长度和值的编码系统。

（此处省略了具体的ASN.1结构定义，详细内容请参见原文。）

该结构包括：证书列表（CertificateList）、签名算法（signatureAlgorithm）和签名值（signatureValue）等字段。

以下内容描述了X.509 v2 CRL在互联网PKI中的使用。

5.1.1 证书列表字段

证书列表（CertificateList）是由三个必需字段组成的序列，详细描述见后续子节。

5.1.1.1 tbsCertList

序列中的第一个字段是tbsCertList（待签名的证书列表）。它本身也是一个序列，包含发行者名称、发行日期、下一次列表的发行日期、可选的吊销证书列表以及可选的CRL扩展。当没有吊销证书时，吊销证书列表为空；当有吊销证书时，每个条目由用户证书序列号、吊销日期和可选的CRL条目扩展组成。

（后续内容省略，详见原文。）

---

以上为该英文内容的中文翻译。

ANSI X9、ISO/IEC 和 ITU-T 为 X.509 v2 CRL（证书吊销列表）定义的扩展 [X.509][X9.55] 提供了将附加属性与 CRL 相关联的方法。X.509 v2 CRL 格式还允许社区定义私有扩展，以携带那些社区特有的信息。CRL 中的每个扩展可以被标记为关键（critical）或非关键（non-critical）。如果 CRL 中包含应用程序无法处理的关键扩展，则该应用程序必须不使用该 CRL 来判断证书状态。然而，应用程序可以忽略未被识别的非关键扩展。以下各节介绍了在互联网 CRL 中使用的扩展。社区也可以选择在 CRL 中加入本规范未定义的扩展，但在采用任何可能在一般环境中使用的关键扩展时，应谨慎行事。

符合规范的 CRL 发行者必须在所有发行的 CRL 中包含授权密钥标识符（第5.2.1节）和 CRL 编号（第5.2.3节）扩展。

5.2.1. 授权密钥标识符

授权密钥标识符扩展提供了一种识别用于签发 CRL 的私钥对应的公钥的方法。识别可以基于密钥标识符（即 CRL 签发者证书中的主题密钥标识符）或基于发行者名称和序列号。此扩展在发行者拥有多个签名密钥（如多重并发密钥对或更换密钥）时尤为有用。

符合规范的 CRL 发行者必须使用密钥标识符方法，并在所有发行的 CRL 中包含此扩展。

该 CRL 扩展的语法定义在第4.2.1.1节。

5.2.2. 发行者备用名称

发行者备用名称扩展允许将额外的身份信息与 CRL 的发行者关联。定义的选项包括电子邮件地址（rfc822Name）、DNS 名称、IP 地址和 URI。可以包含多个同一名称形式的实例和多个名称形式。每当使用这些身份时，必须使用发行者备用名称扩展；不过，DNS 名称可以在发行者字段中用 domainComponent 属性表示（详见第4.1.2.4节）。

符合规范的 CRL 发行者应将发行者备用名称扩展标记为非关键。

该扩展的 OID 和语法定义在第4.2.1.7节。

5.2.3. CRL 编号

CRL 编号是一个非关键扩展，用于传达在特定范围和发行者下单调递增的序列号。此扩展使用户能够轻松判断某个 CRL 是否已被后续的 CRL 所取代。CRL 编号还支持识别互补的完整 CRL 和增量 CRL。符合规范的 CRL 发行者必须在所有 CRL 中包含此扩展，并将其标记为非关键。

如果 CRL 发行者除了完整 CRL 之外还生成增量 CRL，则两者必须共享一个编号序列。如果在同一时间发行的增量 CRL 和完整 CRL 涵盖相同范围，它们必须具有相同的 CRL 编号，并提供相同的吊销信息。也就是说，增量 CRL 和同时发行的完整 CRL 的组合，必须提供与该时间点的完整 CRL相同的吊销信息。

如果 CRL 发行者在不同时间为相同范围生成两个 CRL（两份完整 CRL、两份增量 CRL，或一份完整 CRL 和一份增量 CRL），则这两份 CRL 的 CRL 编号不得相同。也就是说，如果这两份 CRL 的 thisUpdate 字段（第5.1.2.4节）不同，则它们的 CRL 编号必须不同。

根据上述要求，CRL 编号应包含长整数。验证者必须能够处理最高20字节的 CRLNumber值。符合规范的 CRL 发行者不得使用超过20字节的 CRLNumber值。

该扩展的 OID 定义为：id-ce-cRLNumber ::= { id-ce 20 }

CRLNumber ::= INTEGER (0..MAX)

5.2.4. 增量 CRL 指示符

增量 CRL 指示符是一个关键扩展，用于标识某个 CRL 为增量 CRL。增量 CRL 仅包含之前已分发的吊销信息的更新，而非完整信息。使用增量 CRL 可以显著减少网络负载和处理时间。增量 CRL 通常比其更新的 CRL 小，因此获取增量 CRL的应用程序消耗的网络带宽少于获取对应完整 CRL的应用程序。存储吊销信息的应用程序如果采用非 CRL 结构的格式，也可以在不重新处理信息的情况下，将新吊销信息添加到本地数据库中。

增量 CRL 指示符扩展包含一个类型为 BaseCRLNumber 的单值。CRL 编号标识在生成此增量 CRL 时所用的完整 CRL（基础 CRL）。符合规范的 CRL 发行者必须将引用的基础 CRL作为完整 CRL发布。增量 CRL 包含对同一范围内吊销状态的所有更新。增量 CRL 与引用的基础 CRL 结合，等同于在发布增量 CRL 时的完整 CRL。

当符合规范的 CRL 发行者生成增量 CRL 时，必须包含关键的增量 CRL 指示符扩展。

发行增量 CRL 时，必须覆盖与引用的基础 CRL 相同的原因和证书集合。也就是说，增量 CRL 的范围必须与被引用的基础 CRL 相同。引用的基础 CRL 和增量 CRL 必须省略发行点扩展，或包含相同的发行点扩展。此外，CRL 发行者必须使用相同的私钥签署增量 CRL 和任何可以用来更新的完整 CRL。

支持增量 CRL 的应用程序可以通过结合先前发行的完整 CRL 和最新的增量 CRL，构建出当前的完整 CRL。也可以通过结合先前本地构建的完整 CRL 和当前的增量 CRL，构建出当前的完整 CRL。如果当前时间在 thisUpdate 和 nextUpdate 字段之间，则该增量 CRL被视为最新的。

在某些情况下，CRL 发行者可能会在 nextUpdate 指定的时间之前发布一个或多个增量 CRL。如果遇到多个当前的增量 CRL，应用程序应认为 the latest in thisUpdate 的为最新的。

该扩展的 OID 定义为：id-ce-deltaCRLIndicator ::= { id-ce 27 }

BaseCRLNumber ::= CRLNumber

5.2.5. 发行点（Issuing Distribution Point）

发行分发点是一个关键的CRL扩展，用于标识特定CRL的CRL分发点及其范围。它指示该CRL是否仅涵盖终端实体证书的吊销、仅涵盖CA证书的吊销、仅涵盖属性证书的吊销，或仅包含某些特定原因码的吊销信息。虽然该扩展是关键的，但符合标准的实现并不要求支持此扩展。然而，不支持此扩展的实现必须将未列在此CRL中的任何证书的状态视为未知，或找到不包含任何未识别关键扩展的其他CRL。

该CRL由CRL发行者的私钥签名。CRL分发点本身没有自己的密钥对。如果CRL存储在X.500目录中，则存储在对应于CRL分发点的目录条目中，该条目可能与CRL发行者的目录条目不同。

与分发点相关联的原因码必须在SomeReasons中指定。如果未出现onlySomeReasons，则该分发点必须包含所有原因码的吊销信息。CA可以利用CRL分发点根据妥协和常规吊销将CRL划分。例如，原因码为keyCompromise（1）、cACompromise（2）和aACompromise（8）的吊销信息出现在一个分发点中，其他原因码的吊销信息出现在另一个分发点中。

如果CRL包含带有onlySomeReasons的issuingDistributionPoint扩展，则在CRL范围内被吊销的每个证书，必须被赋予除“未指明”之外的吊销原因。所赋予的吊销原因用于确定应在何处列出被吊销的证书，但没有要求在相应的CRL条目中包含reasonCode CRL扩展。

distributionPoint字段的语法和语义与cRLDistributionPoints扩展中的distributionPoint字段相同（第4.2.1.13节）。如果存在该字段，则必须至少包含与每个在此CRL范围内的证书的cRLDistributionPoints扩展中的对应distributionPoint字段相同的名称。证书和CRL中的distributionPoint字段必须使用相同的编码。

如果缺少distributionPoint字段，则CRL必须包含所有由CRL发行者颁发且未过期的吊销证书的条目（如果有的话），范围在此CRL的范围内。

如果CRL的范围仅包括由CRL发行者颁发的证书，则indirectCRL布尔值必须设置为FALSE。否则，如果范围包括由除CRL发行者之外的一个或多个其他机构颁发的证书，则indirectCRL必须设置为TRUE。每个条目的责任机构由证书发行者CRL条目扩展（第5.3.3节）指示。

如果CRL的范围仅包括终端实体公钥证书，则onlyContainsUserCerts必须设置为TRUE；如果范围仅包括CA证书，则onlyContainsCACerts必须设置为TRUE。如果设置了onlyContainsUserCerts或onlyContainsCACerts，则CRL的范围不得包含任何版本1或版本2的证书。符合标准的CRL发行者必须将onlyContainsAttributeCerts布尔值设置为FALSE。

符合标准的CRL发行者不得签发DER编码的issuingDistributionPoint扩展为空序列的CRL。也就是说，如果onlyContainsUserCerts、onlyContainsCACerts、indirectCRL和onlyContainsAttributeCerts都为FALSE，则必须存在distributionPoint或onlySomeReasons中的至少一个。

id-ce-issuingDistributionPoint对象标识符定义如下：
```
id-ce-issuingDistributionPoint ::= { id-ce 28 }
```
issuingDistributionPoint结构如下：
```
IssuingDistributionPoint ::= SEQUENCE {
     distributionPoint          [0] DistributionPointName OPTIONAL,
     onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,
     onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,
     onlySomeReasons            [3] ReasonFlags OPTIONAL,
     indirectCRL                [4] BOOLEAN DEFAULT FALSE,
     onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }
```
其中，最多只能将onlyContainsUserCerts、onlyContainsCACerts和onlyContainsAttributeCerts中的一个设置为TRUE。

5.2.6. 最新CRL（又名Delta CRL分发点）

最新CRL扩展标识如何获取此完整CRL的Delta CRL信息。符合标准的CRL发行者必须将此扩展标记为非关键。此扩展不得出现在Delta CRL中。

该扩展使用与cRLDistributionPoints相同的语法（第4.2.1.13节），但在此上下文中仅distributionPoint字段有意义。原因字段和cRLIssuer字段必须省略。

每个分发点名称提供了可以找到Delta CRL的位置。其范围必须与此完整CRL的范围相同。此扩展的内容仅用于定位Delta CRL，不用于验证CRL或引用的Delta CRL。distributionPoint字段的编码规则（第4.2.1.13节）适用于此扩展。

id-ce-freshestCRL对象标识符定义如下：
```
id-ce-freshestCRL ::= { id-ce 46 }
```
其结构为：
```
FreshestCRL ::= CRLDistributionPoints
```

5.2.7. 颁发机构信息访问（Authority Information Access）

本节定义了在CRL中使用Authority Information Access扩展的方法。该扩展的语法和语义与第4.2.2.1节中定义的证书扩展相同。

此CRL扩展必须标记为非关键。

当在CRL中出现时，必须至少包含一个AccessDescription，指定id-ad-caIssuers作为accessMethod。当可用信息列出用于验证CRL签名的证书（即，主题名与CRL发行者名匹配且具有对应私钥的证书）时，使用id-ad-caIssuers OID。不得包含除id-ad-caIssuers之外的其他访问方法类型。至少应有一个AccessDescription实例指定一个HTTP [RFC2616]或LDAP [RFC4516] URI作为accessLocation。

如果信息通过HTTP或FTP提供，accessLocation必须是一个统一资源标识符（URI），并且URI应指向单个DER编码的证书（如[RFC2585]所述）或包含证书的BER或DER编码的“仅证书”CMS消息（如[RFC2797]所述）。支持HTTP或FTP访问证书的应用应能接受单个DER编码的证书，并应能接受“仅证书”CMS消息。

HTTP服务器应在响应的内容类型（Content-Type）头中指定：
- 单个DER编码证书：`application/pkix-cert [RFC2585]`
- “仅证书”CMS消息：`application/pkcs7-mime [RFC2797]`

FTP中，包含单个DER编码证书的文件名应以“.cer”结尾（[RFC2585]），包含“仅证书”CMS消息的文件名应以“.p7c”结尾（[RFC2797]）。客户端可以根据媒体类型或文件扩展名猜测内容，但不应仅依赖于这些信息。

当accessLocation为directoryName时，信息由应用从本地配置的目录服务器获取。使用单一CA公钥验证证书和CRL签名时，所需的CA证书存储在crossCertificatePair和/或cACertificate属性中（[RFC4523]）。当使用不同的公钥验证证书和CRL签名时，所需证书存储在userCertificate属性中（[RFC4523]）。因此，支持directoryName形式的accessLocation的实现必须能在这三个属性中找到所需的证书。访问目录的协议（如DAP或LDAP）由本地决定。

当信息通过LDAP提供时，accessLocation应为URI。LDAP URI [RFC4516]必须包含：
- <dn>：持有证书的条目的唯一名称
- <attributes>：列出存放DER编码证书或交叉证书对的属性描述（[RFC4523]）
- <host>（可选）：如`ldap://ldap.example.com/cn=CA,dc=example,dc=com?cACertificate;binary,crossCertificatePair;binary`。

省略<host>（如`ldap:///cn=exampleCA,dc=example,dc=com?cACertificate;binary`）意味着依赖客户端的预先知识联系合适的服务器。

【完】

这个CRL条目扩展项用于标识与间接CRL（即在其发行分发点扩展中设置了indirectCRL指示符的CRL）中的条目相关联的证书颁发者。当该扩展存在时，证书颁发者CRL条目扩展会包含一个或多个来自证书的颁发者字段和/或颁发者备用名称扩展中的名称，这些名称对应于CRL条目。如果在间接CRL的第一个条目上没有此扩展，则默认该证书颁发者为CRL的颁发者。在随后的条目中，如果没有此扩展，则该条目的证书颁发者与前一条目的证书颁发者相同。该字段定义如下：

id-ce-certificateIssuer   OBJECT IDENTIFIER ::= { id-ce 29 }

CertificateIssuer ::=     GeneralNames

符合规范的CRL颁发者必须在此扩展中包含与该CRL条目对应的证书的颁发者字段中的唯一名称（DN）。该DN的编码必须与证书中使用的编码完全一致。

CRL颁发者必须将此扩展标记为关键扩展，因为忽略此扩展的实现可能无法正确将CRL条目归属到相应的证书。该规范建议实现应识别此扩展。

6. 证书路径验证

互联网PKI的证书路径验证程序基于[X.509]中提供的算法。路径处理验证主题的区别名和/或主题备用名称与主题公钥之间的绑定关系。该绑定关系受到路径中证书所规定的约束以及依赖方提供的输入的限制。基本约束和策略约束扩展允许证书路径处理逻辑自动化决策过程。

本节描述一种验证证书路径的算法。符合本规范的实现不必强制实现此算法，但必须提供与该过程的外部行为等效的功能。任何算法都可以被特定实现采用，只要它能得出正确的结果。

在6.1节中，描述了基本路径验证。有效路径始于由信任锚颁发的证书。该算法需要CA的公钥、CA的名称以及用以验证路径的任何约束。

信任锚的选择属于策略问题：可以是层级PKI中的顶级CA、验证者自己证书的颁发者，或网络PKI中的任何其他CA。路径验证程序的流程在选择信任锚时保持一致。此外，不同应用可能依赖不同的信任锚，或接受以一组信任锚之一开始的路径。

6.2节介绍在具体实现中使用路径验证算法的方法。

6.3节描述在证书颁发者采用CRL作为吊销机制时，判断证书是否被吊销的步骤。

6.1 基本路径验证

本节描述一种X.509路径处理的算法。符合规范的实现必须包含一个与此算法外部行为等效的路径处理程序。然而，支持此算法中处理的某些证书扩展是可选的。未支持这些扩展的客户端可以省略相应的路径验证步骤。

例如，客户端不必支持策略映射扩展。不支持此扩展的客户端可以省略处理策略映射的路径验证步骤。注意，如果证书包含未被支持的关键扩展，客户端必须拒绝该证书。

虽然本文件第4节和第5节中规定的证书和CRL配置值被认为适合互联网PKI，但本节提出的算法不限于接受符合这些配置文件的证书和CRL。因此，该算法仅包括验证路径有效性的检查，而不包括验证证书和CRL是否符合本配置文件的检查。虽然可以扩展此算法以包括对第4节和第5节中配置文件符合性的检查，但本规范建议不要这样做。

本算法会根据当前日期和时间验证证书。符合规范的实现也可以支持基于过去某一时间点的验证。请注意，没有机制可以验证超出证书有效期之外的时间点的证书。

信任锚是算法的输入。没有要求所有路径都必须使用相同的信任锚。可以为不同路径使用不同的信任锚，详见第6.2节。

路径验证的主要目标是验证目标证书中所示的主题区别名或主题备用名称与主题公钥之间的绑定关系，基于信任锚的公钥。在大多数情况下，目标证书是终端实体证书，但也可以是CA证书，只要该证书的主题公钥用于除验证公钥证书签名之外的目的。验证名称与主题公钥之间的绑定关系需要获得一系列支持该绑定的证书。获取此序列的过程超出本规范范围。

为了实现此目标，路径验证过程会验证以下条件（等同于验证一条潜在的证书链）：

(a) 对所有x在{1, ..., n-1}中，证书x的主题是证书x+1的颁发者；

(b) 证书1由信任锚颁发；

(c) 证书n是待验证的证书（即目标证书）；

(d) 对所有x在{1, ..., n}中，证书在相关时间点都是有效的。

潜在的证书链中，证书不得出现多次。

当信任锚以自签名证书形式提供时，该自签名证书不包含在潜在证书链中。信任锚信息作为输入提供给路径验证算法（第6.1.1节）。

某个具体的证书链可能不适用于所有应用。因此，应用可以扩展此算法以进一步限制有效路径。路径验证还会根据证书策略扩展、策略映射扩展、策略约束扩展和禁止任何策略扩展，确定此路径的有效证书策略集。为此，路径验证算法会构建一个有效策略树。如果此路径的有效策略集非空，则结果为深度为n的有效策略树，否则为空的有效策略树。

如果证书的主题和颁发者字段中的DN相同（根据第7.1节的规则匹配），则该证书为自签名证书。通常，路径中的每个证书的颁发者和主题不同，但CA可以自签证书以支持密钥轮换或证书策略变更。这些自签名证书在评估路径长度或名称约束时不予考虑。

本节将算法分为四个基本步骤： (1) 初始化，(2) 基本证书处理，(3) 为下一个证书做准备，以及 (4) 收尾。步骤(1)和(4)各执行一次。步骤(2)对路径中的所有证书执行。步骤(3)对路径中除最后一个证书外的所有证书执行。图2提供了该算法的高层流程图。

（此处为流程图描述略，详见原文。）

6.1.1 输入

该算法假设提供以下九个输入给路径处理逻辑：

(a) 长度为n的潜在证书路径。

(b) 当前日期/时间。

(c) 用户初始策略集：一组证书策略标识符，指明用户接受的策略。如果用户不关心证书策略，则包含特殊值“any-policy”。

(d) 信任锚信息，描述作为路径信任锚的CA。信任锚信息包括：

  (1) 受信任的颁发者名称，

  (2) 受信任的公钥算法，

  (3) 受信任的公钥，

  (4) 可选的，与公钥相关的受信任的公钥参数。

信任锚信息可以以自签名证书的形式提供。当以证书形式提供时，主题字段中的名称用作受信任的颁发者名称，subjectPublicKeyInfo字段的内容用作受信任的公钥算法和公钥的来源。信任锚信息之所以可信，是因为它通过某个可信的带外途径传递给路径处理程序。如果受信任的公钥算法需要参数，则参数与公钥一同提供。

(e) 初始策略映射禁用标志，指示路径中是否允许策略映射。

(f) 初始明确策略标志，指示路径是否必须在用户初始策略集中至少满足一个策略。

(g) 初始任何策略禁用标志，指示如果证书中包含anyPolicy OID，则是否应处理。

(h) 初始允许子树集，指示每种名称类型（如X.500区别名、电子邮件地址或IP地址）中所有证书主题名称必须落在的子树范围内。该输入包括每种名称类型的子树集。对于每个名称类型，子树集可以是：

- 一个包含所有该类型名称的单一子树，或

- 一个或多个子树，每个子树指定该类型名称的子集，或

- 空集。如果某个名称类型的子树集为空，则路径中的任何证书包含该类型名称时，路径将被视为无效。

(i) 初始排除子树（initial-excluded-subtrees），表示每种名称类型（例如X.500区分名、电子邮件地址或IP地址）在证书路径中的任何证书中，Subject名称不得落入的子树集合。initial-excluded-subtrees输入为每种名称类型提供一个集合。对于每个名称类型，该集合可以为空，或由一个或多个子树组成，每个子树指定该名称类型名称的子集。如果某个名称类型的集合为空，则表示不排除该类型的任何名称。

符合标准的实现不要求支持设置所有这些输入。例如，符合标准的实现可以设计为在initial-any-policy-inhibit取值为FALSE时，验证所有证书路径。

6.1.2 初始化

此初始化阶段基于九个输入，建立十一种状态变量：

(a) valid_policy_tree：一个证书策略树，包含其可选限定符；树的每个叶节点代表此阶段证书路径验证中的有效策略。如果在此阶段存在有效策略，则树的深度等于已处理的证书数量；如果不存在有效策略，则树设置为NULL。一旦树被设置为NULL，策略处理即停止。

每个valid_policy_tree中的节点包含三个数据对象：有效策略、相关策略限定符集，以及一个或多个预期策略值集。如果节点深度为x，则其组成部分具有以下语义：

1. valid_policy是一个单一的策略OID，代表路径长度为x的有效策略。

2. qualifier_set是与证书x中的有效策略相关联的策略限定符集。

3. expected_policy_set包含一个或多个策略OID，满足证书x+1中的该策略。

initial的valid_policy_tree的初始值为一个节点，策略为anyPolicy，限定符集为空，预期策略集为{anyPolicy}。该节点视为深度0。

图3为valid_policy_tree初始状态的示意图。后续图形将采用此格式描述路径处理过程中valid_policy_tree的变化。

```
        +----------------+
        |   anyPolicy    |   <---- valid_policy
        +----------------+
        |       {}       |   <---- qualifier_set
        +----------------+
        |  {anyPolicy}   |   <---- expected_policy_set
        +----------------+
```

图3. valid_policy_tree状态变量的初始值

(b) permitted_subtrees：每种名称类型（如X.500区分名、电子邮件地址或IP地址）的一组根名称，定义一组子树，所有后续证书中的Subject名称必须落入这些子树中。此变量为每种名称类型提供一个集合，初始值为initial-permitted-subtrees。

(c) excluded_subtrees：每种名称类型的一组根名称，定义一组子树，后续证书中的Subject名称不得落入这些子树中。此变量为每种名称类型提供一个集合，初始值为initial-excluded-subtrees。

(d) explicit_policy：一个整数，指示是否需要非空的valid_policy_tree。该整数表示在强制此要求之前需处理的非自签证书数。设置后，该变量可以减小，但不能增加。也就是说，如果路径中的某个证书要求非空的valid_policy_tree，后续证书不能取消此要求。如果设置了initial-explicit-policy，则初始值为0，否则为n+1。

(e) inhibit_anyPolicy：一个整数，指示是否将anyPolicy策略标识符视为匹配。该整数表示在处理路径中非自签证书之前，应忽略asserted的anyPolicy OID的证书数。设置后，该变量可以减小，但不能增加。即，如果路径中的某个证书禁止处理anyPolicy，后续证书不能允许。如果设置了initial-any-policy-inhibit，则初始值为0，否则为n+1。

(f) policy_mapping：一个整数，指示是否允许策略映射。该整数表示在处理路径中非自签证书之前，应禁止策略映射的证书数。设置后，该变量可以减小，但不能增加。如果路径中的某个证书声明不允许策略映射，后续证书不能覆盖此限制。如果设置了initial-policy-mapping-inhibit，则初始值为0，否则为n+1。

(g) working_public_key_algorithm：用于验证证书签名的数字签名算法。该算法从信任锚信息中提供的受信任公钥算法初始化。

(h) working_public_key：用于验证证书签名的公钥。该公钥从信任锚信息中提供的受信任公钥初始化。

(i) working_public_key_parameters：验证签名可能需要的当前公钥参数（取决于算法）。该参数从信任锚信息中提供的受信任公钥参数初始化。

(j) working_issuer_name：期望在链中下一证书中出现的签发者区分名。该值初始化为信任锚信息中提供的受信任签发者名。

(k) max_path_length：此整数初始化为n，每遇到一个非自签证书，减1，并可根据CA证书中的基本限制扩展中的路径长度约束值进行缩减。

完成初始化步骤后，执行6.1.3中规定的基本证书处理步骤。

6.1.3 基本证书处理

对每个证书i（i在[1..n]）应执行的基本路径处理操作如下：

(a) 验证基本证书信息。证书必须满足以下条件：

1. 证书签名可用working_public_key_algorithm、working_public_key和working_public_key_parameters验证。

2. 证书的有效期包含当前时间。

3. 当前时间证书未被吊销。可通过获取相应的CRL（第6.3节）、状态信息或带外机制判断。

4. 证书签发者名称为working_issuer_name。

(b) 如果证书i是自签的且不是路径中的最后一个证书，则跳过此步骤。否则，验证Subject名称是否在X.500区分名的permitted_subtrees中，并验证SubjectAltName扩展（关键或非关键）中的每个备用名称是否在对应名称类型的permitted_subtrees中。

(c) 如果证书i是自签的且不是路径中的最后一个证书，则跳过此步骤。否则，验证Subject名称是否不在X.500区分名的excluded_subtrees中，并验证SubjectAltName扩展中的每个备用名称是否不在对应名称类型的excluded_subtrees中。

(d) 如果证书中存在证书策略扩展且valid_policy_tree不为NULL，则按顺序处理策略信息，步骤如下：

1. 对于证书策略扩展中除anyPolicy外的每个策略P，定义P-OID为策略P的OID，P-Q为策略P的限定符集。按顺序执行：

(i) 对于valid_policy_tree中深度为i-1且expected_policy_set中包含P-OID的每个节点，创建子节点，设置：

- valid_policy为P-OID

- qualifier_set为P-Q

- expected_policy_set为{P-OID}

例如，假设一个深度为i-1的节点的expected_policy_set为{Gold, White}，且证书策略扩展中出现Gold和Silver策略。Gold匹配，Silver不匹配。此规则会为Gold策略生成深度为i的子节点，示意图如下（图4）。

（此处省略图示内容，详见原文）

(ii) 如果在步骤(i)中没有匹配，且valid_policy_tree中存在深度为i-1且策略为anyPolicy的节点，则为P-OID生成子节点，设置：

- valid_policy为P-OID

- qualifier_set为P-Q

- expected_policy_set为{P-OID}

例如，假设深度为i-1的节点的策略为anyPolicy，证书策略扩展中出现Gold和Silver，但未匹配。则为每个未匹配的策略生成子节点（图5所示）。

2. 如果证书策略扩展中包含策略anyPolicy（带限定符AP-Q），且满足以下条件之一，则为每个深度为i-1的节点，且expected_policy_set中的值（包括anyPolicy）未在子节点中出现，生成子节点，设置：

- valid_policy为父节点中的expected_policy_set中的值

- qualifier_set为AP-Q

- expected_policy_set为该节点的valid_policy

例如，假设深度为i-1的节点的expected_policy_set为{Gold, Silver}，且证书策略扩展中出现anyPolicy（带限定符），但Gold和Silver未出现。此规则会为每个未匹配的策略生成子节点（图6所示）。

3. 如果深度为i-1或更浅的节点没有子节点，则删除该节点。重复此操作，直到没有深度为i-1或更浅且无子节点的节点。

（此处省略部分内容，详见原文）

例如，考虑图7所示的有效策略树。深度为i-1的两个节点被标记为“X”，它们没有子节点，因此被删除。将此规则应用于结果树后，会导致深度为i-2且被标记为“Y”的节点被删除。在最终的树中，没有深度为i-1或更浅且没有子节点的节点，这一步完成。

Cooper 等人  标准轨迹  [第83页]

RFC 5280  PKIX 证书和 CRL 配置文件  2008年5月

（e）如果证书策略扩展不存在，则将 valid_policy_tree 设置为 NULL。

（f）验证 explicit_policy 是否大于0，或者 valid_policy_tree 不等于 NULL；

如果步骤（a）、（b）、（c）或（f）中的任何一项失败，程序将终止，返回失败指示和相应的原因。

如果 i 不等于 n，则继续执行第6.1.4节中列出的准备步骤；如果 i 等于 n，则执行第6.1.5节中列出的收尾步骤。

                                 +-----------+
                                 |           | 深度为 i-3 的节点
                                 +-----------+
                                 /     |     \
                                /      |      \
                               /       |       \
                   +-----------+ +-----------+ +-----------+
                   |           | |           | |     Y     | 深度为 i-2 的节点
                   +-----------+ +-----------+ +-----------+
                   /   \               |             |
                  /     \              |             |
                 /       \             |             |
      +-----------+ +-----------+ +-----------+ +-----------+ 深度为 i-1 的节点
      |           | |     X     | |           | |    X      |
      +-----------+ +-----------+ +-----------+ +-----------+
            |                      /    |    \
            |                     /     |     \
            |                    /      |      \
      +-----------+ +-----------+ +-----------+ +-----------+ 深度为 i
      |           | |           | |           | |           |
      +-----------+ +-----------+ +-----------+ +-----------+

图7. 修剪有效策略树

6.1.4. 证书i+1的准备工作

为准备处理证书i+1，首先对证书i执行以下步骤：

（a）如果存在策略映射扩展，验证是否没有出现“anyPolicy”作为 issuerDomainPolicy 或 subjectDomainPolicy。

（b）如果存在策略映射扩展，则对策略映射扩展中的每个 issuerDomainPolicy ID-P 执行：

（1）如果 policy_mapping 变量大于0，则对深度为i的 valid_policy_tree 中所有 ID-P 为有效策略的节点，将 expected_policy_set 设置为由策略映射扩展中指定为与 ID-P 等价的 subjectDomainPolicy 值的集合。

如果 valid_policy_tree 中没有深度为i且有效策略为 ID-P 的节点，但存在深度为i且有效策略为 anyPolicy 的节点，则在深度为 i-1 且有效策略为 anyPolicy 的节点下生成一个子节点，具体如下：

(i) 将该子节点的 valid_policy 设置为 ID-P；

(ii) 将该子节点的 qualifier_set 设置为证书策略扩展中策略 anyPolicy 的限定符集；

(iii) 将该子节点的 expected_policy_set 设置为由策略映射扩展中指定为与 ID-P 等价的 subjectDomainPolicy 值的集合。

（2）如果 policy_mapping 变量等于0：

(i) 删除 valid_policy_tree 中所有深度为 i 且有效策略为 ID-P 的节点。

(ii) 如果 valid_policy_tree 中存在深度为 i-1 或更浅且没有子节点的节点，则删除该节点。重复此步骤，直到没有深度为 i-1 或更浅且无子节点的节点。

（c）将证书的主题名赋值给 working_issuer_name。

（d）将证书的 subjectPublicKey 赋值给 working_public_key。

（e）如果证书的 subjectPublicKeyInfo 字段中的算法字段包含非空参数，则将参数赋值给 working_public_key_parameters 变量。

如果 subjectPublicKeyInfo 字段中的算法字段参数为空或省略，则将证书的 subjectPublicKey 算法与 working_public_key_algorithm 进行比较。如果两者不同，则将 working_public_key_parameters 设为 null。

（f）将证书的 subjectPublicKey 算法赋值给 working_public_key_algorithm 变量。

（g）如果证书中包含名称约束扩展，则按如下方式修改 permitted_subtrees 和 excluded_subtrees 状态变量：

（1）如果证书中存在 permittedSubtrees，则将 permitted_subtrees 状态变量设置为其之前的值与扩展字段中指示的值的交集。如果 permittedSubtrees 不包含某一特定名称类型，则该名称类型的 permitted_subtrees 状态变量保持不变。例如，example.com 和 foo.example.com 的交集为 foo.example.com；而 example.com 和 example.net 的交集为空集。

（2）如果证书中存在 excludedSubtrees，则将 excluded_subtrees 状态变量设置为其之前的值与扩展字段中指示的值的并集。如果 excludedSubtrees 不包含某一特定名称类型，则该名称类型的 excluded_subtrees 状态变量保持不变。例如，name spaces example.com 和 foo.example.com 的并集为 example.com；而 example.com 和 example.net 的并集为两个名称空间。

（h）如果证书i不是自签发的：

（1）如果 explicit_policy 不为0，则将其减1。

（2）如果 policy_mapping 不为0，则将其减1。

（3）如果 inhibit_anyPolicy 不为0，则将其减1。

（i）如果证书中包含策略约束扩展，则按如下方式修改 explicit_policy 和 policy_mapping：

（1）如果 requireExplicitPolicy 存在且小于 explicit_policy，则将 explicit_policy 设置为 requireExplicitPolicy 的值。

（2）如果 inhibitPolicyMapping 存在且小于 policy_mapping，则将 policy_mapping 设置为 inhibitPolicyMapping 的值。

（j）如果证书中包含 inhibitAnyPolicy 扩展且其值小于 inhibit_anyPolicy，则将 inhibit_anyPolicy 设置为 inhibitAnyPolicy 的值。

（k）如果证书为版本3，验证是否存在 basicConstraints 扩展且 cA 设置为 TRUE。（如果证书为版本1或版本2，则必须通过带外方式验证其为CA证书，或拒绝该证书。符合标准的实现可以选择拒绝所有版本1和版本2的中间证书。）

（l）如果证书不是自签发的，验证 max_path_length 是否大于零，并将其减1。

（m）如果证书中存在 pathLenConstraint 且其值小于 max_path_length，则将 max_path_length 设置为 pathLenConstraint 的值。

（n）如果存在 key usage 扩展，则验证 keyCertSign 位是否被设置。

（o）识别并处理证书中存在的其他关键扩展。处理任何其他已识别的非关键扩展，特别是那些与路径处理相关的。

如果步骤（a）、（k）、（l）、（n）或（o）失败，程序将终止，返回失败指示和相应的原因。

如果（a）、（k）、（l）、（n）和（o）都成功完成，则将 i 增加1，并执行第6.1.3节中规定的基本证书处理。

6.1.5. 收尾程序

为了完成目标证书的处理，对证书 n 执行以下步骤：

（a）如果 explicit_policy 不为0，则将其减1。

（b）如果证书中包含策略约束扩展且 requireExplicitPolicy 存在且值为0，则将 explicit_policy 设置为0。

（c）将证书的 subjectPublicKey 赋值给 working_public_key。

（d）如果证书的 subjectPublicKeyInfo 字段中的算法字段包含非空参数，则将参数赋值给 working_public_key_parameters。

如果参数为空或省略，则将证书的 subjectPublicKey 算法与 working_public_key_algorithm 进行比较。如果两者不同，则将 working_public_key_parameters 设为 null。

（e）将证书的 subjectPublicKey 算法赋值给 working_public_key_algorithm。

（f）识别并处理证书 n 中的其他关键扩展。处理任何其他已识别的非关键扩展，特别是那些与路径处理相关的。

（g）计算 valid_policy_tree 和用户初始策略集的交集，具体如下：

（i）如果 valid_policy_tree 为 NULL，则交集为 NULL。

（ii）如果 valid_policy_tree 不为 NULL，且用户初始策略集为 any-policy，则交集为整个 valid_policy_tree。

（iii）如果 valid_policy_tree 不为 NULL，且用户初始策略集不是 any-policy，则按如下方式计算交集：

1. 确定所有父节点为 anyPolicy 的策略节点集合，即 valid_policy_node_set。

2. 对于 valid_policy_node_set 中的任何节点，如果其有效策略不在用户初始策略集中且不是 anyPolicy，则删除该节点及其所有子节点。

3. 如果 valid_policy_tree 中存在深度为 n 且有效策略为 anyPolicy 的节点，且用户初始策略集不是 any-policy，则执行以下步骤：

a. 将 P-Q 设置为深度为 n 且有效策略为 anyPolicy 的节点中的 qualifier_set。

b. 对于用户初始策略集中不等于 valid_policy_node_set 中任何节点的有效策略的每个 P-OID，创建一个子节点，其父节点为深度为 n-1 且有效策略为 anyPolicy 的节点，子节点的值如下：将 valid_policy 设置为 P-OID，qualifier_set 设置为 P-Q，expected_policy_set 设置为 {P-OID}。

c. 删除深度为 n 且有效策略为 anyPolicy 的节点。

4. 如果 valid_policy_tree 中存在深度为 n-1 或更浅且没有子节点的节点，则删除该节点。重复此步骤，直到没有深度为 n-1 或更浅且无子节点的节点。

如果满足以下任一条件，则路径处理成功：

（1）explicit_policy 变量的值大于0，或

（2）valid_policy_tree 不为 NULL。

6.1.6. 输出

如果路径处理成功，程序终止，返回成功指示以及最终的 valid_policy_tree、working_public_key、working_public_key_algorithm 和 working_public_key_parameters 的值。

6.2. 使用路径验证算法

路径验证算法描述了验证单一路径的过程。虽然每个证书路径都始于特定的信任锚，但没有要求所有由某一系统验证的证书路径必须共享同一信任锚。信任锚的选择是本地决策。系统可以为特定路径提供任何一个受信任的 CA 作为信任锚。路径验证算法的输入可能因路径而异。处理路径所用的输入可能反映应用特定的需求或对特定信任锚的信任限制。例如，受信任的 CA 可能只被信任用于某一特定的证书策略。这种限制可以通过路径验证的输入表达。

实现可以增强第6.1节中介绍的算法，以进一步限制以特定信任锚开始的有效路径集。例如，实施可以在初始化阶段对特定信任锚应用路径长度限制，或应用可以要求目标证书中存在特定的备用名称形式，或对应用特定的扩展施加要求。因此，第6.1节中描述的路径验证算法定义了路径被视为有效的最低条件。

当证书授权中心（CA）分发自签名证书以指定信任锚信息时，可以使用证书扩展来建议路径验证的输入。例如，可以在自签名证书中包含策略约束扩展，以指示以该信任锚开始的路径应仅信任特定的策略。同样，也可以包含名称约束扩展，以指示以该信任锚开始的路径应仅信任特定的名称空间。第6.1节中提出的路径验证算法并不假设信任锚信息必须在自签名证书中提供，也未规定对这类证书中包含的附加信息的处理规则。使用自签名证书来指定信任锚信息的实现可以自由选择处理或忽略这些信息。

6.3. 证书吊销列表（CRL）验证

本节描述在证书发行者使用CRL作为吊销机制时，确定证书是否被吊销所需的步骤。符合规范的支持CRL的实现不必实现本算法，但必须在处理符合本配置文件的CRL时，其行为在功能上应与本算法的外部表现等价。任何特定实现都可以使用任何算法，只要其能得出正确的结果。

本算法假设所有所需的CRL都已存储在本地缓存中。此外，如果某个CRL的下一次更新时间已过，算法假设存在机制可以获取最新的CRL并将其放入本地CRL缓存。

该算法定义了一组输入、状态变量和处理步骤，这些步骤对路径中的每个证书执行。算法的输出是该证书的吊销状态。

6.3.1. 吊销输入

为了支持吊销处理，算法需要两个输入：

(a) 证书：算法需要证书的序列号和颁发者名称，以判断该证书是否在某个CRL上。基本约束（basicConstraints）扩展用于判断提供的证书是关联CA还是终端实体。如果存在，算法还会使用cRLDistributionPoints和freshestCRL扩展来确定吊销状态。

(b) use-deltas：这是一个布尔值输入，决定是否对CRL应用增量CRL（delta CRL）。

6.3.2. 初始化和吊销状态变量

为了支持CRL处理，算法需要以下状态变量：

(a) reasons_mask：该变量包含到目前为止已处理的CRL和增量CRL支持的吊销原因集合。合法成员为所有可能的吊销原因值减去未指明的原因，包括：keyCompromise（密钥泄露）、cACompromise（CA泄露）、affiliationChanged（隶属关系变更）、superseded（被取代）、cessationOfOperation（停止操作）、certificateHold（证书暂停使用）、privilegeWithdrawn（权限撤销）和aACompromise（授权机构泄露）。特殊值all-reasons表示所有合法成员的集合。该变量初始化为空集。

(b) cert_status：该变量表示证书的状态，可能取以下值之一：未指明（unspecified）、keyCompromise、cACompromise、affiliationChanged、superseded、cessationOfOperation、certificateHold、removeFromCRL（从CRL中移除）、privilegeWithdrawn、aACompromise、特殊值UNREVOKED（未被吊销）或UNDETERMINED（未确定）。初始化为UNREVOKED。

(c) interim_reasons_mask：包含当前处理的CRL或增量CRL支持的吊销原因集合。

注意：在某些环境中，不必检查所有原因码。例如，某些环境只关心CA证书的cACompromise和keyCompromise。此算法会检查所有原因码，但可以通过额外的处理和状态变量限制只检查某些子集。

6.3.3. CRL处理

该算法假设一开始证书未被吊销。它会检查一个或多个CRL，直到确定证书被吊销或已检查足够多的CRL以覆盖所有原因码。

对于证书的每个CRL分发点（DP）扩展中的分发点，以及本地CRL缓存中的每个对应CRL，执行以下操作，直到满足终止条件：

(a) 更新本地CRL缓存，获取完整CRL、增量CRL或两者（根据需要）：

1. 如果当前时间已超过CRL的nextUpdate字段值，则执行以下之一：

(i) 如果use-deltas已设置，且证书或CRL中包含最新CRL（freshestCRL）扩展，则获取一个nextUpdate在当前时间之后的增量CRL，用于更新本地缓存的CRL（详见第5.2.4节）。

(ii) 用最新的完整CRL更新本地CRL缓存，验证新CRL的nextUpdate时间在当前时间之前，然后继续用新CRL处理。如果use-deltas已设置，且证书或CRL中包含最新CRL扩展，则还应获取可用于更新新完整CRL的最新增量CRL（详见第5.2.4节）。

2. 如果当前时间在nextUpdate字段值之前，且use-deltas已设置，且证书或CRL中包含最新CRL扩展，则获取当前的增量CRL以更新本地完整CRL（详见第5.2.4节）。

(b) 验证完整CRL的颁发者和范围，包括：

1. 如果DP中包含cRLIssuer，则验证完整CRL的颁发者字段是否与DP中的cRLIssuer匹配，且完整CRL是否包含indirectCRL布尔值为真的发行分发点（issuing distribution point）扩展。否则，验证CRL的颁发者是否与证书的颁发者匹配。

2. 如果完整CRL包含IDP（发行分发点）扩展，检查以下内容：

(i) 如果IDP扩展中存在分发点名称（distributionPointName），且DP中存在分发字段（distributionField），则验证IDP中的名称是否与DP中的名称之一匹配。如果IDP扩展中存在分发点名称，但DP中省略了分发字段，则验证IDP中的名称是否与DP的cRLIssuer字段中的名称之一匹配。

(ii) 如果IDP扩展中的onlyContainsUserCerts布尔值为真，则验证证书不包含cA布尔值为真的基本约束（basicConstraints）扩展。

(iii) 如果IDP扩展中的onlyContainsCACerts布尔值为真，则验证证书包含cA布尔值为真的基本约束扩展。

(iv) 验证onlyContainsAttributeCerts布尔值未被设置。

(c) 如果use-deltas已设置，验证增量CRL的颁发者和范围，包括：

1. 验证增量CRL的颁发者是否与完整CRL的颁发者匹配。

2. 如果完整CRL包含IDP扩展，验证增量CRL是否也包含匹配的IDP扩展。如果完整CRL省略IDP扩展，则增量CRL也应省略。

3. 验证增量CRL的授权密钥标识符（AKI）扩展是否与完整CRL的AKI扩展匹配。

(d) 计算本CRL的临时原因掩码（interim_reasons_mask）：

1. 如果IDP扩展存在且只包含某些原因（onlySomeReasons），且DP中列出了原因，则将interim_reasons_mask设置为DP中的原因与IDP中的onlySomeReasons的交集。

2. 如果IDP扩展中只包含某些原因，但DP中未列出原因，则将interim_reasons_mask设置为IDP中的onlySomeReasons。

3. 如果IDP扩展不存在或省略了onlySomeReasons，但DP中列出原因，则将interim_reasons_mask设置为DP中的原因。

4. 如果IDP扩展不存在或省略了onlySomeReasons，且DP中未列出原因，则将interim_reasons_mask设置为特殊值all-reasons。

(e) 验证interim_reasons_mask是否包含至少一个未包含在reasons_mask中的原因。

(f) 获取并验证完整CRL的颁发路径。该路径的信任锚必须与验证目标证书时使用的信任锚相同。如果CRL颁发者的证书中存在密钥用法扩展，则应验证cRLSign位已设置。

(g) 使用第(f)步验证的公钥验证完整CRL的签名。

(h) 如果use-deltas已设置，则用第(f)步验证的公钥验证增量CRL的签名。

(i) 如果use-deltas已设置，则在增量CRL中查找与证书颁发者和序列号匹配的条目（详见第5.3.3节）。如果找到，则将cert_status变量设置为对应的原因，具体如下：

1. 如果CRL条目的原因码扩展存在，则将cert_status设置为该原因码。

2. 如果原因码扩展不存在，则将cert_status设置为未指明（unspecified）。

(j) 如果cert_status为UNREVOKED，则在完整CRL中查找匹配的条目。如果找到，则将cert_status设置为对应的原因（详见第(i)步）。

(k) 如果cert_status为removeFromCRL，则将其重置为UNREVOKED。

(l) 将reasons_mask状态变量与interim_reasons_mask的并集赋值给reasons_mask。

如果（reasons_mask为all-reasons）或（cert_status不为UNREVOKED），则吊销状态已确定，返回cert_status。

如果吊销状态未确定，则重复上述过程，使用由证书发行者签发的其他CRL（未在分发点中列出，但由证书发行者签发的CRL）。对于此类CRL，假设其DP中原因和cRLIssuer字段都被省略，且分发点名称为证书发行者。处理完这些CRL后，如果仍未确定吊销状态，则返回cert_status为UNDETERMINED。

7. 国际化名称的处理规则

国际化名称可能出现在许多证书和CRL字段及扩展中，包括区分名称（DN）、国际化域名、电子邮件地址和国际化资源标识符（IRI）。存储、比较和展示这些名称需要特别注意。有些字符可能有多种编码方式。同一名称可能用多种编码（如ASCII或UTF8）表示。本节规定了存储或比较这些名称形式的符合性要求，并对部分名称形式的展示提供了指导。

7.1. 区分名称中的国际化名称

区分名称中国际化名称的表示，详见第4.1.2.4节（发行者名称）和第4.1.2.6节（主体名称）。标准的命名属性（如通用名）采用DirectoryString类型，支持多种语言编码的国际化名称。符合规范的实现必须支持UTF8String和PrintableString。RFC 3280仅要求对UTF8String编码的属性值进行二进制比较，而本规范要求更全面的比较处理。实现可能会遇到使用TeletexString、BMPString或UniversalString编码的证书和CRL，但对这些编码的支持是可选的。

符合规范的实现必须使用[RFC4518]中规定的LDAP StringPrep配置文件（包括对无关空格的处理）作为比较用的基础，用于编码为PrintableString或UTF8String的区别名属性的比较。符合规范的实现必须支持使用caseIgnoreMatch进行名称比较。支持使用其他相等匹配规则的属性类型是可选的。

在使用caseIgnoreMatch匹配规则进行名称比较之前，符合规范的实现必须对每个类型为DirectoryString的属性执行[RFC4518]中描述的六步字符串预处理算法，并作出以下澄清：

* 在第2步“映射”中，映射应包括[RFC3454]附录B.2中规定的大小写折叠。
* 在第6步“无关字符移除”中，应按照[RFC4518]第2.6.1节“无关空格处理”中的规定进行空白字符压缩。

在执行字符串预处理算法时，属性必须被视为存储值。

域组件（domainComponent）属性的比较必须按照第7.3节的规定进行。

两个命名属性匹配的条件是属性类型相同，并且在经过字符串预处理算法处理后，属性值完全匹配。两个相对区别名（RDN1和RDN2）匹配的条件是它们具有相同数量的命名属性，并且RDN1中的每个命名属性在RDN2中都有对应的匹配项。两个区别名（DN1和DN2）匹配的条件是它们具有相同数量的RDN，对于DN1中的每个RDN，在DN2中也有匹配的RDN，并且匹配的RDN在两个区别名中出现的顺序相同。如果DN1包含的RDN数量不少于DN2，且在忽略DN1中尾部的RDN的情况下，DN1在DN2定义的子树内。

7.2. 一般名中的国际化域名（IDN）

国际化域名（IDN）可以包含在证书和CRL的subjectAltName和issuerAltName扩展、名称约束扩展、权限信息访问扩展、主体信息访问扩展、CRL分发点扩展以及发行分发点扩展中。每个扩展都使用GeneralName类型，其中一种选择是dNSName字段，其定义为IA5String。

IA5String仅限于ASCII字符集。为了在当前结构中支持国际化域名，符合规范的实现必须在存储到dNSName字段之前，将国际化域名转换为ASCII兼容编码（ACE）格式，按照RFC 3490第4节的规定执行，具体包括：

* 在第1步中，域名应视为“存储字符串”，即不设置AllowUnassigned标志；
* 在第3步中，设置“UseSTD3ASCIIRules”标志；
* 在第4步中，对每个标签执行“ToASCII”操作；
* 在第5步中，将所有标签分隔符更改为U+002E（句点）。

在比较DNS名称是否相等时，符合规范的实现必须对整个DNS名称进行不区分大小写的精确匹配。在评估名称约束时，也必须逐标签进行不区分大小写的精确匹配。如第4.2.1.10节所述，任何通过在给定约束的域名左侧添加标签构造的DNS名称，都被视为属于所指示的子树。

实现应在显示前将IDN转换为Unicode。具体来说，符合规范的实现应执行RFC 3490第4节中规定的转换操作，具体包括：

* 在第1步中，域名应视为“存储字符串”，即不设置AllowUnassigned标志；
* 在第3步中，设置“UseSTD3ASCIIRules”标志；
* 在第4步中，对每个标签执行“ToUnicode”操作；
* 跳过第5步。

注意：实现必须允许IDN的空间需求增加。IDN的ACE标签将以“xn--”开头，可能需要多达五个ASCII字符来表示一个国际字符。

7.3. 以区别名表示的国际化域名

域名也可以通过区别名中的域组件（domain component）在主题字段、颁发者字段、subjectAltName扩展或issuerAltName扩展中表示。与GeneralName类型中的dNSName类似，该属性的值定义为IA5String。每个domainComponent属性代表一个标签。为了在区别名中表示IDN的标签，必须执行RFC 3490第4.1节中规定的“ToASCII”标签转换。该标签应视为“存储字符串”，即不设置AllowUnassigned标志。

符合规范的实现应在比较区别名中的domainComponent属性时进行不区分大小写的精确匹配，方法如第7.2节所述。

实现应在显示前将ACE标签转换为Unicode，具体为对每个ACE标签执行第7.2节中规定的“ToUnicode”转换操作。

7.4. 国际化资源标识符（IRI）

国际化资源标识符（IRI）是统一资源标识符（URI）的国际化补充。IRI由Unicode字符序列组成，而URI由ASCII字符序列组成。[RFC3987]定义了从IRI到URI的映射。虽然IRI本身未在任何证书字段或扩展中直接编码，但其映射的URI可以包含在证书和CRL中。URI可以出现在subjectAltName和issuerAltName扩展、名称约束扩展、权限信息访问扩展、主体信息访问扩展、发行分发点扩展以及CRL分发点扩展中。每个扩展都使用GeneralName类型，其中URI编码在其uniformResourceIdentifier字段中，定义为IA5String。

为了在当前结构中支持IRI，符合规范的实现必须按照[RFC3987]第3.1节的规定，将IRI映射为URI，具体包括：

* 在第1步中，从原始IRI格式生成UCS字符序列，并按照NFC规范进行归一化（Variant b）；
* 在第2步中，使用第1步的输出进行规范化。

实现不得在执行第2步之前转换ireg-name组件。

在URI比较之前，符合规范的实现必须执行[RFC3987]中描述的语法和方案基础的归一化技术，具体包括：

* 第1步：当IRI允许使用IDN时，必须将这些名称转换为ASCII兼容编码（ACE）；
* 第2步：将方案（scheme）和主机（host）规范化为小写，详见[RFC3987]第5.3.2.1节；
* 第3步：执行百分比编码归一化，详见第5.3.2.3节；
* 第4步：执行路径段归一化，详见第5.3.2.4节；
* 第5步：如果识别出方案，必须执行方案基础的归一化，详见第5.3.3节。

符合规范的实现必须识别并对以下方案执行方案基础的归一化：ldap、http、https和ftp。如果方案不被识别，则省略第5步。

在比较URI是否相等时，必须进行区分大小写的精确匹配。

实现应在显示前将URI转换为Unicode，具体为执行[RFC3987]第3.2节中规定的转换操作。

7.5. 国际化电子邮件地址

电子邮件地址可以在证书和CRL的subjectAltName和issuerAltName扩展、名称约束扩展、权限信息访问扩展、主体信息访问扩展、发行分发点扩展或CRL分发点扩展中包含。每个扩展都使用GeneralName结构，其中包括rfc822Name选项，其定义为IA5String。为了支持使用当前结构的国际化域名的电子邮件地址，符合规范的实现必须将地址转换为ASCII表示。

如果邮箱的主机部分（Mailbox的域）包含国际化名称，则必须将该域名从IDN转换为ASCII兼容编码（ACE）格式，按照第7.2节的规定。

两个电子邮件地址被视为匹配的条件是：

1）每个地址的本地部分（local-part）完全匹配；
2）每个地址的主机部分（host-part）使用不区分大小写的ASCII比较匹配。

实现应在显示前将这些扩展中指定的国际化电子邮件地址的主机部分转换为Unicode，具体为执行第7.2节中规定的转换操作。

8. 安全考虑

本规范的大部分内容涉及证书和CRL的格式与内容。由于证书和CRL都经过数字签名，无需额外的完整性保护措施。证书和CRL不需要保密，且对其的无限制和匿名访问不会带来安全风险。

然而，超出本规范范围的安全因素会影响对证书用户的保障。本节强调实现者、管理员和用户应考虑的关键问题。

证书授权中心（CA）和注册机构（RA）验证主体身份与其公钥绑定的程序，极大影响对证书的信任程度。依赖方应审查CA的认证实践声明，尤其在向其他CA颁发证书时尤为重要。

同时，强烈不建议使用单一密钥对进行签名和其他用途。使用不同的密钥对进行签名和密钥管理，为用户提供了更大的灵活性。签名密钥的丢失或泄露与密钥管理密钥的影响不同，使用不同的密钥对可以实现更平衡和灵活的应对措施。在某些应用环境中，为每个密钥对设置不同的有效期或密钥长度也是合理的。不幸的是，一些遗留应用（如SSL）仍使用单一密钥对进行签名和密钥管理。

私钥的保护是关键的安全因素。在小规模中，用户未能保护私钥可能导致攻击者冒充用户或解密个人信息。在大规模中，CA私钥的泄露可能造成灾难性后果。如果攻击者在未被察觉的情况下获得私钥，可能会签发伪造的证书和CRL，破坏系统的信任。一旦发现此类泄露，必须吊销所有由受影响CA颁发的证书，阻止其用户与其他CA用户之间的通信。恢复此类事件非常困难，因此建议CA采取强有力的技术措施（如抗篡改的密码模块）和管理措施（如职责分离）以防止此类事件发生。

CA私钥的丢失也可能带来问题，CA将无法生成CRL或进行正常的密钥轮换。CA应妥善备份私钥，确保备份的安全性是避免密钥泄露的关键。

吊销信息的可用性和及时性直接影响对证书的信任程度。虽然证书会自然过期，但在其有效期内可能发生事件，导致主体与公钥的绑定失效。如果吊销信息不及时或不可用，相关信任保障将大打折扣。依赖方可能无法处理CRL中的所有关键扩展。CA在仅通过包含关键扩展的CRL提供吊销信息时，应格外谨慎，尤其当这些扩展未被本配置文件强制支持时。例如，使用增量CRL和完整CRL结合提供吊销信息时，应确保其及时性和完整性。

如果delta CRLs的发布频率高于完整CRLs，那么无法处理与delta CRL相关的关键扩展的依赖方将无法获取最新的吊销信息。或者，如果每次发布delta CRL时都同时发布完整CRL，那么所有依赖方都能及时获得吊销信息。同样，省略吊销检查的第6节中描述的证书路径验证机制的实现，提供的保证程度也低于支持吊销检查的实现。

证书路径验证算法依赖于对一个或多个受信任CA的公钥（以及其他信息）具有一定的了解。信任某个CA的决定是一个重要的决策，因为它最终决定了对证书的信任程度。受信任CA公钥（通常以“自签名”证书的形式）经过认证的分发是一个安全关键的带外过程，超出了本规范的范围。

此外，当受信任的CA发生密钥泄露或CA失败时，用户需要修改提供给路径验证程序的信息。选择过多的受信任CA会使受信任CA信息难以维护；而只选择一个受信任CA可能会限制用户在一个封闭的社区中使用。

处理证书的实现质量也影响提供的保证程度。第6节中描述的路径验证算法依赖于受信任CA信息的完整性，尤其是与受信任CA相关的公钥的完整性。攻击者若能用其私钥替换公钥，可能会欺骗用户接受伪造的证书。

密钥与证书主题之间的绑定不能比用于生成签名的密码模块实现和算法更强。短密钥长度或弱哈希算法会限制证书的实用性。鼓励CA注意密码学的最新进展，以采用强密码技术。此外，CA应拒绝向生成弱签名的CA或终端实体颁发证书。

不一致的名称比较规则可能导致接受无效的X.509证书路径或拒绝有效路径。X.500系列规范定义了比较区分名的规则，要求不考虑大小写、字符集、多字符空白子串或前后空白。本规范放宽了这些要求，至少支持二进制比较。

CA必须在证书的主题字段中以相同方式编码区分名，与该CA签发的证书中的发行者字段中的区分名一致。如果CA使用不同的编码，可能导致实现无法识别包含此证书的路径中的名称链，从而拒绝有效路径。

此外，区分名的名称约束必须与主题字段或subjectAltName扩展中使用的编码完全一致。如果不一致，声明为excludedSubtrees的名称约束将无法匹配，导致接受无效路径；而声明为permittedSubtrees的名称约束无法匹配，可能会拒绝有效路径。为避免接受无效路径，CA应尽可能将区分名的名称约束声明为permittedSubtrees。

一般而言，使用nameConstraints扩展限制某一类名称（如DNS名称）对其他类别（如电子邮件地址）没有任何保护作用。

虽然X.509要求名称必须明确无歧义，但存在两个无关的机构可能会使用相同的发行者名称颁发证书和/或CRL的风险。为减少发行者名称冲突带来的问题和安全隐患，CA和CRL发行者的名称应采用能降低冲突可能性的命名方式。实现者应考虑存在多个无关CA和CRL发行者具有相同名称的可能性。至少，验证CRL的实现必须确保证书的路径和用于验证证书的CRL发行者路径都以相同的信任锚终止。

电子邮件地址的本地部分（local-part）区分大小写（[RFC2821]），但emailAddress属性值不区分大小写（[RFC2985]）。因此，如果邮件服务器利用邮箱本地部分的大小写敏感性，匹配规则可能会将两个不同的电子邮件地址视为相同，存在误判风险。实现者不应在emailAddress属性中包含那些托管邮箱的服务器对本地部分区分大小写的地址。

实现者应注意，如果CRL分发点或authorityInformationAccess扩展中的链接指向恶意代码，可能带来风险。应始终验证检索到的数据，确保其格式正确。

当证书中的cRLDistributionPoints扩展包含https URI或类似方案时，可能引入循环依赖。依赖方需要进行额外的路径验证以获取CRL，从而完成初始路径验证。authorityInfoAccess或subjectInfoAccess扩展中的https URI（或类似方案）也可能引发此类循环条件。最坏情况下，这可能导致无法解决的依赖关系。

CA不应在扩展中包含指定https、ldaps或类似方案的URI。若必须包含，必须确保服务器证书可以在不使用URI指向信息的情况下验证。依赖方在验证时若选择验证服务器证书，可能会遇到无限递归的问题。

自签名证书为CA提供了一种自动化机制，用于指示CA操作的变更，特别是实现平滑过渡，从一个未被攻破的CA密钥对切换到另一个。详细的“CA密钥更新”程序在[RFC4210]中规定，CA用其旧私钥保护新公钥，反之亦然，使用两个自签名证书。符合规范的客户端实现会处理自签名证书，判断是否可以信任新密钥下颁发的证书。自签名证书还可用于支持CA操作的其他变更，例如增加政策集，采用类似程序。

一些遗留实现支持用ISO 8859-1字符集（Latin1String）编码的名称，但将其标记为TeletexString。TeletexString编码的字符集比ISO 8859-1更大，但某些字符编码不同。第7.1节中定义的名称比较规则假设TeletexString按照ASN.1标准编码。用Latin1String编码的名称进行比较时，可能出现误判。

字符串从内部表示映射到可视表示时，可能会出现不同字符串具有相同或相似的视觉表现的情况。这可能由多种原因引起，包括使用相似的字形、复合字符（如e + ’等于U+00E9，韩语复合字符，以及某些语言中的元音在辅音簇上方）。因此，进行视觉比较时，用户可能误以为两个不同的名称相同，或误认一个字符串为另一个。证书发行者和依赖方都应意识到这一情况。

以下是该英文内容的中文翻译：

---

RFC 5280  PKIX 证书与 CRL 配置文件  2008年5月

[RFC3280]  Housley, R.，Polk, W.，Ford, W.，D. Solo，“互联网X.509 公钥基础设施证书与吊销列表（CRL）配置文件”，RFC 3280，2002年4月。

[RFC4055]  Schaad, J.，Kaliski, B.，Housley, R.，“用于互联网X.509 公钥基础设施证书与CRL配置文件的RSA密码算法及标识符的补充算法”，RFC 4055，2005年6月。

[RFC4120]  Neuman, C.，Yu, T.，Hartman, S.，Raeburn, K.，“Kerberos网络认证服务（V5）”，RFC 4120，2005年7月。

[RFC4210]  Adams, C.，Farrell, S.，Kause, T.，Mononen, T.，“互联网X.509 公钥基础设施证书管理协议（CMP）”，RFC 4210，2005年9月。

[RFC4325]  Santesson, S.，Housley, R.，“互联网X.509 公钥基础设施权威信息访问证书吊销列表（CRL）扩展”，RFC 4325，2005年12月。

[RFC4491]  Leontiev, S.（主编），D. Shefanovski（主编），“在互联网X.509 公钥基础设施证书与CRL配置文件中使用GOST R 34.10-94、GOST R 34.10-2001 和 GOST R 34.11-94算法”，RFC 4491，2006年5月。

[RFC4510]  Zeilenga, K.（主编），“轻量级目录访问协议（LDAP）：技术规范路线图”，RFC 4510，2006年6月。

[RFC4512]  Zeilenga, K.（主编），“轻量级目录访问协议（LDAP）：目录信息模型”，RFC 4512，2006年6月。

[RFC4514]  Zeilenga, K.（主编），“轻量级目录访问协议（LDAP）：区分名的字符串表示”，RFC 4514，2006年6月。

[RFC4519]  Sciberras, A.（主编），“轻量级目录访问协议（LDAP）：用户应用的模式”，RFC 4519，2006年6月。

[RFC4630]  Housley, R.，S. Santesson，“互联网X.509 公钥基础设施证书与CRL配置文件中DirectoryString处理的更新”，RFC 4630，2006年8月。

[X.500]  ITU-T推荐标准X.500（2005）| ISO/IEC 9594-1:2005，信息技术——开放系统互联——目录：概念、模型与服务概述。

[X.501]  ITU-T推荐标准X.501（2005）| ISO/IEC 9594-2:2005，信息技术——开放系统互联——目录：模型。

[X.509]  ITU-T推荐标准X.509（2005）| ISO/IEC 9594-8:2005，信息技术——开放系统互联——目录：公钥与属性证书框架。

[X.520]  ITU-T推荐标准X.520（2005）| ISO/IEC 9594-6:2005，信息技术——开放系统互联——目录：精选属性类型。

[X.660]  ITU-T推荐标准X.660（2004）| ISO/IEC 9834-1:2005，信息技术——开放系统互联——OSI注册管理机构操作程序：通用程序与ASN.1对象标识符树的顶层弧。

[X.683]  ITU-T推荐标准X.683（2002）| ISO/IEC 8824-4:2002，信息技术——抽象语法标记（ASN.1）：ASN.1规范的参数化。

[X9.55]  ANSI X9.55-1997，金融服务行业的公钥密码学：公钥证书与吊销列表的扩展，1997年1月。

---

附录A. 伪ASN.1结构与对象标识符（OIDs）

本附录描述符合规范的PKI组件使用的“类似ASN.1”的语法数据对象。该语法是1988年和1993年ASN.1语法的混合体。1988 ASN.1语法增加了1993年的通用类型UniversalString、BMPString和UTF8String。

ASN.1语法不允许在ASN.1模块中包含类型声明，而1993 ASN.1标准也不允许在使用1988语法的模块中使用新的通用类型。因此，该模块不符合任何版本的ASN.1标准。

本附录可以通过将通用类型的定义替换为1988年的“ANY”类型，转换为1988 ASN.1。

A.1. 明确标记模块，1988语法

PKIX1Explicit88 { iso(1) 组织识别(3) dod(6) internet(1) 安全(5) 机制(5) pkix(7) id-mod(0) id-pkix1-explicit(18) }

定义显式标签 ::=

BEGIN

-- 导出所有 --

-- 不导入任何 --

-- 由1993和1998 ASN.1定义的通用类型
-- 以及本规范所需

UniversalString ::= [UNIVERSAL 28] IMPLICIT OCTET STRING
        -- UniversalString在ASN.1:1993中定义

BMPString ::= [UNIVERSAL 30] IMPLICIT OCTET STRING
      -- BMPString是UniversalString的子类型，表示ISO/IEC 10646的基本多语言平面

UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING
      -- 该类型内容符合RFC 3629。

-- PKIX特定的对象标识符（OIDs）

id-pkix  OBJECT IDENTIFIER  ::=
         { iso(1) 组织识别(3) dod(6) internet(1)
                    安全(5) 机制(5) pkix(7) }

-- PKIX路径

id-pe OBJECT IDENTIFIER ::= { id-pkix 1 }
        -- 私有证书扩展的路径
id-qt OBJECT IDENTIFIER ::= { id-pkix 2 }
        -- 策略限定符类型的路径
id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }
        -- 扩展密钥用途的OID路径
id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }
        -- 访问描述符的路径

-- Internet策略限定符的policyQualifierIds

id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
      -- CPS限定符的OID
id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
      -- 用户通知限定符的OID

-- 访问描述符定义

id-ad-ocsp         OBJECT IDENTIFIER ::= { id-ad 1 }
id-ad-caIssuers    OBJECT IDENTIFIER ::= { id-ad 2 }
id-ad-timeStamping OBJECT IDENTIFIER ::= { id-ad 3 }
id-ad-caRepository OBJECT IDENTIFIER ::= { id-ad 5 }

-- 属性数据类型

Attribute               ::= SEQUENCE {
      type             AttributeType,
      values    SET OF AttributeValue }
            -- 至少一个值

AttributeType           ::= OBJECT IDENTIFIER

AttributeValue          ::= ANY -- 由AttributeType定义

AttributeTypeAndValue   ::= SEQUENCE {
        type    AttributeType,
        value   AttributeValue }

-- 建议的命名属性：以下信息对象集的定义可以扩展以满足本地需求。注意，删除成员可能会阻碍与符合标准的实现的互操作性。
-- 成对出现：AttributeType后跟相应AttributeValue的类型定义

-- 标准命名属性的路径

id-at OBJECT IDENTIFIER ::= { joint-iso-ccitt(2) ds(5) 4 }

-- X520name类型的命名属性

id-at-name                AttributeType ::= { id-at 41 }
id-at-surname             AttributeType ::= { id-at  4 }
id-at-givenName           AttributeType ::= { id-at 42 }
id-at-initials            AttributeType ::= { id-at 43 }
id-at-generationQualifier AttributeType ::= { id-at 44 }

-- X520Name类型的命名属性：
--   X520name ::= DirectoryString (SIZE (1..ub-name))
--
-- 为避免参数化类型而展开：
X520name ::= CHOICE {
      teletexString     TeletexString   (SIZE (1..ub-name)),
      printableString   PrintableString (SIZE (1..ub-name)),
      universalString   UniversalString (SIZE (1..ub-name)),
      utf8String        UTF8String      (SIZE (1..ub-name)),
      bmpString         BMPString       (SIZE (1..ub-name)) }

-- X520CommonName类型的命名属性

id-at-commonName        AttributeType ::= { id-at 3 }

-- X520CommonName类型的命名属性：
--   X520CommonName ::= DirectoryName (SIZE (1..ub-common-name))
--
-- 为避免参数化类型而展开：
X520CommonName ::= CHOICE {
      teletexString     TeletexString   (SIZE (1..ub-common-name)),
      printableString   PrintableString (SIZE (1..ub-common-name)),
      universalString   UniversalString (SIZE (1..ub-common-name)),
      utf8String        UTF8String      (SIZE (1..ub-common-name)),
      bmpString         BMPString       (SIZE (1..ub-common-name)) }

-- X520LocalityName类型的命名属性

id-at-localityName      AttributeType ::= { id-at 7 }

-- X520LocalityName类型的命名属性：
--   X520LocalityName ::= DirectoryName (SIZE (1..ub-locality-name))
--
-- 为避免参数化类型而展开：
X520LocalityName ::= CHOICE {
      teletexString     TeletexString   (SIZE (1..ub-locality-name)),
      printableString   PrintableString (SIZE (1..ub-locality-name)),
      universalString   UniversalString (SIZE (1..ub-locality-name)),
      utf8String        UTF8String      (SIZE (1..ub-locality-name)),
      bmpString         BMPString       (SIZE (1..ub-locality-name)) }

-- X520StateOrProvinceName类型的命名属性

id-at-stateOrProvinceName AttributeType ::= { id-at 8 }

-- X520StateOrProvinceName类型的命名属性：
--   X520StateOrProvinceName ::= DirectoryName (SIZE (1..ub-state-name))
--
-- 为避免参数化类型而展开：
X520StateOrProvinceName ::= CHOICE {
      teletexString     TeletexString   (SIZE (1..ub-state-name)),
      printableString   PrintableString (SIZE (1..ub-state-name)),
      universalString   UniversalString (SIZE (1..ub-state-name)),
      utf8String        UTF8String      (SIZE (1..ub-state-name)),
      bmpString         BMPString       (SIZE (1..ub-state-name)) }

-- X520OrganizationName类型的命名属性

id-at-organizationName  AttributeType ::= { id-at 10 }

-- X520OrganizationName类型的命名属性：
--   X520OrganizationName ::=
--          DirectoryName (SIZE (1..ub-organization-name))
--
-- 为避免参数化类型而展开：
X520OrganizationName ::= CHOICE {
      teletexString     TeletexString
                          (SIZE (1..ub-organization-name)),
      printableString   PrintableString
                          (SIZE (1..ub-organization-name)),
      universalString   UniversalString
                          (SIZE (1..ub-organization-name)),
      utf8String        UTF8String
                          (SIZE (1..ub-organization-name)),
      bmpString         BMPString
                          (SIZE (1..ub-organization-name))  }

-- X520OrganizationalUnitName类型的命名属性

id-at-organizationalUnitName AttributeType ::= { id-at 11 }

-- X520OrganizationalUnitName类型的命名属性：
--   X520OrganizationalUnitName ::=
--          DirectoryName (SIZE (1..ub-organizational-unit-name))
--
-- 为避免参数化类型而展开：
X520OrganizationalUnitName ::= CHOICE {
      teletexString     TeletexString
                          (SIZE (1..ub-organizational-unit-name)),
      printableString   PrintableString
                          (SIZE (1..ub-organizational-unit-name)),
      universalString   UniversalString
                          (SIZE (1..ub-organizational-unit-name)),
      utf8String        UTF8String
                          (SIZE (1..ub-organizational-unit-name)),
      bmpString         BMPString
                          (SIZE (1..ub-organizational-unit-name)) }

-- X520Title类型的命名属性

id-at-title             AttributeType ::= { id-at 12 }

-- X520Title类型的命名属性：
--   X520Title ::= DirectoryName (SIZE (1..ub-title))
--
-- 为避免参数化类型而展开：
X520Title ::= CHOICE {
      teletexString     TeletexString   (SIZE (1..ub-title)),
      printableString   PrintableString (SIZE (1..ub-title)),
      universalString   UniversalString (SIZE (1..ub-title)),
      utf8String        UTF8String      (SIZE (1..ub-title)),
      bmpString         BMPString       (SIZE (1..ub-title)) }

-- X520dnQualifier类型的命名属性

id-at-dnQualifier       AttributeType ::= { id-at 46 }

X520dnQualifier ::=     PrintableString

-- X520国家名（来自ISO 3166的双字符代码）类型的命名属性

id-at-countryName       AttributeType ::= { id-at 6 }

X520countryName ::=     PrintableString (SIZE (2))

-- X520序列号类型的命名属性

id-at-serialNumber      AttributeType ::= { id-at 5 }

X520SerialNumber ::=    PrintableString (SIZE (1..ub-serial-number))

-- X520假名（Pseudonym）类型的命名属性

id-at-pseudonym         AttributeType ::= { id-at 65 }

-- X520Pseudonym类型的命名属性：
--   X520Pseudonym ::= DirectoryName (SIZE (1..ub-pseudonym))
--
-- 为避免参数化类型而展开：
X520Pseudonym ::= CHOICE {
   teletexString     TeletexString   (SIZE (1..ub-pseudonym)),
   printableString   PrintableString (SIZE (1..ub-pseudonym)),
   universalString   UniversalString (SIZE (1..ub-pseudonym)),
   utf8String        UTF8String      (SIZE (1..ub-pseudonym)),
   bmpString         BMPString       (SIZE (1..ub-pseudonym)) }

-- RFC 4519中的域组件（DomainComponent）类型的命名属性

id-domainComponent   AttributeType ::= { 0 9 2342 19200300 100 1 25 }

DomainComponent ::=  IA5String

-- 传统属性

pkcs-9 OBJECT IDENTIFIER ::=
       { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) 9 }

id-emailAddress      AttributeType ::= { pkcs-9 1 }

EmailAddress ::=     IA5String (SIZE (1..ub-emailaddress-length))

-- 命名数据类型 --

Name ::= CHOICE { -- 目前只有一种可能 --
      rdnSequence  RDNSequence }

RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

DistinguishedName ::=   RDNSequence

RelativeDistinguishedName ::= SET SIZE (1..MAX) OF AttributeTypeAndValue

-- 目录字符串类型 --

DirectoryString ::= CHOICE {
      teletexString       TeletexString   (SIZE (1..MAX)),
      printableString     PrintableString (SIZE (1..MAX)),
      universalString     UniversalString (SIZE (1..MAX)),
      utf8String          UTF8String      (SIZE (1..MAX)),
      bmpString           BMPString       (SIZE (1..MAX)) }

-- 证书和CRL特定结构从此开始

Certificate  ::=  SEQUENCE  {
     tbsCertificate       TBSCertificate,
     signatureAlgorithm   AlgorithmIdentifier,
     signature            BIT STRING  }

-- 证书主体部分

TBSCertificate  ::=  SEQUENCE  {
     version         [0]  Version DEFAULT v1,
     serialNumber         CertificateSerialNumber,
     signature            AlgorithmIdentifier,
     issuer               Name,
     validity             Validity,
     subject              Name,
     subjectPublicKeyInfo SubjectPublicKeyInfo,
     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
                          -- 若存在，版本必须为v2或v3
     subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
                          -- 若存在，版本必须为v2或v3
     extensions      [3]  Extensions OPTIONAL
                          -- 若存在，版本必须为v3 --  }

Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }

CertificateSerialNumber  ::=  INTEGER

Validity ::= SEQUENCE {
     notBefore      Time,
     notAfter       Time  }

Time ::= CHOICE {
     utcTime        UTCTime,
     generalTime    GeneralizedTime }

UniqueIdentifier  ::=  BIT STRING

SubjectPublicKeyInfo  ::=  SEQUENCE  {
     algorithm            AlgorithmIdentifier,
     subjectPublicKey     BIT STRING  }

Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension

Extension  ::=  SEQUENCE  {
     extnID      OBJECT IDENTIFIER,
     critical    BOOLEAN DEFAULT FALSE,
     extnValue   OCTET STRING
                 -- 包含ASN.1值的DER编码
                 -- 与extnID标识的扩展类型对应
     }

-- CRL结构

CertificateList  ::=  SEQUENCE  {
     tbsCertList          TBSCertList,
     signatureAlgorithm   AlgorithmIdentifier,
     signature            BIT STRING  }

TBSCertList  ::=  SEQUENCE  {
     version                 Version OPTIONAL,
                                   -- 若存在，必须为v2
     signature               AlgorithmIdentifier,
     issuer                  Name,
     thisUpdate              Time,
     nextUpdate              Time OPTIONAL,
     revokedCertificates     SEQUENCE OF SEQUENCE  {
          userCertificate         CertificateSerialNumber,
          revocationDate          Time,
          crlEntryExtensions      Extensions OPTIONAL
                                   -- 若存在，必须为v2
                               }  OPTIONAL,
     crlExtensions           [0] Extensions OPTIONAL }
                                   -- 若存在，必须为v2

-- 版本、时间、证书序列号和扩展在前文已定义，用于证书结构

AlgorithmIdentifier  ::=  SEQUENCE  {
     algorithm               OBJECT IDENTIFIER,
     parameters              ANY DEFINED BY algorithm OPTIONAL  }
                                -- 包含与算法对象标识符值注册使用的值

END

---

以上为全文的中文翻译。

-- X.400 地址语法从此处开始

ORAddress ::= SEQUENCE {
   built-in-standard-attributes BuiltInStandardAttributes,
   built-in-domain-defined-attributes
                   BuiltInDomainDefinedAttributes OPTIONAL,
   -- 另见 teletex-domain-defined-attributes
   extension-attributes ExtensionAttributes OPTIONAL }










合作，等人              标准追踪                   [第118页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


-- 内置标准属性

BuiltInStandardAttributes ::= SEQUENCE {
   country-name                  国家名称 OPTIONAL,
   administration-domain-name    管理域名 OPTIONAL,
   network-address           [0] IMPLICIT NetworkAddress OPTIONAL,
     -- 另见 extended-network-address
   terminal-identifier       [1] IMPLICIT TerminalIdentifier OPTIONAL,
   private-domain-name       [2] PrivateDomainName OPTIONAL,
   organization-name         [3] IMPLICIT OrganizationName OPTIONAL,
     -- 另见 teletex-organization-name
   numeric-user-identifier   [4] IMPLICIT NumericUserIdentifier OPTIONAL,
   personal-name             [5] IMPLICIT PersonalName OPTIONAL,
     -- 另见 teletex-personal-name
   organizational-unit-names [6] IMPLICIT OrganizationalUnitNames OPTIONAL }
     -- 另见 teletex-organizational-unit-names

CountryName ::= [APPLICATION 1] CHOICE {
   x121-dcc-code         数字字符串
                           (SIZE (ub-country-name-numeric-length)),
   iso-3166-alpha2-code  可打印字符串
                           (SIZE (ub-country-name-alpha-length)) }

AdministrationDomainName ::= [APPLICATION 2] CHOICE {
   数字   数字字符串   (SIZE (0..ub-domain-name-length)),
   可打印  可打印字符串 (SIZE (0..ub-domain-name-length)) }

NetworkAddress ::= X121Address  -- 另见 extended-network-address

X121Address ::= 数字字符串 (SIZE (1..ub-x121-address-length))

TerminalIdentifier ::= 可打印字符串 (SIZE (1..ub-terminal-id-length))

PrivateDomainName ::= CHOICE {
   数字   数字字符串   (SIZE (1..ub-domain-name-length)),
   可打印  可打印字符串 (SIZE (1..ub-domain-name-length)) }

OrganizationName ::= 可打印字符串
                            (SIZE (1..ub-organization-name-length))
  -- 另见 teletex-organization-name

NumericUserIdentifier ::= 数字字符串
                            (SIZE (1..ub-numeric-user-id-length))






合作，等人              标准追踪                   [第119页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


PersonalName ::= SET {
   surname     [0] IMPLICIT 可打印字符串
                    (SIZE (1..ub-surname-length)),
   given-name  [1] IMPLICIT 可打印字符串
                    (SIZE (1..ub-given-name-length)) OPTIONAL,
   initials    [2] IMPLICIT 可打印字符串
                    (SIZE (1..ub-initials-length)) OPTIONAL,
   generation-qualifier [3] IMPLICIT 可打印字符串
                    (SIZE (1..ub-generation-qualifier-length))
                    OPTIONAL }
  -- 另见 teletex-personal-name

OrganizationalUnitNames ::= SEQUENCE SIZE (1..ub-organizational-units)
                             OF OrganizationalUnitName
  -- 另见 teletex-organizational-unit-names

OrganizationalUnitName ::= 可打印字符串 (SIZE
                    (1..ub-organizational-unit-name-length))

-- 内置域定义属性

BuiltInDomainDefinedAttributes ::= SEQUENCE SIZE
                    (1..ub-domain-defined-attributes) OF
                    BuiltInDomainDefinedAttribute

BuiltInDomainDefinedAttribute ::= SEQUENCE {
   type 可打印字符串 (SIZE
                   (1..ub-domain-defined-attribute-type-length)),
   value 可打印字符串 (SIZE
                   (1..ub-domain-defined-attribute-value-length)) }

-- 扩展属性

ExtensionAttributes ::= SET SIZE (1..ub-extension-attributes) OF
               ExtensionAttribute

ExtensionAttribute ::=  SEQUENCE {
   extension-attribute-type [0] IMPLICIT 整数
                   (0..ub-extension-attributes),
   extension-attribute-value [1]
                   由 extension-attribute-type 定义的 ANY }

-- 扩展类型和属性值

常用名 INTEGER ::= 1

CommonName ::= 可打印字符串 (SIZE (1..ub-common-name-length))




合作，等人              标准追踪                   [第120页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


teletex-common-name INTEGER ::= 2

TeletexCommonName ::= TeletexString (SIZE (1..ub-common-name-length))

teletex-organization-name INTEGER ::= 3

TeletexOrganizationName ::= TeletexString (SIZE (1..ub-organization-name-length))

teletex-personal-name INTEGER ::= 4

TeletexPersonalName ::= SET {
   surname     [0] IMPLICIT TeletexString
                    (SIZE (1..ub-surname-length)),
   given-name  [1] IMPLICIT TeletexString
                    (SIZE (1..ub-given-name-length)) OPTIONAL,
   initials    [2] IMPLICIT TeletexString
                    (SIZE (1..ub-initials-length)) OPTIONAL,
   generation-qualifier [3] IMPLICIT TeletexString
                    (SIZE (1..ub-generation-qualifier-length))
                    OPTIONAL }

teletex-organizational-unit-names INTEGER ::= 5

TeletexOrganizationalUnitNames ::= SEQUENCE SIZE
      (1..ub-organizational-units) OF TeletexOrganizationalUnitName

TeletexOrganizationalUnitName ::= TeletexString
                  (SIZE (1..ub-organizational-unit-name-length))

pds-name INTEGER ::= 7

PDSName ::= 可打印字符串 (SIZE (1..ub-pds-name-length))

physical-delivery-country-name INTEGER ::= 8

PhysicalDeliveryCountryName ::= CHOICE {
   x121-dcc-code 数字字符串 (SIZE (ub-country-name-numeric-length)),
   iso-3166-alpha2-code 可打印字符串
                               (SIZE (ub-country-name-alpha-length)) }

postal-code INTEGER ::= 9

PostalCode ::= CHOICE {
   数字代码   数字字符串 (SIZE (1..ub-postal-code-length)),
   可打印代码 可打印字符串 (SIZE (1..ub-postal-code-length)) }

physical-delivery-office-name INTEGER ::= 10



合作，等人              标准追踪                   [第121页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


PhysicalDeliveryOfficeName ::= PDSParameter

physical-delivery-office-number INTEGER ::= 11

PhysicalDeliveryOfficeNumber ::= PDSParameter

extension-OR-address-components INTEGER ::= 12

ExtensionORAddressComponents ::= PDSParameter

physical-delivery-personal-name INTEGER ::= 13

PhysicalDeliveryPersonalName ::= PDSParameter

physical-delivery-organization-name INTEGER ::= 14

PhysicalDeliveryOrganizationName ::= PDSParameter

extension-physical-delivery-address-components INTEGER ::= 15

ExtensionPhysicalDeliveryAddressComponents ::= PDSParameter

unformatted-postal-address INTEGER ::= 16

UnformattedPostalAddress ::= SET {
   printable-address SEQUENCE SIZE (1..ub-pds-physical-address-lines)
        OF 可打印字符串 (SIZE (1..ub-pds-parameter-length)) OPTIONAL,
   teletex-string TeletexString
        (SIZE (1..ub-unformatted-address-length)) OPTIONAL }

street-address INTEGER ::= 17

StreetAddress ::= PDSParameter

post-office-box-address INTEGER ::= 18

PostOfficeBoxAddress ::= PDSParameter

poste-restante-address INTEGER ::= 19

PosteRestanteAddress ::= PDSParameter

unique-postal-name INTEGER ::= 20

UniquePostalName ::= PDSParameter

local-postal-attributes INTEGER ::= 21




合作，等人              标准追踪                   [第122页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


LocalPostalAttributes ::= PDSParameter

PDSParameter ::= SET {
   printable-string 可打印字符串
                (SIZE(1..ub-pds-parameter-length)) OPTIONAL,
   teletex-string TeletexString
                (SIZE(1..ub-pds-parameter-length)) OPTIONAL }

extended-network-address INTEGER ::= 22

ExtendedNetworkAddress ::= CHOICE {
   e163-4-address SEQUENCE {
      number      [0] IMPLICIT 数字字符串
                       (SIZE (1..ub-e163-4-number-length)),
      sub-address [1] IMPLICIT 数字字符串
                       (SIZE (1..ub-e163-4-sub-address-length))
                       OPTIONAL },
   psap-address   [0] IMPLICIT PresentationAddress }

PresentationAddress ::= SEQUENCE {
    pSelector     [0] 显式 OCTET STRING OPTIONAL,
    sSelector     [1] 显式 OCTET STRING OPTIONAL,
    tSelector     [2] 显式 OCTET STRING OPTIONAL,
    nAddresses    [3] 显式 SET SIZE (1..MAX) OF OCTET STRING }

terminal-type  INTEGER ::= 23

TerminalType ::= INTEGER {
   telex        (3),
   teletex      (4),
   g3-facsimile (5),
   g4-facsimile (6),
   ia5-terminal (7),
   videotex     (8) } (0..ub-integer-options)

-- 扩展域定义属性

teletex-domain-defined-attributes INTEGER ::= 6

TeletexDomainDefinedAttributes ::= SEQUENCE SIZE
   (1..ub-domain-defined-attributes) OF TeletexDomainDefinedAttribute

TeletexDomainDefinedAttribute ::= SEQUENCE {
        type TeletexString
               (SIZE (1..ub-domain-defined-attribute-type-length)),
        value TeletexString
               (SIZE (1..ub-domain-defined-attribute-value-length)) }




合作，等人              标准追踪                   [第123页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


--  上限的规范必须被视为强制性的
--  来自ITU-T X.411参考定义的附录B中的MTS参数
--  上限

-- 上限
ub-name INTEGER ::= 32768
ub-common-name INTEGER ::= 64
ub-locality-name INTEGER ::= 128
ub-state-name INTEGER ::= 128
ub-organization-name INTEGER ::= 64
ub-organizational-unit-name INTEGER ::= 64
ub-title INTEGER ::= 64
ub-serial-number INTEGER ::= 64
ub-match INTEGER ::= 128
ub-emailaddress-length INTEGER ::= 255
ub-common-name-length INTEGER ::= 64
ub-country-name-alpha-length INTEGER ::= 2
ub-country-name-numeric-length INTEGER ::= 3
ub-domain-defined-attributes INTEGER ::= 4
ub-domain-defined-attribute-type-length INTEGER ::= 8
ub-domain-defined-attribute-value-length INTEGER ::= 128
ub-domain-name-length INTEGER ::= 16
ub-extension-attributes INTEGER ::= 256
ub-e163-4-number-length INTEGER ::= 15
ub-e163-4-sub-address-length INTEGER ::= 40
ub-generation-qualifier-length INTEGER ::= 3
ub-given-name-length INTEGER ::= 16
ub-initials-length INTEGER ::= 5
ub-integer-options INTEGER ::= 256
ub-numeric-user-id-length INTEGER ::= 32
ub-organization-name-length INTEGER ::= 64
ub-organizational-unit-name-length INTEGER ::= 32
ub-organizational-units INTEGER ::= 4
ub-pds-name-length INTEGER ::= 16
ub-pds-parameter-length INTEGER ::= 30
ub-pds-physical-address-lines INTEGER ::= 6
ub-postal-code-length INTEGER ::= 16
ub-pseudonym INTEGER ::= 128
ub-surname-length INTEGER ::= 40
ub-terminal-id-length INTEGER ::= 24
ub-unformatted-address-length INTEGER ::= 180
ub-x121-address-length INTEGER ::= 16

-- 注意 - 字符串类型（如 TeletexString）上的上限
-- 以字符为单位测量。除可打印字符串（PrintableString）或 IA5String 外，
-- 需要更多的八位字节来存储此类值。最低应允许16个八位字节，或
-- 上述最大值的两倍，以较大者为准。

-- TeletexString。对于 UTF8String 或 UniversalString，至少应允许四倍于上限的长度。

结束

A.2. 隐式标记模块，1988年语法

PKIX1Implicit88 { iso(1) 识别组织(3) dod(6) internet(1)
  security(5) mechanisms(5) pkix(7) id-mod(0) id-pkix1-implicit(19) }

定义 隐式标签 ::

开始

-- 导出全部 --

导入
      id-pe, id-kp, id-qt-unotice, id-qt-cps,
      -- 若支持“新”类型，请删除以下行 --
      BMPString, UTF8String,  -- 结束“新”类型 --
      ORAddress, Name, RelativeDistinguishedName,
      CertificateSerialNumber, Attribute, DirectoryString
      来自 PKIX1Explicit88 { iso(1) 识别组织(3)
            dod(6) internet(1) security(5) mechanisms(5) pkix(7)
            id-mod(0) id-pkix1-explicit(18) };

-- 标准证书和 CRL 扩展的 ISO 弧线

id-ce OBJECT IDENTIFIER  ::=  {joint-iso-ccitt(2) ds(5) 29}

-- authority key identifier OID 和语法

id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 35 }

AuthorityKeyIdentifier ::= SEQUENCE {
    keyIdentifier             [0] KeyIdentifier            OPTIONAL,
    authorityCertIssuer       [1] GeneralNames             OPTIONAL,
    authorityCertSerialNumber [2] CertificateSerialNumber  OPTIONAL }
    -- authorityCertIssuer 和 authorityCertSerialNumber 必须同时
    -- 存在或都不存在

KeyIdentifier ::= OCTET STRING









合作，等人              标准追踪                   [第125页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


-- subject key identifier OID 和语法

id-ce-subjectKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 14 }

SubjectKeyIdentifier ::= KeyIdentifier

-- 密钥用法扩展 OID 和语法

id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }

KeyUsage ::= BIT STRING {
     数字签名        (0),
     不可否认性      (1),  -- 最近版本的 X.509 将
                                -- 这个位重命名为内容承诺
     密钥加密        (2),
     数据加密        (3),
     密钥协商        (4),
     证书签名        (5),
     CRL签名        (6),
     仅加密        (7),
     仅解密        (8) }

-- 私钥使用期限扩展 OID 和语法

id-ce-privateKeyUsagePeriod OBJECT IDENTIFIER ::=  { id-ce 16 }

PrivateKeyUsagePeriod ::= SEQUENCE {
     notBefore       [0]     GeneralizedTime OPTIONAL,
     notAfter        [1]     GeneralizedTime OPTIONAL }
     -- 必须存在 notBefore 或 notAfter

-- 证书策略扩展 OID 和语法

id-ce-certificatePolicies OBJECT IDENTIFIER ::=  { id-ce 32 }

anyPolicy OBJECT IDENTIFIER ::= { id-ce-certificatePolicies 0 }

CertificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation

PolicyInformation ::= SEQUENCE {
     policyIdentifier   CertPolicyId,
     policyQualifiers   SEQUENCE SIZE (1..MAX) OF
             PolicyQualifierInfo OPTIONAL }

CertPolicyId ::= OBJECT IDENTIFIER






合作，等人              标准追踪                   [第126页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


PolicyQualifierInfo ::= SEQUENCE {
     policyQualifierId  PolicyQualifierId,
     qualifier          由 policyQualifierId 定义的 ANY }

-- 识别额外策略限定符的实现必须
-- 增强以下 PolicyQualifierId 的定义

PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )

-- CPS 指针限定符

CPSuri ::= IA5String

-- 用户通知限定符

UserNotice ::= SEQUENCE {
     noticeRef        NoticeReference OPTIONAL,
     explicitText     DisplayText OPTIONAL }

NoticeReference ::= SEQUENCE {
     organization     DisplayText,
     noticeNumbers    SEQUENCE OF INTEGER }

DisplayText ::= CHOICE {
     ia5String        IA5String      (SIZE (1..200)),
     visibleString    VisibleString  (SIZE (1..200)),
     bmpString        BMPString      (SIZE (1..200)),
     utf8String       UTF8String     (SIZE (1..200)) }

-- 策略映射扩展 OID 和语法

id-ce-policyMappings OBJECT IDENTIFIER ::=  { id-ce 33 }

PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {
     issuerDomainPolicy      CertPolicyId,
     subjectDomainPolicy     CertPolicyId }

-- 主题备用名称扩展 OID 和语法

id-ce-subjectAltName OBJECT IDENTIFIER ::=  { id-ce 17 }

SubjectAltName ::= GeneralNames

GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName







合作，等人              标准追踪                   [第127页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


GeneralName ::= CHOICE {
     otherName                 [0]  其他名称,
     rfc822Name                [1]  IA5String,
     dNSName                   [2]  IA5String,
     x400Address               [3]  ORAddress,
     directoryName             [4]  Name,
     ediPartyName              [5]  EDIPartyName,
     uniformResourceIdentifier [6]  IA5String,
     iPAddress                 [7]  OCTET STRING,
     registeredID              [8]  OBJECT IDENTIFIER }

-- 其他名称替代 OTHER-NAME ::= TYPE-IDENTIFIER，因为
-- TYPE-IDENTIFIER 在 '88 ASN.1 语法中不支持

AnotherName ::= SEQUENCE {
     type-id    OBJECT IDENTIFIER,
     value      [0] 显式 由 type-id 定义的 ANY }

EDIPartyName ::= SEQUENCE {
     nameAssigner              [0]  目录字符串 OPTIONAL,
     partyName                 [1]  目录字符串 }

-- 发行者备用名称扩展 OID 和语法

id-ce-issuerAltName OBJECT IDENTIFIER ::=  { id-ce 18 }

IssuerAltName ::= GeneralNames

id-ce-subjectDirectoryAttributes OBJECT IDENTIFIER ::=  { id-ce 9 }

SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute

-- 基本约束扩展 OID 和语法

id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }

BasicConstraints ::= SEQUENCE {
     cA                      BOOLEAN 默认 FALSE,
     pathLenConstraint       INTEGER (0..MAX) OPTIONAL }












合作，等人              标准追踪                   [第128页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


-- 名称约束扩展 OID 和语法

id-ce-nameConstraints OBJECT IDENTIFIER ::=  { id-ce 30 }

NameConstraints ::= SEQUENCE {
     permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
     excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }

GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree

GeneralSubtree ::= SEQUENCE {
     base                    GeneralName,
     minimum         [0]     BaseDistance 默认 0,
     maximum         [1]     BaseDistance OPTIONAL }

BaseDistance ::= INTEGER (0..MAX)

-- 策略约束扩展 OID 和语法

id-ce-policyConstraints OBJECT IDENTIFIER ::=  { id-ce 36 }

PolicyConstraints ::= SEQUENCE {
     requireExplicitPolicy   [0]     SkipCerts OPTIONAL,
     inhibitPolicyMapping    [1]     SkipCerts OPTIONAL }

SkipCerts ::= INTEGER (0..MAX)

-- CRL 分发点扩展 OID 和语法

id-ce-cRLDistributionPoints     OBJECT IDENTIFIER  ::=  {id-ce 31}

CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint

DistributionPoint ::= SEQUENCE {
     distributionPoint       [0]     DistributionPointName OPTIONAL,
     reasons                 [1]     ReasonFlags OPTIONAL,
     cRLIssuer               [2]     GeneralNames OPTIONAL }

DistributionPointName ::= CHOICE {
     fullName                [0]     GeneralNames,
     nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }










合作，等人              标准追踪                   [第129页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


ReasonFlags ::= BIT STRING {
     unused                  (0),
     keyCompromise           (1),
     cACompromise            (2),
     affiliationChanged      (3),
     superseded              (4),
     cessationOfOperation    (5),
     certificateHold         (6),
     privilegeWithdrawn      (7),
     aACompromise            (8) }

-- 扩展密钥用法 OID 和语法

id-ce-extKeyUsage OBJECT IDENTIFIER ::= {id-ce 37}

ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId

KeyPurposeId ::= OBJECT IDENTIFIER

-- 允许未指定的密钥用途

anyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 }

-- 扩展密钥用途 OIDs

id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 }
id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 }
id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 }
id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 }
id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 }
id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }

-- 禁用任何策略 OID 和语法

id-ce-inhibitAnyPolicy OBJECT IDENTIFIER ::=  { id-ce 54 }

InhibitAnyPolicy ::= SkipCerts

-- 最新（增量）CRL 扩展 OID 和语法

id-ce-freshestCRL OBJECT IDENTIFIER ::=  { id-ce 46 }

FreshestCRL ::= CRLDistributionPoints








合作，等人              标准追踪                   [第130页]


RFC 5280            PKIX 证书和 CRL 配置文件            2008年5月


-- 颁发者信息访问

id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }

AuthorityInfoAccessSyntax  ::=
        SEQUENCE SIZE (1..MAX) OF AccessDescription

AccessDescription  ::=  SEQUENCE {
        accessMethod          OBJECT IDENTIFIER,
        accessLocation        GeneralName  }

-- 主题信息访问

id-pe-subjectInfoAccess OBJECT IDENTIFIER ::= { id-pe 11 }

SubjectInfoAccessSyntax  ::=
        SEQUENCE SIZE (1..MAX) OF AccessDescription

-- CRL 编号扩展 OID 和语法

id-ce-cRLNumber OBJECT IDENTIFIER ::= { id-ce 20 }

CRL编号 ::= INTEGER (0..MAX)

-- 颁发分发点扩展OID及语法

id-ce-issuingDistributionPoint OBJECT IDENTIFIER ::= { id-ce 28 }

颁发分发点 ::= SEQUENCE {
     分发点名称          [0]  DistributionPointName OPTIONAL,
     仅包含用户证书      [1]  BOOLEAN DEFAULT FALSE,
     仅包含CA证书        [2]  BOOLEAN DEFAULT FALSE,
     仅某些原因          [3]  ReasonFlags OPTIONAL,
     间接CRL             [4]  BOOLEAN DEFAULT FALSE,
     仅包含属性证书      [5]  BOOLEAN DEFAULT FALSE }
     -- 仅能将 onlyContainsUserCerts、onlyContainsCACerts 和 onlyContainsAttributeCerts 中最多设置一个为 TRUE。

id-ce-deltaCRLIndicator OBJECT IDENTIFIER ::= { id-ce 27 }

基础CRL编号 ::= CRLNumber










Cooper 等人              标准追踪                   [第131页]


RFC 5280            PKIX 证书与CRL配置文件            2008年5月


--  reason码扩展OID及语法

id-ce-cRLReasons OBJECT IDENTIFIER ::= { id-ce 21 }

CRL原因 ::= 枚举 {
     未指明                     (0),
     密钥泄露                   (1),
     CA密钥泄露                 (2),
     关系变更                   (3),
     被取代                     (4),
     停止操作                   (5),
     证书保留                   (6),
     从CRL中移除               (8),
     权限撤销                   (9),
     代理密钥泄露               (10) }

-- 证书颁发者CRL条目扩展OID及语法

id-ce-certificateIssuer OBJECT IDENTIFIER ::= { id-ce 29 }

CertificateIssuer ::= GeneralNames

-- 保留指令扩展OID及语法

id-ce-holdInstructionCode OBJECT IDENTIFIER ::= { id-ce 23 }

HoldInstructionCode ::= OBJECT IDENTIFIER

-- ANSI x9 arc holdinstruction arc

holdInstruction OBJECT IDENTIFIER ::=
          {joint-iso-itu-t(2) member-body(2) us(840) x9cm(10040) 2}

-- ANSI X9 保留指令

id-holdinstruction-none OBJECT IDENTIFIER  ::=
                                      {holdInstruction 1} -- 已废弃

id-holdinstruction-callissuer OBJECT IDENTIFIER ::= {holdInstruction 2}

id-holdinstruction-reject OBJECT IDENTIFIER ::= {holdInstruction 3}










Cooper 等人              标准追踪                   [第132页]


RFC 5280            PKIX 证书与CRL配置文件            2008年5月


-- 无效日期CRL条目扩展OID及语法

id-ce-invalidityDate OBJECT IDENTIFIER ::= { id-ce 24 }

InvalidityDate ::=  GeneralizedTime

END

附录B. ASN.1 说明

   证书颁发机构必须确保 serialNumber 为非负整数，即在DER编码的INTEGER值中，符号位必须为零。这可以通过在必要时添加一个前导的（最左边的）`00'H字节实现。这消除了在字节串与整数值之间映射的潜在歧义。

   如第4.1.2.2节所述，序列号可能包含较长的整数。证书用户必须能够处理长度最多为20个字节的serialNumber值。符合标准的CA不得使用超过20个字节的serialNumber。

   如第5.2.3节所述，CRL编号可能包含较长的整数。CRL验证者必须能够处理长度最多为20个字节的cRLNumber值。符合标准的CRL发行者不得使用超过20个字节的cRLNumber。

   构造“SEQUENCE SIZE (1..MAX) OF”在多个ASN.1结构中出现。有效的ASN.1序列可以为空或包含多个条目。SIZE (1..MAX)限制序列至少有一个条目。MAX表示上限未定义。实现可以根据环境自由选择合适的上限。

   字符串类型PrintableString支持非常基础的拉丁字符集：小写字母'a'到'z'，大写字母'A'到'Z'，数字'0'到'9'，以及十一种特殊字符' = ( ) + , - . / : ? 和空格。

   实现者应注意，字符'@'和'_'不被PrintableString支持。这些字符常出现在互联网地址中。此类地址必须使用支持它们的ASN.1类型编码，通常在区分名中的emailAddress属性或GeneralName的rfc822Name字段中以IA5String编码。符合标准的实现不得将包含'@'或'_'字符的字符串编码为PrintableString。





Cooper 等人              标准追踪                   [第133页]


RFC 5280            PKIX 证书与CRL配置文件            2008年5月


-- TeletexString字符字符串类型是PrintableString的超集。TeletexString支持相当标准（类似ASCII）的拉丁字符集：带有非间隔重音符的拉丁字符和日语字符。

   命名位列表是已分配名称的BIT STRING。这份规范在密钥用途、CRL分发点、最新CRL证书扩展以及最新CRL和颁发分发点CRL扩展的定义中使用了命名位列表。在DER编码命名位列表时，必须省略尾随的零，即编码值应以最后一个设置为一的命名位结束。

   字符串类型UniversalString支持[ISO10646]允许的任何字符。ISO 10646是通用多字节编码字符集（UCS）。

   字符串类型UTF8String于1997年ASN.1版本中引入，2001年在[ X.520 ]中被加入到DirectoryString的选择列表中。UTF8String是通用类型，标签编号为12。其内容由RFC 2044定义，并在RFC 2279中更新，后续在[RFC3629]中修订。

   预期这些变化，并遵循[RFC2277]中制定的IETF最佳实践——字符集和语言政策，本文件将UTF8String作为DirectoryString和用户通知证书策略限定符的选项。

   在[ X.520 ]定义的许多属性类型中，AttributeValue使用DirectoryString类型。在附录A中定义的属性中，姓名、姓氏、名字、缩写、世代限定符、通用名、地区名、州或省名、组织名、组织单位名、职称和笔名都使用DirectoryString类型。X.520使用参数化类型定义[X.683]的DirectoryString，指定这些属性的语法。参数用于指示允许的最大字符串长度。在附录A中，为避免使用参数化类型定义，所有这些属性的定义中都采用了扩展形式的DirectoryString。因此，附录A中的ASN.1定义了这些属性的语法，作为TeletexString、PrintableString、UniversalString、UTF8String和BMPString的CHOICE，且对每个类型的字符串长度施加了适当限制，而不是用ASN.1类型DirectoryString描述语法。

   实现者应注意，DER编码的SET OF值要求对值的编码进行排序。特别是在区分名中，这一问题尤为重要。

   实现者应注意，DER编码的SET或SEQUENCE组件若值为DEFAULT，则在编码的证书或CRL中应省略该组件。例如，若BasicConstraints扩展中的cA值为FALSE，则在编码中应省略cA布尔值。

   贯穿本规范的对象标识符（OIDs）用于标识证书策略、公钥和签名算法、证书扩展等。OIDs没有最大长度限制。本规范要求支持arc元素值小于2^28（即0到268,435,455）的OID，确保每个arc元素可用单个32位字表示。实现还必须支持长度最多为100字节（含）的点十进制字符串表示的OID，以及最多包含20个元素的OID（含）。CA不应签发包含超出这些限制的OIDs的证书，CRL发行者也不应签发包含超出限制的OIDs的CRL。

   在nameConstraints扩展中，编码GeneralName字段值的内容特定规则不同于其他扩展。在本文件中所有其他证书、CRL和CRL条目扩展的编码规则都遵循底层类型的规则。例如，uniformResourceIdentifier字段中的值必须是符合[RFC3986]规定的有效URI。在nameConstraints扩展中编码值的内容规则在第4.2.1.10节中定义，可能不符合底层类型的规则。例如，当在nameConstraints扩展中出现uniformResourceIdentifier字段时，它必须是DNS名称（如"host.example.com"或".example.com"），而非URI。

   实现者应注意，X.500标准社区已制定一系列扩展规则。这些规则决定了何时可以在不分配新OID的情况下更改ASN.1定义。例如，在[RFC2459]（本配置文件的前身）中，至少有两个扩展定义在本规范中具有不同的ASN.1定义，但使用相同的OID。如果扩展中出现未知元素，且该扩展未标记为关键，则应忽略这些未知元素，具体如下：




Cooper 等人              标准追踪                   [第135页]


RFC 5280            PKIX 证书与CRL配置文件            2008年5月


      (a) 忽略bit字符串中所有未知的位名分配；

      (b) 忽略枚举类型或以枚举风格使用的INTEGER类型中的所有未知命名数字，前提是该数字作为SET或SEQUENCE的可选元素出现；以及

      (c) 忽略SET中的所有未知元素，或在SEQUENCE的末尾，或在CHOICE中（当CHOICE本身是SET或SEQUENCE的可选元素时）。

   如果包含未预期值的扩展被标记为关键，实施者必须拒绝包含该未知扩展的证书或CRL。

附录C. 例子

   本附录包含四个例子：三个证书和一个CRL。前两个证书和CRL组成一个最小的认证路径。

   附录C.1包含由颁发者名为cn=Example CA,dc=example,dc=com的CA签发的“自签名”证书的带注释十六进制转储。该证书包含RSA公钥，由相应的RSA私钥签名。

   附录C.2包含终端实体证书的带注释十六进制转储。该终端实体证书包含RSA公钥，由与附录C.1中的“自签名”证书相对应的私钥签名。

   附录C.3包含含有参数的DSA公钥的终端实体证书的带注释十六进制转储，并用DSA和SHA-1签名。此证书不属于最小认证路径。

   附录C.4包含CRL的带注释十六进制转储。该CRL由颁发者名为cn=Example CA,dc=example,dc=com的CA签发，吊销列表中包括附录C.2中的终端实体证书。

   这些证书由Peter Gutmann的dumpasn1工具处理生成。dumpasn1工具的源代码可在<http://www.cs.auckland.ac.nz/~pgut001/dumpasn1.c>获取。证书和CRL的二进制文件可在http://csrc.nist.gov/groups/ST/crypto_apps_infra/documents/pkixtools获取。

在本附录中，若以字符串形式指定区分名，则字符串格式遵循[RFC4514]中的规则。

C.1. RSA自签名证书

   本附录包含一份长度为578字节的版本3证书的带注释十六进制转储。该证书包含以下信息：

   (a)  序列号为17；
   (b)  证书由RSA和SHA-1哈希算法签名；
   (c)  颁发者的区分名为cn=Example CA,dc=example,dc=com；
   (d)  主体的区分名为cn=Example CA,dc=example,dc=com；
   (e)  证书签发于2004年4月30日，有效期至2005年4月30日；
   (f)  证书包含1024位的RSA公钥；
   (g)  证书包含使用第4.2.1.2节方法（1）生成的主题密钥标识符扩展；
   (h)  证书为CA证书（由基本约束扩展指示）。

   0  574: 序列 {
   4  423:   序列 {
   8    3:     [0] {
  10    1:       INTEGER 2
         :       }
  13    1:     INTEGER 17
  16   13:     序列 {
  18    9:       OBJECT IDENTIFIER
         :         sha1withRSAEncryption (1 2 840 113549 1 1 5)
  29    0:       NULL
         :       }
  31   67:     序列 {
  33   19:       SET {
  35   17:         序列 {
  37   10:           OBJECT IDENTIFIER
         :             domainComponent (0 9 2342 19200300 100 1 25)
  49    3:           IA5String 'com'
         :           }
         :         }
  54   23:       SET {
  56   21:         序列 {
  58   10:           OBJECT IDENTIFIER
         :             domainComponent (0 9 2342 19200300 100 1 25)
  70    7:           IA5String 'example'
         :           }



Cooper 等人              标准追踪                   [第137页]


RFC 5280            PKIX 证书与CRL配置文件            2008年5月

以下是您提供的英文内容的中文翻译：

```

         :         }
  79   19:       设置 {
  81   17:         序列 {
  83    3:           对象标识符 commonName (2 5 4 3)
  88   10:           可打印字符串 'Example CA'
         :           }
         :         }
         :       }
 100   30:     序列 {
 102   13:       UTC 时间 2004/04/30 14:25:34 GMT
 117   13:       UTC 时间 2005/04/30 14:25:34 GMT
         :       }
 132   67:     序列 {
 134   19:       集合 {
 136   17:         序列 {
 138   10:           对象标识符
         :             domainComponent (0 9 2342 19200300 100 1 25)
 150    3:           IA5字符串 'com'
         :           }
         :         }
 155   23:       集合 {
 157   21:         序列 {
 159   10:           对象标识符
         :             domainComponent (0 9 2342 19200300 100 1 25)
 171    7:           IA5字符串 'example'
         :           }
         :         }
 180   19:       集合 {
 182   17:         序列 {
 184    3:           对象标识符 commonName (2 5 4 3)
 189   10:           可打印字符串 'Example CA'
         :           }
         :         }
         :       }
 201  159:     序列 {
 204   13:       序列 {
 206    9:         对象标识符
         :           rsaEncryption (1 2 840 113549 1 1 1)
 217    0:         空值
         :         }
 219  141:       位字符串，封装 {
 223  137:         序列 {
 226  129:           整数
         :             00 C2 D7 97 6D 28 70 AA 5B CF 23 2E 80 70 39 EE
         :             DB 6F D5 2D D5 6A 4F 7A 34 2D F9 22 72 47 70 1D
         :             EF 80 E9 CA 30 8C 00 C4 9A 6E 5B 45 B4 6E A5 E6
         :             6C 94 0D FA 91 E9 40 FC 25 9D C7 B7 68 19 56 8F
         :             11 70 6A D7 F1 C9 11 4F 3A 7E 3F 99 8D 6E 76 A5
         :             74 5F 5E A4 55 53 E5 C7 68 36 53 C7 1D 3B 12 A6
         :             85 FE BD 6E A1 CA DF 35 50 AC 08 D7 B9 B4 7E 5C
         :             FE E2 A3 2C D1 23 84 AA 98 C0 9B 66 18 9A 68 47
         :             E9
 358    3:           整数 65537
         :           }
         :         }
         :       }
 363   66:     [3] {
 365   64:       序列 {
 367   29:         序列 {
 369    3:           对象标识符 subjectKeyIdentifier (2 5 29 14)
 374   22:           OCTET字符串，封装 {
 376   20:             OCTET字符串
         :               08 68 AF 85 33 C8 39 4A 7A F8 82 93 8E 70 6A 4A
         :               20 84 2C 32
         :             }
         :           }
 398   14:         序列 {
 400    3:           对象标识符 keyUsage (2 5 29 15)
 405    1:           布尔值 真
 408   4:           OCTET字符串，封装 {
 410    2:             位字符串，1个未用位
         :               '0000011'B
         :             }
         :           }
 414   15:         序列 {
 416    3:           对象标识符 basicConstraints (2 5 29 19)
 421    1:           布尔值 真
 424    5:           OCTET字符串，封装 {
 426    3:             序列 {
 428    1:               布尔值 真
         :               }
         :             }
         :           }
         :         }
         :       }
         :     }
 431   13:   序列 {
 433    9:     对象标识符
         :         sha1withRSAEncryption (1 2 840 113549 1 1 5)
 444    0:     空值
         :     }
 446  129:   位字符串
         :     6C F8 02 74 A6 61 E2 64 04 A6 54 0C 6C 72 13 AD
         :     3C 47 FB F6 65 13 A9 85 90 33 EA 76 A3 26 D9 FC
         :     D1 0E 15 5F 28 B7 EF 93 BF 3C F3 E2 3E 7C B9 52
         :     FC 16 6E 29 AA E1 F4 7A 6F D5 7F EF B3 95 CA F3



Cooper, 等人.              标准追踪                   [第138页]


RFC 5280            PKIX 证书与CRL配置文件            2008年5月


         :     66 88 83 4E A1 35 45 84 CB BC 9B B8 C8 AD C5 5E
         :     46 D9 0B 0E 8D 80 E1 33 2B DC BE 2B 92 7E 4A 43
         :     A9 6A EF 8A 63 61 B3 6E 47 38 BE E8 0D A3 67 5D
         :     F3 FA 91 81 3C 92 BB C5 5F 25 25 EB 7C E7 D8 A1
         :   }

C.2.  使用RSA的终端实体证书

   本附录包含一份629字节的版本3证书的带注释十六进制转储。该证书包含以下信息：

   (a)  序列号为18；
   (b)  证书由RSA和SHA-1哈希算法签名；
   (c)  发行者的唯一名称为
        cn=Example CA,dc=example,dc=com；
   (d)  主题的唯一名称为
        cn=End Entity,dc=example,dc=com；
   (e)  证书有效期从2004年9月15日至2005年3月15日；
   (f)  证书包含一个1024位的RSA公钥；
   (g)  该证书为终端实体证书，因为没有基本约束扩展；
   (h)  证书包含一个与附录C.1中证书的主题密钥标识符匹配的授权密钥标识符扩展；
   (i)  证书包含一个备用名称——电子邮件地址（rfc822Name）为"end.entity@example.com"。

   0  625: 序列 {
   4  474:   序列 {
   8    3:     [0] {
  10    1:       整数 2
         :       }
  13    1:     整数 18
  16   13:     序列 {
  18    9:       对象标识符
         :         sha1withRSAEncryption (1 2 840 113549 1 1 5)
  29    0:       空值
         :       }
  31   67:     序列 {
  33   19:       集合 {
  35   17:         序列 {
  37   10:           对象标识符
         :             domainComponent (0 9 2342 19200300 100 1 25)
  49    3:           IA5字符串 'com'
         :           }
         :         }
  54   23:       集合 {
  56   21:         序列 {
  58   10:           对象标识符
         :             domainComponent (0 9 2342 19200300 100 1 25)
  70    7:           IA5字符串 'example'
         :           }
         :         }
  79   19:       集合 {
  81   17:         序列 {
  83    3:           对象标识符 commonName (2 5 4 3)
  88   10:           可打印字符串 'Example CA'
         :           }
         :         }
         :       }
 100   30:     序列 {
 102   13:       UTC 时间 2004/09/15 11:48:21 GMT
 117   13:       UTC 时间 2005/03/15 11:48:21 GMT
         :       }
 132   67:     序列 {
 134   19:       集合 {
 136   17:         序列 {
 138   10:           对象标识符
         :             domainComponent (0 9 2342 19200300 100 1 25)
 150    3:           IA5字符串 'com'
         :           }
         :         }
 155   23:       集合 {
 157   21:         序列 {
 159   10:           对象标识符
         :             domainComponent (0 9 2342 19200300 100 1 25)
 171    7:           IA5字符串 'example'
         :           }
         :         }
 180   19:       集合 {
 182   17:         序列 {
 184    3:           对象标识符 commonName (2 5 4 3)
 189   10:           可打印字符串 'End Entity'
         :           }
         :         }
         :       }
 201  159:     序列 {
 204   13:       序列 {
 206    9:         对象标识符
         :           rsaEncryption (1 2 840 113549 1 1 1)
 217    0:         空值
         :         }
 219  141:       位字符串，封装 {
 223  137:         序列 {
 226  129:           整数



Cooper, 等人.              标准追踪                   [第141页]


RFC 5280            PKIX 证书与CRL配置文件            2008年5月


         :             00 E1 6A E4 03 30 97 02 3C F4 10 F3 B5 1E 4D 7F
         :             14 7B F6 F5 D0 78 E9 A4 8A F0 A3 75 EC ED B6 56
         :             96 7F 88 99 85 9A F2 3E 68 77 87 EB 9E D1 9F C0
         :             B4 17 DC AB 89 23 A4 1D 7E 16 23 4C 4F A8 4D F5
         :             31 B8 7C AA E3 1A 49 09 F4 4B 26 DB 27 67 30 82
         :             12 01 4A E9 1A B6 C1 0C 53 8B 6C FC 2F 7A 43 EC
         :             33 36 7E 32 B2 7B D5 AA CF 01 14 C6 12 EC 13 F2
         :             2D 14 7A 8B 21 58 14 13 4C 46 A3 9A F2 16 95 FF
         :             23
 358    3:           整数 65537
         :           }
         :         }
         :       }
 363  117:     [3] {
 365  115:       序列 {
 367   33:         序列 {
 369    3:           对象标识符 subjectAltName (2 5 29 17)
 374   26:           OCTET字符串，封装 {
 376   24:             序列 {
 378   22:               [1] 'end.entity@example.com'
         :               }
         :             }
         :           }
 402   29:         序列 {
 404    3:           对象标识符 subjectKeyIdentifier (2 5 29 14)
 409   22:           OCTET字符串，封装 {
 411   20:             OCTET字符串
         :               17 7B 92 30 FF 44 D6 66 E1 90 10 22 6C 16 4F C0
         :               8E 41 DD 6D
         :             }
         :           }
 433   31:         序列 {
 435    3:           对象标识符
         :             authorityKeyIdentifier (2 5 29 35)
 440   24:           OCTET字符串，封装 {
 442   22:             序列 {
 444   20:               [0]
         :                 08 68 AF 85 33 C8 39 4A 7A F8 82 93 8E 70 6A
         :                 4A 20 84 2C 32
         :               }
         :             }
         :           }
 466   14:         序列 {
 468    3:           对象标识符 keyUsage (2 5 29 15)
 473    1:           布尔值 真
 476    4:           OCTET字符串，封装 {
 478    2:             位字符串，6个未用位
         :               '11'B
         :             }
         :           }
         :         }
         :       }
         :     }
 482   13:   序列 {
 484    9:     对象标识符
         :         sha1withRSAEncryption (1 2 840 113549 1 1 5)
 495    0:     空值
         :     }
 497  129:   位字符串
         :     00 20 28 34 5B 68 32 01 BB 0A 36 0E AD 71 C5 95
         :     1A E1 04 CF AE AD C7 62 14 A4 1B 36 31 C0 E2 0C
         :     3D D9 1E C0 00 DC 10 A0 BA 85 6F 41 CB 62 7A B7
         :     4C 63 81 26 5E D2 80 45 5E 33 E7 70 45 3B 39 3B
         :     26 4A 9C 3B F2 26 36 69 08 79 BB FB 96 43 77 4B
         :     61 8B A1 AB 91 64 E0 F3 37 61 3C 1A A3 A4 C9 8A
         :     B2 BF 73 D4 4D E4 58 E4 62 EA BC 20 74 92 86 0E
         :     CE 84 60 76 E9 73 BB C7 85 D3 91 45 EA 62 5D CD
         :   }

C.3.  使用DSA的终端实体证书

   本附录包含一份914字节的版本3证书的带注释十六进制转储。该证书包含以下信息：

   (a)  序列号为256；
   (b)  证书由DSA和SHA-1哈希算法签名；
   (c)  发行者的唯一名称为 cn=Example DSA CA,dc=example,dc=com；
   (d)  主题的唯一名称为 cn=DSA End Entity,dc=example,dc=com；
   (e)  证书发行日期为2004年5月2日，过期日期为2005年5月2日；
   (f)  证书包含一个1024位的DSA公钥及参数；
   (g)  该证书为终端实体证书（非CA证书）；
   (h)  证书包含一个主题备用名称，URL为"<http://www.example.com/users/DSAendentity.html>"，以及一个发行者备用名称，URL为"<http://www.example.com>"——两者都是URL；
   (i)  证书包含一个授权密钥标识符扩展和一个证书策略扩展，指定策略OID为2.16.840.1.101.3.2.1.48.9；
   (j)  证书包含一个关键用途扩展，指明该公钥用于数字签名验证。

   0  910: 序列 {
   4  846:   序列 {
   8    3:     [0] {
  10    1:       整数 2
         :       }
  13    2:     整数 256
  17    9:     序列 {
  19    7:       对象标识符 dsaWithSha1 (1 2 840 10040 4 3)
         :       }
  28   71:     序列 {
  30   19:       集合 {
  32   17:         序列 {
  34   10:           对象标识符
         :             domainComponent (0 9 2342 19200300 100 1 25)
  46    3:           IA5字符串 'com'
         :           }
         :         }
  51   23:       集合 {
  53   21:         序列 {
  55   10:           对象标识符
         :             domainComponent (0 9 2342 19200300 100 1 25)
  67    7:           IA5字符串 'example'
         :           }
         :         }
  76   23:       集合 {
  78   21:         序列 {
  80    3:           对象标识符 commonName (2 5 4 3)
  85   14:           可打印字符串 'Example DSA CA'
         :           }
         :         }
         :       }
 101   30:     序列 {
 103   13:       UTC 时间 2004/05/02 16:47:38 GMT
 118   13:       UTC 时间 2005/05/02 16:47:38 GMT
         :       }
 133   71:     序列 {
 135   19:       集合 {
 137   17:         序列 {
 139   10:           对象标识符
         :             domainComponent (0 9 2342 19200300 100 1 25)



Cooper, 等人.              标准追踪                   [第144页]


RFC 5280            PKIX 证书与CRL配置文件            2008年5月
```

以下是英文内容的中文翻译：

```
151    3:           IA5String 'com'
         :           }
         :         }
156   23:       SET {
158   21:         SEQUENCE {
160   10:           OBJECT IDENTIFIER
         :             domainComponent (0 9 2342 19200300 100 1 25)
172    7:           IA5String 'example'
         :           }
         :         }
181   23:       SET {
183   21:         SEQUENCE {
185    3:           OBJECT IDENTIFIER commonName (2 5 4 3)
190   14:           PrintableString 'DSA End Entity'
         :           }
         :         }
         :       }
206  439:     SEQUENCE {
210  300:       SEQUENCE {
214    7:         OBJECT IDENTIFIER dsa (1 2 840 10040 4 1)
223  287:         SEQUENCE {
227  129:           INTEGER
         :             00 B6 8B 0F 94 2B 9A CE A5 25 C6 F2 ED FC FB 95
         :             32 AC 01 12 33 B9 E0 1C AD 90 9B BC 48 54 9E F3
         :             94 77 3C 2C 71 35 55 E6 FE 4F 22 CB D5 D8 3E 89
         :             93 33 4D FC BD 4F 41 64 3E A2 98 70 EC 31 B4 50
         :             DE EB F1 98 28 0A C9 3E 44 B3 FD 22 97 96 83 D0
         :             18 A3 E3 BD 35 5B FF EE A3 21 72 6A 7B 96 DA B9
         :             3F 1E 5A 90 AF 24 D6 20 F0 0D 21 A7 D4 02 B9 1A
         :             FC AC 21 FB 9E 94 9E 4B 42 45 9E 6A B2 48 63 FE
         :             43
359   21:           INTEGER
         :             00 B2 0D B0 B1 01 DF 0C 66 24 FC 13 92 BA 55 F7
         :             7D 57 74 81 E5
382  129:           INTEGER
         :             00 9A BF 46 B1 F5 3F 44 3D C9 A5 65 FB 91 C0 8E
         :             47 F1 0A C3 01 47 C2 44 42 36 A9 92 81 DE 57 C5
         :             E0 68 86 58 00 7B 1F F9 9B 77 A1 C5 10 A5 80 91
         :             78 51 51 3C F6 FC FC CC 46 C6 81 78 92 84 3D F4
         :             93 3D 0C 38 7E 1A 5B 99 4E AB 14 64 F6 0C 21 22
         :             4E 28 08 9C 92 B9 66 9F 40 E8 95 F6 D5 31 2A EF
         :             39 A2 62 C7 B2 6D 9E 58 C4 3A A8 11 81 84 6D AF
         :             F8 B4 19 B4 C2 11 AE D0 22 3B AA 20 7F EE 1E 57
         :             18
         :           }
         :         }
514  132:       BIT STRING, encapsulates {
518  128:         INTEGER
         :           30 B6 75 F7 7C 20 31 AE 38 BB 7E 0D 2B AB A0 9C
         :           4B DF 20 D5 24 13 3C CD 98 E5 5F 6C B7 C1 BA 4A
         :           BA A9 95 80 53 F0 0D 72 DC 33 37 F4 01 0B F5 04
         :           1F 9D 2E 1F 62 D8 84 3A 9B 25 09 5A 2D C8 46 8E
         :           2B D4 F5 0D 3B C7 2D C6 6C B9 98 C1 25 3A 44 4E
         :           8E CA 95 61 35 7C CE 15 31 5C 23 13 1E A2 05 D1
         :           7A 24 1C CB D3 72 09 90 FF 9B 9D 28 C0 A1 0A EC
         :           46 9F 0D B8 D0 DC D0 18 A6 2B 5E F9 8F B5 95 BE
         :         }
         :       }
649  202:     [3] {
652  199:       SEQUENCE {
655   57:         SEQUENCE {
657    3:           OBJECT IDENTIFIER subjectAltName (2 5 29 17)
662   50:           OCTET STRING, encapsulates {
664   48:             SEQUENCE {
666   46:               [6]
         :                 'http://www.example.com/users/DSAendentity.'
         :                 'html'
         :               }
         :             }
         :           }
714   33:         SEQUENCE {
716    3:           OBJECT IDENTIFIER issuerAltName (2 5 29 18)
721   26:           OCTET STRING, encapsulates {
723   24:             SEQUENCE {
725   22:               [6] 'http://www.example.com'
         :               }
         :             }
         :           }
749   29:         SEQUENCE {
751    3:           OBJECT IDENTIFIER subjectKeyIdentifier (2 5 29 14)
756   22:           OCTET STRING, encapsulates {
758   20:             OCTET STRING
         :               DD 25 66 96 43 AB 78 11 43 44 FE 95 16 F9 D9 B6
         :               B7 02 66 8D
         :             }
         :           }
780   31:         SEQUENCE {
782    3:           OBJECT IDENTIFIER
         :             authorityKeyIdentifier (2 5 29 35)
787   24:           OCTET STRING, encapsulates {
789   22:             SEQUENCE {
791   20:               [0]
         :                 86 CA A5 22 81 62 EF AD 0A 89 BC AD 72 41 2C
         :                 29 49 F4 86 56
         :               }
         :             }
         :           }
813   23:         SEQUENCE {
815    3:           OBJECT IDENTIFIER certificatePolicies (2 5 29 32)
820   16:           OCTET STRING, encapsulates {
822   14:             SEQUENCE {
824   12:               SEQUENCE {
826   10:                 OBJECT IDENTIFIER '2 16 840 1 101 3 2 1 48 9'
         :                 }
         :               }
         :             }
         :           }
838   14:         SEQUENCE {
840    3:           OBJECT IDENTIFIER keyUsage (2 5 29 15)
845    1:           BOOLEAN TRUE
848    4:           OCTET STRING, encapsulates {
850    2:             BIT STRING 7 unused bits
         :               '1'B（第0位）
         :             }
         :           }
         :         }
         :       }
         :     }
854    9:   SEQUENCE {
856    7:     OBJECT IDENTIFIER dsaWithSha1 (1 2 840 10040 4 3)
         :     }
865   47:   BIT STRING, encapsulates {
868   44:     SEQUENCE {
870   20:       INTEGER
         :         65 57 07 34 DD DC CA CC 5E F4 02 F4 56 42 2C 5E
         :         E1 B3 3B 80
892   20:       INTEGER
         :         60 F4 31 17 CA F4 CF FF EE F4 08 A7 D9 B2 61 BE
         :         B1 C3 DA BF
         :       }
         :     }
         :   }

C.4.  证书吊销列表（CRL）

本附录包含一个版本2 CRL的带注释的十六进制转储，包含两个扩展（cRLNumber和authorityKeyIdentifier）。该CRL由cn=Example CA,dc=example,dc=com于2005年2月5日签发；下一次预定签发日期为2005年2月6日。CRL中列出一张被吊销的证书：序列号为18，于2004年11月19日因密钥被泄露而吊销。该CRL编号为12，由RSA和SHA-1签名。

0  352: SEQUENCE {
4  202:   SEQUENCE {
7    1:     INTEGER 1
10   13:     SEQUENCE {
12    9:       OBJECT IDENTIFIER
         :         sha1withRSAEncryption (1 2 840 113549 1 1 5)
23    0:       NULL
         :       }
25   67:     SEQUENCE {
27   19:       SET {
29   17:         SEQUENCE {
31   10:           OBJECT IDENTIFIER
         :             domainComponent (0 9 2342 19200300 100 1 25)
43    3:           IA5String 'com'
         :           }
48   23:       SET {
50   21:         SEQUENCE {
52   10:           OBJECT IDENTIFIER
         :             domainComponent (0 9 2342 19200300 100 1 25)
64    7:           IA5String 'example'
         :           }
73   19:       SET {
75   17:         SEQUENCE {
77    3:           OBJECT IDENTIFIER commonName (2 5 4 3)
82   10:           PrintableString 'Example CA'
         :           }
94   13:     UTCTime 05/02/2005 12:00:00 GMT
109   13:     UTCTime 06/02/2005 12:00:00 GMT
124   34:     SEQUENCE {
126   32:       SEQUENCE {
128    1:         INTEGER 18
131   13:         UTCTime 19/11/2004 15:57:03 GMT
146   12:         SEQUENCE {
148   10:           SEQUENCE {
150    3:             OBJECT IDENTIFIER cRLReason (2 5 29 21)
155    3:             OCTET STRING, encapsulates {
157    1:               ENUMERATED 1
         :               }
160   47:     [0] {
162   45:       SEQUENCE {
164   31:         SEQUENCE {
166    3:           OBJECT IDENTIFIER
         :             authorityKeyIdentifier (2 5 29 35)
171   24:           OCTET STRING, encapsulates {
173   22:             SEQUENCE {
175   20:               [0]
         :                 08 68 AF 85 33 C8 39 4A 7A F8 82 93 8E 70 6A
         :                 4A 20 84 2C 32
         :               }
176   20:             }
177   20:           [0]
         :             08 68 AF 85 33 C8 39 4A 7A F8 82 93 8E 70 6A
         :             4A 20 84 2C 32
         :             }
197   10:         SEQUENCE {
199    3:           OBJECT IDENTIFIER cRLNumber (2 5 29 20)
204    3:           OCTET STRING, encapsulates {
206    1:             INTEGER 12
         :             }
209   13:   SEQUENCE {
211    9:     OBJECT IDENTIFIER
         :         sha1withRSAEncryption (1 2 840 113549 1 1 5)
222    0:     NULL
         :     }
224  129:   BIT STRING
         :     22 DC 18 7D F7 08 CE CC 75 D0 D0 6A 9B AD 10 F4
         :     76 23 B4 81 6E B5 6D BE 0E FB 15 14 6C C8 17 6D
         :     1F EE 90 17 A2 6F 60 E4 BD AA 8C 55 DE 8E 84 6F
         :     92 F8 9F 10 12 27 AF 4A D4 2F 85 E2 36 44 7D AA
         :     A3 4C 25 38 15 FF 00 FD 3E 7E EE 3D 26 12 EB D8
         :     E7 2B 62 E2 2B C3 46 80 EF 78 82 D1 15 C6 D0 9C
         :     72 6A CB CE 7A ED 67 99 8B 6E 70 81 7D 43 42 74
         :     C1 A6 AF C1 55 17 A2 33 4C D6 06 98 2B A4 FC 2E
         :   }
```
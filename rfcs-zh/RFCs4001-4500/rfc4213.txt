# RFC 4213 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs4001-4500/rfc4213.txt

网络工作组                                        E. Nordmark
评论请求编号：4213                        Sun Microsystems, Inc.
废止：2893                                              R. Gilligan
类别：标准轨道                                 Intransa, Inc.
                                                            2005年10月


         IPv6主机和路由器的基本过渡机制

本备忘录的状态

   本文档为互联网社区制定了一项互联网标准轨道协议，旨在征求讨论和改进建议。请参阅当前版本的《互联网官方协议标准》（STD 1）以了解该协议的标准化状态和最新情况。本备忘录的分发不受限制。

版权声明

   版权所有（C）互联网协会（2005年）。

摘要

   本文档规定了IPv6主机和路由器可以实现的IPv4兼容机制。共定义了两种机制：双栈（dual stack）和配置隧道（configured tunneling）。双栈意味着在设备中完整实现IPv4和IPv6两个版本的协议；配置隧道则提供了一种在未修改的IPv4路由基础设施上承载IPv6数据包的方法。

   本文档废止RFC 2893。




















Nordmark & Gilligan         标准轨道                     [第1页]


RFC 4213            IPv6基本过渡机制        2005年10月


目录

   1. 引言 ....................................................2
      1.1. 术语 ...............................................3
   2. 双IP层操作 ..............................................4
      2.1. 地址配置 ...........................................5
      2.2. DNS ..................................................5
   3. 配置隧道机制 ............................................6
      3.1. 封装 ...............................................7
      3.2. 隧道MTU与分片 .....................................8
           3.2.1. 静态隧道MTU ..................................9
           3.2.2. 动态隧道MTU ..................................9
      3.3. 跳数限制 ...........................................11
      3.4. 处理ICMPv4错误 ....................................11
      3.5. IPv4头部构造 .......................................13
      3.6. 解封装 .............................................14
      3.7. 链路本地地址 .......................................17
      3.8. 隧道上的邻居发现 ..................................18
   4. 源地址伪造相关威胁 ....................................18
   5. 安全考虑 ...............................................19
   6. 致谢 ...................................................21
   7. 参考文献 ...............................................21
      7.1. 标准参考文献 ......................................21
      7.2. 资料性参考文献 ....................................21
   8. 与RFC 2893的变更 .......................................23

1. 引言

   成功实现IPv6过渡的关键在于与大量已部署的IPv4主机和路由器的兼容性。在部署IPv6的同时保持与IPv4的兼容性，将简化互联网向IPv6迁移的任务。本规范定义了两种IPv6主机和路由器可以实现的机制，以确保与IPv4主机和路由器的兼容。

   本文档中的机制旨在由需要与IPv4主机互操作、利用IPv4路由基础设施的IPv6主机和路由器采用。我们预期，互联网中的大多数节点在相当长的时间内都需要这种兼容性，甚至可能无限期地需要。

   这里定义的机制包括：

   -  双IP层（也称为双栈）：一种在主机和路由器中同时支持IPv4和IPv6的完整协议支持技术。

   -  通过配置的IPv6隧道：一种通过在IPv4头中封装IPv6数据包，将IPv6流量通过IPv4路由基础设施传输的技术。

   这些机制旨在成为“过渡工具箱”的核心——一组不断扩展的技术，供实现和用户在迁移过程中使用。用户可以根据具体需要选择使用哪些工具。实现者和站点可以自行决定哪些技术最适合其特定需求。

   本文档定义了基本的过渡机制集，但这些并非唯一工具。其他文档中还规定了额外的过渡和兼容性机制。

1.1. 术语

   本文档中使用的术语包括：

节点类型

   IPv4-only节点：

      仅实现IPv4的主机或路由器。此类节点不理解IPv6。在迁移开始前，已存在的IPv4主机和路由器基础属于IPv4-only节点。

   IPv6/IPv4节点：

      同时实现IPv4和IPv6的主机或路由器。

   IPv6-only节点：

      仅实现IPv6，不实现IPv4的主机或路由器。本文未涉及IPv6-only节点的操作。

   IPv6节点：

      任何实现IPv6的主机或路由器。IPv6/IPv4节点和IPv6-only节点都属于IPv6节点。

   IPv4节点：

      任何实现IPv4的主机或路由器。IPv6/IPv4节点和IPv4-only节点都属于IPv4节点。

过渡技术

   IPv6-over-IPv4隧道：

      将IPv6数据包封装在IPv4中，以便在IPv4路由基础设施上传输的技术。

   配置隧道：

      通过配置在隧道端点上的信息，确定IPv4隧道端点地址的IPv6-over-IPv4隧道。所有隧道假设为双向的。隧道提供一个（虚拟的）点对点链路，将IPv6层连接到配置的IPv4地址作为底层端点。

   其他过渡机制，包括其他隧道机制，不在本文档范围内。

   关键词MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、RECOMMENDED、MAY和OPTIONAL，在本文中出现时，均按[RFC2119]中的定义解释。

2. 双IP层操作

   IPv6节点保持与IPv4-only节点兼容的最直接方式是实现完整的IPv4协议栈。实现完整IPv4和IPv6的IPv6节点称为“IPv6/IPv4节点”。这些节点能够同时发送和接收IPv4和IPv6数据包，能直接与IPv4节点通过IPv4进行通信，也能直接与IPv6节点通过IPv6进行通信。

   虽然某节点可能支持两种协议，但出于操作原因，可能会禁用其中一条协议栈。这里对“栈”的定义较为宽泛：启用的栈意味着已分配IP地址，但是否有应用程序在该栈上可用未作明确规定。因此，IPv6/IPv4节点可以处于以下三种模式之一：

   -  仅启用IPv4栈，禁用IPv6栈。

   -  仅启用IPv6栈，禁用IPv4栈。

   -  两个栈都启用。

   禁用IPv6栈的IPv6/IPv4节点将表现得像IPv4-only节点；同理，禁用IPv4栈的节点表现得像IPv6-only节点。IPv6/IPv4节点可以提供配置开关，以禁用某一协议栈。

   这里描述的配置隧道技术（第3节）可以在双IP层操作基础上使用，也可以单独使用。

2.1. 地址配置

   由于节点支持两种协议，IPv6/IPv4节点可以配置IPv4和IPv6地址。IPv4地址通过IPv4机制（如DHCP）获取，IPv6地址则通过IPv6协议机制（如无状态地址自动配置[RFC2462]和/或DHCPv6）获取。

2.2. DNS

   域名系统（DNS）在IPv4和IPv6中都用于将主机名映射到IP地址。为IPv6地址定义了新的资源记录类型“AAAA” [RFC3596]。由于IPv6/IPv4节点必须能与IPv4和IPv6节点直接互操作，它们必须提供能够处理IPv4“A”记录和IPv6“AAAA”记录的解析库。注意，A和AAAA记录的查询与DNS包是否在IPv4或IPv6中传输无关，也不假设DNS服务器知道请求节点的IPv4/IPv6能力。

   关于在DNS中使用IPv6的相关问题和操作指南，详见其他文档，例如[DNSOPV6]。

   IPv6/IPv4节点上的DNS解析库必须能处理AAAA和A记录。然而，当查询返回一个IPv6地址的AAAA记录和一个IPv4地址的A记录时，解析库可以对结果进行排序，以影响与特定节点通信时所用的IP版本——优先IPv6或IPv4。

   应用程序应能指定希望使用IPv4、IPv6或两者的记录 [RFC3493]。这决定了解析器查找的地址族。如果没有应用程序的选择，或应用程序请求两者，解析库不得过滤任何记录。

   由于大多数应用程序按解析器返回的地址顺序尝试连接，这可能影响应用程序的“偏好”IP版本。

   具体的排序机制超出本备忘录范围。地址选择的详细内容请参见[RFC3484]。

3. 配置隧道机制

   在大多数部署场景中，IPv6路由基础设施会逐步建立。在IPv6基础设施部署期间，现有的IPv4路由基础设施仍可正常工作，并可用于承载IPv6流量。隧道技术提供了一种利用现有IPv4路由基础设施传输IPv6流量的方法。

   IPv6/IPv4主机和路由器可以通过在IPv4包中封装IPv6数据包，将IPv6数据报通过IPv4路由拓扑隧道传输。隧道的使用方式多样：

   -  路由器到路由器：通过IPv4基础设施互连的IPv6/IPv4路由器之间可以建立隧道传输IPv6包。此时，隧道跨越端到端路径中的一段。

   -  主机到路由器：IPv6/IPv4主机可以将IPv6包隧道传输到通过IPv4基础设施可达的中间IPv6/IPv4路由器。此类隧道跨越路径的第一段。

   -  主机到主机：通过IPv4基础设施互连的IPv6/IPv4主机之间可以建立隧道传输IPv6包。此时，隧道跨越整个端到端路径。

   -  路由器到主机：IPv6/IPv4路由器可以将IPv6包隧道传输到最终目的地IPv6/IPv4主机。此类隧道只跨越路径的最后一段。

   配置隧道可以应用于上述所有情况，但由于需要明确配置隧道端点，最常用于路由器到路由器的场景。

   隧道的底层机制包括：

   -  隧道入口节点（封装器）创建封装的IPv4头部，并传输封装的包。

   -  隧道出口节点（解封装器）接收封装包，必要时重组包，去除IPv4头部，并处理接收的IPv6包。

   -  封装器可能需要为每个隧道维护软状态信息，记录如隧道MTU等参数，以便处理转发到隧道中的IPv6包。

   在配置隧道中，隧道端点地址由封装器根据存储的配置信息确定。当IPv6包通过隧道传输时，封装IPv4头的源地址和目的地址按第3.5节所述设置。

   通常，封装的包由封装器的路由信息决定。封装器通过路由表，根据目标地址的前缀掩码和匹配技术，决定哪些包需要封装。

   解封装器会将接收到的协议41（IPv6 over IPv4）包与其配置的隧道匹配，只允许IPv4源地址与隧道配置一致的包通过。因此，操作员必须确保隧道的IPv4地址在封装器和解封装器上配置一致。

3.1. 封装

   IPv6数据包封装在IPv4中的示意如下：

                                             +-------------+
                                             |    IPv4     |
                                             |   头部     |
             +-------------+                 +-------------+
             |    IPv6     |                 |    IPv6     |
             |   头部      |                 |   头部      |
             +-------------+                 +-------------+
             |  传输层     |                 |  传输层     |
             |   头部      |      ===>       |   头部      |
             +-------------+                 +-------------+
             |             |                 |             |
             ~    数据     ~                 ~    数据     ~
             |             |                 |             |
             +-------------+                 +-------------+

                      IPv6封装在IPv4中

   除了添加IPv4头部外，封装器还需处理一些更复杂的问题：

   -  何时进行分片，以及何时向源报告ICMPv6“包过大”错误。

   -  如何将沿隧道路径的ICMPv4错误反映为ICMPv6错误返回源端。

这些问题将在以下章节中进行讨论。

3.2. 隧道MTU和分片

天真地，封装器可以将封装视为IPv6使用IPv4作为链路层，具有非常大的MTU（最多65535-20字节；封装IPv4头部需要20字节“额外”空间）。封装器只需向源端报告超出此MTU的包的ICMPv6“包太大”错误即可。然而，这样的方案由于以下三个原因既低效又不兼容，因此绝不能使用：

1）会导致比实际需要更多的分片。应避免IPv4层的分片，因为分片会引发性能问题，特别是当丢失单元比重传单元更小时[KM97]。

2）在隧道内部（即封装器与解封装器之间）发生的任何IPv4分片，都必须在隧道端点重新组装。对于在路由器终止的隧道，这将需要额外的内存和资源，将IPv4碎片重新组装成完整的IPv6包后才能转发。

3）封装器无法知道解封装器是否能够对IPv4包进行碎片重组（详见第3.6节），也无法知道解封装器是否能处理如此大的IPv6最大接收单元（MRU）。

因此，封装器绝不能将隧道视为具有64千字节MTU的接口，而应使用固定的静态MTU或可选的基于IPv4路径MTU的动态MTU确定方法。

如果两种机制都已实现，使用哪种机制应在每个隧道端点上可配置。

3.2.1. 静态隧道MTU

使用静态隧道MTU的节点将隧道接口视为具有固定MTU。默认情况下，MTU必须在1280到1480字节之间（含），但应优先设为1280字节。如果默认值不是1280字节，必须提供配置选项以调整MTU值。

节点必须能够接受经过重组后最大为1500字节的IPv6分片包[RFC2460]。本备忘录还包括（见第3.6节）对所有解封装器必须支持的IPv4重组和IPv6 MRU的要求，以确保与1280到1480字节之间的任何固定MTU的正确互操作。

除非已由管理人员确保解封装器能重组或接收该大小的包，否则不得配置大于这些要求的固定MTU。

良好的隧道MTU选择依赖许多因素，至少包括：

- IPv4协议41包是否在可能具有较低路径MTU的介质上传输（如IPv4虚拟专用网络）；过高的MTU可能导致IPv4分片。

- 隧道是否用于传输IPv6封装包（如配置了IPv6-in-IPv4的移动节点，或IPv6-in-IPv6隧道接口）；过低的MTU可能导致IPv6分片。

如果认为存在分层封装，支持动态MTU确定可能更为明智，因为它能最小化分片并优化包大小。

使用静态隧道MTU时，封装IPv4头部中的“不要分片”位（DF）必须未设置。因此，封装器不应因封装的包而收到任何ICMPv4“包太大”消息。

3.2.2. 动态隧道MTU

动态MTU确定是可选的，但如果实现，应符合本文描述的行为。

通过让封装器跟踪隧道中的IPv4路径MTU，使用IPv4路径MTU发现协议[RFC1191]并记录结果路径MTU，可以将隧道内的分片减少到最低。封装器中的IPv6层可以将隧道视为链路层，其MTU等于IPv4路径MTU减去封装IPv4头的大小。

注意，这并不能消除IPv4分片，尤其是在IPv4路径MTU导致IPv6 MTU小于1280字节的情况下（IPv6使用的任何链路层都必须至少有1280字节的MTU [RFC2460]）。在这种情况下，IPv6层必须“看到”一个MTU为1280字节的链路层，封装器必须使用IPv4分片来转发这些1280字节的IPv6包。

封装器应采用以下算法，决定何时使用IPv4分片转发大于隧道路径MTU的IPv6包，以及何时返回ICMPv6“包太大”消息（依据[RFC1981]）：

```
if (IPv4路径MTU - 20) 小于 1280
    if 包大于1280字节
        发送MTU为1280的ICMPv6“包太大”消息
        丢弃包
    else
        封装但不设置IPv4头中的“不要分片”标志。封装器或沿IPv4路径的某些路由器可能会对IPv4包进行分片。
endif
else
    if 包大于（IPv4路径MTU - 20）
        发送MTU为（IPv4路径MTU - 20）的ICMPv6“包太大”消息
        丢弃包
    else
        封装并在IPv4头中设置“不要分片”标志
    endif
endif
```

具有大量隧道的封装器可以在每个隧道端点上选择动态或静态MTU。在节点使用的隧道数量较多时，观察到此状态信息可以被缓存和在不使用时丢弃。

注意，使用动态隧道MTU可能受到IPv4路径MTU黑洞的影响，即ICMPv4“包太大”消息被防火墙阻挡或未由路由器生成[RFC1435, RFC2923]。

3.3. 跳数限制（Hop Limit）

IPv6-over-IPv4隧道在IPv6角度被视为“单跳”。该隧道对网络用户是不可见的，也无法被诸如traceroute之类的网络诊断工具检测到。

单跳模型通过让封装器和解封装器像转发任何其他链路层的包一样处理IPv6跳数限制字段来实现。当转发IPv6包时，它们会将跳数减1（起始节点和最终目的地不减）。封装IPv4头的TTL值由实现依赖的方式选择，目前建议值已在“已分配数字”RFC [RFC3232][ASSIGNED]中公布。实现可以提供机制，允许管理员配置IPv4 TTL，例如通过IP隧道MIB [RFC4087]。

3.4. 处理ICMPv4错误

封装器可能会收到来自隧道内IPv4路由器的ICMPv4错误消息，针对其发出的封装包。这些包的目标是封装器，因为它是封装包的IPv4源。

ICMPv4错误处理仅适用于动态MTU确定，尽管这些功能也可以用于静态MTU隧道。

ICMPv4“包太大”错误消息按照IPv4路径MTU发现协议[RFC1191]处理，路径MTU会被记录在IPv4层。IPv6层据此判断是否需要生成ICMPv6“包太大”错误（详见第3.2.2节）。

其他类型的ICMPv4错误消息的处理取决于引发错误的封装包中可用的信息量。

许多旧的IPv4路由器只返回IPv4头后8字节的数据，不足以包含IPv6头的地址字段。较新的IPv4路由器可能会返回足够多的数据，甚至包括整个IPv6头和后续数据（参见[RFC1812]）。

如果有足够的数据字节可用，封装器可以提取封装的IPv6包，用以生成ICMPv6错误消息，返回给原始IPv6节点，示意如下：

```
+--------------+
| IPv4头       |
| 目的地址=封装节点 |
+--------------+
| ICMPv4头部   |
+--------------+
| IPv4头       |
| 源地址=封装节点 |
+--------------+
| IPv6头       |
| 传输头       |
+--------------+
| 原始IPv6包   |
+--------------+
```

当收到上述ICMPv4错误且错误类型不是“包太大”时，记录为隧道相关的错误也很有用。此外，如果有足够的头部信息，源节点可以发送类型为“不可达”、代码为“地址不可达”的ICMPv6错误，通知IPv6源。

（注意：当IPv4路径MTU被超出，且没有足够的有效载荷字节用于ICMPv4错误，或ICMPv4错误未引发ICMPv6错误时，可能会发生至少两个包的丢失，而非一个（单层MTU发现的情况）。例如，一个IPv6主机连接到IPv4/IPv6路由器，后者连接到一个会生成过大包大小ICMPv4错误的网络。首先，路由器需要学习导致至少一次包丢失的IPv4隧道（IPv4）MTU，然后主机需要从路由器学习导致至少一次包丢失的IPv6（MTU）值。即使如此，如果同时存在多个大包在传输中，也可能发生多次包丢失。）

3.5. IPv4头部构造

在用IPv4数据报封装IPv6包时，IPv4头部字段设置如下：

- 版本：4

- 头部长度（以32位字为单位）：5（封装头部中没有IPv4选项）

- 服务类型：0，除非另有说明（详见[RFC2983]和[RFC3168]第9.1节，关于服务类型字节和隧道的问题）

- 总长度：IPv6头部的有效载荷长度加上IPv6和IPv4头部的长度（即IPv6有效载荷长度加60字节常数）

- 标识符：由系统生成，确保在传输的任何IPv4包中唯一

- 标志：设置“不要分片（DF）”标志（详见第3.2节）。如需分片，则设置“更多分片（MF）”位

- 分片偏移：如需分片，按需设置

- 生存时间（TTL）：以实现相关的方式设置，如第3.3节所述

- 协议：41（IPv6的分配负载类型编号）

- 头部校验和：计算IPv4头部的校验和[RFC791]

- 源地址：封装器的IPv4地址，可由管理员配置或为出接口的地址

- 目的地址：隧道端点的IPv4地址

当封装数据包时，节点必须确保使用正确的源地址，以使数据包被解封器接受，如第3.6节所述。特别是在自动选择源地址可能在一定时间内产生不同结果的情况下，配置源地址是合适的。这种情况常见于多个地址、多接口，或路由频繁变化的场景。因此，应该可以通过管理方式指定隧道的源地址。

3.6. 解封

当IPv6/IPv4主机或路由器收到一份目标地址为其自身IPv4地址或加入的多播组地址的IPv4数据报，且协议字段值为41时，该数据包可能是隧道数据包，需要验证其是否属于已配置的某个隧道接口（通过检查源/目的地址），进行重组（如果在IPv4层被分片），并移除IPv4头部，将得到的IPv6数据报提交给节点上的IPv6层。

解封器必须在进一步处理数据包之前验证隧道源地址的正确性，以减轻地址伪造的问题（见第4节）。此验证也适用于传递给解封器上的传输协议的数据包。验证方法是确认源地址是解封器上配置的封装器的IPv4地址。对于源地址不匹配的包，必须丢弃，不应生成ICMP消息；然而，如果实现通常在收到未知协议数据包时会发送ICMP消息，则可以发送（例如，ICMPv4协议41不可达）。

此地址验证的副作用是，节点会静默丢弃源地址错误的包，以及接收但未直接发给它的包（如广播地址的包）。

无论是否采用其他IPv4入口过滤措施，节点管理员可以配置实现进行入口过滤，即检查数据包是否来自通向隧道端点的路由方向的接口，类似于严格反向路径转发（RPF）[RFC3704]的检查。由于这可能在通过多条链路路由的隧道中引发问题，建议默认禁用此检查。被此检查捕获的包应被丢弃，不应默认生成ICMP消息。

解封器必须支持在隧道接口上具有至少1500字节的IPv6最大传输单元（MTU），并且应支持解封最大为解封器上最大（IPv6）接口MTU的IPv4数据包的重组。1500字节的限制是基于第3.2.1节中使用静态MTU方案的封装器，而使用第3.2.2节中动态方案的封装器可能会导致接收最大接口MTU的包（注意，实际上重要的是在解封器之前的最后一个IPv4路由器上的接口MTU，但对于大多数链路，所有邻居的MTU是相同的）。

此重组限制允许封装器通过动态确定隧道MTU，利用更大的IPv4路径MTU。实现可以配置一个参数，允许设置比上述值更大的隧道重组缓冲区，但不得低于上述值。

解封示意如下：

```
            +-------------+
            |    IPv4     |
            |   头部      |
            +-------------+                 +-------------+
            |    IPv6     |                 |    IPv6     |
            |   头部      |                 |   头部      |
            +-------------+                 +-------------+
            |  传输层     |                 |  传输层     |
            |   头部      |      ===>       |   头部      |
            +-------------+                 +-------------+
            |             |                 |             |
            ~    数据     ~                 ~    数据     ~
            |             |                 |             |
            +-------------+                 +-------------+
```

从IPv4解封IPv6

解封器在解封IPv6包之前，先进行IPv4重组。

在解封时，IPv6头部不应被修改（但关于服务类型字节和隧道相关的问题，请参见[RFC2983]和[RFC3168]第9.1节）。如果后续转发该包，其跳数限制（hop limit）应减一。

封装的IPv4头部会被丢弃，提交到IPv6层的包在验证其有效性时应检查。重建IPv6包时，长度必须由IPv6负载长度确定，因为IPv4包可能被填充（因此长度可能大于IPv6包加上被移除的IPv4头部）。

解封后，节点必须静默丢弃源地址无效的IPv6包。无效源地址列表应至少包括：

- 所有多播地址（FF00::/8）

- 回环地址（::1）

- 所有IPv4兼容IPv6地址 [RFC3513]（::/96），不包括未指定地址（::/128）

- 所有IPv4映射IPv6地址（::ffff:0:0/96）

此外，节点应配置对IPv6源地址进行入口过滤[RFC2827][RFC3704]，类似于对其任何接口的过滤，例如：

1）如果隧道指向互联网，节点应配置检查站点的IPv6前缀是否被用作源地址；

2）如果隧道指向边缘网络，节点应配置检查源地址是否属于该边缘网络。

前者的前缀列表通常需要手动配置；后者可以自动验证，例如使用严格的单播反向路径转发（Unicast RPF）检查，只要可以将某个接口指定为通向边缘。

建议实现提供单一配置项，方便管理员启用对边缘网络的严格入口过滤。

3.7. 链路本地地址

配置的隧道是IPv6接口（在IPv4“链路层”之上），因此必须具有链路本地地址。链路本地地址通常由在隧道上运行的路由协议使用。

此类接口的接口标识符[RFC3513]可以基于底层接口的32位IPv4地址，或采用其他方法，只要能在概率上确保其唯一性。

注意，为了减少在拓扑或硬件变化时重新编号链路本地地址的可能性和影响，形成链路本地地址时可能希望采用某种方式以最小化这种可能性。

如果用IPv4地址形成IPv6链路本地地址，接口标识符为IPv4地址，前面补零。注意，“全球/本地”位为零，表示该标识符不是全球唯一的。链路本地地址由前缀FE80::/64与接口标识符拼接而成。

当主机在相关物理接口上使用多个IPv4地址时，管理员或实现应在形成链路本地地址时选择其中一个IPv4地址。

```
+-------+-------+-------+-------+-------+-------+------+------+
|  FE      80      00      00      00      00      00     00  |
+-------+-------+-------+-------+-------+-------+------+------+
|  00      00      00      00   |        IPv4 地址          |
+-------+-------+-------+-------+-------+-------+------+------+
```

3.8. 基于隧道的邻居发现

配置的隧道实现必须至少支持并响应邻居不可达检测（NUD）[RFC2461]使用的探测包。实现还应发送NUD探测包，以检测隧道是否失效，从而在失效时使用备用路径到达目的地。注意，邻居发现允许在路由协议跟踪双向可达性的情况下省略路由器到路由器链路上的NUD探测。

对于邻居发现，本文档中定义的配置隧道假设没有链路层地址，即使链路层（IPv4）有地址。这意味着：

- 发送邻居发现包时，不应在隧道链路上包含源链路层地址选项或目标链路层地址选项。

- 接收方在处理邻居发现包时，必须静默忽略在隧道链路上收到的任何源链路层地址选项或目标链路层地址选项。

不使用链路层地址选项与其他点对点链路上邻居发现的用法一致。

4. 源地址伪造相关威胁

上述规范中规定了在数据包解封前，特别是对隧道源地址的验证和入口过滤[RFC2827][RFC3704]的规则。当使用IP-in-IP隧道（无论IPv4还是IPv6）时，重要的是不要利用隧道绕过非隧道数据包的入口过滤。因此，本文档中的规则是基于假设在IPv4和IPv6中都使用入口过滤的前提，确保隧道的使用不会成为绕过过滤的简便途径。

在没有解封器中具体入口过滤检查的情况下，攻击者可以注入如下数据包：

- 外层IPv4源地址：攻击者的真实IPv4地址

- 外层IPv4目的地址：解封器的IPv4地址

- 内层IPv6源地址：Alice（可能是解封器或其邻近节点）

- 内层IPv6目的地址：Bob

即使所有IPv4路由器和IPv6路由器都实施了入口过滤，上述伪造包仍可能通过，导致Bob收到看似来自Alice的包，而实际上发件人是其他节点。

解决方案是，解封器应只接受来自第3.6节中明确配置的源地址（即隧道另一端）的封装包。虽然这不能完全防止未部署入口过滤的情况下的攻击，但能显著提升安全性。关于此问题及其他威胁，详见安全考虑部分。

5. 安全考虑

使用IPv6的通用安全考虑在另一份文档中[V6SEC]讨论。

实现隧道时应意识到，虽然隧道是链路（定义见[RFC2460]），但其威胁模型可能与其他链路不同，因为隧道可能涵盖整个互联网。

多种机制（如邻居发现）依赖跳数为255和/或地址为链路本地，以确保数据包源自链路。在安全环境中，隧道比物理链路更易受到破坏，因为任何互联网中的攻击者都可以向隧道解封器发送IPv6-in-IPv4包，除非解封检查能丢弃此类注入的包。

因此，本文规定解封器应采取以下措施（见第3.6节）以减轻此威胁：

- 该数据包的IPv4源地址必须与配置的隧道端点一致；

- 无论管理员是否配置了IPv4入口过滤，解封器都可以执行IPv4入口过滤，检查IPv4包是否来自预期的接口（但出于兼容性考虑，默认可能禁用此功能）。

- 必须丢弃从隧道接收的带有多个明显无效IPv6源地址的IPv6数据包（详见第3.6节）；以及

- 应进行IPv6入口过滤（通常需要运营商配置），以检查隧道中的IPv6数据包是否来自预期的接口。

尤其是第一项验证非常关键：为了绕过此检查，攻击者必须能够知道隧道的源地址（从困难到可预测不等）并能够伪造该地址（相对容易）。

如果认为隧道源验证的其他威胁也很严重，应采用带有认证的隧道方案，例如IPsec [RFC2401]（优选）或带有预配置密钥的通用路由封装（GRE）[RFC2890]。由于配置的隧道大多是手动设置，设置密钥材料可能不是问题。然而，关于使用安全的IPsec IPv6-in-IPv4隧道的详细信息，另有文档描述 [V64IPSEC]。

如果隧道在一个管理域内进行，则在域的边缘进行适当的入口过滤也可以消除来自域外的威胁。因此，较短的隧道优于较长的隧道，后者可能跨越整个互联网。

此外，实现必须将不同链路的接口视为独立的，例如，确保在一个链路上到达的邻居发现（Neighbor Discovery）数据包不会影响其他链路。这一点对于隧道链路尤为重要。

在由于未匹配允许的IPv4源地址而丢弃隧道数据包时，节点不应“确认”隧道的存在，否则可能被用来探测可接受的隧道端点地址。因此，规范要求此类数据包必须被丢弃，除非实现通常会对未知协议发送ICMP目的地不可达消息；在这种情况下，可以发送相同的ICMP代码。显而易见的是，如果对其他协议返回错误时未返回相同的ICMP代码，可能暗示IPv6堆栈（或协议41隧道处理）已启用——行为应保持一致，以确保对探测的透明性。

6. 致谢

我们感谢IPv6工作组、下一代过渡（ngtrans）工作组和v6ops工作组的成员们，他们为本文档做出了许多贡献并进行了广泛审查。特别感谢（按字母顺序）Jim Bound、Ross Callon、Tim Chown、Alex Conta、Bob Hinden、Bill Manning、John Moy、Mohan Parthasarathy、Chirayu Patel、Pekka Savola 和 Fred Templin 提供的许多有益建议。Pekka Savola 还协助编辑了规范的最终修订。

7. 参考文献

7.1. 必要性参考文献

[RFC791] Postel, J.，“互联网协议”，STD 5，RFC 791，1981年9月。

[RFC1191] Mogul, J. 和 S. Deering，“路径MTU发现”，RFC 1191，1990年11月。

[RFC1981] McCann, J.，Deering, S. 和 J. Mogul，“IPv6路径MTU发现”，RFC 1981，1996年8月。

[RFC2119] Bradner, S.，“用于指示RFC要求级别的关键词”，BCP 14，RFC 2119，1997年3月。

[RFC2460] Deering, S. 和 R. Hinden，“互联网协议，第6版（IPv6）规范”，RFC 2460，1998年12月。

[RFC2463] Conta, A. 和 S. Deering，“互联网控制消息协议（ICMPv6）用于IPv6的规范”，RFC 2463，1998年12月。

7.2. 说明性参考文献

[ASSIGNED] IANA，“已分配号码在线数据库”，http://www.iana.org/numbers.html

[DNSOPV6] Durand, A.，Ihren, J. 和 Savola P.，“IPv6 DNS的操作考虑与问题”，工作进展中，2004年10月。

[KM97] Kent, C. 和 J. Mogul，“碎片化被认为有害”，在SIGCOMM '87计算机通信技术前沿研讨会论文集，1987年8月。

[V6SEC] Savola, P.，“IPv6过渡/共存安全考虑”，工作进展中，2004年10月。

[V64IPSEC] Graveman, R. 等，“使用IPsec保护IPv6-over-IPv4隧道”，工作进展中，2004年12月。

[RFC1435] Knowles, S.，“来自路径MTU发现经验的IESG建议”，RFC 1435，1993年3月。

[RFC1812] Baker, F.，“IPv4路由器的需求”，RFC 1812，1995年6月。

[RFC2401] Kent, S. 和 R. Atkinson，“互联网协议安全架构”，RFC 2401，1998年11月。

[RFC2461] Narten, T.，Nordmark, E. 和 W. Simpson，“IPv6邻居发现”，RFC 2461，1998年12月。

[RFC2462] Thomson, S. 和 T. Narten，“IPv6无状态地址自动配置”，RFC 2462，1998年12月。

[RFC2827] Ferguson, P. 和 D. Senie，“网络入口过滤：防止利用IP源地址伪造的拒绝服务攻击”，BCP 38，RFC 2827，2000年5月。

[RFC2890] Dommety, G.，“GRE的密钥和序列号扩展”，RFC 2890，2000年9月。

[RFC2923] Lahey, K.，“路径MTU发现中的TCP问题”，RFC 2923，2000年9月。

[RFC2983] Black, D.，“差异服务与隧道”，RFC 2983，2000年10月。

[RFC3056] Carpenter, B. 和 K. Moore，“通过IPv4云连接IPv6域”，RFC 3056，2001年2月。

[RFC3168] Ramakrishnan, K.，Floyd, S. 和 D. Black，“在IP中添加显式拥塞通知（ECN）”，RFC 3168，2001年9月。

[RFC3232] Reynolds, J.，“已分配号码：RFC 1700被在线数据库取代”，RFC 3232，2002年1月。

[RFC3484] Draves, R.，“互联网协议第6版（IPv6）的默认地址选择”，RFC 3484，2003年2月。

[RFC3493] Gilligan, R.，Thomson, S.，Bound, J.，McCann, J. 和 W. Stevens，“IPv6基本套接字接口扩展”，RFC 3493，2003年2月。

[RFC3513] Hinden, R. 和 S. Deering，“互联网协议第6版（IPv6）地址架构”，RFC 3513，2003年4月。

[RFC3596] Thomson, S.，Huitema, C.，Ksinant, V. 和 M. Souissi，“支持IPv6的DNS扩展”，RFC 3596，2003年10月。

[RFC3704] Baker, F. 和 P. Savola，“多宿主网络的入口过滤”，BCP 84，RFC 3704，2004年3月。

[RFC4087] Thaler, D.，“IP隧道管理信息库（MIB）”，RFC 4087，2005年6月。

8. 与RFC 2893的变更

这些变更的主要动因是简化文档，仅包含广泛使用的机制。

RFC 2893中包含一种称为自动隧道的机制，但RFC 3056 [RFC3056]定义了更通用的机制，为每个具有（全局）IPv4地址的节点分配一个/48 IPv6前缀，即足够覆盖整个站点。

自RFC 2893以来，进行了以下更改：

- 移除了对A6的引用，保留了AAAA。

- 移除了自动隧道和IPv4兼容地址的使用。

- 移除了使用IPv4“Anycast地址”的默认配置隧道。

- 移除了源地址选择部分，因为这已由另一份文档（[RFC3484]）涵盖。

- 简要提及了6over4。

- 将参考文献分为规范性和非规范性，并进行了整理。

- 在“IPv4路径MTU - 20”小于或等于1280的判断中，去掉了“或等于”。

- 移除了以下内容：然而，在某些环境中可以使用IPv6，而无需与IPv4的互操作性。设计用于此类环境的IPv6节点无需使用甚至实现这些机制。

- 分别描述了静态MTU和动态MTU的情况；明确动态路径MTU机制是可选的，但如果实现，应遵循第3.2.2节的规则。

- 将静态MTU默认值设为1280到1480字节，并可配置。详细讨论了使用静态MTU的相关问题。

- 规定了IPv4重组和IPv6最大传输单元（MRU）的最低规则，以增强互操作性并减少黑洞。

- 重申了关于服务类型（Type-of-Service）“目前正在进行中”的措辞，并松散地引用了[RFC2983]和[RFC3168]。

- 将“已分配号码”引用修正为指向在线版本（并正确指向“已分配号码已过时”的RFC）。

- 澄清了入口过滤的相关内容，例如，它适用于传输协议上的数据包以及由解封装器转发的数据包，以及解封装器的检查在IPv4和IPv6入口过滤存在时的帮助。

- 移除了单向隧道，假设所有隧道都是双向的，端点地址之间（而非节点之间）。

- 移除了在DNS中广告地址的指南，认为此内容略微超出范围，相关细节请参阅其他文档。

- 移除了关于链路本地地址应基于IPv4地址的“应当”要求。

- 增加了“应当”实现一个设置隧道源地址的调节钮的建议，并讨论了其用途。

- 增强了源地址检查的措辞：必须检查IPv4和IPv6源地址，且可选择采用类似RPF的入口过滤。

- 重新编写了安全考虑部分，更准确地描述隧道的威胁。

- 增加了在封装时考虑使用TTL=255的说明。

- 在第3.2节中增加了更多关于使用“无限”IPv6 MTU可能导致互操作性问题的讨论。

- 增加了明确要求：如果同时使用两种MTU确定方法，应能在每个隧道上选择一种。

- 澄清了ICMPv4错误处理仅适用于动态MTU的说明。

- 移除/澄清了DNS记录过滤；API应为“应当”，如果不存在，则不得过滤任何内容。关于顺序的规定超出范围，但可参考RFC3484。

- 增加了目标IPv4地址也可能是多播地址的说明。

- 建议提供一个切换开关，以在接口上执行严格入口过滤。

- 一般化了关于ICMPv4消息中数据的描述。

- 进行了大量其他编辑整理。

作者联系方式

- Erik Nordmark
  Sun Microsystems
  17 Network Circle
  Menlo Park, CA 94025
  美国
  电话：+1 650 786 2921
  电子邮箱：erik.nordmark@sun.com

- Robert E. Gilligan
  Intransa, Inc.
  2870 Zanker Rd., Suite 100
  San Jose, CA 95134 美国
  电话：+1 408 678 8600
  传真：+1 408 678 8800
  电子邮箱：bob.gilligan@acm.org

版权声明

- 本文件的版权归互联网协会（2005）所有。

- 本文档受BCP 78中的权利、许可证和限制约束，除非另有说明，作者保留所有权利。

- 本文档及其中包含的信息按“原样”提供，互联网协会、作者及其代表或赞助组织（如有）不对其任何明示或暗示的保证负责，包括但不限于不侵犯任何权利或对适销性和特定用途的适用性作出保证。

知识产权

- IETF不对本文件所述技术的实现或使用中可能涉及的任何知识产权或其他权利的有效性或范围发表立场，也不保证已进行任何独立努力以识别此类权利。关于RFC文档中权利的程序信息，请参阅BCP 78和BCP 79。

- 可通过IETF在线知识产权库（http://www.ietf.org/ipr）获取向IETF秘书处提交的知识产权披露、许可保证或试图获得一般许可或使用此类专有权利的结果。

- IETF欢迎任何相关方报告可能涉及实现该标准所需技术的版权、专利或专利申请或其他专有权利。请将相关信息发送至ietf-ipr@ietf.org。

致谢

- 当前RFC编辑工作由互联网协会提供资金支持。
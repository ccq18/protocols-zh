# RFC 4408 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs4001-4500/rfc4408.txt

网络工作组                                            王明
评论请求编号：4408                                    维尔纳·施利特
类别：实验性                                              2006年4月

                   发送者策略框架（SPF）用于
            授权使用电子邮件中的域名，版本1

本备忘录的状态

   本备忘录定义了面向互联网社区的实验性协议。它不规定任何类型的互联网标准。欢迎讨论和提出改进建议。本备忘录的分发不受限制。

版权声明

   版权所有（C）互联网协会（2006年）。

互联网标准局（IESG）说明

   以下文件（RFC 4405、RFC 4406、RFC 4407 和 RFC 4408）已同时作为实验性RFC发布，尽管目前没有普遍的技术共识，也未能调和这两种方法。 因此，这些文件尚未经过完整的IETF审查，而是“按原样”发布，以记录在MARID工作组中考虑的不同方法。

   IESG不对哪种方法更优持立场，并提醒读者每种方法都存在严重的未解决问题，以及同时使用它们的担忧。 IESG认为，记录不同的方法比不记录它们造成的潜在危害要小。

   注意，Sender ID的实验可能会使用为当前SPF实验或早期版本创建的DNS记录。根据记录的内容，这可能导致对消息应用Sender ID启发式判断时出现错误。根据接收方对这些启发式判断的处理，消息可能无法投递或在接收时被丢弃。

   依赖Sender ID实验DNS记录的参与者应警告，可能会在这种情况下丢失有效的消息。发布SPF实验DNS记录的参与者应考虑RFC 4406第3.4节中的建议，并可能希望同时发布v=spf1和spf2.0记录，以避免冲突。

王明与施利特                实验性                          [第1页]

RFC 4408             发送者策略框架（SPF）            2006年4月

   参与Sender ID实验的用户应注意，Resent-*头字段的使用方式会导致在与符合标准的系统（特别是遵循标准而不添加Resent-*头的自动转发器，以及符合RFC 822但尚未实现RFC 2822 Resent-*语义的系统）交互时，合法邮件无法接收。 在未解决此互操作性问题之前，不应在标准轨道上推进Sender ID。

   社区被邀请在发布后两年内观察这两种方法的成功与失败，以便未来达成社区共识。

摘要

   互联网电子邮件可能被伪造，方式多种多样。特别是，现有协议没有限制发件主机可以在消息的反向路径或SMTP HELO/EHLO命令中使用的域名。这份文件描述了Sender Policy Framework（SPF）第1版协议，允许域名明确授权允许使用其域名的主机，接收主机可以检查此类授权。

目录

   1. 引言 ....................................................4
      1.1. 协议状态 ............................................4
      1.2. 术语 ..................................................5
   2. 操作 .......................................................5
      2.1. HELO身份 ............................................5
      2.2. MAIL FROM身份 ........................................5
      2.3. 发布授权 ............................................6
      2.4. 检查授权 ............................................6
      2.5. 结果解释 ............................................7
           2.5.1. 无 ..............................................8
           2.5.2. 中立 ............................................8
           2.5.3. 通过 ............................................8
           2.5.4. 失败 ............................................8
           2.5.5. 软失败 ..........................................9
           2.5.6. 临时错误 ........................................9
           2.5.7. 永久错误 ........................................9
   3. SPF记录 ....................................................9
      3.1. 发布 .................................................10
           3.1.1. DNS资源记录类型 ..............................10
           3.1.2. 多个DNS记录 ..................................11
           3.1.3. 单个DNS记录中的多个字符串 ....................11
           3.1.4. 记录大小 ......................................11
           3.1.5. 通配符记录 ....................................11
   4. check_host()函数 ..........................................12
      4.1. 参数 .................................................12
      4.2. 结果 .................................................13
      4.3. 初始处理 .............................................13
      4.4. 记录查找 .............................................13
      4.5. 选择记录 .............................................13
      4.6. 记录评估 .............................................14
           4.6.1. 条款评估 ......................................14
           4.6.2. 机制 ..........................................15
           4.6.3. 修饰符 ........................................15
      4.7. 默认结果 .............................................16
      4.8. 域名定义 .............................................16
   5. 机制定义 ..................................................16
      5.1. "all" .................................................17
      5.2. "include" .............................................18
      5.3. "a" ...................................................19
      5.4. "mx" ..................................................20
      5.5. "ptr" .................................................20
      5.6. "ip4" 和 "ip6" .......................................21
      5.7. "exists" ..............................................22
   6. 修饰符定义 ................................................22
      6.1. redirect：重定向查询 ..................................23
      6.2. exp：说明 .............................................23
   7. Received-SPF头字段 ........................................25
   8. 宏 .........................................................27
      8.1. 宏定义 ...............................................27
      8.2. 扩展示例 .............................................30
   9. 影响 .......................................................31
      9.1. 发送域 ...............................................31
      9.2. 邮件列表 .............................................32
      9.3. 转发服务和别名 .......................................32
      9.4. 邮件服务 .............................................34
      9.5. MTA中继 ..............................................34
   10. 安全考虑 .................................................35
      10.1. 处理限制 ...........................................35
      10.2. SPF授权的电子邮件可能包含其他虚假身份 ............37
      10.3. 伪造的DNS和IP数据 ..................................37
      10.4. 跨用户伪造 .........................................37
      10.5. 不可信信息源 .......................................38
      10.6. 隐私暴露 ...........................................38
   11. 贡献者与致谢 .............................................38
   12. IANA考虑 .................................................39
      12.1. SPF DNS记录类型 ....................................39
      12.2. Received-SPF邮件头字段 ..............................39
   13. 参考文献 .................................................39
      13.1. 核心参考 ...........................................39
      13.2. 资料性参考 .........................................40

附录A. 采集的ABNF ...........................................42
附录B. 扩展示例 ..............................................44
   B.1. 简单示例 ..............................................44
   B.2. 多域名示例 ............................................45
   B.3. DNSBL风格示例 .........................................46
   B.4. 多需求示例 ............................................46

1. 引言

   当前的电子邮件基础设施存在一个问题：任何主机都可以在邮件系统中注入邮件时，将自己标识为任何域名。这种情况可以在会话、信封和邮件头中实现。虽然在某些情况下，这一特性是有用的，但它也成为减少未请求的大量垃圾邮件（UBE，亦称spam）的主要障碍。此外，许多域名持有者对其他实体轻易使用其域名（常带恶意意图）表示担忧。

   本文定义了一种协议，允许域名所有者授权主机在“MAIL FROM”或“HELO”身份中使用其域名。符合标准的域名持有者会发布SPF记录，指明哪些主机被允许使用其域名，符合条件的邮件接收方会在邮件传输过程中利用已发布的SPF记录验证发件MTA（邮件传输代理）的授权情况。

   对邮件接收方的另一个好处是，在验证身份后，可以根据发件域名而非发件主机的IP地址做出本地策略决策。这一点很有优势，因为域名的声誉可能比IP地址的声誉更准确。此外，如果某个声明的身份未通过验证，接收方可以对该邮件采取更强的措施，比如拒收。

1.1. 协议状态

   SPF自2003年夏季开始开发，2003年12月起已在开发者之外开始部署。SPF的设计逐步演变，直到2004年春季趋于稳定。期间出现了多种形式的SPF，有的作为文档撰写，有的作为互联网草案提交，许多在开发论坛中讨论和辩论。

   本文旨在清楚记录早期SPF草案中定义的协议，反映现有实现中使用的版本。这一版本有时被称为“SPF经典”。理解是，具体实现和部署可能与此不同，且在此基础上有所扩展。希望我们已捕捉到SPF第1版的共同理解。

1.2. 术语

   本文中的关键词“必须（MUST）”、“不得（MUST NOT）”、“要求（REQUIRED）”、“应（SHALL）”、“不得（SHALL NOT）”、“建议（SHOULD）”、“不建议（SHOULD NOT）”、“推荐（RECOMMENDED）”、“可以（MAY）”和“可选（OPTIONAL）”的定义遵循[RFC2119]。

   本文关注的邮件消息部分通常称为“信封发件人”、“返回路径”、“反向路径”、“退信地址”、“2821 FROM”或“MAIL FROM”。由于这些术语定义不够明确或常被随意使用，本文在第2.2节定义了“MAIL FROM”身份。注意，其他表面上类似的术语（如“反向路径”）仅在规范性文件中定义的含义下使用。

当邮件接收方决定执行SPF检查时，必须使用正确实现的check_host()函数（第4节），并用正确的参数进行评估。虽然整体测试是可选的，但一旦决定进行测试，就必须按照规定的方式执行，以确保发布者和接收者之间的语义一致。

为了进行测试，邮件接收方必须用以下参数评估check_host()函数：

<ip>     - 发送邮件的SMTP客户端的IP地址，可以是IPv4或IPv6。

<domain> - “MAIL FROM”或“HELO”身份中的域名部分。

<sender> - “MAIL FROM”或“HELO”身份。

注意，<domain>参数可能不是一个格式正确的域名。例如，如果反向路径为空，则使用EHLO/HELO域名，但这会带来相关问题（参见第2.1节）。在这些情况下，第4.3节定义的check_host()应返回“None”结果。

虽然无效、格式错误或不存在的域名会导致SPF检查返回“None”，因为找不到SPF记录，但许多邮件传输代理（MTA）长期政策是拒绝来自此类域名的电子邮件，尤其是在“MAIL FROM”无效的情况下。为了防止规避SPF记录，建议考虑拒绝来自无效域名的邮件。

实现时必须确保正确提取SMTP的MAIL FROM命令中提供的数据中的<domain>，因为许多MTA仍然接受诸如源路由（参见[RFC2821]附录C）、百分号技巧（参见[RFC1123]）和bang路径（参见[RFC1983]）等古老特性。这些过时的特性曾被恶意利用以绕过安全系统。

2.5. 解释结果

本节描述执行授权的软件应如何解释check_host()函数的结果。授权检查应在处理SMTP事务期间进行，以便直接通过SMTP回复将错误返回给发件MTA。

在SMTP事务结束后进行授权检查可能会引发问题，例如：(1) 从潜在欺骗性头部中准确提取所需信息可能困难；(2) 由于发件人策略可能已更改，合法邮件可能会失败。

对未通过授权检查的伪造身份生成未送达通知通常是滥用行为，且违背身份所有者的明确意愿。

2.5.1. None

“None”结果意味着域未发布记录，或无法从给定身份确定可检查的发件域。检测软件无法确认客户端主机是否被授权。

2.5.2. Neutral

域所有者明确表示无法或不愿意断言IP地址是否被授权。“Neutral”结果必须与“None”结果一样处理；两者的区别仅供参考。将“Neutral”比“None”更严厉会阻碍域所有者测试SPF记录（参见第9.1节）。

2.5.3. Pass

“Pass”结果表示客户端被授权使用该身份发邮件。在声誉方面，该域可以被视为对该消息负责。后续的策略检查可以在对身份的合法使用有信心的情况下继续。

2.5.4. Fail

“Fail”结果明确表示客户端未被授权使用该身份。检测软件可以据此标记邮件或直接拒绝。

如果在SMTP事务中选择拒绝邮件，应使用SMTP回复码550（参见[RFC2821]），并在支持时附加5.7.1投递状态通知（DSN）码（参见[RFC3464]）及适当的回复文本。check_host()函数可以返回默认的说明字符串或由发布SPF记录的域提供的说明（参见第6.2节）。如果信息不来自检测软件，应明确说明文本由发件域提供。例如：

```
550-5.7.1 SPF MAIL FROM检查失败：
550-5.7.1 域example.com说明：
550 5.7.1 请参阅 http://www.example.com/mailpolicy.html
```

2.5.5. SoftFail

“SoftFail”结果应视为介于“Fail”和“Neutral”之间。域认为主机未被授权，但不愿作出强烈声明。接收软件不应仅凭此结果拒绝邮件，但可以对邮件进行更严格的审查。

域所有者希望减少此类主机的使用，因此在出现“SoftFail”时希望获得有限反馈。例如，收件人的邮件用户代理（MUA）可以突出显示“SoftFail”状态，或接收的MTA可以采用“灰名单”技术，首次收到邮件时返回SMTP回复码451（4.3.0 DSN码）并附加说明，第二次则接受。

2.5.6. TempError

“TempError”表示在执行检查时遇到临时性错误。检测软件可以选择接受或暂时拒绝该邮件。如果在SMTP事务中因该原因拒绝，应使用SMTP回复码451，并在支持时附加4.4.3 DSN码。

2.5.7. PermError

“PermError”表示无法正确解释域发布的记录。这表明需要人工干预以解决的错误状态，而非临时性错误。注意，如果域所有者使用宏（第8节），此结果可能是由于被检查的身份格式异常所致。

3. SPF记录

SPF记录是DNS资源记录（RR），声明哪些主机被授权或未被授权使用某个域名作为“HELO”和“MAIL FROM”身份。大致上，记录将所有主机划分为允许和不允许的集合（但某些主机可能既不属于任何一类）。

SPF记录是一个文本字符串。例如：

```
v=spf1 +mx a:colo.example.com/28 -all
```

该记录版本为“spf1”，包含三个指令：“+mx”、“a:colo.example.com/28”（“+”为隐含，表示允许）和“-all”。

3.1. 发布

希望符合SPF规范的域所有者必须为“MAIL FROM”和“HELO”身份中使用的主机发布SPF记录。SPF记录应放在对应主机名的DNS树中，而非子域（如SRV记录所用）。无论使用TXT还是SPF RR类型（参见第3.1.1节），都应如此。

例如，第3节中的示例可以在域区文件中如下发布：

```
example.com.          TXT "v=spf1 +mx a:colo.example.com/28 -all"
smtp-out.example.com. TXT "v=spf1 a -all"
```

使用TXT记录发布时，应注意其他在该位置发布的TXT记录（用于其他目的），它们可能引起大小限制问题（参见第3.1.4节）。

3.1.1. DNS资源记录类型

本文定义了新的DNS RR类型SPF，代码为99。其格式与TXT RR相同（参见[RFC1035]）。两者的字符内容均采用US-ASCII编码。

目前采用TXT记录的做法虽非理想，但由于许多DNS服务器和解析器无法支持新RR类型，因此必须如此。两记录类型方案为未来使用专用RR类型提供了前进路径。

符合SPF的域名应同时拥有这两种RR类型的记录，且内容必须一致。例如，不仅发布一条记录（参见第3.1节），而是：

```
example.com. IN TXT "v=spf1 +mx a:colo.example.com/28 -all"
example.com. IN SPF "v=spf1 +mx a:colo.example.com/28 -all"
```

示例中的RR类型为TXT，但也可以用SPF类型或两者同时发布。

3.1.2. 多个DNS记录

一个域名不得有多条记录导致授权检查时选择多个记录。详见第4.5节的选择规则。

3.1.3. 单个DNS记录中的多字符串

根据[RFC1035]第3.3.14和3.3节的定义，一个文本DNS记录（TXT或SPF）可以由多个字符串组成。如果发布的记录包含多个字符串，则必须视为将这些字符串连接在一起（不添加空格）。例如：

```
IN TXT "v=spf1 .... first" "second string..."
```

应视为等同于：

```
IN TXT "v=spf1 .... firstsecond string..."
```

包含多个字符串的SPF或TXT记录在构建超出255字节最大长度的记录时非常有用。

3.1.4. 记录大小

为某域名发布的SPF记录应尽可能保持较小，以确保查询结果在512字节内。这可以避免旧的DNS实现切换到TCP。由于答案大小受多种因素影响，以下仅为指导原则：如果域名和所有相关记录（TXT或SPF）的总长度少于450字符，DNS应能在UDP包中返回答案。计算TXT格式查询的大小时，还应考虑域名下其他TXT记录。过长的记录可能会被SPF客户端无声忽略。

3.1.5. 通配符记录

不建议使用通配符记录进行发布。若使用，必须谨慎。比如，域发布通配符MX记录时，也应发布通配符声明，遵循相同的要求和问题。特别是，必须为所有具有RR记录的主机及其子域重复声明。例如，扩展[RFC1034]第4.3.3节中的示例：

```
X.COM.          MX      10      A.X.COM
X.COM.          TXT     "v=spf1 a:A.X.COM -all"

*.X.COM.        MX      10      A.X.COM
*.X.COM.        TXT     "v=spf1 a:A.X.COM -all"

A.X.COM.        A       1.2.3.4
A.X.COM.        MX      10      A.X.COM
A.X.COM.        TXT     "v=spf1 a:A.X.COM -all"

*.A.X.COM.      MX      10      A.X.COM
*.A.X.COM.      TXT     "v=spf1 a:A.X.COM -all"
```

注意，SPF记录必须为域内每个名称重复两次：一次为该名称本身，一次为通配符覆盖其下的树。

一般不推荐使用通配符，因为它会使域下的每个名称都存在，且对任意名称的查询永远不会返回RCODE 3（名称不存在）。

4. check_host()函数

check_host()函数负责获取SPF记录、解析并解释它们，以判断特定主机是否被授权使用某个身份发邮件。执行此检查的邮件接收方必须正确评估此函数。

实现可以采用不同于此处定义的标准算法，只要在所有情况下结果一致即可。

4.1. 参数

check_host()函数接受以下参数：

<ip>     - 发送邮件的SMTP客户端的IP地址，可以是IPv4或IPv6。

<域名>——提供所需授权信息的域名部分；最初是“MAIL FROM”或“HELO”身份中的域名部分。

<发件人>——“MAIL FROM”或“HELO”身份。

当首次评估check_host()时，<发件人>的域名部分通常与<域名>参数相同。然而，对于递归评估（见下文第5.2节），通常不成立。

实际实现的check_host()函数可能需要额外的参数。

4.2. 结果

check_host()函数可以返回第2.5节中描述的几种结果之一。根据结果，接收方的本地策略决定采取的行动。

4.3. 初始处理

如果<域名>格式错误（标签长度超过63字符，零长度标签不在末尾等）或不是完全限定域名，或DNS查询返回“域不存在”（RCODE 3），check_host()会立即返回“None”结果。

如果<发件人>没有本地部分，则用字符串“postmaster”替代本地部分。

4.4. 记录查找

根据记录的发布方式（见第3.1节），需要对<域名>进行DNS查询，查询类型为TXT、SPF或两者都查。如果同时查找SPF和TXT记录，查询可以并行进行。

如果所有DNS查询都返回服务器故障（RCODE 2）或其他错误（RCODE非0或3）或超时，check_host()会立即退出，返回“TempError”。

4.5. 记录选择

记录以版本部分开始：

record           = version terms *SP
version          = "v=spf1"

从返回的记录集中开始，选择过程分为两个步骤：

1. 不以“v=spf1”为版本部分的记录将被丢弃。注意，版本部分由SP字符或记录末尾终止。版本为“v=spf10”的记录不匹配，必须丢弃。

2. 如果集合中有SPF类型的记录，则所有TXT类型的记录都被丢弃。

经过上述步骤后，应该只剩下一条记录，可以进行评估。如果剩下两条或更多记录，check_host()会立即以“PermError”结果退出。

如果没有匹配的记录，SPF客户端必须假设该域没有SPF声明。SPF处理必须停止并返回“None”。

4.6. 记录评估

在选定一条SPF记录后，check_host()会解析并解释它，以找到当前测试的结果。如果存在语法错误，check_host()会立即返回“PermError”。

实现可以选择先解析整个记录，如果发现语法不正确，则返回“PermError”。但无论如何，必须检测到记录中任何位置的语法错误。

4.6.1. 术语评估

有两类术语：机制和修饰符。记录中包含这些术语的有序列表，格式如下（ABNF增强巴科斯范式）：

terms            = *( 1*SP ( directive / modifier ) )

directive        = [ qualifier ] mechanism
qualifier        = "+" / "-" / "?" / "~"
mechanism        = ( all / include / A / MX / PTR / IP4 / IP6 / exists )
modifier         = redirect / explanation / unknown-modifier
unknown-modifier = name "=" macro-string

name             = ALPHA *( ALPHA / DIGIT / "-" / "_" / "." )

大多数机制允许在名称后面跟随“:”或“/”字符。

修饰符总是在名称后面立即包含“=”，在任何“:”或“/”字符之前，macro-string可能包含它们。

不含“=”、“:”或“/”的术语为机制（定义见第5节）。

根据[RFC4234]中ABNF的定义，机制和修饰符的名称不区分大小写。

4.6.2. 机制

每个机制按从左到右的顺序依次评估。没有更多机制时，结果由第4.7节定义。

评估机制时，可能发生三种情况：匹配、不匹配或抛出异常。

匹配时，处理结束，返回该记录的限定符值。未匹配时，继续评估下一个机制。抛出异常时，机制评估结束，返回异常值。

可能的限定符及其返回结果如下：

+   Pass（通过）
-   Fail（失败）
~   SoftFail（软失败）
?   Neutral（中立）

限定符是可选的，默认为“+”。

当机制匹配且限定符为“-”时，返回“Fail”结果，并根据第6.2节描述计算解释字符串。

具体机制在第5节中详细描述。

4.6.3. 修饰符

修饰符不是机制：它们不返回匹配或不匹配。它们提供额外信息。虽然修饰符不直接影响记录的评估，但“redirect”修饰符在所有机制评估完毕后会产生影响。

4.7. 默认结果

如果没有任何机制匹配且没有“redirect”修饰符，check_host()会返回“Neutral”结果，就像最后一个指令是“?all”一样。如果存在“redirect”修饰符，check_host()将按第6.1节定义继续处理。

注意，记录应始终使用“redirect”修饰符或“all”机制明确终止处理。

例如：

v=spf1 +mx -all
或
v=spf1 +mx redirect=_spf.example.com

4.8. 域名规范

这些机制和修饰符中的一些包含<domain-spec>部分。<domain-spec>字符串会宏展开（见第8节）。展开后得到的字符串是完全限定DNS名称的标准表现形式：由点分隔的标签序列。本文档中称此域名为<target-name>。

注意：宏展开的结果不接受任何额外的转义。因此，该功能不能生成所有在DNS标签中合法的字符（如控制字符）。但它足够表达合法的主机名和常用的实用标签（如“_spf”），这些在DNS中被广泛使用。

对于某些机制，<domain-spec>是可选的。如果未提供，则使用<域名>作为<target-name>。

5. 机制定义

本节定义两类机制。

基础机制为语言框架提供支持，不指定特定的授权方案。

all
include

指定发件人机制用于指定一组<ip>地址，允许或不允许其使用<域名>发送邮件。

a
mx
ptr
ip4
ip6
exists

所有执行比较的机制在任何点都遵循以下规则：

如果指令中未给出CIDR长度，则<ip>与IP地址进行完全相等比较（CIDR为无类别域间路由，Classless Inter-Domain Routing）。

如果指定了CIDR长度，则只比较<ip>和IP地址的前N位（高位）。

当任何机制获取主机地址以与<ip>比较时，若<ip>为IPv4地址，则获取A记录；若为IPv6地址，则获取AAAA记录。即使SMTP连接通过IPv6，也必须将IPv4映射的IPv6地址（见[RFC3513]第2.5.5节）视为IPv4地址。

多个机制依赖DNS信息。除非特别说明，否则在这些DNS查询中，如果DNS服务器返回错误（RCODE非0或3）或超时，机制会抛出“TempError”异常。如果返回“域不存在”（RCODE 3），则机制的评估继续，视为没有错误（RCODE 0）且没有答案记录。

5.1. “all”

all              = "all"

“all”机制始终匹配。它通常作为记录中的最右端机制，用于提供明确的默认。

例如：

v=spf1 a mx -all

“all”之后的机制不会被测试。任何“redirect”修饰符（第6.1节）在存在“all”机制时无效。

5.2. “include”

include          = "include" ":" domain-spec

“include”机制触发对check_host()的递归评估。<domain-spec>按第8节展开，然后用展开后的字符串作为<domain>进行check_host()的评估。<ip>和<sender>参数保持不变。

事后看来，“include”这个名字不太恰当。实际上，只使用引用的SPF记录的评估结果，而不是像字面包含该SPF记录一样。例如，评估引用记录中的“-all”指令不会终止整体处理，也不一定导致“Fail”。（更合适的名字可能是“if-pass”、“on-pass”等。）

“include”机制允许一个域名指定多个管理上独立的域。例如，虚拟域“example.net”可能使用“example.com”和“example.org”的服务器来发送邮件。

示例：

example.net可以声明：

IN TXT "v=spf1 include:example.com include:example.org -all"

这会让check_host()实际上检查example.com和example.org的记录，期望得到“Pass”结果。只有当两个域都不允许该主机时，结果才会是“Fail”。

“include”匹配结果、是否匹配或抛出异常，取决于递归评估check_host()的结果：

+------------------------------+------------------------------+
| 递归check_host()结果          | 导致“include”机制的行为      |
+------------------------------+------------------------------+
| Pass                         | 匹配                         |
| Fail                         | 不匹配                       |
| SoftFail                     | 不匹配                       |
| Neutral                      | 不匹配                       |
| TempError                    | 抛出TempError                |
| PermError                    | 抛出PermError                |
| None                         | 抛出PermError                |
+------------------------------+------------------------------+

“include”机制旨在跨越管理边界。虽然可以用include合并多个共享相同授权主机集的域，但鼓励在可能的情况下使用“redirect”，并尽量减少单一管理域内的include数量。例如，如果example.com和example.org由同一实体管理，且两个域的允许主机集都是“mx:example.com”，那么example.org可以用“include:example.com”，但更优的做法是用“redirect=example.com”或“mx:example.com”。

5.3. “a”

如果<ip>是<target-name>的IP地址之一，则匹配。

A = "a" [ ":" domain-spec ] [ dual-cidr-length ]

对<target-name>进行地址查找。<ip>与返回的地址进行比较，只要有匹配即为匹配。

5.4. “mx”

如果<ip>是某个域名的MX主机之一，则匹配。

MX = "mx" [ ":" domain-spec ] [ dual-cidr-length ]

check_host()首先对<target-name>进行MX查找，然后对每个返回的MX名称进行地址查找。<ip>与每个返回的IP地址比较。为了防止拒绝服务（DoS）攻击，在评估“mx”机制时，最多只允许查找10个MX名称（见第10节）。只要有任何地址匹配，即为匹配。

关于隐式MX的注意事项：如果<target-name>没有MX记录，check_host()绝不能假装目标是其唯一的MX，也不能直接对<target-name>进行A记录查找。这种行为违反了传统的“隐式MX”规则。详见[RFC2821]第5节。如果需要这种行为，发布者应指定“a”指令。

5.5. “ptr”

该机制用于测试<ip>的DNS反向映射是否存在，并且是否正确指向特定域中的域名。

PTR = “ptr” [ “:” domain-spec ]

首先，使用以下流程查找<ip>的名称：对<ip>执行DNS反向映射，IPv4地址在“in-addr.arpa.”中查找对应的PTR记录，IPv6地址在“ip6.arpa.”中查找。对于返回的每个记录，通过查找其IP地址验证域名。为防止DoS攻击，在评估“ptr”机制时，最多不得查找超过10个PTR名称（详见第10节）。如果<ip>在返回的IP地址中，则验证该域名。伪代码如下：

sending-domain_names := ptr_lookup(sending-host_IP); 若找到的名称超过10个，则最多取前10个。对每个name：
  IP_addresses := A_lookup(name);
  若sending-domain_IP在IP_addresses中，则：
    validated-sending-domain_names += name;

然后检查所有验证过的域名，是否以<target-name>域名结尾。如果有任何符合，则此机制匹配。如果没有找到任何验证过的域名，或者验证过的域名都不以<target-name>结尾，此机制不匹配。在进行PTR RR查找时发生DNS错误，则此机制不匹配；在进行A RR查找时发生DNS错误，则跳过该域名，继续搜索。

伪代码如下：

for each name in (validated-sending-domain_names) {
  if name ends in <domain-spec>，返回匹配。
  if name 等于 <domain-spec>，返回匹配。
}
返回不匹配。

如果<target-name>是验证过的域名的祖先，或者两者相同，则此机制匹配。例如：“mail.example.com”在“example.com”域内，但“mail.bad-example.com”不在。

注意：不建议使用此机制，因为它速度较慢，在DNS错误情况下不如其他机制可靠，并且对arpa域名服务器造成较大负担。如使用，必须为域的主机设置正确的PTR记录，并且“ptr”机制应为最后检查的机制之一。

5.6. “ip4”和“ip6”

这些机制用于测试<ip>是否在给定的IP网络内。

IP4 = “ip4” “:” ip4-network [ ip4-cidr-length ]
IP6 = “ip6” “:” ip6-network [ ip6-cidr-length ]

ip4-cidr-length = “/” 1*DIGIT
ip6-cidr-length = “/” 1*DIGIT
dual-cidr-length = [ ip4-cidr-length ] [ “/” ip6-cidr-length ]

ip4-network = qnum “.” qnum “.” qnum “.” qnum
qnum = DIGIT（0-9）
     / %x31-39 DIGIT（10-99）
     / “1” 2DIGIT（100-199）
     / “2” %x30-34 DIGIT（200-249）
     / “25” %x30-35（250-255）
（符合传统点分十进制表示，例如192.0.2.0）

ip6-network = 依据[RFC 3513]第2.2节定义，例如2001:DB8::CD30

<ip>将与给定网络比较。如果CIDR长度的高位比特匹配，则此机制匹配。

如果省略ip4-cidr-length，则默认为“/32”；省略ip6-cidr-length，则默认为“/128”。不能用部分IP地址替代CIDR表示法。例如，应使用192.0.2.0/24，而不是192.0.2。

5.7. “exists”

此机制用于构造任意域名，用于DNS A记录查询。它允许使用复杂方案，包括邮件信封的任意部分，以确定允许的内容。

exists = “exists” “:” domain-spec

domain-spec按第8节展开，得到的域名用于DNS A RR查找。若返回任何A记录，则此机制匹配。即使连接类型为IPv6，查找类型仍为A。

域名可以用此机制指定任意复杂的查询。例如，假设example.com发布如下记录：

v=spf1 exists:%{ir}.%{l1r+-}._spf.%{d} -all

<target-name>可能展开为“1.2.0.192.someuser._spf.example.com”。这允许在用户和客户端IP地址层面做出细粒度的决策。

此机制还可以模拟现有反垃圾邮件DNS黑名单（DNSBL）使用的测试风格。

6. 修饰符定义

修饰符是提供附加信息的名/值对，值总是由“=”分隔。

本文档定义的修饰符（“redirect”和“exp”）可以出现在记录中的任何位置，但应在所有机制之后，尽量放在末尾。两个修饰符的顺序无关紧要。每个修饰符在一条记录中不得出现超过一次，否则check_host()将以“PermError”退出。

未识别的修饰符无论出现在哪里或出现频率如何，都必须忽略。这允许实现者优雅地处理包含其他规范定义的修饰符的记录。

6.1. redirect：重定向查询

如果所有机制都不匹配，且存在“redirect”修饰符，则处理如下：

redirect = “redirect” “=” domain-spec

“:”后面的domain-spec按第8节的宏规则展开，然后用展开后的字符串作为<domain>调用check_host()。<ip>和<sender>参数保持不变。

此时，check_host()的结果视为当前评估的结果，但如果未找到SPF记录或目标名格式错误，则结果为“PermError”而非“None”。

注意：新查询的域名可能本身也指定了重定向。

此功能适用于希望将相同记录应用于多个域的组织。例如：

la.example.com. TXT “v=spf1 redirect=_spf.example.com”
ny.example.com. TXT “v=spf1 redirect=_spf.example.com”
sf.example.com. TXT “v=spf1 redirect=_spf.example.com”
_spf.example.com. TXT “v=spf1 mx:example.com -all”

在此例中，三个域的邮件由相同的记录描述，便于管理。

注意：通常，域“A”不可靠地使用重定向到非同一管理控制下的域“B”。因为<sender>保持不变，不能保证“B”域的记录能正确适用于“A”域的邮箱，尤其是“B”域使用涉及本地部分的机制时。使用“include”指令可能更合适。

为清晰起见，建议“redirect”修饰符应作为记录中的最后一项。

6.2. exp：说明

explanation = “exp” “=” domain-spec

如果check_host()因机制匹配（如“-all”）导致“Fail”，且存在“exp”修饰符，则返回的说明字符串按以下方式计算。如果没有“exp”修饰符，则可能返回默认说明或空字符串。

<domain-spec>经过宏展开（见第8节），成为<target-name>。然后获取该<target-name>的DNS TXT记录。

如果<domain-spec>为空，或DNS处理出错（任何非0的RCODE），或未返回记录，或返回多于一条记录，或说明字符串语法错误，则视为未给出exp修饰符。

将TXT记录中的字符串连接（无空格），并进行宏展开，得到最终的说明字符串。实现可以限制说明字符串的长度，以符合其他协议限制或合理的处理范围。由于说明字符串用于SMTP响应，[RFC2821]第2.4节规定响应应为[US-ASCII]，因此说明字符串也应限制为US-ASCII字符。

评估check_host()的软件可以利用此字符串向发布域传达信息（如简短消息或URL）。应明确说明说明字符串来自第三方。例如，可以在说明前加上宏字符串“%{o} explains: ”，如第2.5.4节所示。

假设example.com的记录为：

v=spf1 mx -all exp=explain._spf.%{d}

在explain._spf.example.com上可能的说明TXT记录示例：

“Mail from example.com should only be sent by its own servers.”（简单、固定的消息）

“%{i} is not one of %{d}’s designated mail servers.”（包含更多信息，包括未通过检查的IP地址）

“See http://%{d}/why.html?s=%{S}&i=%{I}” （构造URL，带有check_host()的参数，用于生成详细的网页说明）

注意：在递归调用“include”机制时，不得使用<target-name>中的exp=修饰符。相反，在执行“redirect”修饰符时，不得使用原始域的exp=修饰符。

7. 收到的SPF头字段（Received-SPF）

建议SMTP接收方在消息头中记录SPF处理结果。如果选择这样做，应为每个已检查的身份使用此处定义的“Received-SPF”头字段。此信息面向收件人（详见第6.2节，说明）。

Received-SPF头字段是追踪字段（见[RFC2822]第3.6.7节），应插在现有头字段之前，位于由SMTP接收方生成的“Received:”字段之上。它必须在所有其他Received-SPF字段之上。其格式如下：

header-field = “Received-SPF:” [CFWS] result FWS [comment FWS] [ key-value-list ] CRLF

result = “Pass” / “Fail” / “SoftFail” / “Neutral” / “None” / “TempError” / “PermError”

key-value-list = key-value-pair *( “;” [CFWS] key-value-pair )
                [“;”]

key-value-pair = key [CFWS] “=” ( dot-atom / quoted-string )

key = “client-ip” / “envelope-from” / “helo” / “problem” / “receiver” / “identity” / mechanism / “x-” name / name

identity = “mailfrom”（用于“MAIL FROM”身份）
          / “helo” （用于“HELO”身份）
          / name （其他身份）

dot-atom = <根据[RFC2822]定义的未引号词>
quoted-string = <根据[RFC2822]定义的引号字符串>
comment = <根据[RFC2822]定义的注释字符串>
CFWS = <根据[RFC2822]定义的注释或折叠白空格>
FWS = <根据[RFC2822]定义的折叠白空格>
CRLF = <根据[RFC2822]定义的标准换行符>

此头字段应在结果后包含一个“(...)”样式的<comment>，提供支持信息，如<ip>、<sender>和<domain>。

以下键值对设计用于后续机器解析。SPF客户端应提供足够信息以验证SPF结果，即至少包括“client-ip”、“helo”，以及如果检查过“MAIL FROM”身份，还应包括“envelope-from”。

- client-ip：SMTP客户端的IP地址
- envelope-from：信封发件人邮箱
- helo：HELO或EHLO命令中提供的主机名
- mechanism：匹配的机制（若无匹配，则用“default”替代）
- problem：返回错误时的详细信息
- receiver：SPF客户端的主机名
- identity：被检查的身份；参见<identity>的ABNF规则

其他键名由SPF客户端定义。在新键名广泛接受之前，应以“x-”开头。

SPF客户端必须确保Received-SPF头字段不含无效字符，不过长，且不包含由发件人提供的恶意数据。

各种可能生成的邮件头样式示例如下：

Received-SPF: Pass（mybox.example.org：myname@example.com的域名授权192.0.2.1作为合法发件人）
    receiver=mybox.example.org；client-ip=192.0.2.1；
    envelope-from=<myname@example.com>；helo=foo.example.com；

Received-SPF: Fail（mybox.example.org：myname@example.com的域名未授权192.0.2.1作为合法发件人）
    identity=mailfrom；client-ip=192.0.2.1；
    envelope-from=<myname@example.com>；

（以下为RFC 4408的内容节选，介绍宏定义和用法）

8. 宏

8.1. 宏定义

许多机制和修饰符会对部分术语进行宏展开。

domain-spec      = macro-string domain-end
domain-end       = ( "." toplabel [ "." ] ) / macro-expand

toplabel         = ( *alphanum ALPHA *alphanum ) /
                   ( 1*alphanum "-" *( alphanum / "-" ) alphanum )
                   ; LDH规则及额外的TLD限制（参见[RFC3696]第2节）
alphanum         = ALPHA / DIGIT

explain-string   = *( macro-string / SP )

macro-string     = *( macro-expand / macro-literal )
macro-expand     = ( "%{" macro-letter transformers *delimiter "}" )
                   / "%%" / "%_" / "%-"
macro-literal    = %x21-24 / %x26-7E
                   ; 除“%”外的可见字符
macro-letter     = "s" / "l" / "o" / "d" / "i" / "p" / "h" / "c" / "r" / "t"
transformers     = *DIGIT [ "r" ]
delimiter        = "." / "-" / "+" / "," / "/" / "_" / "="

“%%”表示字面上的“%”。

“%_”展开为空格“ ”。
“%-”展开为URL编码的空格“%20”。

以下宏字母在参数中展开：

s = <发件人>
l = <发件人>的本地部分
o = <发件人>的域名
d = <域名>
i = <IP地址>
p = <IP地址>验证通过的域名
v = 如果<IP>为IPv4，则为“in-addr”；如果为IPv6，则为“ip6”
h = HELO/EHLO域名

以下宏字母仅在“exp”文本中允许使用：

c = SMTP客户端IP（易读格式）
r = 执行检查的主机域名
t = 当前时间戳

未跟随“{”、“%”、“-”或“_”的“%”字符为语法错误。例如：

- exists:%(ir).sbl.spamhaus.example.org（错误，应为：- exists:%{ir}.sbl.spamhaus.example.org）

宏展开中的可选变换器如下：

*DIGIT = 零个或多个数字
'r' = 反转值，默认以点分割

如果提供了变换器或分隔符，宏字母的替换值会被拆分成多个部分。执行反转和/或左侧部分的移除后，部分会用“.”重新连接，而非原始的分隔字符。

默认情况下，字符串以“.”（点）拆分。注意不对前导、尾随或连续的分隔符做特殊处理，拆分后可能包含空字符串。早期的SPF实现禁止域名尾随点，但本规范允许域名尾随点，域名所有者不应发布尾随点，但实现必须支持。宏可以指定用其他字符作为分隔符。

“r”变换器表示反转操作：例如，客户端IP为192.0.2.1时，宏%{i}展开为“192.0.2.1”，宏%{ir}则展开为“1.2.0.192”。

DIGIT变换器表示在反转后使用的右侧部分数目。若指定了DIGIT，值必须非零。若未指定或超出可用部分数，则使用全部部分。例如，若DIGIT为5，但只有3个部分，则宏解释器会将其视为3。实现必须支持至少128个标签的最大值。

“s”宏展开为<发件人>，即包含“本地部分@域名”的完整地址。 “l”宏仅为本地部分，“o”宏仅为域名。注意在递归或链式评估（如“include”或“redirect”）中，这些值保持不变。若原始<发件人>无本地部分，则在初始处理时会设为“postmaster”（见第4.3节）。

IPv4地址的“i”和“c”宏都以点分十进制格式展开。

IPv6地址的“i”宏展开为点格式地址，适用于%{ir}。 “c”宏可展开为RFC 3513第2.2节定义的十六进制冒号格式地址，便于人类阅读。

“p”宏展开为<IP>验证通过的域名。验证过程详见第5.5节。若<域名>在验证域名列表中，应优先使用；若子域名在列表中，也应使用；否则可用列表中的任何域名。若无验证域名或DNS出错，则用“unknown”。

“r”宏展开为接收MTA的域名，应为完全限定域名（FQDN），但若不存在（如由MUA进行检查）或政策限制，则用“unknown”。域名可能不同于客户端MTA用以定位接收MTA的MX记录中的域名。

“t”宏展开为自1970年1月1日UTC午夜起的秒数（Unix时间戳），与POSIX标准库中的time()函数返回值相同。

宏展开后用于域名查询时，如果结果超过253字符（域名最大长度），则从左侧截断，逐个删除域标签，直到长度不超过253字符。

大写宏与小写宏展开结果相同，展开后会进行URL转义。未在[RFC3986]定义的“uric”字符需进行转义。

注意：应确保合法的电子邮件宏展开不超过DNS标签的63字符限制。尤其是本地部分，可能超过63字符。

域名应避免在机制指令中使用“s”、“l”、“o”或“h”宏。虽然这些宏功能强大，可发布每用户记录，但会限制实现缓存check_host()结果的能力，降低DNS缓存的效率。

实现者应注意：如果在check_host()的评估中未使用包含“s”、“l”、“o”或“h”宏的指令，则可以基于<域名>和<IP>的组合，将结果缓存，直到所有相关DNS记录的最短TTL到期。

8.2. 展开示例

- <发件人>为strong-bad@email.example.com
- IPv4 SMTP客户端IP为192.0.2.3
- IPv6 SMTP客户端IP为2001:DB8::CB01
- 客户端IP的PTR域名为mx.example.org

宏与展开示例：
```
%{s}  →  strong-bad@email.example.com
%{o}  →  email.example.com
%{d}  →  email.example.com
%{d4} →  email.example.com
%{d3} →  email.example.com
%{d2} →  example.com
%{d1} →  com
%{dr} →  com.example.email
%{d2r} →  example.email
%{l}  →  strong-bad
%{l-} →  strong.bad
%{lr} →  strong-bad
%{lr-} →  bad.strong
%{l1r-} →  strong

宏字符串示例：
%{ir}.%{v}._spf.%{d2}  →  3.2.0.192.in-addr._spf.example.com
%{lr-}.lp._spf.%{d2}  →  反转后：bad.strong.lp._spf.example.com
%{lr-}.lp.%{ir}.%{v}._spf.%{d2}  →  bad.strong.lp.3.2.0.192.in-addr._spf.example.com
%{ir}.%{v}.%{l1r-}.lp._spf.%{d2}  →  3.2.0.192.in-addr.strong.lp._spf.example.com
%{d2}.trusted-domains.example.net  →  example.com.trusted-domains.example.net

IPv6示例：
%{ir}.%{v}._spf.%{d2}  →  1.0.B.C.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.B.D.0.1.0.0.2.ip6._spf.example.com
```

（以下内容为RFC 4408的后续章节，涉及该规范的影响、实体的责任等，详细内容略）

1. 转发服务可以通过将“MAIL FROM”重写为其自己的域名来解决这个问题。这意味着从外部邮箱反弹的邮件将必须由转发服务重新反弹。不过，针对这一操作存在多种方案，虽然它们在复杂性和资源需求方面差异很大。

2. 一些流行的邮件传输代理（MTA）可以通过配置额外的别名，将“别名”语义强制转换为“邮件列表”语义，方法是在原始别名前加上“owner-”。例如，一个别名为“friends: george@example.com, fred@example.org”的邮箱，需要另一个形式为“owner-friends: localowner”的别名。

---

Wong & Schlitt 试验性稿件 [第33页]

RFC 4408 发送方策略框架（SPF） 2006年4月

3. 当电子邮件到达终点时。

   1. 如果外部邮箱的所有者希望信任转发服务，可以指示其外部邮箱的MTA在客户端主机属于转发服务时跳过SPF测试。

   2. 可以使用其他身份（如“HELO”身份）进行测试，以覆盖对“MAIL FROM”身份的失败测试。

   3. 对于较大的域名，可能无法拥有所有由域名邮箱所有者使用的转发服务的完整或准确列表。在这种情况下，可以采用被广泛认可的转发服务白名单。

9.4. 邮件服务

提供第三方域名邮件服务（如批量邮件发送）的服务提供商，可能需要根据本文描述的授权检查调整其设置。如果此类电子邮件的“MAIL FROM”身份使用服务提供商的域名，则提供商只需确保其发信主机在其SPF记录（如果有的话）中被授权。

如果“MAIL FROM”身份未使用邮件服务提供商的域名，则必须格外小心。SPF记录格式提供了多种选项，允许第三方域名授权服务提供商的MTA代表其发送邮件。对于像ISP这样拥有多种客户且使用同一MTA的邮件服务提供商，应采取措施防止跨客户伪造（参见第10.4节）。

9.5. MTA中继

授权检查通常排除在发件人和收件人之间使用任意MTA中继的情况。

在组织内部，可以有效部署MTA中继。然而，就本文而言，这些中继实际上是透明的。SPF授权检查是在不同域名的边界MTA之间进行的。

对于发件人，这意味着已发布的SPF记录必须授权任何实际在互联网上发送邮件的MTA。通常，这些只是边界MTA，因为内部MTA只是将邮件转发到这些边界MTA进行投递。

邮件接收方通常希望在边界MTA（包括所有次级MX）进行授权检查。这允许在SMTP会话期间拒绝未通过验证的邮件，而不是退回。内部MTA则不进行授权测试。若要在边界之外进行授权测试，必须确定首次将邮件转发到组织的主机，但这可能难以从邮件头中提取。建议不要在边界之外进行此类测试。

10. 安全考虑

10.1. 处理限制

与大多数电子邮件相关的方面一样，恶意方可能利用协议进行拒绝服务（DoS）攻击。这里列出的处理限制旨在防止以下攻击：

- 恶意方可以创建包含大量引用受害者域名的SPF记录，并向不同的SPF客户端发送大量邮件；这些客户端随后可能引发DoS攻击。实际上，SPF客户端被用来放大攻击者的带宽，通过在SMTP会话中传输的字节数少于DNS查询的字节数。使用SPF客户端还可以隐藏攻击的真实源头。

- 虽然check_host()的实现应限制DNS查询次数，但恶意域名可能发布超出这些限制的记录，试图在发邮件时浪费目标的计算资源。恶意域名还可能设计SPF记录，使某些实现使用过多的内存或CPU，或触发漏洞。

- 恶意方可能向多个合法邮件主机发送大量声称来自目标的邮件。这些合法主机在获取相关记录时会对目标造成DNS负载。

在这些中，引用第三方的SPF记录最容易被用作有效的DoS攻击。因此，限制应非常严格，即使对单个邮件服务器来说看似合理的限制，也可能允许带宽的巨大放大。因此，处理限制必须非常低。

SPF实现必须限制每次SPF检查中DNS查询的机制和修饰符的数量最多为10个，包括由“include”机制或“redirect”修饰符引起的查询。如果超过此限制，必须返回PermError。包括“include”、“a”、“mx”、“ptr”、“exists”机制以及“redirect”修饰符都计入此限制。“all”、“ip4”、“ip6”机制不需要DNS查询，因此不计入限制。“exp”修饰符不计入限制，因为获取解释字符串的DNS查询在评估SPF记录后进行。

在评估“mx”、“ptr”机制或“%{p}”宏时，必须限制最多查找和检查10个MX或PTR资源记录。

SPF实现应限制从DNS查询中获取的总数据量。例如，当支持TCP或EDNS0时，可能需要明确限制接受的数据量，以防止过度带宽或内存使用及DoS攻击。

MTA或其他处理器也可以限制评估check_host()的最大耗时。此限制应至少允许20秒。如果超出此时间，应返回“TempError”。

发布记录的域名应尽量减少“include”机制和链式“redirect”修饰符的数量，也应尽量减少评估记录所需的其他DNS信息。这可以通过选择需要较少DNS信息的指令，并将成本较低的机制放在SPF记录的前面来实现。

例如，假设域名设置如下：

example.com.      IN MX   10 mx.example.com.  
mx.example.com.   IN A    192.0.2.1  
a.example.com.    IN TXT  "v=spf1 mx:example.com -all"  
b.example.com.    IN TXT  "v=spf1 a:mx.example.com -all"  
c.example.com.    IN TXT  "v=spf1 ip4:192.0.2.1 -all"

对“a.example.com”进行check_host()评估时，需要查询“example.com”的MX记录，然后查询列出的主机的A记录。对“b.example.com”只需查询A记录。对“c.example.com”则无需查询。

但也存在管理上的考虑：使用“a”机制比“ip4”机制更便于主机重新编号。使用“mx”机制比“a”机制更方便更改邮件主机的集合。

10.2. SPF授权的电子邮件可能包含其他虚假身份

“MAIL FROM”和“HELO”身份的授权不应被理解为提供比实际更高的保证。恶意发件人完全可以在SPF使用的身份中注入自己的域名，授权其发信主机，但邮件头中仍可能列出其他身份。除非用户或邮件用户代理（MUA）注意到已授权身份与其他常见的身份（如From字段）不符，否则用户可能会产生虚假的安全感。

10.3. 伪造的DNS和IP数据

此协议有两个方面可能被恶意方利用以破坏check_host()的有效性：

- check_host()的评估严重依赖DNS。恶意攻击者可以攻击DNS基础设施，使check_host()看到伪造的DNS数据，从而返回错误结果。这可能包括对某个IP值返回“Pass”，而实际域名记录应为“Fail”。详见[RFC3833]关于DNS弱点的描述。

- 客户端IP地址<ip>假定为正确。恶意攻击者可以伪造TCP序列号，使邮件看似来自其假冒的域名中的允许主机。

10.4. 跨用户伪造

根据定义，SPF策略仅将域名映射到授权的MTA集合，而不是将整个电子邮件地址映射到授权用户集合。虽然“l”宏（第8节）提供了定义特定电子邮件地址对应的授权MTA的有限方式，但通常无法通过SPF验证同一MTA上不同用户使用的具体电子邮件地址。

由邮件服务和其MTA直接防止跨用户伪造：基于SMTP AUTH（[RFC2554]），应限制用户仅使用其实际控制的电子邮件地址（参见[RFC4409]第6.1节）。另一种验证用户身份的方法是使用消息加密技术，如PGP（[RFC2440]）或S/MIME（[RFC3851]]）。

10.5. 不可信信息源

SPF使用第三方提供的信息，如“HELO”域名、“MAIL FROM”地址和SPF记录。这些信息随后在Received-SPF:追踪字段中传递给接收方，可能还会以SMTP拒绝消息的形式返回给客户端MTA。这些信息必须经过验证，确保没有无效字符或过长行。

当授权检查失败时，可以在拒绝响应中包含解释字符串。发件人和拒绝的接收方都应意识到，解释字符串由被检查的SPF记录发布者决定，通常不是接收方。解释中可能包含恶意URL，或具有攻击性或误导性。

这可能不如最初想象的那么严重，因为此类消息会返回给发件人，解释字符串来自发件人声明的身份域的SPF记录。只要拒绝通知（DSN）没有被重定向到除实际发件人之外的人，只有声称来自发布了此类字符串的域的消息的用户会看到恶意的解释字符串。在实际操作中，DSN可能被误导，例如：MTA接受邮件后生成伪造地址的DSN，或转发中未将DSN返回给原始发件人。

10.6. 隐私泄露

检查SPF记录会导致DNS查询发向域名所有者。这些DNS查询，尤其是由“exists”机制引起的，可能包含有关发件人信息以及邮件可能被发送到的MTA的信息。这可能引发隐私问题，具体程度取决于当地法律以及域名所有者与发件人之间的关系。

这份设计在很大程度上借鉴了Hadmut Danisch的[RMX]和Gordon Fecyk的[DMP]。使用DNS记录来验证电子邮件地址合法性的想法，其祖先可以追溯到Paul Vixie在namedroppers邮件列表上的讨论，后来由Jim Miller提出建议，随后由David Green[Green]进一步发展。

Philip Gladstone为规范引入了宏（macros）的概念，极大地增强了语言的表达能力，并使得按用户和IP进行查找成为可能。

作者还要感谢数百名参与此设计开发的个人，他们人数众多，难以一一列举，但包括以下几类：

- spf-discuss邮件列表的成员
- SPAM-L邮件列表的成员
- IRTF ASRG邮件列表的成员
- IETF MARID邮件列表的成员
- #perl聊天室的成员

12. IANA注意事项

12.1 SPF DNS记录类型

IANA已为SPF资源记录（RR）类型分配了一个新的类型码，编号为99，来自DNS参数注册表。

12.2 Received-SPF邮件头字段

根据[RFC3864]，在IANA永久消息头字段注册表中添加了“Received-SPF:”头字段。以下为注册模板：

- 头字段名：Received-SPF
- 适用协议：邮件（[RFC2822]）
- 状态：实验性
- 作者/变更控制者：IETF
- 规范文档：RFC 4408
- 相关信息：建议请求SPF理事会对该字段的任何变更和新增进行审查。关于SPF理事会的更多信息，请访问 http://www.openspf.org/Council

13. 参考文献

13.1 规范性参考文献

- [RFC1035] Mockapetris, P.，"域名——实现与规范"，STD 13，RFC 1035，1987年11月。
- [RFC1123] Braden, R.，"互联网主机的需求——应用与支持"，STD 3，RFC 1123，1989年10月。
- [RFC2119] Bradner, S.，"RFC中用以指示需求级别的关键词"，BCP 14，RFC 2119，1997年3月。
- [RFC2821] Klensin, J.，"简单邮件传输协议"，RFC 2821，2001年4月。
- [RFC2822] Resnick, P.，"互联网消息格式"，RFC 2822，2001年4月。
- [RFC3464] Moore, K. 和 G. Vaudreuil，"可扩展的投递状态通知消息格式"，RFC 3464，2003年1月。
- [RFC3513] Hinden, R. 和 S. Deering，"互联网协议第6版（IPv6）地址架构"，RFC 3513，2003年4月。
- [RFC3864] Klyne, G.，Nottingham, M. 和 J. Mogul，"消息头字段注册程序"，BCP 90，RFC 3864，2004年9月。
- [RFC3986] Berners-Lee, T.，Fielding, R. 和 L. Masinter，"统一资源标识符（URI）：通用语法"，STD 66，RFC 3986，2005年1月。
- [RFC4234] Crocker, D. 和 P. Overell，"语法规范的增强BNF（ABNF）"，RFC 4234，2005年10月。
- [US-ASCII] 美国国家标准协会（原美国标准协会），"美国信息交换代码，X3.4"，1968年。

（注：ANSI X3.4-1968已被新版略有修改的版本取代，但1968年的版本仍为互联网的权威标准。）

13.2 非规范性参考文献

- [RFC1034] Mockapetris, P.，"域名——概念与设施"，STD 13，RFC 1034，1987年11月。
- [RFC1983] Malkin, G.，"互联网用户术语表"，RFC 1983，1996年8月。
- [RFC2440] Callas, J. 等，"OpenPGP消息格式"，RFC 2440，1998年11月。
- [RFC2554] Myers, J.，"SMTP服务扩展——认证"，RFC 2554，1999年3月。
- [RFC3696] Klensin, J.，"检查和转换名称的应用技术"，RFC 3696，2004年2月。
- [RFC3833] Atkins, D. 和 R. Austein，"域名系统（DNS）威胁分析"，RFC 3833，2004年8月。
- [RFC3851] Ramsdell, B.，"安全/多用途互联网邮件扩展（S/MIME）第3.1版消息规范"，RFC 3851，2004年7月。
- [RFC4409] Gellens, R. 和 J. Klensin，"邮件提交协议"，RFC 4409，2006年4月。
- [RMX] Danish, H.，"轻量级发件人验证的RMX DNS RR类型"，工作进行中
- [DMP] Fecyk, G.，"指定邮件服务器协议"，工作进行中
- [Vixie] Vixie, P.，"否认MAIL FROM"，2002年
- [Green] Green, D.，"域授权SMTP邮件"，2002年

（以下为附录内容，详细介绍ABNF语法和示例。）

附录A. 收集的ABNF

本节为规范性内容，任何与前文ABNF片段的差异应以本规范为准。

参考[RFC4234]的ABNF符号。请注意，根据此ABNF定义，字面文本字符串（引号中的内容）不区分大小写。例如，“mx”可以匹配“mx”、“MX”、“mX”或“Mx”。

（详细定义了SPF记录的ABNF语法规则。）

附录B. 扩展示例

这些示例基于以下DNS设置：

- 一个域名有两个邮件服务器、两个主机和两个域名服务器
- 相关域名
- 反向IP地址对应的域名
- 一个伪造的反向IP域名，声称自己是某个不存在的域名

（包括各种简单示例、多域示例、DNSBL风格示例和多重要求示例。）

作者联系方式

- 王梦（Meng Weng Wong），新加坡，邮箱：mengwong+spf@pobox.com
- Wayne Schlitt，地址：4615 Meredeth #9，林肯内布拉斯加州，邮编：68506，美国，邮箱：wayne@schlitt.net，网址：http://www.schlitt.net/spf/

版权声明

本文件版权归互联网协会（2006）所有。除非在BCP 78中另有规定，作者保留所有权利。本文件及其中信息按“现状”提供，不对其适用性或不侵权作任何保证，包括但不限于关于使用本文件信息不会侵犯任何权利或适销性、适用性的默示保证。

知识产权

IETF对与本文件所描述技术的实现或使用相关的任何知识产权或其他权利的有效性或范围不持任何立场，也不对在这些权利下可能存在的任何许可是否可用作出声明；也不表示其已进行任何独立努力以识别此类权利。关于RFC文件中权利相关程序的信息，可以在BCP 78和BCP 79中找到。

向IETF秘书处提交的任何知识产权披露、承诺提供的许可保证，或为实现或使用本规范而尝试获得的通用许可或权限的结果，可以在IETF的在线知识产权库（http://www.ietf.org/ipr）中查阅。

IETF欢迎任何相关方就可能涉及实现本标准所需技术的版权、专利或专利申请或其他专有权利提出意见。请将相关信息发送至IETF的电子邮箱：ietf-ipr@ietf.org。

致谢

RFC编辑工作由IETF行政支持活动（IASA）提供资金支持。
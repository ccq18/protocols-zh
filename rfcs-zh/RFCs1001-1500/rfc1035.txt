# RFC 1035 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs1001-1500/rfc1035.txt

网络工作组                                     P. Mockapetris
意见请求编号：1035                                              ISI
                                                          1987年11月
废止：RFC 882、883、973

            域名——实现与规范

1. 本备忘录的状态

本RFC描述了域名系统及其协议的详细内容，假设读者已熟悉配套RFC“域名——概念与功能” [RFC-1034]中讨论的相关概念。

域名系统是由多种功能和数据类型组成的混合体，其中包括官方协议和仍在试验阶段的功能与数据类型。由于域名系统具有有意的可扩展性，因此在超出官方协议的部分，始终应预期出现新的数据类型和试验性行为。官方协议部分包括标准查询、响应以及互联网类别的资源记录（RR）数据格式（例如主机地址）。自上一版RFC发布以来，若干定义已发生变化，因此一些早期定义已变得过时。

试验性或过时的特性在这些RFC中已明确标注，使用时应谨慎。

特别提醒读者不要依赖示例中出现的数值为当前或完整的内容，因为这些示例主要具有教学目的。本备忘录的分发不受限制。

目录

  1. 本备忘录的状态                                              1
  2. 引言                                                        3
      2.1. 概述                                                  3
      2.2. 常见配置                                              4
      2.3. 约定                                                  7
          2.3.1. 首选名称语法                                        7
          2.3.2. 数据传输顺序                                        8
          2.3.3. 字符大小写                                            9
          2.3.4. 大小限制                                              10
  3. 域名空间与资源记录定义                                        10
      3.1. 名称空间定义                                              10
      3.2. 资源记录定义                                              11
          3.2.1. 格式                                                  11
          3.2.2. 类型值                                                12
          3.2.3. 查询类型（QTYPE）值                                    12
          3.2.4. 类别（CLASS）值                                         13

Mockapetris                                                    [第1页]

RFC 1035        域名实现与规范    1987年11月

3.2.5. QCLASS 值                                       13
3.3. 标准资源记录（RR）                                    13
    3.3.1. CNAME RDATA 格式                                   14
    3.3.2. HINFO RDATA 格式                                   14
    3.3.3. MB RDATA 格式（实验性）                              14
    3.3.4. MD RDATA 格式（已废弃）                              15
    3.3.5. MF RDATA 格式（已废弃）                              15
    3.3.6. MG RDATA 格式（实验性）                              16
    3.3.7. MINFO RDATA 格式（实验性）                            16
    3.3.8. MR RDATA 格式（实验性）                               17
    3.3.9. MX RDATA 格式                                      17
    3.3.10. NULL RDATA 格式（实验性）                            17
    3.3.11. NS RDATA 格式                                    18
    3.3.12. PTR RDATA 格式                                   18
    3.3.13. SOA RDATA 格式                                   19
    3.3.14. TXT RDATA 格式                                   20
3.4. ARPA互联网特定资源记录（RR）                            20
    3.4.1. A RDATA 格式                                      20
    3.4.2. WKS RDATA 格式                                    21
3.5. IN-ADDR.ARPA 域                                         22
3.6. 定义新类型、类别和特殊命名空间                          24
4. 消息                                                      25
    4.1. 格式                                                  25
        4.1.1. 头部部分格式                                    26
        4.1.2. 问题部分格式                                    28
        4.1.3. 资源记录格式                                      29
        4.1.4. 消息压缩                                          30
    4.2. 传输                                                  32
        4.2.1. UDP的使用                                         32
        4.2.2. TCP的使用                                         32
5. 主文件                                                    33
    5.1. 格式                                                  33
    5.2. 使用主文件定义区域                                    35
    5.3. 主文件示例                                              36
6. 名称服务器实现                                              37
    6.1. 架构                                                  37
        6.1.1. 控制                                                37
        6.1.2. 数据库                                              37
        6.1.3. 时间                                                39
    6.2. 标准查询处理                                              39
    6.3. 区域刷新与重载处理                                        39
    6.4. 逆向查询（可选）

40
6.4.1. 逆查询和响应的内容 40
6.4.2. 逆查询和响应示例 41
6.4.3. 逆查询处理 42

莫卡佩特里斯                                                     [第2页]


RFC 1035        域名实现与规范                     1987年11月


6.5. 完成查询与响应                                              42
7. 解析器实现                                                    43
   7.1. 将用户请求转换为查询                                      43
   7.2. 发送查询                                                  44
   7.3. 处理响应                                                  46
   7.4. 使用缓存                                                  47
8. 邮件支持                                                      47
   8.1. 邮件交换绑定                                              48
   8.2. 邮箱绑定（实验性）                                          48
9. 参考文献与书目                                                50
索引                                                            54

2. 引言

2.1. 概述

域名的目标是提供一种命名资源的机制，使得这些名称可以在不同的主机、网络、协议族、互联网以及管理组织中使用。

从用户的角度来看，域名作为传递给本地代理（称为解析器）的参数非常有用，解析器会检索与域名相关的信息。因此，用户可能会请求某个特定域名对应的主机地址或邮件信息。为了让用户能够请求特定类型的信息，相关的查询类型会与域名一同传递给解析器。对用户而言，域名树是一个单一的信息空间；解析器负责隐藏数据在各个域名服务器之间的分布情况。

从解析器的角度来看，构成域空间的数据库分布在不同的域名服务器中。域空间的不同部分存储在不同的域名服务器中，尽管某些数据项会在两个或更多的域名服务器中冗余存储。解析器一开始至少知道一个域名服务器。当解析器处理用户查询时，它会向已知的域名服务器请求信息；作为回应，解析器要么获得所需信息，要么得到指向其他域名服务器的推荐。通过这些推荐，解析器可以了解其他域名服务器的身份和内容。解析器负责处理域空间的分布问题，并通过咨询其他冗余数据库的服务器来应对域名服务器故障的影响。

域名服务器管理两类数据。第一类数据存储在被称为区域（zones）的集合中；每个区域是某个“裁剪”子树的完整数据库。这些数据被称为权威数据。域名服务器会定期检查其区域是否最新，如果不是，则获取更新的区域副本。

RFC 1035  域名实现与规范  1987年11月

数据可以来自存储在本地或其他名称服务器上的主文件。第二类数据是由本地解析器缓存获得的缓存数据。这些数据可能不完整，但在多次访问非本地数据时可以提高检索效率。缓存数据最终会通过超时机制被丢弃。

这种功能结构将用户界面、故障恢复和分布式问题隔离在解析器中，同时将数据库更新和刷新问题隔离在名称服务器中。

2.2 常见配置

一台主机可以通过多种方式参与域名系统，具体取决于该主机是否运行从域系统中检索信息的程序、回答其他主机查询的名称服务器，或两者的组合。最简单、也许最典型的配置如下所示：

                 本地主机                        |  外部
                                                   |
    +---------+               +----------+         |  +--------+
    |         | 用户查询      |          | 查询    |  |        |
    |  用户   |-------------->|          |-------->|->|外部名称|
    | 程序    |               |  解析器  |         |  |  服务器|
    |         |<--------------|          |<--------|--|        |
    |         | 用户响应      |          | 响应    |  |        |
    +---------+               +----------+         |  +--------+
                                |     A            |
                缓存添加        |     | 引用        |
                                V     |            |
                              +----------+         |
                              |  缓存    |         |
                              +----------+         |

用户程序通过解析器与域名空间交互；用户查询和响应的格式依赖于主机及其操作系统。用户查询通常是操作系统调用，解析器及其缓存将成为主机操作系统的一部分。能力较弱的主机可能会选择将解析器作为子程序实现，链接到每个需要其服务的程序中。解析器通过向外部名称服务器发起查询以及利用本地缓存来回答用户查询。

请注意，解析器可能需要向多个不同的外部名称服务器发起多次查询，以回答某个特定的用户查询，因此，用户查询的解析可能涉及多次网络访问，耗时不定。对外部名称服务器的查询及其对应的响应具有标准格式，详见本文档，并可能是数据报。

根据其功能，域名服务器可以是运行在专用机器上的独立程序，也可以是在大型时间共享主机上的一个或多个进程。一个简单的配置可能如下所示：

                 本地主机                        |  外部
                                                   |
      +---------+                                  |
     /         /|                                  |
    +---------+ |             +----------+         |  +--------+
    |         | |             |          |响应消息|  |        |
    |         | |             |  域名    |---------|->|外部解析|
    |  主服务器 |-------------->|  服务器  |         |  |  器   |
    |  文件     | |             |          |<--------|--|        |
    |         |/              |          | 查询    |  +--------+
    +---------+               +----------+         |

在这种配置中，主域名服务器通过读取其本地文件系统中的主文件，获取一个或多个区域（zone）信息，并对来自外部解析器的关于这些区域的查询作出响应。

DNS要求所有区域都必须由多个域名服务器冗余支持。指定的辅助服务器可以通过DNS的区域传输协议，从主服务器获取区域信息并检查更新。此配置如下所示：

                 本地主机                        |  外部
                                                   |
      +---------+                                  |
     /         /|                                  |
    +---------+ |             +----------+         |  +--------+
    |         | |             |          |响应消息|  |        |
    |         | |             |  域名    |---------|->|外部解析|
    |  主服务器 |-------------->|  服务器  |         |  |  器   |
    |  文件     | |             |          |<--------|--|        |
    |         |/              |          | 查询    |  +--------+
    +---------+               +----------+         |
                                A     |维护     |  +--------+
                                |     +------------|->|        |
                                |      查询       |  |外部域名|
                                |                  |  |  服务器 |
                                +------------------|--|        |
                             维护响应消息

在此配置中，域名服务器会定期与外部域名服务器建立虚拟电路，以获取某个区域的副本或检查现有副本是否发生变化。用于这些维护活动的消息与普通查询和响应的格式相同，但消息序列略有不同。

支持域名系统所有方面的主机中的信息流如下所示：

本地主机                        |  外部
                                   |
    +---------+               +----------+         |  +--------+
    |         | 用户查询      |          | 查询   |  |        |
    |  用户   |-------------->|          |-------->|->| 外部   |
    |  程序   |               |  解析器  |         |  |  名称  |
    |         |<--------------|          |<--------|--|  服务器|
    |         | 用户响应      |          | 响应   |  |        |
    +---------+               +----------+         |  +--------+
                                |     A            |
                缓存添加        |     | 引用         |
                                V     |            |
                              +----------+         |
                              |  共享    |         |
                              | 数据库    |         |
                              +----------+         |
                                A     |            |
      +---------+     刷新   |     | 引用         |
     /         /|             |     V            |
    +---------+ |             +----------+         |  +--------+
    |         | |             |          | 响应   |  |        |
    |         | |             |  名称    |-------->|  外部  |
    |  主控   |-------------->|  服务器  |         |  解析器|
    |  文件   | |             |          |<--------|--|        |
    |         |/              |          | 查询   |  +--------+
    +---------+               +----------+         |
                                A     |  维护     |  +--------+
                                |     +------------|->|        |
                                |      查询       |  |  外部  |
                                |                 |  |  名称  |
                                +-----------------|--|  服务器|
                             维护响应            |  +--------+

共享数据库存放本地名称服务器和解析器的域空间数据。共享数据库的内容通常是由名称服务器定期刷新操作维护的权威数据与之前解析请求缓存数据的混合体。域数据的结构以及名称服务器与解析器之间同步的必要性，决定了该数据库的基本特性，但具体格式由本地实现者决定。

Mockapetris                                                     [第6页]

RFC 1035        域名实现与规范    1987年11月

信息流也可以根据需要进行定制，使一组主机协同工作以优化活动。有时这样做是为了减轻能力较弱的主机的负担，让它们无需实现完整的解析器。这对于希望最小化新网络代码的个人电脑或主机来说是合适的。这种方案还可以让一组主机共享少量的缓存，而不是维护大量的单独缓存，前提是集中式缓存的命中率会更高。在任何情况下，解析器都被替换为存根解析器，它们作为前端，连接到位于一个或多个名称服务器中的递归服务器，这些服务器被认为能提供该服务：

                   本地主机                     |  外部
                                                   |
    +---------+                                    |
    |         | 响应                               |
    | 存根    |<--------------------+               |
    | 解析器  |                     |               |
    |         |----------------+    |               |
    +---------+ 递归查询        |    |               |
                |                |    |               |
                V                |    |               |
    +---------+ 递归服务器      +----------+      |  +--------+
    |         | 查询            |          | 查询 |  |        |
    | 存根    |--------------->| 递归服务器 |------->| 外部名称 |
    | 解析器  |                |          |<-------|  服务器  |
    |         |<--------------|          | 响应  |  |        |
    +---------+  响应          +----------+      |  +--------+
                              |  中央缓存  |      
                              +----------+      
                              |  中央缓存  |      
                              +----------+      

无论采用哪种方式，都应注意，域名组件在可能的情况下总是会被复制以确保可靠性。

2.3. 约定

域名系统有若干关于底层但基本问题的约定。虽然实现者可以在自己的系统中违反这些约定，但在观察到的所有其他主机的行为中，必须遵守这些约定。

2.3.1. 首选名称语法

DNS规范在构建域名的规则上尽可能保持通用。其思想是，任何现有对象的名称都可以用最少的修改表达为域名。

Mockapetris                                                     [第7页]

RFC 1035        域名实现与规范    1987年11月

然而，在为某个对象分配域名时，谨慎的用户会选择一个既符合域名系统规则，又符合该对象的任何现有规则（无论这些规则是公开的还是由现有程序暗示的）名称。

例如，在命名邮件域时，用户应同时满足本备忘录的规则和RFC-822中的规则。在创建新的主机名时，应遵循旧的HOSTS.TXT规则。这可以避免在将旧软件转换为使用域名时出现的问题。

以下语法将减少许多使用域名（例如，邮件、TELNET）时出现的问题：

<domain> ::= <subdomain> | " "

<subdomain> ::= <label> | <subdomain> "." <label>

<label> ::= <letter> [ [ <ldh-str> ] <let-dig> ]

<ldh-str> ::= <let-dig-hyp> | <let-dig-hyp> <ldh-str>

<let-dig-hyp> ::= <let-dig> | "-"

<let-dig> ::= <letter> | <digit>

<letter> ::= 任何一个字母字符，包含大写字母A-Z和小写字母a-z

<digit> ::= 任何一个数字0-9

注意，域名中允许使用大小写字母，但大小写不具有区别。也就是说，拼写相同但大小写不同的两个名字应被视为相同。

标签必须遵循ARPANET主机名的规则。它们必须以字母开头，以字母或数字结尾，且内部字符只能是字母、数字和连字符。此外，标签长度也有限制，不能超过63个字符。

例如，以下字符串标识互联网中的主机：

A.ISI.EDU XX.LCS.MIT.EDU SRI-NIC.ARPA

2.3.2. 数据传输顺序

本文档中描述的头部和数据的传输顺序以字节（octet）为单位进行解析。每当图示显示一组字节时，这些字节的传输顺序即为它们在英语中阅读的正常顺序。例如，在下图中，字节按编号顺序传输。

     0                   1
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |       1       |       2       |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |       3       |       4       |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |       5       |       6       |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

每当一个字节代表一个数值时，图示中最左边的位是高位或最重要的位。也就是说，标记为0的那一位是最高有效位。例如，下图表示的值为170（十进制）：

     0 1 2 3 4 5 6 7
    +-+-+-+-+-+-+-+-+
    |1 0 1 0 1 0 1 0|
    +-+-+-+-+-+-+-+-+

类似地，每当一个多字节字段代表一个数值时，整个字段的最左边的位是最高有效位。当多字节数值被传输时，最重要的字节（最高字节）会先传输。

2.3.3. 字符大小写

关于DNS官方协议部分的所有内容，字符字符串（例如标签、域名等）之间的比较均以不区分大小写的方式进行。目前，这一规则在整个域名系统中得到统一执行，且没有例外。然而，未来在超出当前用法的新增内容中，可能需要利用名称中的完整二进制八位字节能力，因此应避免尝试将域名存储为7位ASCII码或使用特殊字节来终止标签等做法。

当数据进入域名系统时，应尽可能保持其原始的大小写。在某些情况下，这无法实现。例如，如果在数据库中存储两个资源记录（RR），一个在x.y，另一个在X.Y，它们实际上存储在数据库的同一位置，因此只能保留一种大小写。基本规则是，只有在数据用于定义数据库中的结构时，才可以丢弃大小写信息；当以不区分大小写的方式比较两个名称时，它们被视为相同。

必须尽量减少大小写敏感数据的丢失。因此，虽然x.y和X.Y的数据可以存储在同一位置（如x.y或X.Y），但a.x和B.X的数据绝不会存储在A.x、A.X、b.x或b.X中。一般而言，这样做可以保留域名第一个标签的大小写，但会强制标准化内部节点标签。

系统管理员在向域名数据库输入数据时，应注意以大小写一致的方式表示所提供的数据，特别是当其系统对大小写敏感时。域名系统中的数据分发系统将确保保持一致的表示。

2.3.4. 大小限制

DNS中的各种对象和参数都有限制，具体如下。某些限制可以轻松更改，另一些则更为根本。

- 标签：不超过63个八位字节
- 域名：不超过255个八位字节
- TTL（生存时间）：为带符号32位整数的正值
- UDP消息：不超过512个八位字节

3. 域名空间与资源记录（RR）定义

3.1. 名称空间定义

消息中的域名以一系列标签的形式表达。每个标签由一个八位字节的长度字段和随后的相应数量的八位字节组成。由于每个域名都以根的空标签结尾，域名以长度字节值为零的终止符结束。每个长度字节的高两位必须为零，剩余的六位限制标签长度不超过63个八位字节。

为简化实现，域名的总长度（即标签的八位字节和标签长度字段的总和）限制为255个八位字节或更少。

虽然标签（labels）可以包含组成标签的八位字节中的任何值，但强烈建议标签遵循本文档其他部分描述的首选语法，该语法与现有的主机命名惯例兼容。名称服务器和解析器在比较标签时必须采用不区分大小写的方式（即，A=a），假设使用ASCII编码且无奇偶校验。非字母字符的代码必须完全匹配。

Mockapetris                                                    [第10页]

RFC 1035        域名实现与规范    1987年11月

3.2. 资源记录（RR）定义

3.2.1. 格式

所有资源记录（RR）具有相同的顶层格式，如下所示：

                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                                               |
    /                                               /
    /                      名称（NAME）               /
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      类型（TYPE）               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     类（CLASS）                |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TTL（存活时间）            |
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                   RDLENGTH（数据长度）          |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                     RDATA（资源数据）            /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

NAME            表示所有者名称，即与此资源记录相关的节点的名称。

TYPE            两个字节，包含一个资源记录类型代码。

CLASS           两个字节，包含一个资源记录类别代码。

TTL             一个32位有符号整数，指定资源记录可以被缓存的时间间隔，在此时间内应再次查询信息源。零值被解释为该资源记录只能用于当前事务，不应被缓存。例如，SOA记录总是以零TTL分发，以禁止缓存。零值也可用于极易变动的数据。

RDLENGTH        一个无符号的16位整数，指定RDATA字段的长度（以字节为单位）。

RDATA：一种可变长度的八位字节字符串，用于描述资源。该信息的格式根据资源记录的类型（TYPE）和类别（CLASS）而有所不同。

3.2.2. TYPE值

TYPE字段用于资源记录中。注意，这些类型是QTYPE的子集。

| TYPE       | 值   | 含义                         |
|------------|-------|------------------------------|
| A          | 1     | 主机地址                     |
| NS         | 2     | 权威名称服务器               |
| MD         | 3     | 邮件目的地（已废弃 - 使用MX） |
| MF         | 4     | 邮件转发器（已废弃 - 使用MX） |
| CNAME      | 5     | 别名的规范名称               |
| SOA        | 6     | 权威区域的起始标记           |
| MB         | 7     | 邮箱域名（实验性）           |
| MG         | 8     | 邮件组成员（实验性）         |
| MR         | 9     | 邮件重命名域名（实验性）     |
| NULL       | 10    | 空RR（实验性）               |
| WKS        | 11    | 知名服务描述                 |
| PTR        | 12    | 域名指针                     |
| HINFO      | 13    | 主机信息                     |
| MINFO      | 14    | 邮箱或邮件列表信息           |
| MX         | 15    | 邮件交换                     |
| TXT        | 16    | 文本字符串                   |

3.2.3. QTYPE值

QTYPE字段出现在查询的问询部分。QTYPE是TYPE的超集，因此所有TYPE都是有效的QTYPE。此外，还定义了以下QTYPE：

| QTYPE  | 值   | 含义                                              |
|---------|-------|---------------------------------------------------|
| AXFR    | 252   | 请求传输整个区域                                    |
| MAILB   | 253   | 请求邮箱相关记录（MB、MG或MR）                     |
| MAILA   | 254   | 请求邮件代理RR（已废弃 - 参见MX）                  |
| *       | 255   | 请求所有记录                                        |

3.2.4. CLASS值

CLASS字段出现在资源记录中。定义的类别符号和对应值如下：

| CLASS | 值 | 含义                     |
|--------|-----|--------------------------|
| IN     | 1   | 互联网                   |
| CS     | 2   | CSNET类别（已废弃 - 仅用于一些过时RFC中的示例） |
| CH     | 3   | CHAOS类别                |
| HS     | 4   | Hesiod（Dyer 87）        |

3.2.5. QCLASS值

QCLASS字段出现在查询的问询部分。QCLASS值是CLASS值的超集；每个CLASS都是有效的QCLASS。此外，还定义了以下QCLASS：

| QCLASS | 值   | 含义             |
|---------|-------|------------------|
| *       | 255   | 任何类别         |

3.3. 标准RR（资源记录）

以下RR定义预计会在所有类别中出现，至少潜在如此。特别是NS、SOA、CNAME和PTR将在所有类别中使用，并且在所有类别中的格式相同。由于它们的RDATA格式已知，这些RR的RDATA部分中的所有域名都可以被压缩。

<domain-name> 表示为一系列标签的域名，以长度为零的标签结束。<character-string>是一个长度八位字节，后跟该长度的字符。<character-string>被视为二进制信息，长度最多为256个字符（包括长度字节）。

Mockapetris                                                    [第13页]

RFC 1035        域名实现与规范                     1987年11月

3.3.1. CNAME RDATA 格式

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                     CNAME                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

CNAME           一个 <域名>，指定所有者的规范或主要名称。所有者名称是一个别名。

CNAME 资源记录不会引起额外部分的处理，但在某些情况下，名称服务器可能会选择在规范名称处重新开始查询。详情请参见 [RFC-1034] 中关于名称服务器逻辑的描述。

3.3.2. HINFO RDATA 格式

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                      CPU                      /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                       OS                      /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

CPU             一个 <字符字符串>，指定CPU类型。

OS              一个 <字符字符串>，指定操作系统类型。

CPU 和 OS 的标准值可以在 [RFC-1010] 中找到。

HINFO 记录用于获取关于主机的一般信息。主要用途是支持如FTP等协议，在不同机器或操作系统之间通信时可以使用特殊的处理程序。

3.3.3. MB RDATA 格式（实验性）

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                   MADNAME                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

MADNAME         一个 <域名>，指定拥有指定邮箱的主机。

Mockapetris                                                    [第14页]

RFC 1035        域名实现与规范                     1987年11月

MB 记录会引起额外部分的处理，查找对应于 MADNAME 的 A 类型资源记录。

3.3.4. MD RDATA 格式（已废弃）

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                   MADNAME                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

MADNAME         一个 <域名>，指定拥有邮件代理的主机，该主机应能为该域投递邮件。

MD 记录会引起额外部分的处理，查找对应于 MADNAME 的 A 类型记录。

MD 已经废弃。有关新方案的详细信息，请参见 MX 记录和 [RFC-974]。处理主文件中发现的 MD 资源记录的建议策略是拒绝，或将其转换为优先级为0的 MX 资源记录。

3.3.5. MF RDATA 格式（已废弃）

以下是英文内容的中文翻译：

```
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                   MADNAME                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

MADNAME         一个 <域名>，指定一个具有邮件代理的主机，该主机属于该域名，并会接受转发到该域的邮件。

MF 记录会引起额外的部分处理，该处理会查找与 MADNAME 对应的 A 记录。

MF 已经过时。有关新方案的详细信息，请参见 MX 的定义和 [RFC-974]。对于在主文件中发现的 MD 记录，建议的处理策略是拒绝，或者将其转换为优先级为 10 的 MX 记录。







Mockapetris                                                    [第15页]


RFC 1035        域名实现与规范    1987年11月


3.3.6. MG 记录的 RDATA 格式（实验性）

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                   MGMNAME                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

MGMNAME       一个 <域名>，指定一个属于由该域名指定的邮件组的邮箱。

MG 记录不会引起额外的部分处理。

3.3.7. MINFO 记录的 RDATA 格式（实验性）

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                    RMAILBX                    /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                    EMAILBX                    /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

RMAILBX       一个 <域名>，指定一个邮箱，负责管理邮件列表或邮箱。如果该域名指向根域，则 MINFO 记录的所有者对其自身负责。注意，许多现有的邮件列表使用 X 请求的邮箱作为 RMAILBX 字段，例如 Msgroup 请求用于 Msgroup。此字段提供了更通用的机制。

EMAILBX       一个 <域名>，指定一个邮箱，用于接收与由 MINFO 记录所有者管理的邮件列表或邮箱相关的错误信息（类似于已提议的 ERRORS-TO: 字段）。如果该域名指向根域，错误应返回给发件人。

MINFO 记录不会引起额外的部分处理。虽然这些记录可以与简单的邮箱关联，但通常用于邮件列表。








Mockapetris                                                    [第16页]


RFC 1035        域名实现与规范    1987年11月


3.3.8. MR 记录的 RDATA 格式（实验性）
```

以下是英文内容的中文翻译：

```
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                   新名称                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

NEWNAME         一个 <域名>，指定一个邮箱的正确重命名目标。

MR 记录不会引起额外部分的处理。MR 的主要用途是作为用户迁移到不同邮箱后的转发条目。

3.3.9. MX 记录的 RDATA 格式

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                  优先级                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                   交换主机                   /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

PREFERENCE      一个 16 位整数，表示在同一所有者的记录中此记录的优先级。数值越低，优先级越高。

EXCHANGE        一个 <域名>，指定愿意作为该所有者的邮件交换主机。

MX 记录会引起对由 EXCHANGE 指定的主机的类型 A 额外部分的处理。MX 记录的详细使用方法请参见 [RFC-974]。

3.3.10. NULL 记录的 RDATA 格式（实验性）

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                  <任意内容>                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

只要不超过 65535 字节，RDATA 字段中可以包含任何内容。

空（NULL）记录不会引起额外部分的处理。NULL 记录在主文件中不允许使用。它们作为占位符，用于 DNS 的一些实验性扩展。

3.3.11. NS 记录的 RDATA 格式

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                   NSDNAME                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

NSDNAME       一个 <域名>，指定应对指定类和域具有权威性的主机。

NS 记录会引起通常的附加部分处理，以查找类型 A 的记录，并在用作转发时，特别搜索其所在区域以获取粘合信息。

NS 记录表明，所指名的主机应具有从指定类的所有者名称开始的区域。注意，类可能不一定指示用于与主机通信的协议族，尽管它通常是一个重要的提示。例如，用于 Internet（IN）或 Hesiod（HS）类信息的名称服务器，通常使用 IN 类协议进行查询。

3.3.12. PTR 记录的 RDATA 格式
```

以下是英文内容的中文翻译：

```
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                   PTRDNAME                    /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

PTRDNAME        一个 <域名>，指向域名空间中的某个位置。

PTR记录不会引起额外部分的处理。这些资源记录（RR）用于特殊域，指向域空间中的其他位置。这些记录是简单的数据，不意味着任何特殊处理，类似于由 CNAME 执行的别名识别。有关示例，请参见 IN-ADDR.ARPA 域的描述。








Mockapetris                                                    [第18页]


RFC 1035        域名实现与规范    1987年11月


3.3.13. SOA 记录数据格式

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                     MNAME                     /
    /                                                 /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                     RNAME                     /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    SERIAL                       |
    |                                                 |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    REFRESH                      |
    |                                                 |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     RETRY                       |
    |                                                 |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    EXPIRE                       |
    |                                                 |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    MINIMUM                      |
    |                                                 |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

MNAME           指示为该区域提供原始或主要数据源的域名服务器的域名。

RNAME           指定负责该区域的联系人的邮箱地址的域名。

SERIAL          代表该区域原始副本的无符号32位版本号。区域传输会保留此值。该值会循环，应使用序列空间的算术进行比较。

REFRESH         在此时间间隔之前，区域应进行刷新（更新）。

RETRY           在此时间间隔之后，若刷新失败，应重试。

EXPIRE          指定在该时间值之前，区域不再具有权威性的最长时间间隔。







Mockapetris                                                    [第19页]


RFC 1035        域名实现与规范    1987年11月
```

最小值（MINIMUM）——应随任何区域中的资源记录（RR）一起导出的无符号32位TTL字段的最小值。

SOA记录不会引起额外部分的处理。

所有时间单位均为秒。

这些字段中的大部分仅与域名服务器的维护操作相关。然而，MINIMUM字段在所有从区域中检索资源记录的查询操作中都被使用。当在响应中发送资源记录时，TTL字段会被设置为该资源记录的TTL字段与相应SOA记录中的MINIMUM字段的最大值。因此，MINIMUM是区域内所有资源记录TTL字段的下限。请注意，这种对MINIMUM的使用应在资源记录复制到响应中时进行，而不是在从主文件加载区域或通过区域传输时进行。这一规定的原因是为了允许未来的动态更新功能能够在已知语义的情况下更改SOA资源记录。

3.3.14 TXT资源记录（RDATA）格式

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                   TXT-DATA                    /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

TXT-DATA：一个或多个字符字符串。

TXT资源记录用于存放描述性文本。文本的语义取决于其所在的域。

3.4 互联网特定的资源记录（RR）

3.4.1 A资源记录（RDATA）格式

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ADDRESS                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

ADDRESS：一个32位的互联网地址。

具有多个互联网地址的主机将拥有多个A记录。

A记录不会引起额外部分的处理。主文件中A记录的RDATA部分是以四个用点分隔的十进制数字表示的互联网地址（例如，“10.2.0.52”或“192.0.5.6”）。

3.4.2 WKS资源记录（RDATA）格式

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ADDRESS                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |       PROTOCOL        |                       |
    +--+--+--+--+--+--+--+--+                       |
    |                                               |
    /                   <BIT MAP>                   /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

ADDRESS：一个32位的互联网地址。

PROTOCOL：一个8位的IP协议编号。

<BIT MAP>：一个可变长度的位图。位图长度必须是8的倍数。

WKS记录用于描述特定协议在特定互联网地址上支持的知名服务。PROTOCOL字段指定一个IP协议号，位图中每一位对应指定协议的一个端口。第一位对应端口0，第二位对应端口1，依此类推。如果位图中没有包含某个感兴趣协议的位，则默认为零。端口和协议的对应值及助记符在[RFC-1010]中有详细说明。

例如，如果PROTOCOL=TCP（6），第26位对应TCP端口25（SMTP）。如果该位被设置，意味着应有SMTP服务器在TCP端口25上监听；如果为零，则表示在指定地址上不支持SMTP服务。

WKS资源记录的目的是提供TCP和UDP服务器的可用性信息。如果一个服务器同时支持TCP和UDP，或拥有多个互联网地址，则会使用多个WKS记录。

WKS资源记录不会引起额外的区域处理。

在主文件中，端口和协议都可以用助记符或十进制数字表示。

Mockapetris                                                    [第21页]

RFC 1035        域名实现与规范    1987年11月

3.5. IN-ADDR.ARPA域

互联网使用一个特殊的域名来支持网关位置和互联网地址到主机的映射。其他类别的域也可能采用类似策略。该域的目的是提供一种保证的方法，用于主机地址到主机名的映射，并便于查询以定位互联网中特定网络上的所有网关。

请注意，这两项服务类似于逆向查询可以执行的功能；不同之处在于，该域名空间的结构是根据地址构建的，因此可以保证在不进行域空间全面搜索的情况下找到所需数据。

该域从IN-ADDR.ARPA开始，具有遵循互联网地址结构的子结构。

IN-ADDR.ARPA域中的域名被定义为最多包含四个标签，标签在IN-ADDR.ARPA后缀之前。每个标签代表一个互联网地址的八位字节（octet），以字符字符串形式表示0-255范围内的十进制值（除零八位字节外，前导零可省略，零字节用单个零表示）。

主机地址由包含全部四个标签的域名表示。例如，互联网地址10.2.0.52的数据存放在域名52.0.2.10.IN-ADDR.ARPA中。虽然反转的形式阅读起来较为繁琐，但它允许将区域委托出去，区域正好对应一个网络地址空间。例如，10.IN-ADDR.ARPA可以是包含ARPANET数据的区域，而26.IN-ADDR.ARPA可以是另一个用于MILNET的区域。地址节点用于存放指向正常域空间中主机名的指针。

网络编号对应于IN-ADDR.ARPA域中不同深度的某些非终端节点，因为互联网网络编号要么是1个、要么是2个、要么是3个八位字节。网络节点用于存放指向连接到该网络的网关的主要主机名的指针。由于网关本身定义上是在多个网络上，因此通常会有两个或更多的网络节点指向它。网关在其完全限定的地址上也会有主机级别的指针。

网络节点上的网关指针和完整地址节点上的普通主机指针都使用PTR资源记录（RR）指向相应主机的主要域名。

例如，IN-ADDR.ARPA域将包含关于10号网络和26号网络之间的ISI网关、从10号网络到MIT的网关（MIT gateway）以及主机A.ISI.EDU和MULTICS.MIT.EDU的信息。假设ISI网关的地址为10.2.0.22和26.0.0.103，名称为MILNET-GW.ISI.EDU；MIT网关的地址为10.0.0.77和18.10.0.4，名称为GW.LCS.MIT.EDU，域名数据库将包含以下内容：

```
10.IN-ADDR.ARPA.           PTR MILNET-GW.ISI.EDU.
10.IN-ADDR.ARPA.           PTR GW.LCS.MIT.EDU.
18.IN-ADDR.ARPA.           PTR GW.LCS.MIT.EDU.
26.IN-ADDR.ARPA.           PTR MILNET-GW.ISI.EDU.
22.0.2.10.IN-ADDR.ARPA.    PTR MILNET-GW.ISI.EDU.
103.0.0.26.IN-ADDR.ARPA.   PTR MILNET-GW.ISI.EDU.
77.0.0.10.IN-ADDR.ARPA.    PTR GW.LCS.MIT.EDU.
4.0.10.18.IN-ADDR.ARPA.    PTR GW.LCS.MIT.EDU.
103.0.3.26.IN-ADDR.ARPA.   PTR A.ISI.EDU.
6.0.0.10.IN-ADDR.ARPA.     PTR MULTICS.MIT.EDU.
```

因此，一个想要查找10号网络上网关的程序会发起一个查询，类型为PTR，类别为IN，名称为10.IN-ADDR.ARPA。它会收到两个资源记录（RR）作为响应：

```
10.IN-ADDR.ARPA.           PTR MILNET-GW.ISI.EDU.
10.IN-ADDR.ARPA.           PTR GW.LCS.MIT.EDU.
```

程序随后可以发起类型为A、类别为IN的查询，查询MILNET-GW.ISI.EDU和GW.LCS.MIT.EDU，以获取这些网关的互联网地址。

一个解析器（resolver）如果想找到对应互联网主机地址10.0.0.6的主机名，会发起一个类型为PTR、类别为IN、名称为6.0.0.10.IN-ADDR.ARPA的查询，并会得到：

```
6.0.0.10.IN-ADDR.ARPA.     PTR MULTICS.MIT.EDU.
```

使用这些服务时有几点需要注意：
- 由于IN-ADDR.ARPA这个特殊域和某个主机或网关的普通域名可能位于不同的区域（zone）中，因此存在数据不一致的可能性。
- 网关通常在不同域中有两个名称，其中只有一个是主名称。
- 使用域名数据库初始化路由表的系统必须从足够的网关信息开始，以确保它们能够访问到合适的域名服务器。

- 网关数据仅反映网关的存在，其方式等同于当前的HOSTS.TXT文件。它并不取代来自GGP或EGP的动态可用性信息。

Mockapetris                                                    [第23页]

RFC 1035        域名实现与规范    1987年11月

3.6. 定义新类型、类别和特殊命名空间

之前定义的类型和类别是截至本备忘录发布时所使用的。预计会有新的定义。本节对考虑在现有功能基础上添加内容的设计者提出一些建议。用于一般讨论设计问题的邮件列表是NAMEDROPPERS@SRI-NIC.ARPA。

一般而言，当需要在数据库中添加关于某个现有对象的新信息，或需要为一些全新对象定义新的数据格式时，适合定义新类型。设计者应尝试定义适用于所有类别的类型及其RDATA格式，避免信息重复。当DNS用于新协议等场景，且需要新的类别特定数据格式，或希望复制现有命名空间但又需要单独的管理域时，定义新类别是合适的。

新类型和类别需要助记符（mnemonics）用于主文件；主文件的格式要求类型和类别的助记符必须互不冲突。

TYPE和CLASS的值必须是QTYPE和QCLASS的子集。

目前的系统采用多个资源记录（RR）来表示某一类型的多个值，而不是将多个值存储在单个RR的RDATA部分。这对于大多数应用来说效率较低，但可以保持RR的简洁。多RR的假设已被用于一些关于动态更新方法的试验性工作中。

目前的系统试图最大限度地减少数据库中的数据重复，以确保一致性。因此，为了找到邮件交换的主机地址，通常会先将邮件域名映射到主机名，然后再将主机名映射到地址，而不是直接映射到主机地址。这种方法更受青睐，因为它避免了不一致的可能性。

在定义新数据类型时，不应使用多个RR类型来创建条目之间的排序关系或表达等价绑定的不同格式，而应将这些信息包含在RR的主体中，并使用单一类型。这一政策可以避免在缓存多个类型和定义QTYPE以匹配多种类型时出现的问题。

例如，最初的邮件交换绑定形式使用了两种资源记录（RR）类型，一种代表“更紧密”的交换（MD），另一种代表“较少紧密”的交换（MF）。问题在于，缓存中存在某一种RR类型并不能传达关于另一种RR类型的任何信息，因为获取缓存信息的查询可能使用了MF、MD或MAILA（后者匹配两者）作为QTYPE。为此，重新设计的服务采用了单一类型（MX），并在RDATA部分加入“优先级”值，以便对不同的RR进行排序。然而，如果缓存中找到任何MX RR，则应全部存在。

4. 消息

4.1. 格式

域协议中的所有通信都采用一种称为消息的单一格式。消息的顶层格式被划分为五个部分（在某些情况下某些部分为空），如下所示：

    +---------------------+
    |        头部         |
    +---------------------+
    |       问题          | 指向域名服务器的查询
    +---------------------+
    |        回答         | 回答问题的资源记录（RR）
    +---------------------+
    |      权威信息       | 指向权威域名服务器的RR
    +---------------------+
    |      附加信息       | 包含额外信息的RR
    +---------------------+

头部部分始终存在。头部包括字段，用于指示剩余部分中哪些部分存在，以及指示消息是查询还是应答，是标准查询还是其他操作码等。

在头部之后的各个部分的名称源自它们在标准查询中的用途。问题部分包含描述向域名服务器提出的问题的字段。这些字段包括查询类型（QTYPE）、查询类别（QCLASS）和查询域名（QNAME）。后三个部分的格式相同：可能为空的资源记录（RR）列表。回答部分包含回答问题的RR；权威信息部分包含指向权威域名服务器的RR；附加信息部分包含与查询相关但不完全是问题答案的RR。

以下是英文内容的中文翻译：

```
                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      ID                       |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |QR|   操作码  |AA|TC|RD|RA|   Z    |   RCODE   |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    QDCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ANCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    NSCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ARCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

ID              一个由生成任何类型查询的程序分配的16位标识符。此标识符会被复制到相应的应答中，供请求者用来匹配未完成的查询。

QR              一个一位字段，指示此消息是查询（0）还是应答（1）。

OPCODE          一个四位字段，指示此消息中的查询类型。此值由发起查询的端设置，并在应答中复制。其值包括：

                0               标准查询（QUERY）

                1               反向查询（IQUERY）

                2               服务器状态请求（STATUS）

                3-15            保留供将来使用

AA              权威应答 - 这个位在应答中有效，表示应答的域名服务器是该域名的权威服务器。

                注意，答案部分的内容可能有多个所有者名称，因为存在别名。AA位

Mockapetris                                                    [第26页]

RFC 1035        域名实现与规范    1987年11月

                对应于与查询名称匹配的名称，或答案部分中的第一个所有者名称。

TC              截断 - 表示由于消息长度超过传输通道允许的最大长度，消息被截断。

RD              期望递归 - 这个位可以在查询中设置，并会被复制到应答中。如果设置了RD，它会指示域名服务器递归地处理查询。支持递归查询是可选的。

RA              递归可用 - 这个位在应答中被设置或清除，表示域名服务器是否支持递归查询。
```

Z               保留以备将来使用。在所有查询和应答中必须为零。

RCODE           响应码——这是一个4位字段，在应答中设置。其值的含义如下：

0               无错误条件

1               格式错误——域名服务器无法解释该查询。

2               服务器故障——域名服务器由于自身问题无法处理该查询。

3               域名错误——仅对权威域名服务器的应答有效，表示查询中引用的域名不存在。

4               未实现——域名服务器不支持请求的查询类型。

5               拒绝——域名服务器出于策略原因拒绝执行指定操作。例如，域名服务器可能不愿向特定请求者提供信息，或不愿执行某些操作（如区域传送）。

6-15            保留以备将来使用。

QDCOUNT         一个无符号16位整数，表示问题部分中的条目数。

ANCOUNT         一个无符号16位整数，表示应答部分中的资源记录数。

NSCOUNT         一个无符号16位整数，表示权威记录部分中的域名服务器资源记录数。

ARCOUNT         一个无符号16位整数，表示附加记录部分中的资源记录数。

4.1.2. 问题部分格式

问题部分用于携带大多数查询中的“问题”，即定义所询问内容的参数。该部分包含QDCOT（通常为1）个条目，每个条目的格式如下：

以下是英文内容的中文翻译：

```
                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                                               |
    /                     QNAME                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     QTYPE                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     QCLASS                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

QNAME           一个域名，由标签序列表示，每个标签由一个长度字节和相应数量的字节组成。域名以一个长度为零的字节（根标签的空标签）结束。注意，该字段的字节数可能是奇数；不使用填充。

QTYPE           一个两字节的代码，指定查询的类型。此字段的值包括所有有效的TYPE字段代码，以及一些更通用的代码，可以匹配多种RR类型。

QCLASS          一个两字节的代码，指定查询的类别。例如，QCLASS字段为IN表示互联网类别。

4.1.3 资源记录格式

答案、权威和附加部分都采用相同的格式：资源记录的数量由头部对应的计数字段指定。每个资源记录的格式如下：
                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                                               |
    /                                               /
    /                      NAME                     /
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TYPE                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     CLASS                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TTL                      |
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                   RDLENGTH                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--|
    /                     RDATA                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

其中：

NAME            该资源记录所对应的域名。
```

类型（TYPE）为两个字节，包含一个资源记录（RR）类型代码。该字段指定RDATA字段中数据的含义。

类别（CLASS）为两个字节，指定RDATA字段中数据的类别。

存活时间（TTL）为一个32位无符号整数，表示资源记录可以被缓存的时间间隔（以秒为单位），在此时间后应当丢弃。值为零表示该RR只能用于当前事务，不能被缓存。

RDLENGTH为一个无符号的16位整数，指示RDATA字段的长度（以字节为单位）。

RDATA为一个可变长度的字节串，描述资源。其格式根据资源记录的类型（TYPE）和类别（CLASS）而变化。例如，如果TYPE为A，CLASS为IN，则RDATA字段是一个4字节的ARPA互联网地址。

4.1.4. 消息压缩

为了减小消息的大小，域名系统采用了一种压缩方案，消除消息中域名的重复。在此方案中，整个域名或域名末尾的一组标签可以用指针替代，指向之前出现过的相同域名。

指针的形式为两个字节的序列：

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    | 1  1|                OFFSET                   |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

前两个比特为1。这使得指针可以与标签区分开来，因为标签必须以两个零比特开始，标签长度限制为63个字节或更少。（10和01的组合为将来预留使用。）OFFSET字段表示从消息开始（即域名头部中的ID字段的第一个字节）起的偏移量。偏移量为零表示指向ID字段的第一个字节，依此类推。

压缩方案允许在消息中用以下方式表示域名：

- 以零字节结尾的标签序列

- 指针

- 以标签序列结尾的指针

指针只能用于不依赖类别的域名出现位置。如果不是这样，域名服务器或解析器就需要知道所有处理的RR的格式。目前尚未出现此类情况，但未来的RDATA格式中可能会出现。

如果域名包含在受长度字段限制的消息部分（如RR的RDATA部分），并且启用压缩，

使用时，压缩名称的长度用于长度计算，而不是展开后名称的长度。

程序可以自由选择在生成的消息中避免使用指针，尽管这样会减少数据报的容量，并可能导致截断。然而，所有程序都必须能够理解包含指针的到达消息。

例如，一个数据报可能需要使用域名 F.ISI.ARPA、FOO.F.ISI.ARPA、ARPA 和根域名。忽略消息的其他字段，这些域名可以用如下方式表示：

       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    20 |           1           |           F           |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    22 |           3           |           I           |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    24 |           S           |           I           |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    26 |           4           |           A           |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    28 |           R           |           P           |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    30 |           A           |           0           |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    40 |           3           |           F           |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    42 |           O           |           O           |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    44 | 1  1|                20                       |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    64 | 1  1|                26                       |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    92 |           0           |                       |
       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

域名 F.ISI.ARPA 在偏移量 20 处显示。域名 FOO.F.ISI.ARPA 在偏移量 40 处显示；此定义使用指针，将 FOO 的标签连接到之前定义的 F.ISI.ARPA。域名 ARPA 在偏移量 64 处定义，使用指针指向偏移量 20 处的 F.ISI.ARPA 中的 ARPA 部分；注意，这个指针依赖于 ARPA 是偏移量 20 处字符串中的最后一个标签。根域名由偏移量 92 处的一个字节零定义；根域名没有标签。

Mockapetris                                                    [第31页]

RFC 1035        域名实现与规范    1987年11月

（以下内容为标题和页脚信息，不需要翻译）

DNS假设消息将作为数据报或通过虚拟电路携带的字节流进行传输。虽然虚拟电路可以用于任何DNS活动，但由于数据报具有较低的开销和更好的性能，查询通常优先使用数据报。区域刷新活动必须使用虚拟电路，因为需要可靠的传输。

互联网支持通过TCP [RFC-793]在服务器端口53（十进制）访问域名服务器，以及通过UDP [RFC-768]在UDP端口53（十进制）进行数据报访问。

4.2.1. UDP的使用

使用UDP发送的消息通过用户端口53（十进制）到达服务器。

通过UDP携带的消息限制为512字节（不包括IP或UDP头部）。较长的消息会被截断，并在头部中设置TC（截断）位。

UDP不适用于区域传输，但在互联网中，UDP是标准查询的推荐方法。使用UDP发送的查询可能会丢失，因此需要重传策略。查询或其响应可能会被网络或域名服务器的处理过程重新排序，因此解析器不应依赖它们按顺序返回。

最优的UDP重传策略会根据互联网的性能和客户端的需求而变化，但建议如下：

- 客户端在向特定服务器地址重复查询之前，应尝试其他服务器和地址。

- 重传间隔应尽可能基于之前的统计数据。过于激进的重传可能会导致整体响应变慢。根据客户端与预期服务器的连接状况，最小重传间隔应为2-5秒。

关于服务器选择和重传策略的更多建议，可以在本备忘录的解析器部分找到。

4.2.2. TCP的使用

通过TCP连接发送的消息使用服务器端口53（十进制）。消息前面会有一个两字节的长度字段，表示消息的长度（不包括这两个字节的长度字段）。这个长度字段允许底层处理在开始解析之前组装完整的消息。

推荐几种连接管理策略：

- 服务器不应阻塞其他活动，等待TCP数据。

- 服务器应支持多个连接。

- 服务器应假设客户端会主动关闭连接，并应在所有未完成的客户端请求得到满足后，才关闭自己的连接端。

如果服务器需要关闭一个空闲连接以回收资源，应等待该连接空闲一段时间，约为两分钟左右。特别是，服务器应允许在单一连接上进行 SOA 和 AXFR 请求序列（这会开始一次刷新操作）。由于服务器无论如何都无法回答查询，因此可以使用单方面关闭或重置连接，而不是优雅地关闭。

5. 主文件

主文件是包含资源记录（RRs）文本形式的文本文件。由于区域的内容可以用资源记录的列表来表达，主文件通常用于定义一个区域，尽管它也可以用来列出缓存的内容。因此，本节首先讨论主文件中资源记录的格式，然后介绍在某些域名服务器中使用主文件创建区域时的特殊注意事项。

5.1 格式

这些文件的格式是一系列条目。条目主要是行导向的，虽然可以使用括号在行边界处继续列出项目，也可以在文本中包含CRLF（回车换行）。任何制表符和空格的组合都作为分隔符，用于区分组成条目的不同项。主文件中的任何一行都可以以注释结束，注释以“;”（分号）开始。

定义的条目包括：

    <空白>[<注释>]

Mockapetris                                                    [第33页]

RFC 1035        域名实现与规范    1987年11月

    $ORIGIN <域名> [<注释>]

    $INCLUDE <文件名> [<域名>] [<注释>]

    <域名><RR> [<注释>]

    <空白><RR> [<注释>]

文件中允许出现空行，无论是否带有注释。

定义了两个控制条目：$ORIGIN 和 $INCLUDE。$ORIGIN 后面跟一个域名，用于重置相对域名的起点为指定的域名。$INCLUDE 用于将指定文件插入到当前文件中，并且可以选择性地指定一个域名，设置被包含文件的相对域名起点。$INCLUDE 也可以带有注释。注意，无论被包含文件中对相对起点做出何种更改，$INCLUDE 条目都不会改变父文件的相对起点。

最后两种形式代表资源记录（RR）。如果资源记录的条目以空白开始，则假定该RR的所有者为上一次声明的所有者。如果RR条目以<域名>开始，则所有者名称会被重置。

<rr>内容可以采用以下形式之一：

    [<TTL>] [<class>] <type> <RDATA>

    [<class>] [<TTL>] <type> <RDATA>

RR（资源记录）以可选的TTL（存活时间）和类别字段开始，后跟适用于该类别和类型的类型（Type）和RDATA字段。类别和类型使用标准的助记符，TTL为十进制整数。省略的类别和TTL值默认使用上一次明确声明的值。由于类型和类别的助记符是互不重叠的，因此解析是唯一的。（注意，这里的顺序与示例中使用的顺序以及实际RR中的顺序不同；这里的顺序设计便于解析和默认值的处理。）

<domain-name>（域名）在主文件中的数据占很大比例。域名中的标签以字符字符串表示，用点（.）分隔。引号规则允许在域名中存储任意字符。以点结尾的域名称为绝对域名，视为完整的域名；不以点结尾的域名称为相对域名，实际的域名是相对部分与在$ORIGIN、$INCLUDE或主文件加载例程中指定的起点（origin）拼接而成。当没有可用的起点时，相对域名会被视为错误。

Mockapetris                                                    [第34页]

RFC 1035        域名实现与规范        1987年11月

<character-string>（字符字符串）有两种表达方式：一种是连续的字符集，没有内部空格；另一种是以"开头、以"结尾的字符串。在用"界定的字符串内部，可以出现任何字符，但不能出现未转义的"字符，必须用反斜杠（\）进行转义。

由于这些文件是文本文件，为了允许加载任意数据，必须采用一些特殊的编码方式，特别包括：

                表示根域。

@               独立的@符号用来表示当前的起点（origin）。

\X              其中X是除数字（0-9）之外的任何字符，用于对该字符进行转义，使其特殊含义不生效。例如，"\."可以在标签中放置一个点字符。

\DDD            其中每个D是一个数字，表示对应十进制数DDD的八进制字节。生成的八进制字节被视为文本，不会被检查是否具有特殊含义。

( )             括号用于将跨行的数据组合在一起。实际上，在括号内不会识别行终止符。

;               分号用于开始注释；行中其余部分将被忽略。

5.2 使用主文件定义区域

当使用主文件加载区域时，如果在主文件中遇到任何错误，操作应被中止。其原因在于，一个错误可能会带来广泛的后果。例如，假设定义委托的资源记录（RR）存在语法错误；那么服务器将对子区域中的所有名称返回权威性名称错误（除非该子区域也在服务器上存在）。

除了确保文件语法正确之外，还应进行其他几项有效性检查：

1. 文件中的所有RR应具有相同的类别（class）。
2. 区域的顶部应恰好有一个SOA（Start of Authority）RR。
3. 如果存在委托且需要粘合（glue）信息，则应提供粘合信息。
4. 区域中权威节点之外的信息应为粘合信息，而非由起源（origin）或类似错误引起的结果。

6.3. 主文件示例

以下是一个用于定义ISI.EDU区域的示例文件，加载时的起源为ISI.EDU：

@   IN  SOA     VENERA      Action.domains (
                                 20     ; 序列号
                                 7200   ; 刷新间隔
                                 600    ; 重试间隔
                                 3600000; 过期时间
                                 60)    ; 最小TTL

        NS      A.ISI.EDU.
        NS      VENERA
        NS      VAXA
        MX      10      VENERA
        MX      20      VAXA

A       A       26.3.0.103

VENERA  A       10.1.0.52
        A       128.9.0.32

VAXA    A       10.2.0.27
        A       128.9.0.33

$INCLUDE <SUBSYS>ISI-MAILBOXES.TXT

其中，文件<SUBSYS>ISI-MAILBOXES.TXT的内容为：

    MOE     MB      A.ISI.EDU.
    LARRY   MB      A.ISI.EDU.
    CURLEY  MB      A.ISI.EDU.
    STOOGES MG      MOE
            MG      LARRY
            MG      CURLEY

注意在SOA RR中使用反斜杠（\）字符来指定责任人邮箱“Action.domains@E.ISI.EDU”。

6. 名称服务器实现

6.1. 架构

名称服务器的最佳结构将取决于主机操作系统，以及名称服务器是否与解析器操作集成，无论是通过支持递归服务，还是通过与解析器共享数据库。本节讨论与解析器共享数据库的名称服务器的实现考虑，但大多数这些问题也存在于任何名称服务器中。

6.1.1. 控制

一个名称服务器必须同时进行多项并发活动，无论这些活动是在主机操作系统中作为独立任务实现，还是在单一的名称服务器程序内部进行多路复用。仅仅在等待TCP数据以进行刷新或查询操作时阻塞UDP请求的服务，是绝对不能接受的。同样，名称服务器也不应在没有并行处理这些请求的情况下尝试提供递归服务，尽管它可以选择对来自同一客户端的请求进行序列化，或者将来自同一客户端的相同请求视为重复请求。在从主文件重新加载区域或将新刷新区域合入数据库时，名称服务器也不应显著延迟请求的处理。

6.1.2. 数据库

虽然名称服务器的实现可以自由选择任何内部数据结构，但建议的结构由三个主要部分组成：

- 一个“目录”数据结构，用于列出该服务器可用的区域，以及指向区域数据结构的“指针”。此结构的主要目的是在处理标准查询时，找到最近的祖先区域（如果有的话）。

- 每个由名称服务器持有的区域的单独数据结构。

- 一个用于缓存数据的数据结构（或者为不同类别设置不同的缓存）。

所有这些数据结构都可以用相同的树状结构格式实现，不同部分的节点上链的数据不同：在目录中，数据是指向区域的指针；在区域和缓存数据结构中，数据则是资源记录（RRs）。在设计树框架时，设计者应认识到，查询处理需要使用不区分大小写的标签比较来遍历树；而在实际数据中，少数节点具有非常高的分支因子（100-1000或更多），但绝大多数节点的分支因子非常低（0-1）。

解决大小写问题的一种方法是，将每个节点的标签存储为两部分：一份是标准化大小写的标签（所有ASCII字符统一为一种大小写），另一份是一个位掩码，标示哪些字符实际上是不同的大小写。分支因子差异可以通过在节点中使用简单的链表来处理，直到分支因子超过某个阈值，然后转为使用哈希结构。一旦超过阈值，存储树段的哈希结构必须确保哈希函数和操作能保持DNS的大小写约定。

将数据库的不同部分使用不同结构的做法，出于多种考虑：

- 目录结构可以是几乎静态的结构，只有在系统管理员更改服务器支持的区域（zones）时才需要调整。这个结构也可以用来存储用于控制刷新活动的参数。

- 区域的单个数据结构允许通过更改目录中的指针，简单地替换一个区域。区域刷新操作可以构建一个新的结构，完成后通过简单的指针替换将其拼接到数据库中。非常重要的是，在区域刷新时，查询不应同时使用旧数据和新数据。

- 通过适当的搜索程序，区域中的权威数据总是会“隐藏”，因此优先于缓存数据。

- 区域定义中的错误（如重叠区域等）可能导致查询响应错误，但问题的诊断变得更为简便，而且一个“坏”的区域的内容不会污染其他区域。

- 由于缓存最频繁地被更新，它在系统重启期间最容易受到破坏。它也可能充满过期的资源记录（RR）数据。在这两种情况下，都可以轻松地丢弃缓存而不影响区域数据。

数据库设计的一个主要方面是选择一种结构，使名称服务器能够应对其主机的崩溃。名称服务器应在系统崩溃后保存的状态信息包括目录结构（包括每个区域的刷新状态）和区域数据本身。

6.1.3 时间

资源记录（RR）的TTL数据和刷新活动的计时数据都依赖于以秒为单位的32位定时器。在数据库内部，刷新定时器和缓存数据的TTL在概念上是“倒计时”的，而区域中的数据保持恒定的TTL。

一种推荐的实现策略是以两种方式存储时间：相对增量和绝对时间。一种方法是使用正的32位数字表示一种时间类型，负的数字表示另一种时间类型。区域中的RR使用相对时间；刷新定时器和缓存数据使用绝对时间。绝对数字是以某个已知的起点为基准，并在放入响应时转换为相对值。当绝对TTL在转换为相对时间后为负数，表示数据已过期，应被忽略。

6.2. 标准查询处理

标准查询处理的主要算法在[RFC-1034]中介绍。

在处理QCLASS=*或其他匹配多个类别的QCLASS的查询时，除非服务器能保证响应涵盖所有类别，否则响应不应被视为权威的。

在撰写响应时，若在附加部分插入的资源记录（RR）与答案或权威部分中的RR重复，则可以省略这些RR在附加部分中的内容。

当响应过长需要截断时，应从响应的末尾开始截断，并向前处理数据包。因此，如果在权威部分有任何数据，答案部分将保证是唯一的。

应使用SOA中的最小值（MINIMUM）作为从区域中分发数据的TTL的下限。当数据被复制到响应中时，应执行此下限操作。这将允许未来的动态更新协议在不产生歧义语义的情况下更改SOA的MINIMUM字段。

6.3 区域刷新与重载处理

尽管服务器已尽最大努力，但可能由于语法错误等原因无法从主文件加载区域数据，或者在其过期参数内无法刷新区域。在这种情况下，域名服务器应像没有该区域数据一样回答查询。

如果主服务器通过AXFR传送区域数据，在传输过程中创建了新版本，主服务器应尽可能继续传送旧版本的区域数据。无论如何，它绝不应只传送部分旧版本和部分新版本的内容。如果无法完成传输，主服务器应重置进行区域传送的连接。

6.4 逆向查询（可选）

逆向查询是DNS的可选部分。域名服务器不必支持任何形式的逆向查询。如果域名服务器收到不支持的逆向查询，它应返回一个错误响应，头部中的“未实现”错误位被设置。虽然支持逆向查询是可选的，但所有域名服务器至少必须能够返回错误响应。

6.4.1 逆向查询和响应的内容

逆向查询反转了标准查询操作所执行的映射关系；标准查询将域名映射到资源，而逆向查询则将资源映射到域名。例如，标准查询可能将域名绑定到主机地址；相应的逆向查询则将主机地址绑定到域名。

反向查询的形式是在消息的回答部分只包含一个资源记录（RR），而问题部分为空。查询RR的所有者名称和其TTL（生存时间）并不重要。响应中会在问题部分列出所有拥有该查询RR的域名，这些域名是由域名服务器所知道的。由于没有任何域名服务器知道全部的域名空间，因此不能假设响应是完整的。因此，反向查询主要用于数据库管理和调试活动。反向查询并不是将主机地址映射到主机名的可接受方法；应使用IN-ADDR.ARPA域。

在可能的情况下，域名服务器应对反向查询提供不区分大小写的比较方式。因此，查询“Venera.isi.edu”的MX RR应得到与查询“VENERA.ISI.EDU”相同的响应；查询“HINFO RR”为“IBM-PC UNIX”的反向查询应得到与“IBM-pc unix”相同的结果。然而，这不能得到保证，因为域名服务器可能拥有包含字符字符串的RR，但并不知晓这些数据是字符类型。

当域名服务器处理反向查询时，它要么返回：

1. 指定资源的一个或多个域名作为问题部分中的QNAME；

2. 或返回一个错误代码，指示域名服务器不支持对指定资源类型的反向映射。

当反向查询的响应中包含一个或多个QNAME时，定义反向查询的RR的所有者名称和TTL会被修改为与第一个QNAME中找到的RR完全一致。

在反向查询中返回的RR不能使用与标准查询响应相同的机制进行缓存。原因之一是一个域名可能有多个相同类型的RR，而只会显示其中一个。例如，对一个多宿主（多IP地址）主机的单一地址的反向查询可能会误导人们认为只有一个地址存在。

6.4.2 反向查询和响应示例
用于检索与互联网地址10.1.0.52对应的域名的反向查询的整体结构如下：

以下是英文内容的中文翻译：

```
                         +-----------------------------------------+
           头部        |          OPCODE=IQUERY，ID=997          |
                         +-----------------------------------------+
          问题        |                 <空>                    |
                         +-----------------------------------------+
           回答        |        <anyname> A IN 10.1.0.52        |
                         +-----------------------------------------+
          权威        |                 <空>                    |
                         +-----------------------------------------+
         附加信息     |                 <空>                    |
                         +-----------------------------------------+

此查询请求一个答案为互联网风格地址10.1.0.52的问题。由于不知道所有者名称，可以使用任何域名作为占位符（且会被忽略）。通常使用一个表示根的零字节（即一个八位字节为零），以最小化消息长度。RR的TTL（生存时间）并不重要。对此查询的响应可能如下：














Mockapetris                                                    [第41页]


RFC 1035        域名实现与规范    1987年11月


                         +-----------------------------------------+
           头部        |         OPCODE=RESPONSE，ID=997         |
                         +-----------------------------------------+
          问题        |QTYPE=A，QCLASS=IN，QNAME=VENERA.ISI.EDU |
                         +-----------------------------------------+
           回答        |  VENERA.ISI.EDU  A IN 10.1.0.52        |
                         +-----------------------------------------+
          权威        |                 <空>                    |
                         +-----------------------------------------+
         附加信息     |                 <空>                    |
                         +-----------------------------------------+

注意，响应逆向查询中的QTYPE与逆向查询的答案部分中的TYPE字段相同。当逆向查询的答案不唯一时，响应中可能包含多个问题。如果响应中的问题部分不为空，则答案部分中的RR会被修改为与第一个QNAME对应的RR完全相同。

6.4.3. 逆向查询处理

支持逆向查询的域名服务器可以通过对其数据库进行穷举搜索来支持这些操作，但随着数据库规模的扩大，这变得不切实际。另一种方法是根据搜索键反转数据库。

对于支持多个区域且数据量较大的域名服务器，建议采用为每个区域单独反转的方式。当某个区域在刷新过程中发生变化时，只需重新进行该区域的反转。
```

未来的域名系统版本可能会支持此类反转的转移，但在当前版本中尚不支持。

6.5. 完成查询及响应

在RFC-882和RFC-883中描述的可选完成服务已被删除。未来可能会推出重新设计的服务。













Mockapetris                                                    [第42页]


RFC 1035        域名实现与规范    1987年11月


7. 解析器的实现

推荐的解析器算法的顶层结构在[RFC-1034]中有所讨论。本节将讨论在假设采用本文备忘录中名称服务器实现部分建议的数据库结构的前提下的实现细节。

7.1. 将用户请求转化为查询

解析器的第一步是将客户端请求（以适合本地操作系统的格式表达）转化为针对特定名称的资源记录（RRs）的搜索规范，这些资源记录应匹配特定的QTYPE和QCLASS。尽可能地，QTYPE和QCLASS应对应单一类型和单一类别，因为这样可以大大简化缓存数据的使用。原因在于，缓存中存在某一类型的数据并不确认其他类型数据的存在或不存在，因此唯一的确认方式是咨询权威源。如果使用QCLASS=*，则无法获得权威答案。

由于解析器必须能够多路复用多个请求以高效完成其功能，每个待处理的请求通常会用一块状态信息来表示。这个状态块通常包含：

- 一个时间戳，指示请求开始的时间。该时间戳用于判断数据库中的资源记录（RRs）是否可以使用或已过期。此时间戳采用前述用于区域和缓存中RR存储的绝对时间格式。注意，当RR的TTL表示相对时间时，RR必须是及时的，因为它是区域的一部分；当RR具有绝对时间时，它属于缓存，RR的TTL会与请求开始时的时间戳进行比较。

- 一些参数，用于限制为该请求执行的工作量。

为了防止数据库中的错误（如循环的CNAME引用）和操作问题（如网络分区导致的通信中断），解析器对响应客户端请求所做的工作量必须加以限制。

RFC 1035  域名实现与规范  1987年11月

resolver（解析器）在访问所需的域名服务器时应受到限制。虽然对解析器在向特定域名服务器地址重传某一查询的次数设定本地限制是必要的，但解析器还应具有一个全局的每请求计数器，以限制单个请求的工作量。该计数器应设定为某个初始值，每当解析器执行任何操作（如超时重传、重传等）时，计数器就会减一。如果计数器减到零，表示请求应以临时错误终止。

请注意，如果解析器结构允许一个请求启动其他请求的并行处理，例如当访问某个域名服务器的需求引发对该服务器地址的并行解析时，所启动的请求应以较低的计数器值开始。这可以防止数据库中的循环引用引发解析器活动的连锁反应。

- [RFC-1034]中讨论的SLIST数据结构。

该结构用于跟踪请求的状态，特别是在请求必须等待来自外部域名服务器的答案时。

7.2 发送查询

如[RFC-1034]所述，解析器的基本任务是构造一个能够回答客户端请求的查询，并将该查询发送到能够提供所需信息的域名服务器。解析器通常只有关于应询问哪些服务器的非常明确的线索（如NS资源记录），并可能需要根据CNAME记录调整查询，或根据指向更接近目标信息的委托响应调整所询问的域名服务器集。除了客户端请求的信息外，解析器还可能需要调用自身的服务，以确定希望联系的域名服务器的地址。

无论如何，本备忘录中采用的模型假设解析器在多个请求之间进行多路复用，有些请求来自客户端，有些是内部生成的。每个请求由一些状态信息表示，理想的行为是让解析器以最大可能性获得请求的答案、最小化请求所需时间、并避免过多的传输。关键算法利用请求的状态信息选择下一个要查询的域名服务器地址，并计算超时值，以便在未收到响应时采取下一步行动。下一步行动通常是向其他服务器发出传输，但也可能是向客户端返回临时错误。

—— 由Mockapetris编写  [第44页]

RFC 1035  域名实现与规范  1987年11月

解析器总是从一份要查询的服务器名称列表（SLIST）开始。
这个列表将包含所有对应于解析器所知道的最近祖先区域的NS资源记录（RRs）。为了避免启动时出现问题，解析器应当预设一组默认的服务器，当没有适用的当前NS资源记录时，它会询问这些默认服务器。然后，解析器会将所有已知的域名服务器地址添加到SLIST中，并在已知域名但没有地址的情况下，可能会同时发起请求以获取这些服务器的地址。

为了完成SLIST的初始化，解析器会将其所拥有的任何历史信息附加到SLIST中的每个地址上。这些信息通常包括该地址响应时间的某种加权平均值，以及该地址的命中率（即该地址响应请求的频率）。请注意，这些信息应当以每个地址为单位进行存储，而不是以每个域名服务器为单位，因为某个特定服务器的响应时间和命中率可能在不同地址之间有很大差异。还应注意，这些信息实际上是针对解析器地址/服务器地址对的，因此拥有多个地址的解析器可能希望为每个地址单独保存历史记录。这一步还必须处理没有此类历史信息的地址；在这种情况下，预计的往返时间（RTT）应为5到10秒，作为最坏的情况，局部网络环境下的估算值可能更低。

请注意，每当跟随委托（delegation）时，解析器的算法会重新初始化SLIST。

这些信息建立了可用域名服务器地址的部分排序。每次选择一个地址后，应当修改状态，以防止在所有其他地址都已尝试过之前再次选择该地址。每次传输的超时时间应比平均预测值多50%到100%，以应对响应时间的变化。

一些细节说明：

- 解析器可能会遇到没有任何地址可用的情况，尤其是在SLIST中的所有域名服务器正是用来查找它们自己地址的服务器。这种情况通常发生在粘合地址（glue address）资源记录的TTL比委托标记的NS资源记录TTL更短，或者解析器缓存了NS搜索的结果。解析器应检测到这种情况，并在下一个祖先区域或根区域重新开始搜索。

- 如果解析器从域名服务器收到服务器错误或其他异常响应，应将其从SLIST中移除，并可能立即安排向下一个候选服务器地址发起请求。

处理到达的响应数据报的第一步是解析响应。此过程应包括：

- 检查头部信息的合理性。对于预期为响应的情况下，若收到的是查询类型的数据报，应将其丢弃。

- 解析消息的各个部分，并确保所有资源记录（RRs）都被正确格式化。

- 作为可选步骤，检查到达数据的TTL（生存时间），以查找TTL过长的资源记录。例如，如果某个RR的TTL异常长（如超过一周），可以选择丢弃整个响应，或将响应中的所有TTL限制在一周以内。

下一步是将响应与当前的解析请求匹配。推荐的策略是，首先利用域头中的ID字段进行初步匹配，然后验证问题部分是否与当前所需的信息相符。这要求传输算法在域ID字段中分配若干位作为请求标识符。此步骤有几个细节需要注意：

- 一些域名服务器会从不同的地址发送响应，而非接收查询的地址。也就是说，解析器不能依赖响应一定来自它发出查询的同一地址。这种域名服务器的错误通常在UNIX系统中较为常见。

- 如果解析器对某个请求进行重传，应能接受来自任何一次传输的响应。然而，如果它用响应来测量与域名服务器的往返时间，则必须能够识别出哪个传输对应该响应（并记录每次发出的消息的传输时间），否则只能基于最初的传输计算往返时间。

- 有时域名服务器可能没有当前应有的区域副本（根据某些NS资源记录）。解析器应简单地将该域名服务器从当前的服务器列表（SLIST）中移除，并继续操作。

---

Mockapetris                                                    [第46页]

RFC 1035        域名实现与规范    1987年11月

7.4. 使用缓存

一般而言，我们期望解析器缓存所有在响应中接收的数据，因为这些数据可能在回答未来的客户端请求时派上用场。然而，有几类数据不应被缓存：

- 当某个特定所有者名有多个同类型的资源记录时，解析器应全部缓存或都不缓存。当响应被截断，且解析器不确定是否已获得完整的资源记录集时，不应缓存可能不完整的RR集合。

- 缓存的数据绝不应优先于权威数据使用，因此如果缓存会导致优先使用非权威数据，则不应缓存。

- 逆向查询的结果也不应被缓存。

- 当标准查询的QNAME包含“*”标签时，其结果可能被用来构建通配符。原因在于缓存不一定包含存在的资源记录（RR）或区域边界信息，而这些信息对于限制通配符RR的应用是必要的。

- 对于可靠性存疑的响应中的RR数据。当解析器收到非请求的响应或非请求的RR数据时，应将其丢弃而不进行缓存。基本的原则是，所有对数据包的合理性检查应在缓存之前完成。

类似地，当解析器在响应中获得某个名称的一组RR，并希望将其缓存时，应先检查缓存中是否已有相关RR。根据具体情况，优先使用响应中的数据或缓存中的数据，但两者绝不可混合。如果响应中的数据来自权威答案部分，则应优先使用。

8. 邮件支持

域名系统定义了将邮箱映射到域名的标准，以及两种利用邮箱信息派生邮件路由信息的方法。第一种方法称为邮件交换绑定（mail exchange binding），另一种为邮箱绑定（mailbox binding）。邮箱编码标准和邮件交换绑定是DNS官方协议的一部分，是互联网中推荐的邮件路由方法。邮箱绑定是一项仍在开发中的实验性功能，可能会有所变动。

邮箱编码标准假设邮箱名的格式为“<local-part>@<mail-domain>”。虽然不同的邮件互联网系统对这两个部分的语法允许有较大差异，但在ARPA互联网中，推荐的语法详见[RFC-822]。

DNS将<local-part>编码为单个标签，将<mail-domain>编码为域名。<local-part>的单个标签会加在<mail-domain>的域名之前，形成对应邮箱的域名。例如，邮箱HOSTMASTER@SRI-NIC.ARPA映射为域名HOSTMASTER.SRI-NIC.ARPA。如果<local-part>中包含点或其他特殊字符，在主文件中的表示需要使用反斜杠转义，以确保域名的正确编码。例如，邮箱Action.domains@ISI.EDU将表示为Action\.domains.ISI.EDU。

8.1. 邮件交换绑定

邮件交换绑定使用邮箱中的<mail-domain>部分来确定邮件的发送位置。<local-part>部分甚至不被考虑。[RFC-974]详细规定了此方法，在尝试使用邮件交换支持之前，应查阅该文档。

这种方法的一个优点是它将邮件目的地的命名与支持邮件服务的主机解耦，代价是增加了查找功能中的一层间接性。然而，这一层的增加应能消除在<local-part>中使用复杂的“%”、“!”等编码的需要。

该方法的核心是使用<mail-domain>作为域名，查找列出愿意接受<mail-domain>邮件的主机的MX资源记录（RR），以及根据管理员为<mail-domain>指定的顺序对这些主机进行优先级排序的偏好值。

在本备忘录中，示例中使用的<mail-domain>是ISI.EDU，同时以VENERA.ISI.EDU和VAXA.ISI.EDU作为ISI.EDU的邮件交换主机。如果一个邮件客户端有发给Mockapetris@ISI.EDU的消息，它会通过查找ISI.EDU的MX资源记录来路由邮件。ISI.EDU的MX记录会列出VENERA.ISI.EDU和VAXA.ISI.EDU，类型A的查询可以找到这些主机的地址。

8.2. 邮箱绑定（实验性）

在邮箱绑定中，邮件客户端使用完整的邮件目的地规范来构造一个域名。该邮箱的编码域名作为QTYPE=MAILB查询中的QNAME字段。

对此查询可能出现的几种结果包括：

1. 查询返回一个名称错误（name error），表示该邮箱作为域名不存在。

   从长远来看，这意味着指定的邮箱不存在。然而，在邮箱绑定尚未普及之前，应将此错误理解为由全局部分标识的组织不支持邮箱绑定。此时应采取的适当措施是回退到交换绑定。

2. 查询返回一个邮件重命名（MR）资源记录。

   MR记录在其RDATA字段中携带新的邮箱规范。邮件客户端应用新邮箱替换旧邮箱，然后重试操作。

3. 查询返回一个MB资源记录。

   MB记录在其RDATA字段中携带一个主机的域名。邮件客户端应通过适用的协议（如SMTP）将邮件投递到该主机。

4. 查询返回一个或多个邮件组（MG）资源记录。

   这意味着该邮箱实际上是一个邮件列表或邮件组，而非单一邮箱。每个MG记录的RDATA字段都标识该组的成员邮箱。邮件客户端应将邮件的副本投递给每个成员。

5. 查询既返回一个MB资源记录，也返回一个或多个MG资源记录。

这个条件意味着该邮箱实际上是一个邮件列表。邮件服务器可以选择将消息直接投递到由MB RR指定的主机上，主机再将邮件投递给所有成员，或者邮件服务器可以使用MG RRs自己进行扩展。

在任何情况下，响应中都可能包含一条邮件信息（MINFO）RR。该RR通常与邮件组相关联，但在MB中也是合法的。MINFO RR标识两个邮箱地址。其中一个代表负责原始邮箱名称的负责人，用于请求加入邮件组等操作。第二个邮箱地址则用于接收邮件失败的错误信息。这在邮件列表中特别适用，当成员名称出错时，错误报告可以发给除发信人之外的其他人。

Mockapetris                                                    [第49页]

RFC 1035        域名实现与规范    1987年11月

未来可能会在此RR中添加新的字段。

9. 参考文献与书目

[Dyer 87]       S. Dyer, F. Hsu, 《Hesiod》，Project Athena技术计划——名称服务，1987年4月，第1.9版。

                描述了Hesiod名称服务的基本原理。

[IEN-116]       J. Postel, 《互联网名称服务器》，IEN-116，南加州大学信息科学研究所，1979年8月。

                一种被域名系统取代但仍在使用的名称服务。

[Quarterman 86] J. Quarterman 和 J. Hoskins，《著名的计算机网络》，《ACM通讯》，1986年10月，第29卷第10期。

[RFC-742]       K. Harrenstien, 《NAME/FINGER》，RFC-742，网络信息中心，SRI国际，1977年12月。

[RFC-768]       J. Postel, 《用户数据报协议》，RFC-768，南加州大学信息科学研究所，1980年8月。

[RFC-793]       J. Postel, 《传输控制协议》，RFC-793，南加州大学信息科学研究所，1981年9月。

[RFC-799]       D. Mills, 《互联网域名》，RFC-799，COMSAT，1981年9月。

                建议引入层级结构，取代互联网中的扁平命名空间。

[RFC-805]       J. Postel, 《计算机邮件会议记录》，RFC-805，南加州大学信息科学研究所，1982年2月。

[RFC-810]       E. Feinler, K. Harrenstien, Z. Su, V. White, 《DOD互联网主机表规范》，RFC-810，网络信息中心，SRI国际，1982年3月。

                已废止。参见RFC-952。

[RFC-811]       K. Harrenstien, V. White, E. Feinler, 《主机名服务器》，RFC-811，网络信息中心，SRI国际，1982年3月。

Mockapetris                                                    [第50页]

RFC 1035        域名实现与规范    1987年11月

已废弃。详见RFC-953。

[RFC-812]       K. Harrenstien 和 V. White, 《NICNAME/WHOIS》, RFC-812，网络信息中心，斯坦福研究所（SRI International），1982年3月。

[RFC-819]       Z. Su 和 J. Postel, 《互联网用户应用的域名命名规范》, RFC-819，网络信息中心，斯坦福研究所，1982年8月。

                关于域系统设计的早期想法。
                当前的实现方式已完全不同。

[RFC-821]       J. Postel, 《简单邮件传输协议》, RFC-821，南加州大学信息科学研究所，1980年8月。

[RFC-830]       Z. Su, 《互联网名称服务的分布式系统》, RFC-830，网络信息中心，斯坦福研究所，1982年10月。

                关于域系统设计的早期想法。
                当前的实现方式已完全不同。

[RFC-882]       P. Mockapetris, 《域名——概念与功能》, RFC-882，南加州大学信息科学研究所，1983年11月。

                被本备忘录取代。

[RFC-883]       P. Mockapetris, 《域名——实现与规范》, RFC-883，南加州大学信息科学研究所，1983年11月。

                被本备忘录取代。

[RFC-920]       J. Postel 和 J. Reynolds, 《域名需求》, RFC-920，南加州大学信息科学研究所，1984年10月。

                说明顶级域的命名方案。

[RFC-952]       K. Harrenstien, M. Stahl, E. Feinler, 《国防部互联网主机表规范》, RFC-952，斯坦福研究所，1985年10月。

                规定了HOSTS.TXT的格式，该主机/地址表已被DNS取代。





Mockapetris                                                    [第51页]

RFC 1035        域名实现与规范    1987年11月

[RFC-953]       K. Harrenstien, M. Stahl, E. Feinler, 《主机名服务器》, RFC-953，斯坦福研究所，1985年10月。

                本RFC包含主机名服务器协议的正式规范，该协议已被DNS取代。
                该基于TCP的协议访问存储在RFC-952格式中的信息，用于获取主机表的副本。

[RFC-973]       P. Mockapetris, 《域系统的变更与观察》, RFC-973，南加州大学信息科学研究所，1986年1月。

                描述了对RFC-882和RFC-883的更改及其原因。

以下是英文内容的中文翻译：

```
[RFC-974]       C. Partridge, "邮件路由与域名系统",
                RFC-974，CSNET CIC BBN 实验室，1986年1月。

                描述了从基于 HOSTS.TXT 的邮件地址方式向
                使用域名系统的更强大 MX 系统的过渡。

[RFC-1001]      NetBIOS 工作组，“在 TCP/UDP 传输上实现 NetBIOS 服务的协议标准：概念与方法”，
                RFC-1001，1987年3月。

                本 RFC 及 RFC-1002 是在 TCP/IP 上实现 NETBIOS 的初步设计，建议将 NetBIOS
                名称服务建立在 DNS 之上。

[RFC-1002]      NetBIOS 工作组，“在 TCP/UDP 传输上实现 NetBIOS 服务的协议标准：详细规范”，
                RFC-1002，1987年3月。

[RFC-1010]      J. Reynolds 和 J. Postel，“已分配编号”，RFC-1010，
                USC/信息科学研究所，1987年5月。

                包含主机名、操作系统等的套接字编号和助记符。

[RFC-1031]      W. Lazear，“MILNET 域名迁移计划”，RFC-1031，
                1987年11月。

                描述了将 MILNET 转换为 DNS 的方案。

[RFC-1032]      M. Stahl，“建立域名——管理员指南”，RFC-1032，
                1987年11月。

Mockapetris                                                    [第52页]

RFC 1035        域名实现与规范    1987年11月

                描述了 NIC 用于管理顶级域和委托子区域的注册策略。

[RFC-1033]      M. Lottor，“域名管理员操作指南”，RFC-1033，
                1987年11月。

                为域名管理员提供的操作手册。

[Solomon 82]    M. Solomon、L. Landweber 和 D. Neuhengen，“CSNET 名称服务器”，
                计算机网络，第6卷，第3期，1982年7月。

                描述了为 CSNET 提供的独立于 DNS 的名称服务，以及在 CSNET 中使用 DNS 的情况。






































Mockapetris                                                    [第53页]

RFC 1035        域名实现与规范    1987年11月

索引

          *   13

          ;   33, 35

          <字符字符串>   35
          <域名>   34

          @   35

          \   35

          A   12

          字节序   8

          CH   13
          字符大小写   9
          CLASS   11
          CNAME   12
          完成度   42
          CS   13

          Hesiod   13
          HINFO   12
          HS   13

          IN   13
          IN-ADDR.ARPA 域   22
          反向查询   40

          邮箱名   47
          MB   12
          MD   12
          MF   12
          MG   12
          MINFO   12
          最小值   20
          MR   12
          MX   12
```

以下是英文内容的中文翻译：

```
          NS   12
          NULL   12

          端口号   32
          主服务器   5
          PTR   12, 18



Mockapetris                                                    [第54页]


RFC 1035        域名实现与规范    1987年11月


          QCLASS   13
          QTYPE   12

          RDATA   12
          RDLENGTH  11

          辅助服务器   5
          SOA   12
          Stub解析器   7

          TCP   32
          TXT   12
          TYPE   11

          UDP   32

          WKS   12


































Mockapetris                                                    [第55页]
```
# RFC 1123 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs1001-1500/rfc1123.txt

网络工作组                    互联网工程任务组
评论请求编号：1123                          R. Braden，主编
                                                          1989年10月


互联网主机的需求——应用与支持

本备忘录的状态

   本RFC是互联网社区的官方规范。它通过引用、修订、纠正和补充，整合了与主机相关的主要协议标准文件。本文档的发行不受限制。

摘要

   本RFC是一对文件中的一份，定义并讨论了互联网主机软件的需求。本RFC涵盖应用层和支持协议；其配套的RFC-1122则涉及通信协议层：链路层、IP层和传输层。

目录

1. 引言 ...............................................    5
   1.1 互联网架构 ......................................    6
   1.2 一般考虑 ........................................    6
      1.2.1 互联网的持续演进 ............................    6
      1.2.2 鲁棒性原则 ..................................    7
      1.2.3 错误日志 ....................................    8
      1.2.4 配置 ........................................    8
   1.3 阅读本文件 ........................................   10
      1.3.1 组织结构 ....................................   10
      1.3.2 需求 ........................................   10
      1.3.3 术语 ........................................   11
   1.4 致谢 ..............................................   12

2. 一般问题 ............................................   13
   2.1 主机名称与编号 ....................................   13
   2.2 使用域名系统 ......................................   13
   2.3 多宿主机上的应用 ..................................   14
   2.4 服务类型 ..........................................   14
   2.5 一般应用需求总结 ..................................   15

互联网工程任务组                                 [第1页]

RFC1123                       引言                  1989年10月

3. 远程登录——TELNET协议 ........................................... 16  
   3.1  引言 ...................................................... 16  
   3.2  协议流程介绍 .............................................. 16  
      3.2.1  选项协商 ............................................. 16  
      3.2.2  Telnet“前进”功能 .................................... 16  
      3.2.3  控制功能 ............................................. 17  
      3.2.4  Telnet“同步”信号 .................................... 18  
      3.2.5  NVT打印机与键盘 ..................................... 19  
      3.2.6  Telnet命令结构 ...................................... 20  
      3.2.7  Telnet二进制选项 .................................... 20  
      3.2.8  Telnet终端类型选项 .................................. 20  
   3.3  特定问题 .................................................. 21  
      3.3.1  Telnet行尾符约定 .................................... 21  
      3.3.2  数据输入终端 ........................................ 23  
      3.3.3  选项需求 ............................................ 24  
      3.3.4  选项启动 ............................................ 24  
      3.3.5  Telnet行模式选项 .................................... 25  
   3.4  TELNET/用户界面 ........................................... 25  
      3.4.1  字符集透明性 ........................................ 25  
      3.4.2  Telnet命令 .......................................... 26  
      3.4.3  TCP连接错误 ......................................... 26  
      3.4.4  非默认Telnet端口 .................................... 26  
      3.4.5  输出刷新 ............................................ 26  
   3.5  Telnet需求总结 ............................................ 27

4. 文件传输 .............................................. 29  
   4.1 文件传输协议——FTP ................................. 29  
      4.1.1 介绍 ........................................... 29  
      4.1.2 协议流程演示 ................................... 29  
         4.1.2.1 本地类型 .................................. 29  
         4.1.2.2 Telnet格式控制 ............................ 30  
         4.1.2.3 页面结构 .................................. 30  
         4.1.2.4 数据结构转换 .............................. 30  
         4.1.2.5 数据连接管理 .............................. 31  
         4.1.2.6 PASV命令 .................................. 31  
         4.1.2.7 LIST和NLST命令 ............................ 31  
         4.1.2.8 SITE命令 .................................. 32  
         4.1.2.9 STOU命令 .................................. 32  
         4.1.2.10 Telnet行尾代码 ............................ 32  
         4.1.2.11 FTP应答 .................................. 33  
         4.1.2.12 连接 ..................................... 34  
         4.1.2.13 最低实现；RFC-959第部分 ................. 34  
      4.1.3 特定问题 ....................................... 35  
         4.1.3.1 非标准命令动词 ............................ 35  
         4.1.3.2 空闲超时 .................................. 36  
         4.1.3.3 数据与控制的并发 .......................... 36  
         4.1.3.4 FTP重启机制 ............................... 36  
      4.1.4 FTP/用户界面 .................................... 39  

互联网工程任务组                                 [第2页]  

RFC1123                       介绍                        1989年10月

4.1.4.1 路径名规范 ....................... 39  
4.1.4.2 “QUOTE”命令 .............................. 40  
4.1.4.3 向用户显示回复 ................... 40  
4.1.4.4 维护同步 .................. 40  
4.1.5 FTP需求总结 ......................... 41  
4.2 简单文件传输协议——TFTP ................. 44  
4.2.1 引言 ...................................... 44  
4.2.2 协议概述 ............................. 44  
  4.2.2.1 传输模式 ............................... 44  
  4.2.2.2 UDP头部 ................................... 44  
4.2.3 具体问题 ................................... 44  
  4.2.3.1 魔法师学徒综合症 ............... 44  
  4.2.3.2 超时算法 ........................... 46  
  4.2.3.3 扩展 ................................... 46  
  4.2.3.4 访问控制 ............................... 46  
  4.2.3.5 广播请求 ............................ 46  
4.2.4 TFTP需求总结 ......................... 47

5. 电子邮件——SMTP 和 RFC-822 ................................... 48
   5.1  引言 ...................................................... 48
   5.2  协议流程介绍 .............................................. 48
      5.2.1  SMTP 模型 ............................................ 48
      5.2.2  规范化 ............................................... 49
      5.2.3  VRFY 和 EXPN 命令 .................................. 50
      5.2.4  SEND、SOML 和 SAML 命令 ............................ 50
      5.2.5  HELO 命令 ............................................ 50
      5.2.6  邮件中继 ............................................. 51
      5.2.7  RCPT 命令 ............................................ 52
      5.2.8  DATA 命令 ............................................ 53
      5.2.9  命令语法 ............................................. 54
      5.2.10  SMTP 回复 ........................................... 54
      5.2.11  透明性 ............................................. 55
      5.2.12  在 MX 处理中的 WKS 使用 .......................... 55
      5.2.13  RFC-822 消息规范 .................................. 55
      5.2.14  RFC-822 日期和时间规范 ............................ 55
      5.2.15  RFC-822 语法变更 .................................. 56
      5.2.16  RFC-822 本地部分 .................................. 56
      5.2.17  域字面量 .......................................... 57
      5.2.18  常见地址格式错误 .................................. 58
      5.2.19  明确源路由 ........................................ 58
   5.3  具体问题 .................................................. 59
      5.3.1  SMTP 队列策略 ...................................... 59
         5.3.1.1  发送策略 ...................................... 59
         5.3.1.2  接收策略 ...................................... 61
      5.3.2  SMTP 中的超时 ....................................... 61
      5.3.3  可靠的邮件接收 ..................................... 63
      5.3.4  可靠的邮件传输 ..................................... 63
      5.3.5  域名支持 ............................................ 65
      5.3.6  邮件列表和别名 ...................................... 65
      5.3.7  邮件网关 ............................................ 66
      5.3.8  最大消息大小 ........................................ 68
   5.4  SMTP 需求总结 ............................................ 69

6. 支持服务 ............................................ 72
   6.1 域名翻译 ........................................... 72
      6.1.1 引言 ........................................... 72
      6.1.2 协议流程演示 ................................... 72
         6.1.2.1 资源记录的零TTL ................................ 73
         6.1.2.2 QCLASS值 ........................................ 73
         6.1.2.3 未使用字段 ...................................... 73
         6.1.2.4 压缩 ............................................ 73
         6.1.2.5 配置信息的误用 .................................. 73
      6.1.3 具体问题 ......................................... 74
         6.1.3.1 解析器实现 ...................................... 74
         6.1.3.2 传输协议 ........................................ 75
         6.1.3.3 高效资源利用 .................................... 77
         6.1.3.4 多宿主主机 ....................................... 78
         6.1.3.5 可扩展性 ........................................ 79
         6.1.3.6 RR类型的状态 .................................... 79
         6.1.3.7 鲁棒性 .......................................... 80
         6.1.3.8 本地主机表 ....................................... 80
      6.1.4 DNS用户界面 ...................................... 81
         6.1.4.1 DNS管理 ........................................ 81
         6.1.4.2 DNS用户界面 .................................... 81
         6.1.4.3 界面缩写功能 .................................... 82
      6.1.5 域名系统需求总结 ................................ 84
   6.2 主机初始化 .......................................... 87
      6.2.1 引言 ............................................. 87
      6.2.2 需求 ............................................. 87
         6.2.2.1 动态配置 ....................................... 87
         6.2.2.2 加载阶段 ....................................... 89
   6.3 远程管理 ............................................ 90
      6.3.1 引言 ............................................. 90
      6.3.2 协议流程演示 ..................................... 90
      6.3.3 管理需求总结 ..................................... 92

7. 参考文献 ............................................... 93

---

互联网工程任务组 [第4页]

RFC1123 介绍 1989年10月

1. 引言

   本文档是两份文件之一，定义并讨论了互联网协议套件中主机系统实现的需求。 本RFC涵盖应用层及支持协议。其配套RFC《互联网主机的需求——通信层》 [INTRO:1]，则涉及较低层的协议：传输层、IP层和链路层。

这些文件旨在为互联网通信软件的供应商、实现者和用户提供指导。它们代表了由互联网研究和供应商社区成员贡献的大量技术经验和智慧的共识。

本RFC列举了连接到互联网的主机必须使用的标准协议，并通过引用包含了描述这些协议当前规范的RFCs及其他相关文件。它还纠正了所引用文件中的错误，并为实现者提供了额外的讨论和指导。

对于每个协议，本文档还包含一套明确的要求、建议和选项。读者必须理解，本文档中的要求清单本身是不完整的；互联网主机的完整要求主要由标准协议规范文件定义，而本RFC中包含的修正、补充和补充说明则补充了这些规范。

经过仔细阅读RFC，并与互联网技术社区进行一定互动，遵循良好的通信软件工程实践，善意地实现这些协议，所产生的实现与本文件的要求之间通常只有细微差别。因此，在许多情况下，本RFC中的“要求”已经在标准协议文件中陈述或暗示，其在此处的包含在某种意义上是多余的。然而，之所以包含它们，是因为过去某些实现做出了错误的选择，导致了互操作性、性能和/或鲁棒性的问题。

本文档还包括对许多要求和建议的讨论和解释。仅列出要求可能会带来风险，因为：

- 一些必需的特性比其他特性更为重要，而某些特性是可选的。
- 也可能存在合理的理由，某些为特定限制环境设计的供应商产品可能会选择使用不同的规范。

然而，为了实现跨越互联网系统的多样性和复杂性，确保任意主机之间的互操作性，必须遵循本文件中的规范。尽管目前大多数实现都在不同程度上未能满足这些要求（有的较轻微，有的较严重），但本规范代表了我们应当努力追求的理想目标。

这些要求基于当前的互联网体系结构水平。本文件将根据需要进行更新，以提供更多的澄清或补充那些仍在发展的规范领域的额外信息。

这段介绍部分首先向软件主机供应商提供一些一般性建议，然后指导如何阅读本文档的其余部分。第2节列出了可能适用于所有应用和支持协议的通用要求。第3、4、5节分别包含关于三大主要应用协议的要求：Telnet、文件传输和电子邮件。第6节涉及支持应用，包括域名系统、系统初始化和管理。最后，所有参考资料都将在第7节中列出。

1.1 互联网架构

关于从主机角度简要介绍互联网架构，可以参考[INTRO:1]的第1.1节。该节还包含一些关于互联网架构的推荐参考资料。

1.2 一般考虑事项

互联网主机软件供应商已经学到的两个重要经验教训，新供应商也应认真考虑。

1.2.1 互联网的持续演进

互联网的巨大增长暴露出在大型数据报基础的分组通信系统中的管理和扩展问题。这些问题正在被解决，因此本文档中描述的规范将不断演变。这些变更将经过精心规划和控制，因为供应商和负责网络运营的组织都积极参与规划。

如今，计算机网络协议的开发、演变和修订是常态，这种情况将持续数年。为互联网协议套件（或任何其他协议套件）开发计算机通信软件的供应商，如果未能维护和更新其软件以适应不断变化的规范，将会留下许多不满的客户。互联网是一个庞大的通信网络，用户通过它保持不断联系。经验表明，供应商软件中的缺陷很快会在互联网技术社区中传播开来。

1.2.2 鲁棒性原则

在每一层协议中，都有一条通用规则，其应用可以带来极大的鲁棒性和互操作性：

“在接受数据时要宽容，在发送数据时要保守。”

软件应当设计成能够应对各种可能出现的错误，无论这些错误的发生概率多么低；因为迟早会遇到带有特定错误组合和属性的数据包，除非软件做好了充分的准备，否则可能引发混乱。一般而言，最好假设网络中充满了恶意实体，它们会发送旨在产生最坏影响的数据包。这一假设将促使我们设计出相应的保护措施，尽管互联网中最严重的问题往往源于未预料到的机制被低概率事件触发；仅仅出于人类的恶意，绝不会走到如此阴险的地步！

所有层级的互联网主机软件都必须具备适应变化的能力。例如，考虑一个协议规范中包含某个头字段（如类型字段、端口号或错误码）的枚举值——这个枚举必须假设是不完整的。因此，如果一个协议定义了四个可能的错误码，软件在遇到第五个错误码时不应崩溃。未定义的错误码可以被记录（见下文），但绝不能导致程序失败。

这一原则的第二部分几乎同样重要：其他主机上的软件可能存在缺陷，使得利用合法但晦涩的协议特性变得不明智。偏离明显和简单的设计是不明智的，以免在其他地方引发不良后果。这一原则的推论是“警惕行为异常的主机”；主机软件应当做好准备，不仅要能应对其他行为异常的主机，还要合作限制这些主机可能对共享通信设施造成的干扰。

1.2.3 错误日志

互联网包含各种各样的主机和网关系统，它们实现了许多协议和协议层，其中一些在其互联网协议软件中存在缺陷和不良特性。由于系统的复杂性、多样性和功能的分布，用户问题的诊断常常非常困难。

如果主机实现中包含一个经过精心设计的用于记录错误或“奇怪”协议事件的日志功能，将有助于问题诊断。在记录错误时，尽可能多地包含诊断信息是非常重要的。特别是，记录引发错误的数据包的头部信息通常非常有用。然而，必须注意确保错误日志记录不会消耗过多资源或以其他方式干扰主机的正常运行。

对于一些异常但无害的协议事件，可能会导致错误日志文件溢出；这可以通过使用“循环”日志，或仅在诊断已知故障时启用日志记录来避免。过滤和统计连续重复的消息也可能是有用的。一种行之有效的策略是：(1) 始终统计异常情况，并通过管理协议（参见第6.3节）使这些统计数据可访问；(2) 允许选择性地启用各种事件的日志记录。例如，可能希望能够“记录所有内容”或“仅记录主机X的所有内容”。

请注意，不同的管理策略可能对主机中通常启用的错误日志记录量有不同的政策。有些管理者会说：“如果这不会对我造成伤害，我就不想知道”，而另一些则希望采取更为警惕和积极的态度，检测并消除协议异常。

1.2.4 配置

理想情况下，互联网协议套件的主机实现应能够完全自我配置。这将允许整个套件在只读存储器（ROM）中实现或集成到芯片中，简化无盘工作站的设计，也将极大地帮助繁忙的局域网管理员和系统供应商。我们尚未达到这个理想，实际上，距离这个目标还很遥远。

在本文档的许多部分，您会发现需要将某个参数设为可配置选项。这类要求背后有几种不同的原因。在少数情况下，目前对于最佳值存在不确定性或分歧，因此未来可能需要更新推荐值。在其他情况下，参数的值实际上取决于外部因素——例如，主机的大小及其通信负载的分布，或附近网络的速度和拓扑结构——而自调算法不可用或可能不足以应对这些变化。在某些情况下，配置的可调性是出于管理需求。

最后，一些配置选项是为了与过时或错误的协议实现进行通信而必需的，这些实现没有源代码，遗留在互联网的许多部分。不幸的是，为了让正确的系统与这些有缺陷的系统共存，管理员常常不得不“误配置”正确的系统。随着有缺陷的系统逐步退役，这个问题会逐渐自行解决，但供应商不能忽视这一点。

当我们说某个参数必须是可配置的，并不意味着要求每次启动时都必须从配置文件中明确读取其值。我们建议实现者为每个参数设置一个默认值，只有在特定安装中默认值不适用时，才需要通过配置文件进行覆盖。因此，可配置性要求保证即使在只提供二进制或只读存储器（ROM）的产品中，也能在必要时覆盖默认值。

本文档在某些情况下对这些默认值提出了具体要求。当配置项涉及对现有有缺陷系统的适应时，默认值的选择是一个敏感问题。如果互联网要成功实现完全的互操作性，内置的默认值必须符合官方协议，而不能为了适应有缺陷的实现而“误配置”。尽管一些供应商出于市场考虑选择了误配置的默认值，我们仍然敦促供应商选择符合标准的默认值。

最后，我们指出，供应商需要提供充分的文档，说明所有配置参数、它们的限制和影响。

1.3 阅读本文档

1.3.1 结构

一般而言，每个主要部分都组织成以下子部分：

(1) 引言

(2) 协议逐步讲解——逐节考虑协议规范文件，纠正错误，说明可能模糊或定义不清的要求，并提供进一步的澄清或解释。

(3) 具体问题——讨论在逐步讲解中未涉及的协议设计和实现问题。

(4) 接口——讨论与下一层的服务接口。

(5) 摘要——包含该部分要求的总结。

在本文档的许多主题下，都有括号中的“讨论”或“实现”材料。这些内容旨在对前述要求文本进行澄清和解释，还包括一些关于未来可能方向或发展的建议。实现材料中包含一些建议的方法，供实现者考虑。

摘要部分旨在作为指南和索引，但必然简洁且不完整。摘要绝不能单独使用或作为参考，必须结合完整的RFC一同查阅。

1.3.2 需求

在本文件中，用大写字母表示用以定义每个特定需求重要性的词。这些词包括：

* "MUST"（必须）

  这个词或形容词"REQUIRED"（必需）意味着该项是规范的绝对要求。

* "SHOULD"（应当）

  这个词或形容词"RECOMMENDED"（建议）意味着在特定情况下可能存在合理理由忽略此项，但应充分理解其全部影响，并在选择不同方案前慎重权衡。

* "MAY"（可以）

  这个词或形容词"OPTIONAL"（可选）意味着该项确实是可选的。例如，一个供应商可能会选择包含该项，因为某个市场需要它或它能增强产品；另一个供应商可能会省略同样的项目。

实现如果未能满足其所实现协议的一个或多个“必须”要求，则被视为不合规。一个同时满足其协议所有“必须”和“应当”要求的实现被称为“无条件合规”；而只满足所有“必须”要求但未满足所有“应当”要求的实现，则被称为“有条件合规”。

1.3.3 术语

本文件使用以下技术术语：

段（Segment）
  在TCP协议中，段是端到端传输的基本单位。一个段由TCP头部和应用数据组成。段通过封装在IP数据报中进行传输。

消息（Message）
  这个术语在某些应用层协议中使用（特别是SMTP）指应用数据单元。

数据报（Datagram）
  [UDP]数据报是UDP协议中端到端传输的基本单位。

多宿（Multihomed）
  如果一个主机拥有多个IP地址连接到不同网络，则称该主机为多宿。

1.4 致谢

本文件融合了大量互联网协议专家的贡献和意见，包括来自大学和研究实验室、厂商以及政府机构的代表。主要由互联网工程任务组（IETF）的主机需求工作组（Host Requirements Working Group）编纂。

编辑特别感谢以下人员的辛勤付出，他们在过去的18个月中参加了多次长时间的会议，发出了超过300万字的电子邮件，为本文件的完成做出了贡献：Philip Almquist、Dave Borman（Cray Research）、Noel Chiappa、Dave Crocker（DEC）、Steve Deering（斯坦福大学）、Mike Karels（加州大学伯克利分校）、Phil Karn（贝尔实验室）、John Lekashman（NASA）、Charles Lynn（BBN）、Keith McCloghrie（TWG）、Paul Mockapetris（ISI）、Thomas Narten（普渡大学）、Craig Partridge（BBN）、Drew Perkins（卡内基梅隆大学）以及James Van Bokkelen（FTP软件公司）。

此外，以下人员在此项工作中做出了重大贡献：比尔·巴恩斯（Mitre公司）、史蒂夫·贝洛文（AT&T）、迈克·布雷西亚（BBN公司）、埃德·凯恩（DCA）、安妮特·德尚（ISI）、马丁·格罗斯（DCA）、菲尔·格罗斯（NRI）、查尔斯·赫德里克（罗格斯大学）、范·雅各布森（LBL）、约翰·克莱辛（麻省理工学院）、马克·洛托（SRI）、米洛·梅丁（NASA）、比尔·梅洛恩（Sun Microsystems）、格雷格·米恩肖（Kinetics）、杰夫·莫古尔（DEC）、约翰·穆伦（CMC）、乔恩·波斯特尔（ISI）、约翰·罗姆基（Epilogue Technology）以及迈克·圣约翰斯（DCA）。此外，还有一些人在特定领域也做出了重要贡献：埃里克·奥尔曼（伯克利）、罗布·奥斯坦（MIT）、阿特·伯格格林（ACC）、基思·博斯蒂克（伯克利）、文特·瑟夫（NRI）、韦恩·哈撒韦（NASA）、马特·科恩（IBM）、埃里克·纳格姆（挪威Naggum Software）、罗伯特·乌尔曼（Prime Computer）、大卫·韦茨曼（BBN）、弗兰克·万乔（美国）、阿伦·韦尔奇（俄亥俄州立大学）、比尔·韦斯特菲尔德（思科）以及拉扬·扎查里森（多伦多）。

我们对所有人表示感谢，包括那些可能在无意中被遗漏在此名单中的贡献者。

---

互联网工程任务组                                [第12页]

RFC1123              应用层——通用          1989年10月

2. 一般问题

本节包含可能适用于所有应用层协议的一般要求。

2.1 主机名和数字

合法的互联网主机名的语法在RFC-952 [DNS:4]中已被规定。主机名语法的一个方面在此被更改：对第一个字符的限制放宽为允许字母或数字。主机软件必须支持这种更宽松的语法。

主机软件必须处理最多63个字符的主机名，并应支持最多255个字符的主机名。

每当用户输入一个互联网主机的标识时，应能够输入（1）主机域名或（2）点分十进制（“#.#.#.#”）形式的IP地址。在在域名系统中查找之前，主机应对字符串进行点分十进制数字的语法检查。

讨论：
   这一最后的要求并不旨在规定输入点分十进制主机号码的完整语法形式；这被视为用户界面的问题。例如，点分十进制数字必须用“[ ]”括起来以用于SMTP邮件（见第5.2.17节）。这种表示法可以在主机系统中普遍采用，从而简化点分十进制数字的语法检查。

如果可以在没有分隔符的情况下输入点十进制数字，那么必须进行完整的语法检查，因为主机域名的某个部分现在允许以数字开头，并且可以完全由数字组成（参见第6.1.2.4节）。然而，合法的主机名绝不可能是点十进制形式的#.#.#.#，因为至少最高层级的标签必须是字母。

2.2 使用域名服务

主机域名必须按照第6.1节的描述转换为IP地址。

使用域名服务的应用程序必须能够应对软错误条件。应用程序必须在连续重试之间等待合理的时间间隔，并且必须考虑到网络问题可能会导致服务中断数小时甚至数天。

应用程序不应依赖于能够找到包含某个特定主机地址所有服务的准确列表的WKS记录，因为WKS资源记录类型在互联网站点中并不常用。要确认某项服务是否存在，只需尝试使用它即可。

2.3 多宿主机上的应用程序

当远程主机是多宿主机时，名称到地址的转换将返回一组备用的IP地址。根据第6.1.3.4节的规定，这个列表应按偏好程度递减的顺序排列。应用协议的实现应准备好尝试列表中的多个地址，直到成功为止。关于SMTP的更具体要求请参见第5.3.4节。

当本地主机是多宿主机时，基于UDP的请求/响应应用程序应使用与UDP请求数据报的特定目标地址相同的IP源地址来发送响应。“特定目标地址”定义在配套RFC的“IP地址分配”部分[INTRO:1]中。

类似地，向同一客户端打开多个TCP连接的服务器应用程序应使用相同的本地IP地址进行所有连接。

2.4 服务类型（Type-of-Service）

应用程序在调用传输层服务时，必须选择合适的TOS值，并且这些值必须是可配置的。请注意，TOS值包含5位，其中只有最高的3位目前被定义；其余两位必须为零。

讨论：
随着网关算法的发展以实现服务类型（Type-of-Service），各种应用协议的推荐值可能会发生变化。此外，某些用户与互联网路径的特定组合可能希望使用非标准的TOS值。基于这些原因，TOS值必须具有可配置性。

请参阅最新版本的“已分配编号”RFC [INTRO:5]，了解主要应用协议的推荐TOS值。

互联网工程任务组                                [第14页]

RFC1123              应用层——通用          1989年10月

2.5  一般应用需求总结

以下是英文内容的中文翻译：

```
                                               |          | | | |S| |
                                               |          | | | |H| |F
                                               |          | | | |O|M|o
                                               |          | |S| |U|U|o
                                               |          | |H| |L|S|t
                                               |          |M|O| |D|T|n
                                               |          |U|U|M| | |o
                                               |          |S|L|A|N|N|t
                                               |          |T|D|Y|O|O|t
功能                                            |章节      | | | |T|T|e
----------------------------------------------|----------|-|-|-|-|-|--
                                               |          | | | | | |
用户界面：                                    |          | | | | | |
  允许主机名以数字开头                        |2.1       |x| | | | |
  支持最长635字符的主机名                      |2.1       |x| | | | |
  支持最长255字符的主机名                      |2.1       | |x| | | |
  支持点分十进制的主机编号                      |2.1       | |x| | | |
  首先进行点分十进制语法检查                     |2.1       | |x| | | |
                                               |          | | | | | |
按第6.1节映射域名                            |2.2       |x| | | | |
应对软DNS错误                                |2.2       |x| | | | |
   合理的重试间隔                              |2.2       |x| | | | |
   支持长时间中断                              |2.2       |x| | | | |
预期WKS记录可用                              |2.2       | | | |x| |
                                               |          | | | | | |
尝试为多宿主远程主机使用多个地址               |2.3       | |x| | | |
UDP应答源地址为请求的特定目标地址             |2.3       | |x| | | |
为相关的TCP连接使用相同的IP地址                |2.3       | |x| | | |
指定合适的TOS值                              |2.4       |x| | | | |
  TOS值可配置                                 |2.4       |x| | | | |
  未使用的TOS位应为零                          |2.4       |x| | | | |
                                               |          | | | | | |

















互联网工程任务组                                [第15页]





RFC1123                  远程登录 -- TELNET             1989年10月


3.  远程登录 -- TELNET协议

   3.1  引言

      Telnet是用于远程登录的标准互联网应用协议。它提供了编码规则，将客户端（“用户”）系统上的键盘/显示与远程服务器系统上的命令解释器连接起来。Telnet协议的子集也被集成到其他应用协议中，例如FTP和SMTP。
```

Telnet 使用单一的 TCP 连接，其正常的数据流（“网络虚拟终端”或“NVT”模式）是基于 7 位 ASCII 编码，并包含用于嵌入控制功能的转义序列。Telnet 还允许协商许多可选的模式和功能。

主要的 Telnet 规范可以在 RFC-854 [TELNET:1] 中找到，而各种选项则在许多其他的 RFC 中定义；有关参考资料，请参见第7节。

3.2 协议流程介绍

3.2.1 选项协商：RFC-854，第2-3页

每个 Telnet 实现必须包含选项协商和子协商机制 [TELNET:2]。

主机必须严格遵循 RFC-854 的规则，以避免选项协商循环。对于不支持的选项，主机必须拒绝（即对“DO”或“WILL”发出“WONT”或“DONT”的回复）。选项协商应在整个 Telnet 连接期间持续进行（即使所有请求都被拒绝）。

如果所有的选项协商都失败，Telnet 实现必须默认为支持 NVT。

讨论：
虽然更复杂的“终端”以及支持选项协商的实现正逐渐成为主流，但所有实现都必须准备好支持 NVT，以确保任何用户-服务器通信的基本功能。

3.2.2 Telnet 前进（Go-Ahead）功能：RFC-854，第5页，以及 RFC-858

在一个从不发送 Telnet 命令“前进”（GA）的主机上，Telnet 服务器必须尝试协商“抑制前进”选项（即，发送“WILL Suppress Go Ahead”）。用户端或服务器端的 Telnet 必须始终接受“抑制前进”选项的协商。

当它控制一个全双工终端，而该终端中的“前进”没有意义时，用户端的 Telnet 实现可以忽略 GA 命令。

讨论：
为半双工（“锁键盘”）线路设计的“前进”机制已基本退出历史舞台。实际上，在许多操作系统中实现发送“前进”信号非常困难，即使是支持本地半双工终端的系统也是如此。困难通常在于 Telnet 服务器代码无法访问用户进程是否因等待 Telnet 连接输入而阻塞的信息，也就是说，无法可靠地判断何时发送 GA 命令。因此，大多数 Telnet 服务器主机不会发送 GA 命令。

本节规则的作用是允许 Telnet 连接的任一端否决使用 GA 命令。

有一类半双工终端仍然具有商业上的重要性：即“数据输入终端”，它们以全屏方式进行交互。然而，使用Telnet协议支持数据输入终端并不需要Go Ahead信号；详见第3.3.2节。

3.2.3 控制功能：RFC-854，第7-8页

Telnet命令列表已扩展，包括EOR（End-of-Record，记录结束），其代码为239 [TELNET:9]。

用户端和服务器端的Telnet都可能支持控制功能EOR、EC（Erase Character）、EL（Erase Line）和Break（中断），并且必须支持AO（Abort Output）、AYT（Are You There）、DM（Data Mark）、IP（Interrupt Process）、NOP（No Operation）、SB（Subnegotiation Begin）和SE（Subnegotiation End）。

主机必须能够接收并忽略其不支持的任何Telnet控制功能。

讨论：
注意，服务器端的Telnet必须支持Telnet IP（中断进程）功能，即使服务器主机具有等效的流内功能（例如，许多系统中的Control-C）。Telnet IP功能可能比流内中断命令更强，因为TCP紧急数据具有带外效果。

EOR控制功能可用于界定数据流的边界。一个重要的应用是支持数据输入终端（见第3.3.2节）。有人担心，由于RFC-854中未定义EOR，如果主机未准备好正确忽略未知的Telnet命令，可能在收到EOR时崩溃。为了保护此类主机，引入了End-of-Record选项[TELNET:9]；然而，正确实现的Telnet程序不需要此保护。

3.2.4 Telnet“同步”信号：RFC-854，第8-10页

当接收到“紧急”TCP数据时，用户端或服务器端的Telnet必须丢弃除Telnet命令之外的所有数据，直到达到DM（Data Mark，数据标记）（以及紧急数据结束）。

当发送Telnet IP（中断进程）时，用户端的Telnet应在其后跟随Telnet“同步”序列，即将序列“IAC IP IAC DM”作为TCP紧急数据发送。TCP紧急指针指向DM字节。

当接收到Telnet IP命令时，服务器端的Telnet可以向用户端发送一个Telnet“同步”序列，以清空输出流。此选择应与服务器操作系统在本地用户中断进程时的行为保持一致。

当接收到Telnet AO（Abort Output，中止输出）命令时，服务器端的Telnet必须向用户端发送一个Telnet“同步”序列，以清空输出流。

用户Telnet应具备在发送Telnet IP时刷新输出的能力；另请参见第3.4.5节。

讨论：
用户Telnet刷新服务器输出流的方式有三种可能：

（1）在IP之后发送AO。

这将导致服务器主机向其操作系统发送“刷新缓冲输出”信号。然而，AO可能不会在本地立即生效，即在用户Telnet端停止终端输出，直到服务器Telnet接收并处理了AO并返回“同步”信号。

（2）在IP之后发送DO TIMING-MARK [TELNET:7]，并在收到服务器Telnet的WILL/WONT TIMING-MARK之前，丢弃所有本地输出。

由于DO TIMING-MARK将在服务器端在IP之后处理，其回复应在输出数据流中的正确位置。然而，TIMING-MARK不会向服务器操作系统发送“刷新缓冲输出”信号。是否需要这样做，取决于服务器系统的实现。

（3）同时使用上述两种方法。

最优的方法尚不完全明确，因为必须兼容许多不完全遵循Telnet标准的现有服务器主机。最安全的做法可能是提供一个用户可控的选项，让用户选择（1）、（2）或（3）。

3.2.5 NVT打印机和键盘：RFC-854，第11页

在NVT模式下，Telnet应避免发送高位（最高位）为1的字符，并且不得将其作为奇偶校验位。传递高位比特给应用程序的实现，应协商使用二进制模式（参见第3.2.6节）。

讨论：
实现者应注意，严格解读RFC-854允许期望使用NVT ASCII的客户端或服务器忽略高位为1的字符。一般而言，使用Telnet传输扩展（超出7位）字符集时，应采用二进制模式。

然而，确实存在一些应用程序需要使用目前尚未定义的8位NVT模式，这些应用在整个Telnet连接的某些阶段会设置高位。请注意，二进制模式并不等同于8位NVT模式，因为二进制模式会关闭行尾处理。因此，对于高位的要求被表述为“应当”而非“必须”。

RFC-854定义了“网络虚拟终端”或NVT的基本属性集；这并不意味着排除实际终端可能具有的其他功能。Telnet连接对所有7位ASCII字符（包括任意ASCII控制字符）都是完全透明的。

例如，一个终端可能支持用ASCII转义序列编码的全屏命令；而Telnet实现会将这些序列作为未解释的数据传输。因此，不能将NVT视为一种高度受限的设备类型。

3.2.6 Telnet命令结构：RFC-854，第13页

由于选项可能出现在数据流的任何位置，必须将作为数据发送的Telnet转义字符（称为IAC，值为255）进行双倍处理。

3.2.7 Telnet二进制选项：RFC-856

当成功协商二进制选项后，允许传输任意8位字符。然而，数据流仍必须扫描IAC字符，任何嵌入的Telnet命令都必须遵守，且等于IAC的数据字节必须双倍处理。其他字符处理（例如用CR NUL或CR LF替换CR）不得进行。特别是在二进制模式下，没有行尾结束符的约定（参见第3.3.1节）。

讨论：
- 二进制选项通常在双方协商后启用，以将Telnet连接从NVT模式切换到“二进制模式”。
- 在二进制模式的Telnet数据流中，可以使用IAC EOR序列来界定数据块。

3.2.8 Telnet终端类型选项：RFC-1091

终端类型选项必须使用已在“已分配编号”RFC [INTRO:5]中正式定义的终端类型名称（当这些名称适用于特定终端时）。然而，接收端必须接受任何名称。

讨论：
RFC-1091 [TELNET:10] 更新了早期版本的终端类型（Terminal-Type）选项，该版本在RFC-930中定义。早期版本允许支持多种终端类型的服务器主机了解特定客户端终端的类型，假设每个物理终端都有其固有的类型。然而，现今的“终端”通常实际上是运行在PC上的终端模拟程序，可能能够模拟多种终端类型。因此，RFC-1091扩展了规范，允许用户与服务器之间进行更为通用的终端类型协商。

互联网工程任务组（IETF）                                [第20页]

RFC1123                  远程登录——TELNET             1989年10月

3.3 具体问题

3.3.1  Telnet端末行结束符约定

Telnet协议定义了序列CR LF表示“行结束”。对于终端输入，这对应于用户终端上按下命令完成或“行结束”键；在ASCII终端上，这通常是CR键，但也可能标记为“Return”或“Enter”。

当服务器端Telnet从远程终端接收到Telnet端末行结束序列CR LF作为输入时，必须与用户在本地终端上按下“行结束”键的效果相同。在使用ASCII的服务器主机上，接收到的CR LF序列必须引起与本地用户按下CR键相同的效果。因此，在ASCII服务器主机上，CR LF和CR NUL在通过Telnet连接作为输入时，必须具有相同的效果。

用户端Telnet必须能够发送以下任意形式：CR LF、CR NUL和LF。在ASCII主机上的用户端Telnet应具有用户可控的模式，以在用户按下“行结束”键时发送CR LF或CR NUL，且CR LF应为默认设置。

Telnet端末行结束序列CR LF必须用于传送非终端到计算机的Telnet数据（例如，服务器端Telnet输出，或Telnet协议中包含的其他应用协议数据）。

讨论：
为了实现任意Telnet客户端与服务器之间的互操作性，Telnet协议定义了行终止符的标准表示。由于ASCII字符集不包含明确的行结束字符，系统采用了各种不同的表示方式，例如CR、LF以及CR LF序列。Telnet协议选择了CR LF序列作为网络传输的标准。

不幸的是，RFC-854 [TELNET:1] 中关于“行尾”键应由客户端向服务器发送的字符（或字符序列）的协议规范存在一些模糊之处。其结果导致了大量且持续不断的互操作性问题，这些问题因各种用户端和服务器端的错误实现而变得更加严重。

尽管Telnet协议基于一个完全对称的模型，但在远程登录会话中，终端用户的角色与服务器主机的角色不同。例如，RFC-854定义了CR、LF和CR LF作为服务器输出的含义，但并未明确规定当用户在终端上按下“行尾”键时，用户端的Telnet应发送什么字符；这正是争议的焦点。

当用户按下“行尾”键时，一些用户端Telnet实现会发送CR LF，而另一些则会发送CR NUL（基于对RFC-854中相同句子的不同理解）。对于正确实现的ASCII服务器主机来说，这两者是等价的，如前所述。对于其他类型的服务器，则需要在用户端Telnet中采用不同的模式。

存在一些用户端Telnet在按下CR时只发送CR NUL的情况，这给非ASCII主机带来了困境：它们要么将CR NUL视为等同于CR LF的输入，从而无法输入“裸”CR字符，要么就会完全失去互操作性。

假设用户在主机A上使用Telnet登录到服务器主机B，然后再通过B上的用户端Telnet程序登录到服务器主机C。理想情况下，B上的服务器/用户端Telnet组合应尽可能透明，即表现得就像A直接连接到C一样。特别是，正确的实现会使B对行尾序列（如CR LF）保持透明，除了可能将CR LF转换为CR NUL或反之。

实现方式：
为了理解Telnet的行尾问题，必须对Telnet与本地操作系统之间的关系有一个大致的模型。服务器端的Telnet进程通常作为伪终端连接到操作系统的终端驱动程序中。当服务器端Telnet接收到一个行尾序列时，这个序列必须具有与在本地连接的终端上按下行尾键相同的效果。

支持交互式逐字符应用（例如编辑器）的操作系统，通常在其终端输入输出中具有两种内部模式：一种是格式化模式，在该模式下，已对数据流应用了本地的行尾和其他格式化规则；另一种是“原始”模式，在该模式下，应用程序可以直接访问每个输入的字符。服务器端Telnet必须以一种方式实现，使得这两种模式在远程终端和本地终端上的效果相同。例如，假设在ASCII主机上，服务器端Telnet接收到一个CR LF或CR NUL序列。在原始模式下，CR字符会传递给应用程序；在格式化模式下，则会使用本地系统的行尾约定。

3.3.2 数据输入终端

讨论：
除了Telnet设计用于的面向行和面向字符的ASCII终端外，还有几类视频显示终端，有时被称为“数据输入终端”或DET。例如，IBM 3270系列就是一个著名的例子。

有两种互联网协议被设计用来支持通用的DET：SUPDUP [TELNET:16, TELNET:17] 和DET选项 [TELNET:18, TELNET:19]。DET选项通过（子）协商在Telnet连接上驱动数据输入终端。SUPDUP是一种完全独立的终端协议，可以通过协商从Telnet进入。虽然这两种协议——SUPDUP和DET选项——在特定环境中都曾成功使用，但都未能获得广泛的接受或广泛的实现。

一种支持IBM 3270系列通过Telnet进行DET交互的不同方法已经被开发出来，尽管这种方法也适用于任何DET。其思想是在“本地DET”模式下操作，在该模式中，本地DET的输入/输出流以二进制数据的形式传输。Telnet的EOR（End Of Record）命令用于在此二进制流中划定逻辑记录（例如“屏幕”）。

实现方式：
进入和退出本地DET模式的规则如下：

- 服务器使用终端类型（Terminal-Type）选项 [TELNET:10] 来确认客户端是DET。
- 约定俗成（但非强制）地，双方会协商EOR（End Of Record）选项 [TELNET:9]。
- 双方会协商二进制（Binary）选项 [TELNET:3] 以进入本地DET模式。
- 当任一端退出二进制模式时，另一端也会退出，模式恢复为正常的NVT（网络虚拟终端）状态。

3.3.3 选项要求

每个Telnet实现必须支持二进制（Binary）选项 [TELNET:3] 和抑制“继续”信号（Suppress Go Ahead）选项 [TELNET:5]，并应支持回显（Echo） [TELNET:4]、状态（Status） [TELNET:6]、记录结束（End-of-Record） [TELNET:9] 和扩展选项列表（Extended Options List） [TELNET:8]。

如果本地操作系统提供相应功能，用户端或服务器端的Telnet还应支持窗口大小（Window Size）选项 [TELNET:12]。

讨论：
注意，End-of-Record（EOR）选项仅表示Telnet可以接收EOR信号而不会崩溃；因此，每个Telnet都应愿意接受End-of-Record选项的协商。详见第3.2.3节的讨论。

3.3.4 选项启动

在客户端/服务器场景中使用Telnet协议时，服务器应主动发起所期望的终端交互模式的协商。

讨论：
Telnet协议被定义为完全对称的，但其应用通常是不对称的。远程登录有时会失败，因为双方都没有发起所需的非默认终端模式的协商。通常由服务器决定偏好的模式，因此服务器需要主动发起协商；由于协商是对称的，用户也可以发起。

客户端（用户Telnet）应提供一种方式，让用户能够启用或禁用选项协商的发起。

讨论：
有时用户需要连接到使用Telnet进行控制流的应用服务（例如FTP或SMTP），但该服务不支持Telnet选项。如果禁用选项协商的发起，用户Telnet仍可用于此目的。

3.3.5 Telnet行模式（Linemode）选项

讨论：
一种重要的新Telnet选项——LINEMODE [TELNET:12]，已被提出。LINEMODE选项提供了一种标准方式，使用户Telnet和服务器Telnet达成一致，即由客户端而非服务器进行终端字符处理。当客户端准备好一行完整的文本时，它会将其（通常）一次性通过TCP包发送给服务器。此选项将大大降低Telnet会话的包成本，并在网络拥堵或延迟较长时提供更好的用户响应。

LINEMODE选项允许在本地和远程字符处理之间进行动态切换。例如，在运行全屏编辑器时，Telnet连接会自动协商进入单字符模式，编辑器结束后再返回行模式。

我们预期，在本RFC发布时，主机应实现此选项的客户端部分，也可以实现其服务器端。为了正确实现服务器端，服务器需要能够告诉本地系统不要进行任何输入字符处理，而是记住当前终端状态，并在状态变化时通知服务器Telnet进程。这将允许正确处理密码回显和全屏编辑器等功能。

3.4 TELNET/用户界面

3.4.1 字符集透明性

用户Telnet实现应能够发送或接收任何7位ASCII字符。在可能的情况下，应绕过用户主机操作系统对特殊字符的解释，以便这些字符可以方便地在连接中传输。

某些字符值必须保留为“转入命令模式”的转义字符；通常，双倍该字符允许其作为数据输入。所用的具体字符应由用户自行选择。

互联网工程任务组                                [第25页]





RFC1123                  远程登录——TELNET             1989年10月


在二进制模式连接中，用户的Telnet程序可以提供一种逃逸机制，用于输入任意8位值，前提是主机操作系统不允许直接从键盘输入这些值。

实现建议：
    在服务器端，透明性问题相对较少，但实现者应注意处理诸如：
    在8位数据到达只期望NVT ASCII的程序之前屏蔽奇偶校验位（由较旧的不符合标准的客户端发送的），以及正确处理请求8位数据流的程序。

3.4.2  Telnet命令

    用户的Telnet程序必须提供用户输入任何Telnet控制功能（如IP、AO或AYT）的能力，并应提供输入EC、EL和Break的能力。

3.4.3  TCP连接错误

    用户的Telnet程序应向用户报告由传输层报告的任何TCP错误（参见[介绍：1]中的“TCP/应用层接口”部分）。

3.4.4  非默认的Telnet联系端口

    用户的Telnet程序应允许用户可选地指定服务器Telnet主机的非标准联系端口号。

3.4.5  输出刷新

    用户的Telnet程序应提供用户设置是否在发送IP时刷新输出的能力；详见第3.2.4节。

    对于任何导致用户Telnet在接收到服务器的Telnet信号之前在本地刷新输出的方案，应提供一种方式让用户手动恢复正常输出，以防服务器未能发送预期的信号。








互联网工程任务组                                [第26页]





RFC1123                  远程登录——TELNET             1989年10月


3.5  TELNET需求总结

以下是英文内容的中文翻译：

```

                                                 |        | | | |S| |
                                                 |        | | | |H| |F
                                                 |        | | | |O|M|o
                                                 |        | |S| |U|U|o
                                                 |        | |H| |L|S|t
                                                 |        |M|O| |D|T|n
                                                 |        |U|U|M| | |o
                                                 |        |S|L|A|N|N|t
                                                 |        |T|D|Y|O|O|t
功能                                              |章节    | | | |T|T|e
-------------------------------------------------|--------|-|-|-|-|-|--
                                                 |        | | | | | |
选项协商                                         |3.2.1   |x| | | | |
  避免协商循环                                   |3.2.1   |x| | | | |
  拒绝不支持的选项                                 |3.2.1   |x| | | | |
  连接时随时进行协商                               |3.2.1   | |x| | | |
  默认使用NVT                                      |3.2.1   |x| | | | |
  在Term-Type选项中发送官方名称                     |3.2.8   |x| | | | |
  接受Term-Type选项中的任何名称                     |3.2.8   |x| | | | |
  实现Binary、Suppress-GA选项                        |3.3.3   |x| | | | |
  支持Echo、Status、EOL、Ext-Opt-List选项            |3.3.3   | |x| | | |
  如果合适，实施Window-Size选项                     |3.3.3   | |x| | | |
  服务器主动发起模式协商                           |3.3.4   | |x| | | |
  用户可以启用/禁用初始化协商                       |3.3.4   | |x| | | |
                                                 |        | | | | | |
Go-Aheads（继续传输信号）                         |        | | | | | |
  非GA服务器协商SUPPRESS-GA选项                     |3.2.2   |x| | | | |
  用户或服务器接受SUPPRESS-GA选项                   |3.2.2   |x| | | | |
  用户的Telnet忽略GA                                |3.2.2   | | |x| | |
                                                 |        | | | | | |
控制功能                                           |        | | | | | |
  支持SE、NOP、DM、IP、AO、AYT、SB                |3.2.3   |x| | | | |
  支持EOR、EC、EL、Break                            |3.2.3   | | |x| | |
  忽略不支持的控制功能                              |3.2.3   |x| | | | |
  用户、服务器丢弃紧急数据至DM                     |3.2.4   |x| | | | |
  用户Telnet在IP、AO、AYT后发送"同步"               |3.2.4   | |x| | | |
  服务器Telnet回复同步到IP                          |3.2.4   | | |x| | |
  服务器Telnet回复同步到AO                          |3.2.4   |x| | | | |
  用户Telnet在发送IP时可以冲洗输出                   |3.2.4   | |x| | | |
                                                 |        | | | | | |
编码                                               |        | | | | | |
  在NVT模式下发送高位比特                            |3.2.5   | | | |x| |
  作为奇偶校验比特发送高位比特                        |        |        |        |        |        |
```

|3.2.5   | | | | |x|  
协商二进制（Negot. BINARY）如果传递高阶位到应用程序 |3.2.5   | |x| | | |  
始终对IAC数据字节进行双倍处理 |3.2.6   |x| | | | |

互联网工程任务组                                [第27页]





RFC1123                  远程登录——TELNET             1989年10月


在二进制模式下的双IAC数据字节            |3.2.7   |x| | | | |
在二进制模式下遵守Telnet命令                |3.2.7   |x| | | | |
在二进制模式下的行结束符，CR NUL             |3.2.7   | | | | |x|
                                                 |        | | | | | |
行结束符（End-of-line）                          |        | | | | | |
  服务器端的EOL与本地端的EOL相同               |3.3.1   |x| | | | |
  ASCII服务器接受CR LF或CR NUL作为EOL          |3.3.1   |x| | | | |
  用户Telnet能够发送CR LF、CR NUL或LF        |3.3.1   |x| | | | |
    ASCII用户能够选择CR LF/CR NUL               |3.3.1   | |x| | | |
    用户Telnet的默认模式为CR LF                |3.3.1   | |x| | | |
  非交互式使用CR LF作为EOL                        |3.3.1   |x| | | | |
                                                 |        | | | | | |
用户Telnet界面                                    |        | | | | | |
  输入和输出全部为7位字符                        |3.4.1   | |x| | | |
  绕过本地操作系统的解释                        |3.4.1   | |x| | | |
  转义字符                                       |3.4.1   |x| | | | |
     用户可设置的转义字符                         |3.4.1   | |x| | | |
  转义以输入8位值                                |3.4.1   | | |x| | |
  可以输入IP、AO、AYT                            |3.4.2   |x| | | | |
  可以输入EC、EL、Break                          |3.4.2   | |x| | | |
  向用户报告TCP连接错误                          |3.4.3   | |x| | | |
  可选的非默认联系端口                            |3.4.4   | |x| | | |
  可以指定：在发送IP时刷新输出                  |3.4.5   | |x| | | |
  可以手动恢复输出模式                            |3.4.5   | |x| | | |
                                                 |        | | | | | |











互联网工程任务组                                [第28页]





RFC1123                   文件传输——FTP              1989年10月


4.  文件传输

   4.1  文件传输协议——FTP

      4.1.1  引言

         文件传输协议（FTP）是互联网文件传输的主要标准。当前的规范载于RFC-959 [FTP:1]。

         FTP使用独立的TCP连接同时进行控制和数据传输。FTP协议包含许多功能，其中一些并不常被实现。然而，对于FTP中的每一项功能，至少存在一种实现。RFC-959中定义的最小实现过于简洁，因此这里定义了一个相对较大的最小实现版本。

多年来，互联网用户一直被不完善的FTP实现所不必要地困扰。协议的实现者们误以为实现FTP是一项简单且琐碎的任务，但这是错误的，因为FTP具有用户界面，必须正确处理各种通信和操作系统错误，并且需要应对世界上各种不同的文件系统。

4.1.2 协议概述

4.1.2.1 本地类型：RFC-959第3.1.1.4节

FTP程序必须支持类型I（“图像”或二进制类型）以及类型L 8（“本地”类型，逻辑字节大小为8）。一个内存以m位字组织的机器（其中m不是8的倍数）也可以支持类型L m。

讨论：
命令“TYPE L 8”通常用于在内存以（例如）36位字组织的机器与以8位字节组织的机器之间传输二进制数据。对于8位字节的机器，TYPE L 8等同于IMAGE。

“TYPE L m”有时会在两个m位字机器上指定，以确保从一台机器到另一台机器的本机二进制文件的正确传输。然而，这个命令在这些机器上的效果应与“TYPE I”相同。

4.1.2.2 Telnet格式控制：RFC-959第3.1.1.5.2节

一个对TYPE N和TYPE T没有区分的主机，应实现TYPE T与TYPE N相同。

讨论：
这一规定应有助于与那些区分这两种类型的主机实现互操作。

许多主机内部将文本文件表示为ASCII字符字符串，使用嵌入的ASCII格式字符（如LF、BS、FF等）来控制文件打印时的格式。对于此类主机，“打印”文件与其他文件没有区别。然而，使用记录结构化文件的系统通常需要为可打印文件提供特殊格式（例如ASA的行车控制）。对于后者的主机，FTP允许选择TYPE N或TYPE T。

4.1.2.3 页面结构：RFC-959第3.1.2.3节及附录I

一般情况下，不建议实现页面结构。然而，如果主机系统确实需要为“随机访问”或“空洞”文件实现FTP，必须采用定义的页面结构格式，而不能定义新的私有FTP格式。

4.1.2.4 数据结构转换：RFC-959第3.1.2节

在记录结构和文件结构之间进行FTP转换时，应尽可能实现可逆性，以确保在目标主机上得到有用的结果。

讨论：
RFC-959要求记录结构和文件结构之间必须严格可逆，但实际上，为了效率和便利，通常难以实现。因此，这一要求正在放宽。传输文件有两个不同的目标：在目标主机上处理，或仅存储。对于存储，严格的可逆性很重要；而对于处理，目标主机上创建的文件需要符合应用程序的预期格式。

举例说明冲突：假设一个面向记录的操作系统要求某些数据文件的每条记录恰好为80字节。在此类主机上存储文件时，FTP服务器必须能够将每行或每条记录填充到80字节；而后续检索此类文件时，不能保证严格的可逆性。

4.1.2.5 数据连接管理：RFC-959第3.3节

使用STREAM模式的用户FTP在每次发出传输命令前，应发送PORT命令以分配非默认的数据端口。

讨论：
这是因为在TCP连接关闭后，直到其套接字对可以重用之前，会有较长的延迟，为了在单个FTP会话中进行多次传输。若使用非流式传输模式，可以避免此问题，只需在传输之间保持数据连接开启。

4.1.2.6 PASV命令：RFC-959第4.1.2节

服务器FTP必须实现PASV命令。

如果在同一会话中需要执行多个第三方传输，必须在每次传输命令前发出新的PASV命令，以获取唯一的端口对。

实现部分：
对PASV命令的227应答格式尚未统一标准化。特别是，FTP客户端不能假设RFC-959第40页所示的括号会出现（实际上，第43页的图3中也省略了它们）。因此，解释PASV应答的用户FTP程序必须扫描应答内容，找到主机和端口号的第一个数字。

请注意，主机号码h1,h2,h3,h4是发送应答的服务器主机的IP地址，而p1,p2是PASV分配的非默认数据传输端口。

4.1.2.7 LIST和NLST命令：RFC-959第4.1.3节

由NLST命令返回的数据必须只包含合法路径名的简单列表，以便服务器可以直接将它们用作后续数据传输命令的参数，用于单个文件。

由LIST或NLST命令返回的数据应使用隐含的TYPE A（ASCII），除非当前类型为EBCDIC，在这种情况下，应使用隐含的TYPE E。

讨论：
许多FTP客户端支持宏命令，可以通过NLST获取匹配通配符的文件列表。扩展“多文件上传”在客户端本地处理，但“多文件下载”则需要服务器配合。

LIST和NLST的隐含类型旨在与现有的用户FTP程序保持兼容，特别是与多文件获取命令兼容。

4.1.2.8 SITE命令：RFC-959第4.1.3节

服务器FTP应使用SITE命令来实现非标准功能，而不是自行开发新的私有命令或对现有命令的非标准扩展。

4.1.2.9 STOU命令：RFC-959第4.1.3节

STOU命令会将文件存储到一个唯一命名的文件中。当服务器收到STOU命令时，必须在传输开始前的“125传输开始”或“150打开数据连接”消息中返回实际的文件名（RFC-959中提到的250应答码是不正确的）。这些消息的确切格式定义如下：

    125 FILE: pppp
    150 FILE: pppp

其中，pppp代表将被写入的唯一文件路径名。

4.1.2.10 Telnet行结束符代码：RFC-959，第34页

实现者不得假设控制连接上的READ边界与Telnet的行结束序列（CR LF）之间存在任何对应关系。

讨论：
因此，服务器FTP（或用户FTP）必须在处理命令（或响应）之前，持续从控制连接读取字符，直到遇到完整的Telnet行结束序列为止。相反，从控制连接进行一次读取可能会包含多个FTP命令。

4.1.2.11 FTP回复：RFC-959第4.2节，第35页

服务器FTP必须在控制连接上只发送格式正确的回复。注意，RFC-959（不同于早期版本的FTP规范）不包含“自发”回复消息的规定。

服务器FTP应在适用时使用RFC-959中定义的回复码。然而，服务器FTP可以在需要时使用不同的回复码，只要遵循第4.2节的总体规则。当实现者在4xx和5xx回复码之间选择时，服务器FTP应在有合理可能性在几小时后成功的情况下，发送4xx（临时失败）码。

用户FTP通常应仅使用三位回复码的最高位数字来做出程序性决策，以避免服务器FTP使用非标准回复码时出现困难。

用户FTP必须能够处理多行回复。如果实现对行数有限制且超过了此限制，用户FTP必须进行恢复，例如，通过忽略多余的行，直到多行回复结束。

用户FTP不应对421回复码（“服务不可用，关闭控制连接”）作特殊解释，但应检测到服务器关闭控制连接。

讨论：
未严格遵守回复规则的服务器实现，常会导致FTP用户程序挂起。注意，RFC-959解决了早期FTP规范中存在的回复规则歧义，必须遵循。

选择正确的FTP应答码非常重要，因为它们能够清楚地区分临时性故障和永久性故障，从而确保文件传输客户端守护进程的正常使用。这些程序依赖应答码来判断是否应重试失败的传输；如果将临时错误误用为永久错误码（5xx），会导致这些程序不必要地放弃传输。

当应答的含义与RFC-959中显示的文本完全一致时，使用原文可以增强一致性。然而，鼓励服务器FTP实现者在适当情况下选择传达特定系统相关信息的应答文本。

4.1.2.12 连接：RFC-959第5.2节

本节第二段中的“以及所用端口”这句话是错误的（历史遗留问题），应予以忽略。

在多网卡服务器主机上，默认的数据传输端口（L-1）必须与控制连接到端口L的本地IP地址相同。

用户FTP不得在FTP控制连接上发送除SYNCH和IP之外的任何Telnet控制命令。特别是，它不得尝试协商Telnet选项。然而，服务器FTP必须能够接受和拒绝Telnet协商（即，发送DONT/WONT）。

讨论：
虽然RFC中提到：“服务器和用户进程应遵循Telnet协议的约定...[在控制连接上]”，但并非意图使用Telnet选项协商。

4.1.2.13 最小实现；RFC-959第5.1节

每个服务器FTP和用户FTP必须支持以下命令和选项，除非底层文件系统或操作系统不允许或不支持某个特定命令。

支持的类型：ASCII非打印字符、IMAGE、LOCAL 8
传输模式：流式
结构：文件、记录*
支持的命令：
USER、PASS、ACCT、
PORT、PASV、
TYPE、MODE、STRU、
RETR、STOR、APPE、
RNFR、RNTO、DELE、
CWD、CDUP、RMD、MKD、PWD

RFC1123  文件传输——FTP  1989年10月

命令列表：
LIST、NLST、SYST、STAT、HELP、NOOP、QUIT。

*仅对支持记录结构的主机的文件系统，才要求使用记录结构。

讨论：
鼓励厂商实现协议的更大子集。例如，协议中有一些重要的鲁棒性特性（如重启（Restart）、中止（ABOR）、块模式（block mode）），这些特性对一些互联网用户非常有帮助，但目前尚未被广泛实现。

没有记录结构的文件系统的主机，仍然可以接受使用STRU R命令的文件，记录字节流会被逐字记录。

4.1.3  特定问题

4.1.3.1  非标准命令动词

FTP允许使用“实验性”命令，其名称以“X”开头。如果这些命令随后被采纳为标准，可能仍会存在使用“X”形式的实现。目前，这一点在目录命令中是成立的：

RFC-959  “实验性”

  MKD        XMKD
  RMD        XRMD
  PWD        XPWD
  CDUP       XCUP
  CWD        XCWD

所有FTP实现应识别这两种形式的命令，只需在命令查找表中添加额外条目，将它们视为等价。

实现建议：
用户FTP（User-FTP）可以通过实现模式切换，或自动采用以下方案，访问只支持“X”形式的服务器：如果上述命令的RFC-959形式被拒绝，返回500或502响应码，则尝试使用实验性形式；任何其他响应都应传递给用户。

互联网工程任务组  [第35页]

RFC1123  文件传输——FTP  1989年10月

4.1.3.2  空闲超时

服务器FTP进程应设有空闲超时机制，如果在长时间内（即没有命令或数据传输进行时）服务器处于非活动状态，则应终止进程并关闭控制连接。空闲超时时间应可配置，默认值应至少为5分钟。

客户端FTP进程（在RFC-959中称为“用户PI”）只有在由程序调用时，才需要对响应设置超时。

讨论：
如果没有超时机制，服务器FTP进程可能会无限期地处于挂起状态，尤其是在对应的客户端崩溃且未关闭控制连接的情况下。

4.1.3.3 数据连接与控制连接的并发性

讨论：
FTP设计的初衷是用户在数据传输过程中可以随时发送STAT命令，服务器FTP会立即以状态信息（例如，已传输的字节数）作出响应。同样，在数据传输过程中，任何时候都应可以发送ABOR命令。

不幸的是，一些小型操作系统使得这种并发编程变得困难，部分实现者为了简化，采取了最小化方案，因此某些FTP实现不允许数据连接和控制连接的同时使用。即使是这样一个最简的服务器，也必须准备好在数据传输期间接受并延迟处理到达的STAT或ABOR命令。

4.1.3.4 FTP重启机制

RFC-959第40-41页关于110回复的描述是不正确的，正确的描述如下：从接收FTP到用户FTP的控制连接发出的重启回复消息，其格式为：

    110 MARK ssss = rrrr

其中：

* ssss 是在数据流中出现的一个文本字符串，表示一个重启标记（Restart Marker），并编码了发件人文件系统中的位置；
* rrrr 编码了接收方文件系统中的对应位置。

这种编码方式是特定于某一文件系统和网络实现的，始终由同一系统（发件方或收件方）生成和解释。

当实现重启功能的FTP在数据流中收到重启标记时，应强制将到该点的数据写入稳定存储，然后再编码对应位置 rrrr。发送重启标记的FTP不得假设110回复会与数据同步返回，即不得在发送更多数据之前等待110回复。

此外，特此定义两种新的回复代码，用于在重启传输时遇到的错误：

  554 请求的操作未执行：无效的REST参数。

一个 554 的回复可能是由跟随 REST 命令的 FTP 服务命令引起的。该回复表示服务器上的现有文件无法按照 REST 指定的位置重新定位。

555 请求的操作未执行：类型或结构不匹配。

一个 555 的回复可能由 APPE 命令或任何在 REST 命令之后的 FTP 服务命令引起。该回复表明当前的传输参数（类型和结构）与现有文件的属性之间存在某些不匹配。

讨论：
请注意，FTP 重启机制要求在数据传输中使用块模式或压缩模式，以便在数据流中包含重启标记。重启标记的频率可以很低。

重启标记标记数据流中的某个位置，但接收方在将数据存储到稳定存储中时，可能会对数据进行某些转换。通常，接收方的编码必须包含任何必要的状态信息，以便在 FTP 数据流的任何点重新启动此转换。例如，在 TYPE A 传输中，一些接收主机会将 CR LF 序列转换为磁盘上的单个 LF 字符。如果重启标记恰好位于 CR 和 LF 之间，接收方必须在编码中指明在“已看到并丢弃 CR”状态下必须重新开始传输。

请注意，无论数据类型如何，重启标记都必须编码为一串可打印的 ASCII 字符。

RFC-959 规定，重启信息应“返回给用户”。但这不应被字面理解。通常，用户 FTP（User-FTP）应将重启信息（ssss, rrrr）存储在稳定存储中，例如，将其附加到重启控制文件中。当传输首次开始时，应创建一个空的重启控制文件，并在传输成功完成后自动删除。建议该文件的名称应以一种易于识别的方式，从被传输文件的名称和远程主机的名称派生；这类似于许多文本编辑器用来命名“备份”文件的方法。

FTP 重启有三种情况。

(1) 用户到服务器的传输

用户FTP在数据流中放置重启标记<ssss>，以便于在合适的位置进行标记。当服务器FTP接收到一个标记时，它会将之前的所有数据写入磁盘，编码其文件系统位置和变换状态为rrrr，并通过控制连接返回“110 MARK ssss = rrrr”的应答。用户FTP会将（ssss, rrrr）对追加到其重启控制文件中。

为了重新开始传输，用户FTP会从重启控制文件中获取最后的（ssss, rrrr）对，使用ssss重新定位其本地文件系统和变换状态，并发送命令“REST rrrr”给服务器FTP。

(2) 服务器到用户的传输

服务器FTP在数据流中放置重启标记<ssss>，以便于在合适的位置进行标记。当用户FTP接收到一个标记时，它会将之前的所有数据写入磁盘，编码其文件系统位置和变换状态为rrrr，并将（rrrr, ssss）对追加到其重启控制文件中。

为了重新开始传输，用户FTP会从重启控制文件中获取最后的（rrrr, ssss）对，使用rrrr重新定位其本地文件系统和变换状态，并发送命令“REST ssss”给服务器FTP。

(3) 服务器到服务器（“第三方”）传输

发送方服务器FTP在数据流中放置重启标记<ssss>，以便于在合适的位置进行标记。当接收方服务器FTP收到一个标记时，它会将之前的所有数据写入磁盘，编码其文件系统位置和变换状态为rrrr，并通过控制连接向用户发送“110 MARK ssss = rrrr”的应答。用户FTP会将（ssss, rrrr）对追加到其重启控制文件中。

为了重新开始传输，用户FTP会从重启控制文件中获取最后的（ssss, rrrr）对，向发送方服务器FTP发送“REST ssss”，并向接收方服务器FTP发送“REST rrrr”。

4.1.4 FTP/用户界面

本节讨论用户FTP程序的用户界面。

4.1.4.1 路径名规范

由于FTP旨在用于异构环境，用户FTP实现必须支持远程路径名作为任意字符字符串，以便其形式和内容不受本地操作系统约定的限制。

讨论：
特别是，远程路径名可以是任意长度，并且必须允许所有打印ASCII字符以及空格（0x20）。RFC-959允许路径名包含任何7位ASCII字符，除了回车（CR）和换行（LF）。

互联网工程任务组                                [第39页]

RFC1123                   文件传输——FTP              1989年10月

4.1.4.2  “QUOTE”命令

用户FTP程序必须实现一个“QUOTE”命令，该命令可以将任意字符字符串传递给服务器，并将所有响应消息显示给用户。

为了使“QUOTE”命令具有实用性，用户FTP应在用户输入命令时立即将传输控制命令发送给服务器，而不是将所有命令保存起来，等到开始数据传输时再一次性发送。

讨论：
“QUOTE”命令对于允许用户访问需要系统特定命令（例如，SITE或ALLO）或调用未由用户FTP实现的新功能或可选功能的服务器至关重要。例如，“QUOTE”可以用来指定“TYPE A T”以将打印文件发送到需要区分的主机，即使用户FTP不识别该“TYPE”。

4.1.4.3  向用户显示应答

用户FTP应向用户显示其收到的所有错误应答消息的完整文本。它应具有“详细”模式，在该模式下，所有发送的命令以及接收到的完整文本和应答码都将显示，以便进行故障诊断。

4.1.4.4  维护同步

用户FTP中的状态机应对缺失和意外的应答消息表现得宽容，以保持与服务器的命令同步。

互联网工程任务组                                [第40页]

RFC1123                   文件传输——FTP              1989年10月

4.1.5  FTP需求总结

以下是该英文内容的中文翻译：

```
                                           |               | | | |S| |
                                           |               | | | |H| |F
                                           |               | | | |O|M|o
                                           |               | |S| |U|U|o
                                           |               | |H| |L|S|t
                                           |               |M|O| |D|T|n
                                           |               |U|U|M| | |o
                                           |               |S|L|A|N|N|t
                                           |               |T|D|Y|O|O|t
功能                                       |章节           | | | |T|T|e
-------------------------------------------|---------------|-|-|-|-|-|--
如果类型N相同，则实现TYPE T             |4.1.2.2        | |x| | | |
文件/记录转换可逆（如果可能）             |4.1.2.4        | |x| | | |
用户FTP在流模式下发送PORT命令             |4.1.2.5        | |x| | | |
服务器FTP实现PASV模式                     |4.1.2.6        |x| | | | |
  PASV为每次传输设置                     |4.1.2.6        |x| | | | |
NLST回复可用于RETR命令                     |4.1.2.7        |x| | | | |
LIST和NLST的隐含类型                       |4.1.2.7        | |x| | | |
用于非标准功能的SITE命令                   |4.1.2.8        | |x| | | |
STOU命令返回指定路径名                     |4.1.2.9        |x| | | | |
在控制连接上使用TCP读取边界               |4.1.2.10       | | | | |x|
                                           |               | | | | | |
服务器FTP仅发送正确的回复格式               |4.1.2.11       |x| | | | |
服务器FTP在可能的情况下使用定义的回复码     |4.1.2.11       | |x| | | |
  新的回复码遵循第4.2节                     |4.1.2.11       | | |x| | |
用户FTP仅使用回复的高位数字                 |4.1.2.11       | |x| | | |
用户FTP处理多行回复                         |4.1.2.11       |x| | | | |
用户FTP特别处理421回复                     |4.1.2.11       | | | |x| |
                                           |               | | | | | |
默认数据端口与控制连接相同IP地址           |4.1.2.12       |x| | | | |
用户FTP发送Telnet命令（如SYNCH、IP）        |4.1.2.12       | | | | |x|
用户FTP协商Telnet选项                        |4.1.2.12       | | | | |x|
服务器FTP处理Telnet选项                      |4.1.2.12       |x| | | | |
处理“实验性”目录命令                         |4.1.3.1        | |x| | | |
服务器FTP空闲超时                           |4.1.3.2        | |x| | | |
    可配置的空闲超时                         |4.1.3.2        | |x| | | |
在重启标记处接收检查点数据                 |4.1.3.4        | |x| | | |
发送端假设110回复是同步的                   |4.1.3.4        | | | | |x|
                                           |               | | | | | |
支持的TYPE：                                |               | | | | | |
  ASCII - 非打印字符（AN）                   |4.1.2.13       |x| | | | |
  ASCII - Telnet（AT）——如果与AN相同        |4.1.2.2        | |x| | | |
  ASCII
```

- 车厢控制（AC）            |959 3.1.1.5.2  | | |x| | |
- EBCDIC（任何形式）                      |959 3.1.1.2    | | |x| | |
- 图像                                    |4.1.2.1        |x| | | | |
- 本地8                                   |4.1.2.1        |x| | | | |

互联网工程任务组                                [第41页]

RFC1123                   文件传输——FTP              1989年10月

本地 m                                  |4.1.2.1        | | |x| | |2
                                           |               | | | | | |
支持模式：                                |               | | | | | |
  流式（Stream）                         |4.1.2.13       |x| | | | |
  块（Block）                            |959 3.4.2      | | |x| | |
                                           |               | | | | | |
支持结构：                                |               | | | | | |
  文件（File）                            |4.1.2.13       |x| | | | |
  记录（Record）                          |4.1.2.13       |x| | | | |3
  页面（Page）                            |4.1.2.3        | | | |x| |
                                           |               | | | | | |
支持命令：                                |               | | | | | |
  用户（USER）                            |4.1.2.13       |x| | | | |
  密码（PASS）                            |4.1.2.13       |x| | | | |
  账户（ACCT）                            |4.1.2.13       |x| | | | |
  改变工作目录（CWD）                     |4.1.2.13       |x| | | | |
  上级目录（CDUP）                        |4.1.2.13       |x| | | | |
  监控（SMNT）                            |959 5.3.1      | | |x| | |
  重新登录（REIN）                        |959 5.3.1      | | |x| | |
  退出（QUIT）                            |4.1.2.13       |x| | | | |
                                           |               | | | | | |
  端口（PORT）                            |4.1.2.13       |x| | | | |
  被动（PASV）                            |4.1.2.6        |x| | | | |
  类型（TYPE）                            |4.1.2.13       |x| | | | |1
  结构（STRU）                            |4.1.2.13       |x| | | | |1
  模式（MODE）                            |4.1.2.13       |x| | | | |1
                                           |               | | | | | |
  下载（RETR）                            |4.1.2.13       |x| | | | |
  上传（STOR）                            |4.1.2.13       |x| | | | |
  追加（STOU）                            |959 5.3.1      | | |x| | |
  追加（APPE）                            |4.1.2.13       |x| | | | |
  预留空间（ALLO）                        |959 5.3.1      | | |x| | |
  续传（REST）                            |959 5.3.1      | | |x| | |
  重命名（RNFR）                          |4.1.2.13       |x| | | | |
  重命名到（RNTO）                        |4.1.2.13       |x| | | | |
  中止（ABOR）                            |959 5.3.1      | | |x| | |
  删除（DELE）                            |4.1.2.13       |x| | | | |
  删除目录（RMD）                         |4.1.2.13       |x| | | | |
  创建目录（MKD）                         |4.1.2.13       |x| | | | |
  当前目录（PWD）                         |4.1.2.13       |x| | | | |
  列表（LIST）                            |4.1.2.13       |x| | | | |
  文件列表（NLST）                        |4.1.2.13       |x| | | | |
  站点（SITE）                            |               |   |   |   |   |

```
                               |4.1.2.8        | | |x| | |
  STAT                                     |4.1.2.13       |x| | | | |
  SYST                                     |4.1.2.13       |x| | | | |
  HELP                                     |4.1.2.13       |x| | | | |
  NOOP                                     |4.1.2.13       |x| | | | |
                                           |               | | | | | |
```

互联网工程任务组                                [第42页]





RFC1123                   文件传输——FTP              1989年10月


用户界面：                            |               | | | | | |
  任意路径名                            |4.1.4.1        |x| | | | |
  实现“QUOTE”命令                      |4.1.4.2        |x| | | | |
  立即传输控制命令                      |4.1.4.2        | |x| | | |
  向用户显示错误信息                    |4.1.4.3        | |x| | | |
    详细模式                            |4.1.4.3        | |x| | | |
  与服务器保持同步                      |4.1.4.4        | |x| | | |

脚注：

(1)  指前面显示的数值。

(2)  这里 m 表示一个存储字的位数。

(3)  对于具有记录结构文件系统的主机是必需的，否则为可选。



































互联网工程任务组                                [第43页]





RFC1123                  文件传输——TFTP              1989年10月


   4.2  简易文件传输协议——TFTP

      4.2.1  介绍

         简易文件传输协议（TFTP）在RFC-783 [TFTP:1]中定义。

         TFTP 使用UDP作为传输协议，提供自身的可靠传输，采用简单的停止等待确认系统。由于TFTP的有效窗口只有一个512字节的数据段，因此只能在具有较小延迟*带宽积的路径上提供良好的性能。TFTP的文件接口非常简单，不提供访问控制或安全性。

         TFTP最重要的应用是通过局域网引导主机，因为它简单且足够小，易于在EPROM中实现 [BOOT:1, BOOT:2]。建议厂商支持TFTP用于引导。

      4.2.2  协议流程

         TFTP规范 [TFTP:1]采用开放式写作风格，未完全定义协议的许多部分。

         4.2.2.1  传输模式：RFC-783，第3页

            不应支持“邮件”传输模式。

         4.2.2.2  UDP头部：RFC-783，第17页

            UDP头部的长度字段定义错误；它包括UDP头部长度（8字节）。

      4.2.3  具体问题

         4.2.3.1  巫师学徒综合症

            协议规范中存在一个严重的漏洞，称为“巫师学徒综合症”。虽然它不会导致传输操作错误（只要传输完成，文件总是能正确传输），但这个漏洞可能引起过多的重传，导致传输超时。

实现必须包含对此问题的修复：发送方（即发起DATA包的一方）在收到重复确认（ACK）时，绝不能重新发送当前的DATA包。

讨论：
这个漏洞是由协议规则引起的，即任何一方在收到旧的重复数据报时，都可以重新发送当前的数据报。如果一个数据包在网络中被延迟，但在双方都超时并重新传输数据包后成功送达，可能会生成一个响应的重复副本。如果另一方对这个重复响应也发出一个重复的响应，那么在剩余的传输过程中，每个数据报都将被重复发送（除非某个数据报丢失，打破这种重复）。更糟的是，由于延迟通常由网络拥塞引起，这种重复传输通常会导致更多的拥塞，从而引发更多的延迟包，形成恶性循环。

以下示例可能有助于澄清这个问题。

示例：
```
TFTP A                  TFTP B

(1)  接收 ACK X-1
     发送 DATA X
(2)                          接收 DATA X
                                发送 ACK X
        （ACK X 在网络中延迟，
         A 超时后重新发送）：
(3)  重传 DATA X

(4)                          再次接收 DATA X
                                再次发送 ACK X
(5)  接收（延迟的）ACK X
     发送 DATA X+1
(6)                          接收 DATA X+1
                                发送 ACK X+1
(7)  再次接收 ACK X
     再次发送 DATA X+1
(8)                          再次接收 DATA X+1
                                再次发送 ACK X+1
(9)  接收 ACK X+1
     发送 DATA X+2
(10)                         接收 DATA X+2
                                发送 ACK X+3
(11) 接收 ACK X+1（重复）
     再次发送 DATA X+2
(12)                         再次接收 DATA X+2
                                再次发送 ACK X+3
```

请注意，一旦延迟确认（ACK）到达，协议就会稳定下来，开始重复接收后续的所有数据包（序列号为5-8和9-12）。这个问题并不是由任一方超时引起的，而是因为双方在收到重复包时都重新传输了当前的数据包。

解决方法是打破重传循环，如上所述。这与TCP的行为类似。这样一来，就可以移除接收方的重传定时器，因为重发的确认应答（ACK）不会引发任何动作；这在使用TFTP作为引导程序时是一个有用的简化措施。当然，允许定时器继续存在也是可以的，如果重传的确认应答取代了在网络中真正丢失的应答，这可能会有所帮助。当然，发送方仍然需要一个重传定时器。

4.2.3.2 超时算法

TFTP实现必须使用自适应超时机制。

实现建议：
TCP的重传算法提供了一个有用的基础。至少应采用指数退避（exponential backoff）策略来调整重传超时时间。

4.2.3.3 扩展

对TFTP已进行了多种非标准扩展，包括额外的传输模式和安全操作模式（带密码）。这些扩展都尚未标准化。

4.2.3.4 访问控制

TFTP服务器的实现应包括一些可配置的访问控制措施，以限制允许进行TFTP操作的路径名。

4.2.3.5 广播请求

向广播地址发出的TFTP请求应被静默忽略。

讨论：
由于TFTP的访问控制能力较弱，向随机网络发送TFTP请求的广播可能会造成严重的安全漏洞。

4.2.4 TFTP需求总结

以下是英文内容的中文翻译：

```
                                                 |        | | | |S| |
                                                 |        | | | |H| |F
                                                 |        | | | |O|M|o
                                                 |        | |S| |U|U|o
                                                 |        | |H| |L|S|t
                                                 |        |M|O| |D|T|n
                                                 |        |U|U|M| | |o
                                                 |        |S|L|A|N|N|t
                                                 |        |T|D|Y|O|O|t
功能                                              |章节    | | | |T|T|e
-------------------------------------------------|--------|-|-|-|-|-|--
修复巫师学徒综合症                                |4.2.3.1 |x| | | | |
传输模式：                                        |        | | | | | |
  netascii                                       |RFC-783 |x| | | | |
  octet                                          |RFC-783 |x| | | | |
  邮件                                           |4.2.2.1 | | | |x| |
  扩展                                           |4.2.3.3 | | |x| | |
使用自适应超时                                    |4.2.3.2 |x| | | | |
可配置访问控制                                    |4.2.3.4 | |x| | | |
静默忽略广播请求                                  |4.2.3.5 | |x| | | |
-------------------------------------------------|--------|-|-|-|-|-|--

-------------------------------------------------|--------|-|-|-|-|-|--



























互联网工程任务组                                    [第47页]





RFC1123                  邮件 -- SMTP 和 RFC-822             1989年10月


5.  电子邮件 -- SMTP 和 RFC-822

   5.1  引言

      在 TCP/IP 协议族中，电子邮件采用 RFC-822 [SMTP:2] 指定的格式
      进行传输，使用在 RFC-821 [SMTP:1] 中定义的简单邮件传输协议（SMTP）。

      虽然 SMTP 多年来一直保持不变，但互联网社区在使用方式上
      做出了若干变化。特别是，向域名系统（DNS）的转换
      导致了地址格式和邮件路由的变化。在本节中，我们假设读者
      熟悉 DNS 的概念和术语，其要求在第6.1节中给出。

      RFC-822 指定了电子邮件消息的互联网标准格式。RFC-822
      取代了较早的标准 RFC-733，后者在少数地方仍在使用，但
      已过时。这两种格式有时被简称为“822”和“733”。
```

RFC-822 在一些非互联网邮件环境中也被使用，这些环境采用不同于 SMTP 的邮件传输协议；同时，SMTP 也已被改编用于某些非互联网环境。请注意，本文件仅介绍在互联网环境中使用 SMTP 和 RFC-822 的规则；在使用这些协议的其他邮件环境中，可能会有各自的规则。

5.2 协议流程介绍

本节涵盖 RFC-821 和 RFC-822 两个规范。

RFC-821 中的 SMTP 规范内容清晰，包含大量示例，因此实现者应不难理解。本节仅对 RFC-821 的部分内容进行更新或注释，以符合当前的使用情况。

RFC-822 是一份内容丰富、语法复杂的长篇文档。不幸的是，RFC-822 的实现常常不完整或存在缺陷。实际上，RFC-822 中的多种格式都在实际中被使用，因此实现通常需要识别并正确解释所有的 RFC-822 语法。

5.2.1 SMTP 模型：RFC-821 第2节

讨论：
邮件通过客户端（“发件人 SMTP”）与服务器（“收件人 SMTP”）之间的一系列请求/响应事务进行传输。这些事务包括（1）邮件本体，即由头部和正文组成，以及（2）SMTP 源地址和目标地址，统称为“信封”。

SMTP 程序类似于 X.400 的消息传输代理（MTA）。在更接近终端用户的层面上，还存在另一层协议软件，负责组成和分析 RFC-822 消息头部；在本文件中，这一部分被称为“用户代理”。用户代理与 SMTP 实现之间有明确的逻辑区分，因为它们操作在不同的协议层级上。然而，需要注意的是，这一区分在典型的互联网邮件实现中可能并不完全体现。通常会有一个被称为“邮件程序”的程序，既实现 SMTP，也承担部分用户代理功能；其余的用户代理功能则包含在用于收发邮件的用户界面中。

SMTP信封是在发起端构建的，通常由用户代理在消息首次排队给发件人SMTP程序时完成。信封地址可能来自消息头中的信息，由用户界面提供（例如，用于实现密件抄送（bcc:）请求），或者来自本地配置（例如，扩展邮件列表）。一般来说，SMTP信封不能在消息传递的后续阶段从消息头中重新推导出来，因此信封会通过SMTP的MAIL和RCPT命令与消息本体分开传输。

RFC-821的正文建议邮件应投递给某个主机上的特定用户。随着域名系统（DNS）和使用邮件交换（MX）资源记录进行邮件路由的出现，实施者现在应考虑将邮件投递到某个域中的用户，而不一定是特定的主机。这并不改变SMTP作为主机到主机邮件交换协议的本质。

5.2.2 规范化：RFC-821第3.1节

发件人SMTP在MAIL和RCPT命令中发送的域名必须经过“规范化”，即它们必须是完全限定的主机名或域名字面值，而不能是昵称或域名缩写。规范化的名称要么直接标识一个主机，要么是MX记录的名称；不能是CNAME。

5.2.3 VRFY和EXPN命令：RFC-821第3.3节

接收端SMTP必须实现VRFY命令，并应实现EXPN命令（此要求优先于RFC-821的规定）。然而，某些配置可能会禁用VRFY和EXPN，甚至允许在特定列表中禁用EXPN。

为VRFY命令定义了一个新的回复代码：

    252 无法VRFY用户（例如，信息不在本地），但会接受该用户的消息并尝试投递。

讨论：
SMTP用户和管理员经常使用这些命令来诊断邮件投递问题。随着多级邮件列表扩展（有时超过两级）的普及，EXPN在诊断无意中形成的邮件循环方面变得越来越重要。另一方面，有些人认为，EXPN可能带来隐私甚至安全方面的风险。

5.2.4  SEND、SOML和SAML命令：RFC-821第3.4节

一个SMTP服务器可以实现用于将消息发送到用户终端的命令：SEND、SOML和SAML。

讨论：
有人提出，通过MX记录进行邮件中继的做法与SEND旨在立即且直接将消息传递到用户终端的意图不符。然而，一个无法直接写入用户终端的SMTP接收方，可以在收到SEND命令后，向RCPT命令返回“251 User Not Local”回复，以通知发件人可能会延迟投递。

5.2.5 HELO命令：RFC-821第3.5节

发件方SMTP必须确保HELO命令中的<domain>参数是客户端主机的有效主机域名。因此，接收方SMTP无需对该名称进行MX解析以验证HELO参数。

接收方SMTP可以验证HELO参数是否确实对应于发件方的IP地址。然而，即使验证失败，接收方也不得拒绝接受该消息。

讨论：
验证HELO参数需要进行域名查找，可能会耗费较多时间。下面建议一种追踪虚假邮件源的替代工具（参见“DATA命令”）。

还应注意，HELO参数仍需符合有效的<domain>语法，因为它会出现在Received:行中；否则，应返回501错误。

实现：
当HELO参数验证失败时，建议在消息头中插入一条关于发件人身份不明的说明（例如，在“Received:”行中）。

5.2.6 邮件中继：RFC-821第3.6节

我们区分三种类型的邮件（存储和）转发：

（1） 简单转发器或“邮件交换机”使用关于收件人的私有知识转发消息；详见RFC-821第3.2节。

（2） SMTP邮件“中继”在SMTP邮件环境中转发消息，作为明确源路由的结果（定义见RFC-821第3.6节）。SMTP中继功能使用RFC-822中的“@...:”形式的源路由（见第5.2.19节）。

（3） 邮件“网关”在不同环境之间传递消息。关于邮件网关的规则将在第5.3.7节中讨论。

一个仅转发消息但不是通往不同邮件环境的网关的互联网主机（即属于（1）或（2）类）不应更改任何现有的头字段，尽管该主机会根据第5.2.8节的要求添加一条适当的Received:行。

发件人SMTP不应使用包含显式源路由的“@...:”地址格式发送RCPT TO:命令。因此，RFC-821第3.6节中定义的中继功能不应被使用。

讨论：
    其目的是为了阻止所有源路由，并废除在互联网环境中用于邮件投递的显式源路由。源路由是不必要的；简单的目标地址“user@domain”应当总是足够。这是基于一个明确的架构决策，即使用通用命名而非源路由进行邮件传递。因此，SMTP提供端到端的连接性，而DNS提供全球唯一、与位置无关的名称。MX记录处理了在没有源路由的情况下的主要场景。

接收SMTP必须接受信封中的显式源路由语法，但可以实现RFC-821第3.6节定义的中继功能。如果不实现中继功能，应尝试直接将消息投递到“@”符号右侧的正确主机。

讨论：
    例如，假设一个不支持中继功能的主机收到一条SMTP命令：“RCPT TO:<@ALPHA,@BETA:joe@GAMMA>”，其中ALPHA、BETA和GAMMA代表域名。该主机不应立即以550错误码拒绝该消息，而应尝试直接将消息转发到GAMMA，使用：“RCPT TO:<joe@GAMMA>”。由于该主机不支持中继，不需要更新反向路径。

有人建议，偶尔可能需要源路由以手动绕过故障进行邮件路由；然而，这一需求的实际性和重要性存在争议。为此目的使用显式SMTP中继是不鼓励的，实际上也可能不成功，因为许多主机系统不支持它。有些人使用“%-hack”（参见第5.2.16节）来实现这一目的。

5.2.7 RCPT命令：RFC-821第4.1.1节

支持接收方SMTP的主机必须支持保留邮箱“Postmaster”。

接收方SMTP可以在RCPT参数到达时进行验证；然而，RCPT响应不得延迟超过合理时间（参见第5.3.2节）。

因此，对RCPT的“250 OK”响应并不一定意味着收件地址是有效的。在消息被接受后发现的错误，将通过向适当的地址邮寄通知消息来报告（参见第5.3.3节）。

讨论：
    在什么条件下可以立即验证RCPT参数，是一种工程设计选择。通常，为了节省时间和网络带宽，建议在邮件传输之前向发件方SMTP报告邮箱错误，但如果RCPT验证耗时较长，这种优势就会丧失。

    例如，接收方可以立即验证任何简单的本地引用，比如单个本地注册的邮箱。另一方面，“合理时间”的限制通常意味着在消息传输和接受之后，才对邮件列表进行验证，因为验证一个大型邮件列表可能需要很长时间。实现可以选择是否推迟验证非本地地址（因为这些地址需要进行DNS查找）。如果进行了DNS查找，但发生了软域名系统错误（如超时），则必须假定地址有效。

5.2.8 DATA命令：RFC-821第4.1.1节

每个接收方SMTP（不仅仅是“接受转发或最终投递消息的”SMTP）必须在消息开头插入一行“Received:”。在RFC-821中，这一行被称为“时间戳行”：

*    FROM字段应包含（1）在HELO命令中提供的源主机名，以及（2）由TCP连接确定的源IP地址的域名字面值。

*    ID字段可以包含“@”符号，建议参考RFC-822，但不是强制的。

*    FOR字段在给出多个RCPT命令时，可以包含一系列<path>条目。

一台互联网邮件程序不得更改之前已添加到消息头中的Received:行。

讨论：
在Received:行中同时包含源主机和IP源地址，可能提供足够的信息用于追踪非法邮件源，从而无需明确验证HELO参数。

Received:行主要用于人工追踪邮件路径，主要用于故障诊断。另请参见第5.3.7节的讨论。

当接收方SMTP完成“最终投递”一封邮件时，必须将SMTP信封中的MAIL FROM:地址一并传递，以便在稍后需要发送错误通知时使用（见第5.3.3节）。在从互联网网关到不同邮件环境的转发过程中，也有类似的要求；详见第5.3.7节。

讨论：
请注意，对DATA命令的最终回复仅取决于消息的成功传输和存储。任何关于目标地址的问题，必须要么（1）在对RCPT命令的SMTP错误回复中报告，要么（2）在稍后的错误邮件中通知发件人。

实现：
MAIL FROM:信息可以作为参数传递，也可以在消息开头插入一行Return-Path:来传递。

5.2.9 命令语法：RFC-821第4.1.2节

RFC-821中显示的MAIL FROM:命令语法省略了空路径的情况：“MAIL FROM: <>”（见RFC-821第15页）。必须支持空反向路径。

5.2.10 SMTP回复：RFC-821第4.2节

接收方SMTP应只发送RFC-821第4.2.2节或本文档中列出的回复代码。接收方SMTP应在适当情况下使用RFC-821示例中的文本。

发件方SMTP必须仅通过回复代码来决定其行为，而不能依赖文本（除非是251和551回复）；任何文本，包括没有文本，都是可以接受的。回复代码后面的空格（空白）被视为文本的一部分。尽可能地，发件方SMTP应只测试回复代码的首位数字，具体见RFC-821附录E的规定。

讨论：
使用未在RFC-821第4.3节中明确列出但根据附录E中解释的回复码理论是合法的，可能会导致SMTP系统之间的互操作性问题。

5.2.11 透明性：RFC-821第4.5.2节

实现者必须确保他们的邮件系统始终添加和删除句点，以确保消息的透明性。

5.2.12 MX处理中的WKS使用：RFC-974，第5页

RFC-974 [SMTP:3]建议对域名系统进行查询，以获取WKS（“知名服务”）记录，以验证每个拟议的邮件目标是否支持SMTP。后续经验表明，WKS并不被广泛支持，因此在MX处理中的WKS步骤不应使用。

以下是关于RFC-822的说明，按该文档的章节整理。

5.2.13 RFC-822消息规范：RFC-822第4节

返回路径（Return-path）行的语法显示中，省略了空返回路径的可能性，而空返回路径用于防止错误通知的循环（见第5.3.3节）。完整的语法应为：

    return = "Return-path" ":" route-addr
           / "Return-path" ":" "<>"

可选头字段的集合在此扩展，包括RFC-1049 [SMTP:7]中定义的Content-Type字段。该字段“允许邮件阅读系统自动识别结构化消息体的类型，并据此进行显示处理”。[SMTP:7] 用户代理可以支持此字段。

5.2.14 RFC-822日期和时间规范：RFC-822第5节

日期的语法现更改为：

    date = 1*2DIGIT month 2*4DIGIT

所有邮件软件应使用4位数的年份，以便顺利过渡到下一个世纪。

目前有强烈趋势使用数字时区指示符，实施应使用数字时区而非时区名称。然而，所有实现都必须接受两者的表示方式。如果使用时区名称，则必须完全符合RFC-822中的定义。

RFC-822中关于军用时区的定义不正确：它们的计数方式从UTC开始是反的（符号相反）。因此，RFC-822头中的军用时区没有实际信息。

最后，请注意附录D的语法摘要中“zone”定义存在拼写错误，正确的定义在RFC-822第3节中。

5.2.15 RFC-822语法变更：RFC-822第6.1节

RFC-822中“邮箱”（mailbox）的语法定义现更改为：

    mailbox = addr-spec             ; 简单地址
            / [phrase] route-addr   ; 姓名和地址

也就是说，前置于路由地址的短语现在是可选的。这一变更使得以下头字段合法，例如：

来自：<craig@nnsc.nsf.net>

5.2.16  RFC-822 本地部分：RFC-822 第6.2节

基本的邮箱地址规范格式为：“local-part@domain”。其中“local-part”，有时也称为地址的“左侧部分”，是依赖于域的。

一个转发消息但不是由右侧“domain”所指示的目标主机的主机，必须不得解释或修改地址中的“local-part”。

当邮件从互联网邮件环境转发到外部邮件环境（参见第5.3.7节）时，可以在该地址的“local-part”中嵌入该外部环境的路由信息。然后，网关会根据该外部邮件环境适当地解释这个本地部分。

讨论：
虽然在互联网中不鼓励使用源路由（参见第5.2.6节），但仍存在一些非互联网邮件环境，其投递机制依赖源路由。在互联网传输过程中，外部环境的源路由信息通常可以隐藏在地址的“local-part”中（参见第5.2.16节）。当邮件到达相应的互联网邮件网关时，网关会解析“local-part”，并为目标邮件环境构建必要的地址或路由。

例如，一个互联网主机可能会发送如下邮件：
“a!b!c!user@gateway-domain”。复杂的“local-part”部分“a!b!c!user”在互联网域中不会被解释，但可以被指定的邮件网关解析和理解。

有时，嵌入的源路由会用“%”作为右结合路由操作符编码在“local-part”中。例如，在：
user%domain%relay3%relay2@relay1
中，“%”符号意味着邮件应从“relay1”经过“relay2”、“relay3”，最终到达“domain”中的“user”。这通常被称为“%-hack”。建议“%”的优先级低于“!”等其他隐藏在“local-part”中的路由操作符。例如，“a!b%c”应被解释为“(a!b)%c”。

只有目标主机（在此例中为“relay1”）被允许分析“local-part”中的“user%domain%relay3%relay2”。

一台邮件客户端必须能够接受并解析包含点十进制主机地址内容（“dtext”；参见 RFC-822）的互联网域名字面值。这满足了第2.1节关于邮件的要求。

一台SMTP服务器必须接受并识别其自身任何IP地址的域名字面值。

互联网工程任务组（Internet Engineering Task Force）                                [第57页]

RFC1123                  邮件——SMTP与RFC-822             1989年10月

5.2.18  常见地址格式错误：RFC-822第6.1节

在格式或解析RFC-822地址时，错误是相当常见的。本节仅提及最常见的错误。用户代理（User Agent）必须接受所有有效的RFC-822地址格式，并且不得生成非法的地址语法。

- 一个常见的错误是在组标识符后遗漏分号。

- 一些系统在生成消息时未能完全限定域名。头部地址字段中“@”符号右侧的内容必须是完全限定的域名。

  例如，一些系统未能完全限定“From:”地址；这会阻止用户界面中的“回复”命令自动构造返回地址。

  讨论：
  虽然RFC-822允许在某个域内本地使用缩写的域名，但在互联网邮件中应用RFC-822时不允许这样做。其意图是，互联网主机不得在地址字段中发送包含缩写域名的SMTP消息头。这允许地址字段在整个互联网传递时不被更改，如第5.2.6节所要求。

- 一些系统错误地解析多跳显式源路由，例如：

  ```
  @relay1,@relay2,@relay3:user@domain
  ```

- 一些系统在地址或消息ID中多加尾随点，过度限定域名。这违反了RFC-822的语法。

5.2.19  显式源路由：RFC-822第6.2.7节

互联网主机软件不应创建包含显式源路由地址的RFC-822头部，但必须接受此类头部以兼容早期系统。

讨论：

在一定程度上，RFC-822 仅是轻描淡写地指出“建议不要使用显式源路由”。许多主机错误地实现了RFC-822中的源路由，因此在实际中无法明确无歧义地使用其语法。许多用户觉得这种语法难看。显式源路由在邮件信封中并非传递所必需；详见第5.2.6节。基于这些原因，使用RFC-822标记的显式源路由在互联网邮件头中不应使用。

正如第5.2.16节所述，为了允许邮件通过网关进入需要显式源路由的其他环境，有必要在地址的本地部分（例如使用“%-hack”）中嵌入显式源路由。警惕的人会注意到，用户代理（User Agent）无法检测或阻止在目的地位于互联网内时使用此类隐式源路由。我们只能劝阻在互联网中使用任何形式的源路由，因为它既不必要又不受欢迎。

5.3 具体问题

5.3.1 SMTP 队列策略

主机SMTP实现的常见结构包括：用户邮箱、一个或多个用于中转消息的队列区域，以及一个或多个用于发送和接收邮件的守护进程。具体结构会根据主机用户的需求以及支持的邮件列表的数量和规模而有所不同。我们描述几种已被证明有帮助的优化措施，特别是针对支持高流量的邮件系统。

任何队列策略都必须包括：

- 所有活动的超时设置。详见第5.3.2节。
- 不要对错误消息作出响应。

5.3.1.1 发送策略

发件人SMTP的基本模型是一个或多个进程，定期尝试传输外发邮件。在典型系统中，负责撰写邮件的程序会有某种请求立即处理新邮件的方法，而无法立即传输的邮件必须被排入队列，并由发件人定期重试。邮件队列条目不仅包括邮件本身，还包括信封信息。

发件人在尝试失败后，必须延迟重试特定的目标地址。一般而言，重试间隔应至少为30分钟；然而，当发件人SMTP能够确定未投递的原因时，采用更复杂和可变的策略将更为有益。

重试将持续进行，直到消息成功传输或发件人放弃；通常，放弃的时间应至少为4到5天。重试算法的参数必须是可配置的。

发件人应保存一个无法联系的主机列表及其对应的超时时间，而不是仅仅对排队的邮件项进行重试。

讨论：
经验表明，失败通常是暂时的（目标系统崩溃），因此在消息排队的前一小时内，采取两次连接尝试的策略较为合理，然后逐步减少到每两到三小时尝试一次。

发件人SMTP可以通过与接收方SMTP的合作来缩短排队延迟。特别是，如果从某个特定地址收到邮件，就可以认为针对该主机排队的所有邮件现在可以发送。

该策略还可以根据每个主机多个地址的情况（参见第5.3.4节）进行调整，以优化投递时间与资源使用之间的平衡。

发件人SMTP可能会为每个不可用的目标主机排有大量的消息，如果在每个重试周期中都尝试重发所有这些消息，将会造成过多的互联网开销，并导致守护进程长时间阻塞。请注意，SMTP通常只能在超时一分钟或更长时间后，才能确定一次投递尝试失败；每次连接设定一分钟的超时，如果对数十甚至数百条排队消息都如此设置，将会导致非常长的延迟。

类似地，发件人SMTP可能支持多个并发的发件事务，以实现及时投递。然而，应当设定一些限制，以防止主机将所有资源都投入到邮件处理上。

下面将讨论多宿主主机使用不同地址的问题。

5.3.1.2 接收策略

接收端SMTP应当始终尝试在SMTP端口上保持待命监听状态。这将需要支持多个传入的TCP连接以处理SMTP通信。可以对连接数设定一定的限制。

实现建议：
当接收端SMTP从某个特定主机地址接收邮件时，可以通知发件端SMTP重试该主机地址上待处理的邮件。

5.3.2 SMTP中的超时设置

在发件端SMTP中，关于超时有两种方法：(a) 单独限制每个SMTP命令的时间，或 (b) 限制整个SMTP会话中单个邮件的总时间。发件端SMTP应当采用方案(a)，即每个命令的超时限制。超时设置应当易于重新配置，最好无需重新编译SMTP程序。

讨论：
超时是SMTP实现中的一个关键特性。如果超时时间过长（或更糟，没有超时设置），则可能导致互联网通信失败或接收端SMTP程序中的软件错误无限期占用SMTP进程。如果超时时间过短，则会浪费资源，因为在邮件传输中途就会超时。

如果采用方案(b)，超时时间必须非常长，例如一小时，以便有足够时间扩展非常大的邮件列表。超时还可能需要随着邮件大小线性增加，以考虑传输超大邮件所需的时间。固定的长超时会带来两个问题：一是故障仍可能使发件端长时间被占用，二是非常大的邮件可能会出现误超时（这是一种浪费资源的失败）。

采用推荐的方案(a)，为每个SMTP命令和每个数据缓冲区设置超时。后者意味着整体超时本质上与邮件大小成正比。

根据对繁忙邮件中继主机的丰富经验，建议的每个命令的最小超时时间如下：

- 初始220消息：5分钟

一个发件人SMTP进程需要区分TCP连接失败和接收初始220问候消息的延迟。许多接收方SMTP会接受TCP连接，但会延迟发送220消息，直到系统负载允许处理更多邮件。

- MAIL命令：5分钟

- RCPT命令：5分钟

如果不将处理邮件列表和别名的过程推迟到消息被接受之后，则需要更长的超时时间。

- DATA命令启动：2分钟

这是在等待对DATA命令的“354 Start Input”回复期间。

- 数据块传输：3分钟

这是在等待每次TCP发送调用完成，传输一块数据期间。

- DATA终止：10分钟

这是在等待“250 OK”回复期间。当接收方收到终止消息数据的最终句点时，通常会进行处理，将消息投递到用户邮箱。在此时出现虚假的超时会非常浪费资源，因为消息已经成功发送。

接收方SMTP在等待发件人发出下一条命令时，应该至少设置5分钟的超时时间。

5.3.3 可靠的邮件接收

当接收方SMTP接受一封邮件（通过对DATA命令回复“250 OK”）时，它承担了投递或中继该邮件的责任。它必须认真对待这一责任，即不得因琐事而丢失邮件，例如因为主机崩溃或资源短缺。

如果在接受邮件后发生投递失败，接收方SMTP必须生成并发送一条通知消息。此通知必须使用空的（“<>”）反向路径在信封中；参见RFC-821第3.6节。该通知的收件人应为信封返回路径（或Return-Path:行）中的地址。然而，如果该地址为空（“<>”），接收方SMTP不得发送通知。如果该地址是明确的源路由，则应将其简化到最终跳。

讨论：
例如，假设一条消息到达时出现错误通知，消息的“MAIL FROM”字段为：<@a,@b:user@d>。通知消息应发送到：<user@d>。

在消息被SMTP接受后，某些投递失败是不可避免的。例如，由于“软”域系统错误，接收方SMTP可能无法验证RCPT命令中的所有投递地址，或者目标地址是一个邮件列表（请参见前面关于RCPT的讨论）。

为了避免因超时而收到重复的消息，接收方SMTP必须努力缩短对结束消息传输的“.”的响应时间。关于此问题的详细讨论，请参见RFC-1047 [SMTP:4]。

5.3.4 可靠的邮件传输

为了传输一封邮件，发件方SMTP会根据信封中的目标地址确定目标主机的IP地址。具体来说，它会将“@”符号右侧的字符串映射为一个IP地址。此映射或传输过程可能会因软错误而失败，在这种情况下，发件方SMTP会将待发邮件重新排队，稍后重试，具体要求请参见第5.3.1.1节。

当映射成功时，可能会得到一组备用的投递地址，而不是单一地址，这可能是由于（a）多个MX记录，（b）多宿主配置，或两者兼有。为了实现可靠的邮件传输，发件方SMTP必须能够尝试（并重试）这组地址中的每一个，直到成功投递为止。不过，也可以对可尝试的备用地址数量设置一个可配置的限制。无论如何，主机应至少尝试两个地址。

以下信息用于对主机地址进行排序：

(1) 多个MX记录——这些记录包含优先级指示，应在排序时加以利用。如果存在多个目的地具有相同的优先级，并且没有明显理由偏向某一地址（例如地址偏好），那么发件方SMTP应随机选择其中一个，以在特定组织的多个邮件交换点之间分散负载；请注意，这是一种对[DNS:3]中程序的改进。

（2）多宿主主机——目标主机（可能取自首选的MX记录）可能是多宿主的，在这种情况下，域名解析器将返回一份备用IP地址列表。由域名解析器接口（见下文第6.1.3.4节）负责对该列表按偏好程度递减进行排序，SMTP必须按此顺序尝试连接。

讨论：
虽然需要具备尝试多个备用地址的能力，但在某些情况下，特定的安装环境可能希望限制或禁用备用地址的使用。关于发件方是否应尝试使用多宿主主机的不同地址进行重试的问题，一直存在争议。支持使用多个地址的主要理由是它可以最大化及时投递的概率，甚至有时可以提高任何投递成功的概率；反对的理由则是可能会导致不必要的资源消耗。

请注意，资源使用情况也受到第5.3.1节中讨论的发送策略的强烈影响。

5.3.5 域名支持

SMTP实现必须使用第6.1节定义的机制，在域名和IP地址之间进行映射。这意味着每个互联网SMTP都必须支持互联网DNS。

特别是，发件SMTP必须支持MX记录方案[SMTP:3]。有关SMTP域名支持的详细信息，也请参见[DNS:2]第7.4节。

5.3.6 邮件列表和别名

支持SMTP的主机应支持多地址展开的别名和列表形式的地址扩展。当一条消息被投递或转发到展开列表中的每个地址时，信封中的返回地址（"MAIL FROM:"）必须更改为由列表管理员管理的地址，但消息头部必须保持不变；特别是，消息中的"From"字段不应受到影响。

讨论：
一个重要的邮件功能是多目的地投递机制，即通过将伪邮箱地址“扩展”成一系列目标邮箱地址，从而实现单一消息的多目的地投递。当一条消息被发送到这样的伪邮箱（有时称为“爆炸器”）时，副本会被转发或重新分发到扩展列表中的每个邮箱。我们将这种伪邮箱分类为“别名”或“列表”，具体取决于扩展规则：

(a) 别名

为了扩展别名，收件方的邮件系统会简单地用扩展后的每个地址依次替换信封中的伪邮箱地址；信封的其他部分和消息正文保持不变。然后，消息会被投递或转发到每个扩展后的地址。

(b) 列表

邮件列表可以说是通过“重新分发”而非“转发”来操作的。为了扩展列表，收件方的邮件系统会用扩展后的每个地址依次替换信封中的伪邮箱地址。信封中的返回地址会被更改，以确保所有由最终投递产生的错误信息都返回给列表管理员，而不是发件人。发件人通常无法控制列表内容，且通常会觉得错误信息令人烦恼。

5.3.7 邮件网关

在不同的邮件环境之间进行邮件网关（即不同的邮件格式和协议）是复杂的，并不容易实现标准化。例如，参见 [SMTP:5a] 和 [SMTP:5b]。然而，可以为互联网与其他邮件环境之间的网关制定一些基本要求。

(A) 在跨越邮件环境边界进行消息传递时，必要时可以重写邮件头字段。

讨论：
这可能涉及解释目标地址的本地部分（local-part），如第5.2.16节所建议的。

其他连接到互联网的邮件系统网关通常使用RFC-822头部的子集，但其中一些没有等同于SMTP信封的部分。因此，当一条消息离开互联网环境时，可能需要将SMTP信封信息折叠到消息头中。一种可能的解决方案是创建新的头字段来携带信封信息（例如，“X-SMTP-MAIL:”和“X-SMTP-RCPT:”）；然而，这将需要在外部环境的邮件程序中进行更改。

（B）在将消息转发到互联网环境或从互联网环境转出时，网关必须在消息中添加一行Received:，但不得以任何方式更改已存在的Received:行。

讨论：
这一要求是第5.2.8节中“Received:”行一般要求的一个子集；在此重申以强调。

来自其他互联网环境的消息的Received:字段可能不完全符合RFC-822的规范。然而，Received:行最重要的用途是用于调试邮件故障，而善意的网关试图“修正”Received:行可能会严重阻碍这种调试。

强烈建议网关在其提供的Received字段的“via”子句中指明环境和协议。

（C）从互联网一端来看，网关应接受所有有效的SMTP命令中的地址格式、RFC-822头部中的地址格式，以及所有有效的RFC-822消息。虽然网关必须接受RFC-822中的显式源路由（“@...:”格式），无论是在RFC-822头部还是在信封中，但它是否对源路由采取行动，可以选择性地决定；详见第5.2.6节和第5.2.19节。

讨论：
    在简化将地址转换为远程环境地址的过程中，限制邮件网关接受的地址范围常常令人心生怜悯。这种做法基于一个假设，即邮件用户可以控制其邮件发件人所发送到邮件网关的地址。然而，实际上，用户对最终发送的地址几乎没有控制权；他们的邮件客户端可以将地址更改为任何合法的RFC-822格式。

（D）  网关必须确保其转发到互联网的所有邮件头字段符合互联网邮件的要求。特别是，“From:”、“To:”、“Cc:”等字段中的所有地址，必须经过必要的转换以满足RFC-822的语法要求，并且这些地址应当是有效且有助于回复的。

（E）  用于将邮件从互联网协议转换到其他环境协议的转换算法，应尽量确保来自外部邮件环境的错误信息被送达SMTP信封的返回路径，而不是发送者在RFC-822消息中的“From:”字段中列出的地址。

讨论：
    互联网邮件列表通常在信封中放置邮件列表维护者的地址，但保持原始邮件头不变（“From:”字段包含原始发件人）。这样可以实现平均收件人所期望的行为：回复邮件会发回原始发件人，而不是邮件列表维护者；但错误信息会发给维护者（可以修复问题），而不是发给发件人（可能无法修复）。

（F）  类似地，当将一封邮件从其他环境转发到互联网时，网关应根据外部环境提供的错误返回地址（如果有的话）设置信封的返回路径。

5.3.8 最大消息大小

    邮件客户端软件必须能够发送和接收至少64KB（包括头部）的消息，且更大的最大尺寸是非常理想的。

讨论：
    虽然SMTP没有定义消息的最大尺寸，但许多系统会施加实现上的限制。

目前互联网的实际最低限制是64K字节。然而，电子邮件用于多种目的，产生的消息通常会更大。例如，电子邮件常被用来代替FTP传输ASCII文件，尤其是传输完整的文档。因此，消息的大小可以达到1兆字节甚至更大。我们注意到，本文档及其底层配套文件的总大小为0.5兆字节。

互联网工程任务组                                [第68页]

RFC1123                  邮件——SMTP与RFC-822             1989年10月

5.4  SMTP需求总结

以下是英文内容的中文翻译：

```
                                               |          | | | |S| |
                                               |          | | | |H| |F
                                               |          | | | |O|M|o
                                               |          | | | |U|U|o
                                               |          | |H| |L|S|t
                                               |          |M|O| |D|T|n
                                               |          |U|U|M| | |o
                                               |          |S|L|A|N|N|t
                                               |          |T|D|Y|O|O|t
功能                                           |章节      | | | |T|T|e
----------------------------------------------|----------|-|-|-|-|-|--
                                               |          | | | | | |
接收器-SMTP：                                 |          | | | | | |
  实现 VRFY                                   |5.2.3     |x| | | | |
  实现 EXPN                                   |5.2.3     | |x| | | |
    EXPN 和 VRFY 可配置                        |5.2.3     | | |x| | |
  实现 SEND、SOML、SAML                       |5.2.4     | | |x| | |
  验证 HELO 参数                              |5.2.5     | | |x| | |
    拒绝带有错误 HELO 的消息                   |5.2.5     | | | | |x|
  在环境中接受显式的源路由语法                |5.2.6     |x| | | | |
  支持 "postmaster"                          |5.2.7     |x| | | | |
  处理收到的 RCPT（除列表外）                |5.2.7     | | |x| | |
      RCPT 响应延迟很长                        |5.2.7     | | | | |x|
                                               |          | | | | | |
  添加 Received: 行                          |5.2.8     |x| | | | |
      Received: 行包含域名字面值               |5.2.8     | |x| | | |
  更改之前的 Received: 行                     |5.2.8     | | | | |x|
  传递 Return-Path 信息（最终投递/网关）     |5.2.8     |x| | | | |
  支持空的反向路径                            |5.2.9     |x| | | | |
  仅发送正式的应答码                          |5.2.10    | |x| | | |
  在适当情况下发送 RFC-821 的文本             |5.2.10    | |x| | | |
  为透明性删除 "."                            |5.2.11    |x| | | | |
  接受并识别自身域名字面值                    |5.2.17    |x| | | | |
                                               |          | | | | | |
  关于错误信息的错误信息                      |5.3.1     | | | | |x|
  保持在 SMTP 端口上的待监听状态               |5.3.1.2   | |x| | | |
  提供接收并发限制                            |5.3.1.2   | | |x| | |
  至少等待5分钟再接收下一个发件命令           |5.3.2     | |x| | | |
  避免在 "250 OK" 后发生可避免的投递失败       |5.3.3     | | | | |x|
  在接受后发送错误通知消息                     |5.3.3     |x| | | | |
    使用空返回路径发送                         |5.3.3     |x| | | | |
    发送到信封返回路径                         |5.3.3     | |x| | | |
    发送到空地址                               |5
```

.3.3     | | | | |x|
    去除显式源路由                         |5.3.3     | |x| | | |
  最小化接受延迟（RFC-1047）                |5.3.3     |x| | | | |
-----------------------------------------------|----------|-|-|-|-|-|--

互联网工程任务组                                [第69页]

RFC1123                  邮件——SMTP与RFC-822             1989年10月

以下是英文内容的中文翻译：

```

                                               |          | | | | | |
发件人SMTP：                                   |          | | | | | |
  MAIL、RCPT中的规范化域名                     |5.2.2     |x| | | | |
  实现SEND、SOML、SAML                        |5.2.4     | | |x| | |
  在HELO中发送有效的主机名                     |5.2.5     |x| | | | |
  在RCPT TO中发送明确的源路由                   |5.2.6     | | | |x| |
  仅使用回复代码来决定操作                     |5.2.10    |x| | | | |
  在可能的情况下仅使用回复代码的高位数字         |5.2.10    | |x| | | |
  添加“.”以增强透明度                          |5.2.11    |x| | | | |
                                               |          | | | | | |
  在软失败后重试消息                           |5.3.1.1   |x| | | | |
    重试前的延迟                               |5.3.1.1   |x| | | | |
    可配置的重试参数                           |5.3.1.1   |x| | | | |
    每个排队的目标主机只重试一次                 |5.3.1.1   | |x| | | |
  对同一DATA支持多个RCPT                        |5.3.1.1   | |x| | | |
  支持多个并发事务                              |5.3.1.1   | | |x| | |
    提供并发限制                                |5.3.1.1   | |x| | | |
                                               |          | | | | | |
  所有活动的超时设置                            |5.3.1     |x| | | | |
    每个命令的超时                             |5.3.2     | |x| | | |
    超时设置易于重新配置                         |5.3.2     | |x| | | |
    推荐的时间值                               |5.3.2     | |x| | | |
  按顺序尝试备用地址                           |5.3.4     |x| | | | |
    备用尝试次数的可配置限制                     |5.3.4     | | |x| | |
    至少尝试两个备用地址                        |5.3.4     | |x| | | |
  在等价的MX备用地址间进行负载分配               |5.3.4     | |x| | | |
  使用域名系统（DNS）                           |5.3.5     |x| | | | |
    支持MX记录                                 |5.3.5     |x| | | | |
    在MX处理时使用WKS记录                        |5.2.12    | | | |x| |
-----------------------------------------------|----------|-|-|-|-|-|--
                                               |          | | | | | |
邮件转发：                                    |          | | | | | |
  修改现有的头字段                              |5.2.6     | | | |x| |
  实现中继功能：821/第3.6节                     |5.2.6     | | |x| | |
    如果不支持，则投递到RHS域                     |5.2.6     | |x| | | |
  解释地址的“本地部分”                         |5.2.16    | | | | |x|
                                               |          | | | | | |
邮件列表和别名                                |          | | | | | |
  支持两者                                    |5.3.6     | |x| | | |
  向本地管理员报告邮件列表错误                 |5.3.6     |x| | | | |
                                               |          | | | | | |
邮件网关：                                    |          | | | | | |
  在本地部分嵌入外部邮件路由                     |5.2.16   
```

| | |x| | |
在必要时重写头字段                         |5.3.7     | | |x| | |
在Received:行前添加Received:行             |5.3.7     |x| | | | |
更改现有的Received:行                       |5.3.7     | | | | |x|
在互联网端接受完整的RFC-822               |5.3.7     | |x| | | |
根据RFC-822的明确源路由采取行动             |5.3.7     | | |x| | |

互联网工程任务组                                [第70页]

RFC1123                  邮件——SMTP与RFC-822             1989年10月

  仅在互联网端发送有效的RFC-822邮件             |5.3.7     |x| | | | |
  将错误消息投递到信封地址                        |5.3.7     | |x| | | |
  从错误返回地址设置信封的返回路径                |5.3.7     | |x| | | |
                                                   |          | | | | | |
用户代理——RFC-822                                  |          | | | | | |
  允许用户输入<route>地址                          |5.2.6     | | | |x| |
  支持RFC-1049内容类型字段                         |5.2.13    | | |x| | |
  使用四位数年份                                    |5.2.14    | |x| | | |
  生成数字时区                                      |5.2.14    | |x| | | |
  接受所有时区                                      |5.2.14    |x| | | | |
  使用RFC-822中的非数字时区                          |5.2.14    |x| | | | |
  省略路由地址前的短语                              |5.2.15    | | |x| | |
  接受并解析点分十进制的域名字面量                  |5.2.17    |x| | | | |
  接受所有RFC-822地址格式                            |5.2.18    |x| | | | |
  生成无效的RFC-822地址格式                          |5.2.18    | | | | |x|
  在头部使用完全限定域名                            |5.2.18    |x| | | | |
  在头部创建显式源路由                              |5.2.19    | | | |x| |
  接受并解析头部中的显式源路由                        |5.2.19    |x| | | | |
                                                   |          | | | | | |
至少发送/接收64KB的消息                          |5.3.8     |x| | | | |































互联网工程任务组                                [第71页]

RFC1123               支持服务——域名                     1989年10月

6. 支持服务

   6.1 域名转换

      6.1.1 引言

         每个主机必须实现域名系统（DNS）的解析器，并且必须使用该DNS解析器实现将主机名转换为IP地址以及反向转换的机制 [DNS:1, DNS:2]。

         除了DNS之外，主机还可以实现一种主机名转换机制，该机制搜索本地的互联网主机表。有关此选项的更多信息，请参见第6.1.3.8节。

         讨论：
              最初，互联网主机名的转换是通过搜索本地所有主机的表格副本来完成的。由于该表变得过大，无法及时更新和分发，也无法容纳在许多主机中，因此发明了DNS。

DNS 创建了一个分布式数据库，主要用于主机名与主机地址之间的转换。实现 DNS 软件是必要的。DNS 由两个逻辑上不同的部分组成：域名服务器和解析器（尽管在实际实现中，为了提高效率，这两部分常常合并在一起）[DNS:2]。

域名服务器存储关于数据库某些部分的权威数据，并回答关于这些数据的查询。域名解析器代表用户进程向域名服务器查询数据。因此，每台主机都需要一个 DNS 解析器；一些主机还需要运行域名服务器。由于没有任何一个域名服务器拥有全部信息，通常需要从多个域名服务器获取信息以解决查询。

6.1.2 协议流程详解

实现者必须仔细研究参考文献 [DNS:1] 和 [DNS:2]。它们详细描述了域名系统的理论、协议和实现，反映了多年的经验。

互联网工程任务组 [第72页]

RFC1123 支持服务——域名 1989年10月

6.1.2.1 具有零 TTL 的资源记录：RFC-1035 第3.2.1节

所有 DNS 域名服务器和解析器必须正确处理 TTL 为零的资源记录（RR）：将 RR 返回给客户端，但不进行缓存。

讨论：
零 TTL 值被解释为该资源记录只能用于当前的事务，不能被缓存；它们对于极其易变的数据非常有用。

6.1.2.2 QCLASS 值：RFC-1035 第3.2.5节

除非请求者希望从多个类别中获取数据，否则不应使用“QCLASS=*”的查询。特别是，如果请求者只对互联网数据类型感兴趣，必须使用 QCLASS=IN。

6.1.2.3 未使用字段：RFC-1035 第4.1.1节

查询或响应消息中的未使用字段必须为零。

6.1.2.4 压缩：RFC-1035 第4.1.4节

域名服务器必须在响应中使用压缩。

讨论：
压缩对于避免 UDP 数据报溢出至关重要；详见第6.1.3.2节。

6.1.2.5 配置数据的误用：RFC-1035 第6.1.2节

递归名称服务器和全功能解析器通常会包含一些配置参数，这些参数提供关于根服务器或本地名称服务器位置的提示。实现时不得在响应中包含任何这些提示信息。

讨论：
许多实现者发现将这些提示存储为缓存数据非常方便，但有些人未能确保这些“缓存数据”不会被包含在响应中。这在互联网中引发了严重问题，尤其当这些提示过时或不正确时。

互联网工程任务组                                [第73页]

RFC1123               支持服务——域名           1989年10月

6.1.3  特定问题

6.1.3.1  解析器实现

名称解析器应能够在主机支持并发进程的情况下，进行多路复用处理请求。

在实现DNS解析器时，可以选择两种不同的模型中的一种：全功能解析器或简易解析器。

(A) 全功能解析器

全功能解析器是解析服务的完整实现，能够处理通信失败、单个名称服务器失败、找到适当的名称服务器等问题。它必须满足以下要求：

- 解析器必须实现本地缓存功能，以避免对相同请求的重复远程访问，并且必须对缓存中的信息设置超时。

- 解析器应可配置启动信息，指向多个根名称服务器和本地域名服务器。这确保解析器在正常情况下能够访问整个命名空间，并且在本地网络与互联网断开时，仍能访问本地域信息。

“存根解析器”依赖于连接网络上的递归域名服务器或“附近”网络上的递归域名服务器的服务。这种方案允许主机将解析功能的负担转移给另一台主机上的域名服务器。这种模型对于能力较弱的主机（如个人电脑）通常是必不可少的，也建议在主机是局域网中的多台工作站之一时采用，因为它允许所有工作站共享递归域名服务器的缓存，从而减少由本地网络发出的域名请求数量。

互联网工程任务组（IETF）[第74页]

RFC1123 支持服务——域名 1989年10月

至少，存根解析器必须能够将请求导向冗余的递归域名服务器。请注意，递归域名服务器可以限制其接受请求的来源，因此主机管理员必须确认该服务会被提供。存根解析器可以选择实现缓存，但如果实现，必须设置超时以避免使用过期的缓存信息。

6.1.3.2 传输协议

DNS解析器和递归服务器必须支持UDP，并应支持TCP，用于发送（非区域传输）查询。具体而言，发送非区域传输查询的DNS解析器或服务器必须首先使用UDP发送查询。如果响应的答案部分被截断，并且请求方支持TCP，则应再次使用TCP进行查询。

DNS服务器必须能够处理UDP查询，也应能够处理TCP查询。域名服务器可以限制其用于TCP查询的资源，但不应因为TCP查询可能成功而拒绝服务。

截断的响应不得被保存（缓存），也不得在之后使用时丢失其被截断的事实。

讨论：
UDP优于TCP用于查询，因为UDP查询的开销更低，无论是在数据包数量还是在连接状态方面。UDP的使用对于负载很重的服务器尤其重要，特别是根服务器。UDP还提供了额外的鲁棒性，因为解析器可以对不同服务器进行多次UDP查询，成本仅为一次TCP查询。

DNS响应有可能被截断，尽管在当前的互联网DNS中这种情况非常罕见。实际上，截断无法预测，因为它依赖于数据。相关因素包括答案中资源记录（RRs）的数量、每个RR的大小，以及名称压缩算法所节省的空间。一般来说，包含15个或更少RR的NS和MX列表的答案不应发生截断。

是否可以使用截断的答案，取决于具体的应用程序。邮件客户端不得使用被截断的MX响应，因为这可能导致邮件循环。

负责任的做法可以使UDP在绝大多数情况下都能满足需求。名称服务器必须在响应中使用压缩。解析器必须区分响应中附加部分的截断（只会丢失额外信息）与答案部分的截断（对于MX记录，会使邮件客户端无法使用该响应）。数据库管理员应在名称服务器列表、MX备选项等中只列出合理数量的主名称。

然而，也很明显，未来定义的一些新DNS记录类型将包含超过UDP 512字节限制的信息，因此需要使用TCP。因此，解析器和名称服务器应将TCP服务作为UDP的备份实现，预见到未来会需要TCP。

通过私下协议，名称服务器和解析器可以安排使用TCP进行所有通信。区域传输（zone transfer）必须使用TCP。

DNS服务器必须具备足够的内部并发能力，以便在等待响应或进行区域传输时，仍能继续处理UDP查询[DNS:2]。

服务器可以支持通过使用IP广播或多播地址传递的UDP查询。然而，必须确保在多播查询中不设置“递归希望”位（Recursion Desired bit），并且接收多播或广播查询的域名服务器必须忽略该位。发送广播或多播DNS查询的主机应仅将其作为偶尔的探测，缓存从响应中获得的IP地址，以便通常可以使用单播查询。

讨论：
广播或（尤其是）IP多播可以提供一种在不提前知道其IP地址的情况下定位附近域名服务器的方法。然而，广泛广播递归查询可能会导致网络和服务器过载，带来不必要的负担。

互联网工程任务组（RFC 1123）——支持服务——域名（October 1989）

6.1.3.3 高效资源使用

对服务器和解析器的以下要求对整个互联网的健康至关重要，特别是在由更高层的自动服务器（如邮件服务器）反复调用DNS服务时。

（1）解析器必须实现重传控制，以确保不会浪费通信带宽，并且必须对响应单个请求所消耗的资源设定有限的界限。具体建议请参见[DNS:2]第43-44页。

（2）在多次重传查询未获得响应后，实施方案必须放弃并向应用程序返回软错误。

（3）所有DNS域名服务器和解析器应缓存临时失败的结果，缓存时间应为几分钟左右。

讨论：
这可以防止应用程序在遇到软失败后立即重试（违反本文第2.2节的规定），从而避免产生过多的DNS流量。

（4）所有DNS域名服务器和解析器应缓存指示所查询的名称或特定类型数据不存在的否定响应，具体方法参见[DNS:2]。

（5）当DNS服务器或解析器重试UDP查询时，重试间隔应受指数退避算法限制，并应设有上下界。

实现方式：
应使用测得的往返时间（RTT）及其方差（如果有的话）来计算初始重传间隔。如果没有这些信息，应使用默认值，且不得少于5秒。实现方案可以限制重传间隔，但此限制必须超过互联网最大段寿命的两倍加上域名服务器的服务延迟。

（6）当解析器或服务器收到针对其发出的查询的源抑制（Source Quench）消息时，应采取措施在不久的将来减少对该服务器的查询频率。服务器可以忽略因发送响应数据报而收到的源抑制消息。

实现方式：
减少查询频率的一个建议措施是，如果有备用服务器，则将下一次查询尝试发送到备用服务器。另一种措施是对同一服务器的重试间隔进行退避。

6.1.3.4 多宿主机（Multihomed Hosts）

当主机名到地址的功能遇到具有多个地址的主机时，应根据与之直接连接的网络编号以及任何其他适用的性能或历史信息，对这些地址进行排序或排名。

讨论：
多宿主机的不同地址通常意味着不同的互联网路径，有些路径在性能、可靠性或管理限制方面可能优于其他路径。域名系统没有通用的方法来确定最佳路径。推荐的方法是根据系统管理员设定的本地配置信息做出决策。

实现方案：
以下方案已被成功采用：
(a) 在主机配置数据中加入网络偏好列表，即按优先顺序列出网络。如果没有偏好，则此列表可以为空。

(b) 当一个主机名被映射到一组IP地址时，这些地址应按照网络编号进行排序，排序顺序应与“网络偏好列表”中对应网络的顺序一致。网络偏好列表中未出现的网络对应的IP地址应放在列表的末尾。

互联网工程任务组                                [第78页]

RFC1123               支持服务——域名           1989年10月

6.1.3.5  可扩展性

DNS软件必须支持所有众所周知的、与类别无关的格式 [DNS:2]，并且应设计成在引入新的众所周知的类型和进行非标准类型的本地试验时，能最大程度地减少相关的冲击。

讨论：
DNS所使用的数据类型和类别具有可扩展性，因此将会添加新的类型，也会删除或重新定义旧的类型。引入新数据类型应仅依赖于DNS消息中域名压缩的规则，以及可打印格式（即主文件）与资源记录（RRs）内部格式之间的转换。

压缩依赖于对特定RR内部数据格式的了解。因此，压缩只能用于众所周知、与类别无关的RR内容，绝不能用于类别特定的RR或非众所周知的RR类型。资源记录的所有者名称始终可以进行压缩。

一个名称服务器可以通过区域传送获取其不知道如何转换为可打印格式的RR。解析器也可以通过查询获得类似的信息。为了正常运行，这些数据必须被保存，因此推论是DNS软件不能使用文本格式进行内部存储。

DNS对域名语法的定义非常宽泛——由多个标签组成的字符串，每个标签最多包含63个8位字节，用点分隔，总长度最多255个字节。特定应用可以对所使用的域名语法进行进一步限制，尽管DNS的部署已导致一些应用允许更为通用的名称。特别是，本文件第2.1节略微放宽了RFC-952 [DNS:4]中定义的合法互联网主机名的语法。

6.1.3.6  RR类型的状态

名称服务器必须能够从配置文件中加载所有的RR类型，除了MD和MF。MD和MF类型已被废弃，必须不予实现；特别是，名称服务器不得从配置文件中加载这些类型。

讨论：
MB、MG、MR、NULL、MINFO和RP等RR类型被认为是实验性的，使用DNS的应用程序不能期望大多数域支持这些RR类型。此外，这些类型可能会被重新定义。

TXT和WKS RR类型在互联网站点中使用不广泛，因此应用程序不能依赖大多数域中存在TXT或WKS RR。

6.1.3.7  鲁棒性

DNS软件可能需要在根服务器或其他服务器不可用的环境中运行，原因可能是网络连接问题或其他原因。在这种情况下，DNS名称服务器和解析器必须继续为可达的名称空间部分提供服务，同时对其他部分暂时返回失败。

讨论：
虽然DNS主要用于连接的互联网，但也应能在与互联网不连接的网络中使用。因此，实现不应依赖于访问根服务器才能为本地名称提供服务。

6.1.3.8  本地主机表

讨论：
一台主机可以使用本地主机表作为DNS的备份或补充。这引出了一个问题：哪个优先？DNS还是主机表？最灵活的做法是将其作为配置选项。

通常，这类补充主机表的内容由站点本地决定。然而，由DDN网络信息中心（DDN NIC）维护的一个公开可用的互联网主机表也存在，其格式在[DNS:4]中有详细说明。可以通过[DNS:5]中描述的协议从DDN NIC检索该表。需要注意的是，该表只包含互联网主机的很小一部分。使用该协议检索DDN NIC主机表的主机应使用VERSION命令以确认其版本。

互联网工程任务组                                [第80页]





RFC1123               支持服务——域名            1989年10月


在请求整个表格之前，表格可能已经发生了变化，使用ALL命令。  
VERSION标识符应被视为任意字符串，仅用于相等性测试；不应假设存在数字序列。

DDN NIC主机表包含一些不用于主机操作的管理信息，因此目前未包含在DNS数据库中；例如，网络和网关条目。  
然而，未来这些附加信息将被添加到DNS中。相反，DNS提供一些DDN NIC主机表中没有的基本服务（特别是MX记录）。

6.1.4  DNS用户界面

6.1.4.1  DNS管理

本文件关注主机软件中的设计和实现问题，而不涉及管理或操作问题。  
然而，管理问题在DNS中尤为重要，因为某些特定段的错误可能导致许多站点性能下降或出现错误。  
这些问题在[DNS:6]和[DNS:7]中进行了讨论。

6.1.4.2  DNS用户界面

主机必须为在其上运行的所有应用程序提供一个DNS接口。  
该接口通常会将请求转发给系统进程，以执行解析器功能[DNS:1, 6.1:2]。

至少，基本接口必须支持请求特定名称的特定类型和类别的所有信息，  
并且必须返回全部请求信息、硬错误代码或软错误指示。  
当没有错误时，基本接口应返回完整的响应信息，且不进行修改、删除或排序，以确保基本接口无需更改即可支持新数据类型。

讨论：  
软错误指示是接口的一个重要部分，因为有时可能无法从DNS访问特定信息；详见第6.1.3.3节。



互联网工程任务组                                [第81页]





RFC1123               支持服务——域名            1989年10月

一个主机可以提供其他针对特定功能的DNS接口，将原始的域名数据转换成更适合这些功能的格式。特别地，主机必须提供一个DNS接口，以便在主机地址和主机名之间进行转换。

6.1.4.3 接口缩写功能

用户界面可以提供一种方法，允许用户输入常用名称的缩写。虽然此类方法的具体定义超出了DNS规范的范围，但必须遵循某些规则，以确保这些方法能够访问整个DNS命名空间，并防止过度使用互联网资源。

如果提供了缩写方法，则：

(a) 必须有某种约定，用于表示一个名称已经完整，以便抑制缩写方法的使用。通常采用在名称后加点的方式。

(b) 缩写的扩展必须且只能进行一次，并且必须在输入名称的相同上下文中进行。

讨论：
例如，如果在邮件程序中使用缩写表示目的地，应该将该缩写扩展为完整的域名，并在排队的消息中存储时标明该名称已完整。否则，缩写可能会被扩展为邮件系统的搜索列表，而非用户的列表，或者由于与通配符交互的重复规范化尝试，导致名称变长。

最常用的两种缩写方法是：

(1) 接口级别的别名

接口级别的别名在概念上实现为一份别名/域名对的列表。该列表可以是每个用户或每个主机的，也可以为不同的功能关联不同的列表，例如，一个列表用于主机名到地址的转换，另一个列表用于邮件域名。当用户输入一个名称时，接口会尝试将该名称与列表中的别名部分匹配，如果找到匹配的条目，则用该条目中的域名替换原名称。

请注意，接口级别的别名和CNAME（别名记录）是完全不同的机制；接口级别的别名是本地的事务，而CNAME是一种在整个互联网范围内的别名机制，是任何DNS实现中必不可少的部分。

（2）搜索列表

搜索列表在概念上被实现为一个有序的域名列表。当用户输入一个名称时，搜索列表中的域名会作为后缀逐一附加到用户提供的名称上，直到找到具有所需关联数据的域名，或者搜索列表被用尽。搜索列表通常包含本地主机的父域名或其他祖先域名。搜索列表通常是为每个用户或每个进程设置的。

管理员应当能够禁用DNS搜索列表功能。在某些情况下，出于安全考虑，可能需要拒绝此功能，以防止滥用DNS。

存在一种风险，即在测试用户输入是否为完整域名（缺少末尾的点以标记其完整性）时，搜索列表机制可能会产生过多对根服务器的查询。为了防止这种情况，搜索列表机制必须具备以下两项中的一项，最好两项都具备：

(a) 本地解析器或名称服务器可以实现对负响应的缓存（参见第6.1.3.3节）。

(b) 在将生成的域名用于向非本地域名服务器（如根服务器）发起查询之前，搜索列表扩展器可以要求在域名中包含两个或更多的内部点。

讨论：
这个要求的目的是为了避免在测试搜索列表时给用户带来过长的等待时间，更重要的是防止对根服务器和其他高层级服务器造成过多的流量。例如，如果用户提供的名称是“X”，而搜索列表中包含根域作为一个组成部分，那么在尝试下一个搜索列表选项之前，必须先咨询根服务器。由此产生的负载会被互联网中的所有主机所放大，增加根服务器和网关的压力。

负缓存方案将效果限制在首次使用某个名称时。内部点规则实现更为简单，但可能会阻碍某些顶级域名的便捷使用。

6.1.5 域名系统（DNS）需求总结

| 特性                                              | 部分        | | | |S| | |
|---------------------------------------------------|-------------| | | |H| |F|
|                                                   |             | | | |O|M|o|
|                                                   |             | | | |U|U|o|
|                                                   |             | |S| |U|U|o|
|                                                   |             | |H| |L|S|t|
|                                                   |             |M|O| |D|T|n|
|                                                   |             |U|U|M| | |o|
|                                                   |             |S|L|A|N|N|t|
|                                                   |             |T|D|Y|O|O|t|
| 功能                                              | 章节        | | | |T|T|e|
|---------------------------------------------------|-------------|-|-|-|-|-|--
| 一般问题                                          |             | | | | | |
|                                                   |             | | | | | |
| 实现DNS名称到地址的转换                            | 6.1.1       |x| | | | |
| 实现DNS地址到名称的转换                            | 6.1.1       |x| | | | |
| 支持使用主机表进行转换                              | 6.1.1       | | |x| | |
| 正确处理TTL为零的资源记录                            | 6.1.2.1     |x| | | | |
| 不必要地使用QCLASS=*                                | 6.1.2.2     | |x| | | |
|  使用QCLASS=IN（互联网类别）                         | 6.1.2.2     |x| | | | |
| 未使用的字段设为零                                  | 6.1.2.3     |x| | | | |
| 在响应中使用压缩                                    | 6.1.2.4     |x| | | | |
|                                                   |             | | | | | |
| 在响应中包含配置信息                                | 6.1.2.5     | | | | |x|
| 支持所有众所周知的、类别无关的类型                    | 6.1.3.5     |x| | | | |
| 轻松扩展类型列表                                    | 6.1.3.5     | |x| | | |
| 加载所有RR类型（除MD和MF外）                         | 6.1.3.6     |x| | | | |
| 加载MD或MF类型                                       | 6.1.3.6     | | | | |x|
| 在根服务器等不可用时操作                              | 6.1.3.7     |x| | | | |
|---------------------------------------------------|-------------|-|-|-|-|-|--
| 解析器问题：                                       |             | | | | | |
|                                                   |             | | | | | |
| 解析器支持多个并发请求                              | 6.1.3.1     | |x| | | |
| 完整服务解析器：                                    | 6.1.3.1     | | |x| | |
|  本地缓存                                           | 6.1.3.1     |x| | | | |

互联网工程任务组（IETF） [第84页]

RFC1123 支持服务——域名（DOMAINS） 1989年10月

本地缓存中的信息会过期 |6.1.3.1 |x| | | | |
可配置的起始信息 |6.1.3.1 | |x| | | |
Stub解析器： |6.1.3.1 | | |x| | |
  使用冗余的递归名称服务器 |6.1.3.1 |x| | | | |
  本地缓存 |6.1.3.1 | | |x| | |
  本地缓存中的信息会过期 |6.1.3.1 |x| | | | |
对远程多宿主主机的支持： | | | | | |
  按偏好列表排序多个地址 |6.1.3.4 | |x| | | |
                                               | | | | | |
-----------------------------------------------|-----------|-|-|-|-|-|--
传输协议： | | | | | |
                                               | | | | | |
支持UDP查询 |6.1.3.2 |x| | | | |
支持TCP查询 |6.1.3.2 | |x| | | |
  首先使用UDP发送查询 |6.1.3.2 |x| | | | |1
  如果UDP回答被截断，则尝试TCP |6.1.3.2 | |x| | | |
名称服务器限制TCP查询资源 |6.1.3.2 | | |x| | |
  惩罚不必要的TCP查询 |6.1.3.2 | | | |x| |
将截断数据视为未截断 |6.1.3.2 | | | | |x|
私有协议，仅使用TCP |6.1.3.2 | | |x| | |
使用TCP进行区域传输 |6.1.3.2 |x| | | | |
不阻止UDP查询的TCP使用 |6.1.3.2 |x| | | | |
支持广播或多播查询 |6.1.3.2 | | |x| | |
  查询中设置RD位 |6.1.3.2 | | | | |x|
  服务器忽略广播/多播中的RD位 |6.1.3.2 |x| | | | |
  仅作为偶尔的探测地址 |6.1.3.2 | |x| | | |
-----------------------------------------------|-----------|-|-|-|-|-|--
资源使用： | | | | | |
                                               | | | | | |
传输控制，参考[DNS:2] |6.1.3.3 |x| | | | |
  每个请求有限制 |6.1.3.3 |x| | | | |
重试失败后视为软错误 |6.1.3.3 |x| | | | |
缓存临时故障 |6.1.3.3 | |x| | | |
缓存负面响应 |6.1.3.3 | |x| | | |
重试采用指数退避 |6.1.3.3 | |x| | | |
  上下界 |6.1.3.3 | |x| | | |
客户端处理源抑制 |6.1.3.3 | |x| | | |
服务器忽略源抑制 |6.1.3.3 | | |x| | |
-----------------------------------------------|-----------|-|-|-|-|-|--
用户界面： | | | | | |
                                               | | | | | |
所有程序都可以访问DNS接口 |6.1.4.2 |x| | | | |
能够重新...

查询给定名称的所有信息        |6.1.4.2    |x| | | | |
返回完整信息或错误                         |6.1.4.2    |x| | | | |
特殊接口                                   |6.1.4.2    | | |x| | |
  名称<->地址转换                          |6.1.4.2    |x| | | | |
                                               |           | | | | | |
缩写功能设施：                              |6.1.4.3    | | |x| | |

互联网工程任务组                                [第85页]





RFC1123               支持服务——域名管理           1989年10月


 完整名称的约定                        |6.1.4.3    |x| | | | |
 完全一次的转换                        |6.1.4.3    |x| | | | |
 在适当的上下文中进行转换                |6.1.4.3    |x| | | | |
 搜索列表：                            |6.1.4.3    | | |x| | |
   管理员可以禁用                        |6.1.4.3    | |x| | | |
   防止过多的根查询                      |6.1.4.3    |x| | | | |
     两种方法                            |6.1.4.3    | |x| | | |
----------------------------------------------|-----------|-|-|-|-|-|--
----------------------------------------------|-----------|-|-|-|-|-|--

1. 除非特定解析器与特定服务器之间有私下协议。







































互联网工程任务组                                [第86页]





RFC1123            支持服务——初始化               1989年10月


   6.2  主机初始化

      6.2.1  引言

         本节讨论在连接网络中，或更广泛地在互联网路径上，主机软件的初始化过程。这对于无盘主机是必要的，也可以选择性地用于带有硬盘的主机。对于无盘主机，初始化过程称为“网络启动”，由位于启动ROM中的引导程序控制。

         要在网络上初始化无盘主机，有两个不同的阶段：

         (1)  配置IP层。

              无盘机器通常没有永久存储设备用以存放网络配置信息，因此必须动态获取足够的配置信息，以支持后续的加载阶段。这些信息至少应包括主机和引导服务器的IP地址。为了支持通过网关启动，还需要子网掩码和默认网关列表。

         (2)  加载主机系统代码。

              在加载阶段，使用适当的文件传输协议将系统代码从引导服务器通过网络复制过来。

         带硬盘的主机可以执行第一步，即动态配置。这对于微型计算机尤为重要，因为软盘可能会导致网络配置信息被误复制到多个主机上。此外，如果新主机能自动从中心服务器获取配置信息，安装过程会更简单，节省管理员时间，减少错误的可能性。

      6.2.2  需求

6.2.2.1 动态配置

为动态配置制定了多项协议规定。

o ICMP 信息请求/应答消息

互联网工程任务组 [第87页]

RFC1123 支持服务——初始化 1989年10月

这个已废弃的消息对旨在让主机找到其所在网络的编号。不幸的是，只有在主机已经知道其IP地址中的主机编号部分时，这个机制才有用，而需要动态配置的主机通常并不具备这些信息。

o 反向地址解析协议（RARP）[BOOT:4]

RARP是一种用于广播介质的链路层协议，允许主机根据其链路层地址找到对应的IP地址。不幸的是，RARP不能跨越IP网关工作，因此每个网络都需要配置一个RARP服务器。此外，RARP不提供任何其他的配置信息。

o ICMP 地址掩码请求/应答消息

这些ICMP消息允许主机获取特定网络接口的地址掩码。

o BOOTP协议 [BOOT:2]

该协议允许主机确定本地主机和引导服务器的IP地址、合适的引导文件名，以及可选的地址掩码和默认网关列表。为了找到BOOTP服务器，主机通过UDP广播发送BOOTP请求。已经使用临时网关扩展将BOOTP广播通过网关传输，未来IP多播功能将提供一种标准机制实现此目的。

建议的动态配置方法是使用带有“BOOTP供应商信息扩展”RFC-1084 [BOOT:3]中定义的扩展的BOOTP协议。RFC-1084定义了一些重要的通用（非供应商特定）扩展，特别是这些扩展允许在BOOTP中提供地址掩码；我们建议采用这种方式提供地址掩码。

讨论：
历史上，子网划分是在IP定义之后很久才出现的，因此设计了单独的机制（ICMP地址掩码消息）来向主机提供地址掩码。然而，IP地址掩码与相应的IP地址在概念上形成一对，对于操作而言，二者应当配合使用。

RFC1123 支持服务——初始化 1989年10月

为了保持简洁，定义这些配置参数时应采用相同的机制，无论是配置文件还是像BOOTP这样的动态机制，都应同时进行定义。

请注意，BOOTP并不足以全面描述多宿主机（multihomed host）所有接口的配置。多宿主机必须对每个接口单独使用BOOTP，或者使用BOOTP加载一个接口的配置，然后通过文件完成全部初始化。

应用层的配置信息预计在系统代码加载后，从文件中获取。

6.2.2.2  加载阶段

建议在加载阶段采用通过BOOTP建立的IP地址之间使用TFTP [BOOT:1]的方式。

不应对广播地址使用TFTP，因为这在第4.2.3.4节中已有说明。

互联网工程任务组（IETF）                                第89页

RFC1123 支持服务——管理 1989年10月

6.3  远程管理

6.3.1  引言

互联网社区最近在网络管理协议的开发上投入了大量努力，形成了两条主要路线 [MGT:1, MGT:6]：简单网络管理协议（SNMP）[MGT:4] 和基于TCP的通用管理信息协议（CMOT）[MGT:5]。

为了使用SNMP或CMOT进行管理，主机需要实现相应的管理代理。互联网主机应当包含SNMP或CMOT中的任意一种代理。

这两种协议都基于管理信息库（MIB），定义了一组管理值。通过读取和设置这些值，远程应用可以查询和修改被管理系统的状态。

已定义了一个标准的MIB [MGT:3]，供这两种管理协议使用，数据类型由[ MGT:2]中定义的管理信息结构（SMI）规定。还可以在MIB的“企业”和“实验”子树中引入其他MIB变量 [MGT:2]。

主机中的每个协议模块都应实现相关的MIB变量。主机应实现最新标准MIB中定义的MIB变量，并在适当且有用的情况下实现其他MIB变量。

6.3.2  协议流程介绍

MIB旨在涵盖主机和网关，尽管在MIB的应用到这两种情况时可能存在详细的差异。本节包含对主机的MIB的适当解释。未来版本的MIB可能会增加更多用于主机管理的条目。

受管理的主机必须实现以下一组MIB对象定义：系统（System）、接口（Interfaces）、地址转换（Address Translation）、IP、ICMP、TCP和UDP。

以下特定解释适用于主机：

- ipInHdrErrors

  注意，“生存时间（TTL）超出”错误只能在主机转发源路由数据报时发生。

- ipOutNoRoutes

  该对象统计因找不到路由而被丢弃的数据报。如果主机的所有默认网关都不可用，可能会发生这种情况。

- ipFragOKs、ipFragFails、ipFragCreates

  不实现有意分段（参见[INTRO:1]中的“分段”部分）的主机，必须对这三个对象返回值零。

- icmpOutRedirects

  对于主机，该对象必须始终为零，因为主机不发送重定向消息。

- icmpOutAddrMaskReps

  对于主机，该对象必须始终为零，除非该主机是地址掩码信息的权威源。

- ipAddrTable

  对于主机，“IP地址表”对象实际上是一个逻辑接口表。

- ipRoutingTable

  对于主机，“IP路由表”对象实际上是主机的路由缓存和[INTRO:1]中“路由出站数据报”部分描述的静态路由表的组合。

  在每个ipRouteEntry中，ipRouteMetric1...4通常对主机没有意义，应始终为-1，而ipRouteType通常为“远程”。

  如果连接网络上的目的地未出现在路由缓存中（参见[INTRO:1]中的“路由出站数据报”部分），则不会有ipRouteType为“直达”的条目。

讨论：
目前的MIB中未包括ipRouteEntry中的服务类型（Type-of-Service），但预计未来的修订将加入此项。

我们还期望将管理信息库（MIB）扩展，以实现对应用程序的远程管理（例如，部分重新配置邮件系统的能力）。因此，像邮件系统这样的网络服务应用程序应当在设计时加入支持远程管理的“钩子”。

6.3.3 管理需求总结

| 特性 | 章节 | | | |S| | |
|-------|--------|---|---|---|---|---|---|
| 支持SNMP或CMOT代理 | 6.3.1 | |x| | | | |
| 在标准MIB中实现指定对象 | 6.3.1 | |x| | | | |

（以下为空白或未显示内容）

互联网工程任务组（IETF）[第92页]

RFC1123  支持服务——管理  1989年10月

7. 参考文献

本节列出每个实现者必须熟悉的主要参考资料，以及一些建议的补充阅读资料。

入门参考资料：

[INTRO:1] “互联网主机的需求——通信层”，由R. Braden编辑，IETF主机需求工作组，RFC-1122，1989年10月。

[INTRO:2] “DDN协议手册”，NIC-50004、NIC-50005、NIC-50006（三卷），斯坦福国际研究所（SRI），1985年12月。

[INTRO:3] “官方互联网协议”，J. Reynolds和J. Postel著，RFC-1011，1987年5月。

  该文档会定期以新的RFC编号重新发布，必须使用最新版本。

[INTRO:4] “协议文档顺序信息”，O. Jacobsen和J. Postel著，RFC-980，1986年3月。

[INTRO:5] “已分配编号”，J. Reynolds和J. Postel著，RFC-1010，1987年5月。

  该文档会定期以新的RFC编号重新发布，必须使用最新版本。

Telnet相关参考资料：

[TELNET:1] “Telnet协议规范”，J. Postel和J. Reynolds著，RFC-854，1983年5月。

[TELNET:2] “Telnet选项规范”，J. Postel和J. Reynolds著，RFC-855，1983年5月。

[TELNET:3] “Telnet二进制传输”，J. Postel和J. Reynolds著，RFC-856，1983年5月。

[TELNET:4] “Telnet回显选项”，J. Postel和J. Reynolds著，RFC-857，1983年5月。

[TELNET:5] “Telnet抑制继续前进选项”，J. Postel 和 J. Reynolds。

互联网工程任务组                                [第93页]

RFC1123              支持服务——管理         1989年10月

Reynolds, RFC-858, 1983年5月。

[TELNET:6] “Telnet状态选项”，J. Postel 和 J. Reynolds，RFC-859，1983年5月。

[TELNET:7] “Telnet定时标记选项”，J. Postel 和 J. Reynolds，RFC-860，1983年5月。

[TELNET:8] “Telnet扩展选项列表”，J. Postel 和 J. Reynolds，RFC-861，1983年5月。

[TELNET:9] “Telnet记录结束选项”，J. Postel，RFC-855，1983年12月。

[TELNET:10] “Telnet终端类型选项”，J. VanBokkelen，RFC-1091，1989年2月。

本文件取代RFC-930。

[TELNET:11] “Telnet窗口大小选项”，D. Waitzman，RFC-1073，1988年10月。

[TELNET:12] “Telnet行模式选项”，D. Borman，RFC-1116，1989年8月。

[TELNET:13] “Telnet终端速度选项”，C. Hedrick，RFC-1079，1988年12月。

[TELNET:14] “Telnet远程流控制选项”，C. Hedrick，RFC-1080，1988年11月。

二级TELNET参考资料：

[TELNET:15] “Telnet协议”，美国国防部MIL-STD-1782，1984年5月。

本文件旨在描述与RFC-854相同的协议。如有冲突，以RFC-854为准，本文件优先级最高。

[TELNET:16] “SUPDUP协议”，M. Crispin，RFC-734，1977年10月。

[TELNET:17] “Telnet SUPDUP选项”，M. Crispin，RFC-736，1977年10月。

[TELNET:18] “数据输入终端选项”，J. Day，RFC-732，1977年6月。

互联网工程任务组                                [第94页]

RFC1123              支持服务——管理         1989年10月

[TELNET:19] “TELNET数据输入终端选项——DODIIS实现”，A. Yasuda 和 T. Thompson，RFC-1043，1988年2月。

FTP参考资料：

[FTP:1] “文件传输协议”，J. Postel 和 J. Reynolds，RFC-959，1985年10月。

[FTP:2] “文档文件格式标准”，J. Postel，RFC-678，1974年12月。

[FTP:3] “文件传输协议”，美国国防部MIL-STD-1780，1984年5月。

本文件基于早期版本的FTP规范（RFC-765），现已废止。

TFTP参考资料：

[TFTP:1] “TFTP协议修订版2”，K. Sollins，RFC-783，1981年6月。

邮件参考资料：

[SMTP:1] “简单邮件传输协议”，J. Postel，RFC-821，1982年8月。

[SMTP:2] “ARPA互联网文本消息格式标准”，D. Crocker，RFC-822，1982年8月。

本文件取代了早期的RFC-733规范。

[SMTP:3] “邮件路由和域名系统”，C. Partridge，RFC-974，1986年1月。

本RFC描述了MX记录的使用，这是邮件投递过程中一项强制性扩展。

[SMTP:4] “重复消息与SMTP”，C. Partridge，RFC-1047，1988年2月。

互联网工程任务组 [Page 95]

RFC1123 支持服务——管理 1989年10月

[SMTP:5a] “X.400与RFC 822之间的映射”，S. Kille，RFC-987，1986年6月。

[SMTP:5b] “RFC-987的补遗”，S. Kille，RFC-？？？，1987年9月。

前述两个RFC定义了在互联网与X.400环境之间进行邮件网关的建议标准。

[SMTP:6] “简单邮件传输协议”，军用标准MIL-STD-1781，美国国防部，1984年5月。

该规范旨在描述与RFC-821相同的协议。然而，MIL-STD-1781不完整，特别是未包括MX记录 [SMTP:3]。

[SMTP:7] “互联网消息的内容类型字段”，M. Sirbu，RFC-1049，1988年3月。

域名系统（DNS）参考资料：

[DNS:1] “域名——概念与设施”，P. Mockapetris，RFC-1034，1987年11月。

本文件及后续文件取代了RFC-882、RFC-883和RFC-973。

[DNS:2] “域名——实现与规范”，RFC-1035，P. Mockapetris，1987年11月。

[DNS:3] “邮件路由与域系统”，C. Partridge，RFC-974，1986年1月。

[DNS:4] “国防部互联网主机表规范”，K. Harrenstein，RFC-952，M. Stahl，E. Feinler，1985年10月。

次级DNS参考资料：

[DNS:5] “主机名服务器”，K. Harrenstein，M. Stahl，E. Feinler，RFC-953，1985年10月。

[DNS:6] “域名管理员指南”，M. Stahl，RFC-1032，1987年11月。

互联网工程任务组 [Page 96]

RFC1123 支持服务——管理 1989年10月

[DNS:7] “域名管理员操作指南”，M. Lottor，RFC-1033，1987年11月。

[DNS:8] “域名系统手册”，互联网协议手册第4卷，NIC 50007，SRI网络信息中心，1989年8月。

系统初始化参考资料：

[BOOT:1] “使用TFTP进行引导加载”，R. Finlayson，RFC-906，1984年6月。

[BOOT:2] “引导协议（BOOTP）”，W. Croft和J. Gilmore，RFC-951，1985年9月。

[BOOT:3] “BOOTP供应商信息扩展”，J. Reynolds，RFC-1084，1988年12月。

注意：此RFC修订并取代了RFC-1048。

[BOOT:4] “反向地址解析协议”，R. Finlayson，T. Mann，J. Mogul和M. Theimer，RFC-903，1984年6月。

管理参考资料：

[MGT:1] “互联网网络管理标准制定的IAB建议”，V. Cerf，RFC-1052，1988年4月。

[MGT:2] “基于TCP/IP互联网的管理信息的结构与标识”，M. Rose 和 K. McCloghrie，RFC-1065，1988年8月。

[MGT:3] “TCP/IP互联网的管理信息库”，M. Rose 和 K. McCloghrie，RFC-1066，1988年8月。

[MGT:4] “一种简单的网络管理协议”，J. Case、M. Fedor、M. Schoffstall 和 C. Davin，RFC-1098，1989年4月。

[MGT:5] “基于TCP/IP的通用管理信息服务与协议”，U. Warrier 和 L. Besaw，RFC-1095，1989年4月。

[MGT:6] “第二次临时网络管理审查小组报告”，V. Cerf，RFC-1109，1989年8月。

互联网工程任务组                                [第97页]

RFC1123              支持服务——管理                         1989年10月

安全注意事项

在主机软件的应用和支持程序中存在许多安全问题，但本RFC不对这些问题进行详细讨论。与安全相关的问题在以下章节中有所提及：关于TFTP的章节（第4.2.1、4.2.3.4、4.2.3.5节）、SMTP的VRFY和EXPN命令（第5.2.3节）、SMTP的HELO命令（第5.2.5节）以及SMTP的DATA命令（第5.2.8节）。

作者联系方式

罗伯特·布雷登（Robert Braden）
南加州大学/信息科学研究所
地址：4676 Admiralty Way
马里纳德尔雷，邮编：90292-6695，加利福尼亚州

电话：(213) 822 1511

电子邮件：Braden@ISI.EDU
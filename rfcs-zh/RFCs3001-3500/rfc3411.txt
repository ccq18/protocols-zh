# RFC 3411 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs3001-3500/rfc3411.txt

网络工作组                                      D. Harrington
评论请求编号：3411                            Enterasys Networks
标准：62                                                       R. Presuhn
废止：2571                                       BMC Software, Inc.
类别：标准轨道                                      B. Wijnen
                                                     Lucent Technologies
                                                           2002年12月


                     描述简单网络管理协议（SNMP）管理框架的架构

本备忘录的状态

   本文件为互联网社区制定的互联网标准轨道协议，旨在征求讨论和改进建议。请参阅当前版本的《互联网官方协议标准》（STD 1），了解该协议的标准化状态和现行情况。本备忘录的分发不受限制。

版权声明

   版权所有（C）互联网协会（2002年）。保留所有权利。

摘要

   本文件描述了用于描述简单网络管理协议（SNMP）管理框架的架构。该架构设计为模块化，以便随着时间推移推动SNMP协议标准的发展。架构的主要部分包括：包含消息处理子系统、安全子系统和访问控制子系统的SNMP引擎，以及可能存在的多个提供特定功能处理的SNMP应用程序。本文件废止RFC 2571。

目录

   1. 引言 .................................................... 4
   1.1. 概述 .................................................. 4
   1.2. SNMP .................................................. 5
   1.3. 本架构的目标 .......................................... 6
   1.4. 本架构的安全需求 ...................................... 6
   1.5. 设计决策 .............................................. 8
   2. 文档概述 ............................................... 10
   2.1. 文档路线图 ............................................ 11
   2.2. 适用性声明 ............................................ 11
   2.3. 共存与过渡 ............................................ 11
   2.4. 传输映射 .............................................. 12
   2.5. 消息处理 .............................................. 12
   2.6. 安全 .................................................. 12
   2.7. 访问控制 .............................................. 13
   2.8. 协议操作 .............................................. 13
   2.9. 应用程序 .............................................. 14
   2.10. 管理信息结构 ......................................... 15
   2.11. 文本约定 ............................................. 15
   2.12. 合规性声明 ........................................... 15
   2.13. 管理信息库模块 ....................................... 15
   2.13.1. SNMP仪器化管理信息库 ................................ 15
   2.14. SNMP框架文档 ......................................... 15
   3. 架构要素 ............................................... 16
   3.1. 实体的命名 ........................................... 17
   3.1.1. SNMP引擎 ............................................ 18
   3.1.1.1. snmpEngineID ...................................... 18
   3.1.1.2. 调度器 ............................................ 18
   3.1.1.3. 消息处理子系统 .................................... 19
   3.1.1.3.1. 消息处理模型 .................................... 19
   3.1.1.4. 安全子系统 ........................................ 20
   3.1.1.4.1. 安全模型 ........................................ 20
   3.1.1.4.2. 安全协议 ........................................ 20
   3.1.2. 访问控制子系统 ...................................... 21
   3.1.2.1. 访问控制模型 ...................................... 21
   3.1.3. 应用程序 ............................................ 21
   3.1.3.1. SNMP管理器 ........................................ 22
   3.1.3.2. SNMP代理 .......................................... 23
   3.2. 身份的命名 ............................................ 25
   3.2.1. 主要身份 ............................................ 25
   3.2.2. securityName ........................................ 25
   3.2.3. 依模型而定的安全ID .................................. 26
   3.3. 管理信息的命名 ........................................ 26
   3.3.1. SNMP上下文 .......................................... 28
   3.3.2. contextEngineID ..................................... 28
   3.3.3. contextName ......................................... 29
   3.3.4. 范围PDU ............................................ 29
   3.4. 其他构造 .............................................. 29
   3.4.1. maxSizeResponseScopedPDU .............................. 29
   3.4.2. 本地配置数据存储 .................................... 29
   3.4.3. 安全级别 ............................................ 29
   4. 抽象服务接口 ............................................ 30
   4.1. 调度器原语 ............................................ 30
   4.1.1. 生成外发请求或通知 .................................. 31
   4.1.2. 处理入站请求或通知PDU .............................. 31
   4.1.3. 生成外发响应 ........................................ 32
   4.1.4. 处理入站响应PDU .................................... 32
   4.1.5. 注册处理SNMP PDU的责任 ................................ 32
   4.2. 消息处理子系统原语 .................................... 33
   4.2.1. 准备外发SNMP请求或通知消息 .......................... 33
   4.2.2. 准备外发SNMP响应消息 ................................ 34
   4.2.3. 准备来自入站SNMP消息的数据元素 ...................... 35
   4.3. 访问控制子系统原语 .................................... 35
   4.4. 安全子系统原语 ........................................ 36
   4.4.1. 生成请求或通知消息 .................................. 36
   4.4.2. 处理入站消息 ........................................ 36
   4.4.3. 生成响应消息 ........................................ 37
   4.5. 通用原语 .............................................. 37
   4.5.1. 释放状态引用信息 .................................... 37
   4.6. 场景图 ................................................ 38
   4.6.1. 命令生成器或通知发起者 .............................. 38
   4.6.2. 命令响应应用的场景图 ................................ 39
   5. SNMP管理框架的管理对象定义 ............................ 40
   6. IANA注意事项 ............................................ 51
   6.1. 安全模型 .............................................. 51
   6.2. 消息处理模型 .......................................... 51
   6.3. SnmpEngineID格式 ....................................... 52
   7. 知识产权 ................................................ 52
   8. 致谢 .................................................... 52
   9. 安全考虑 ................................................ 54
   10. 参考文献 .............................................. 54
   10.1. 标准参考文献 ........................................ 54
   10.2. 资料性参考文献 ...................................... 56
   附录A. 模型设计者指南 .................................... 57
   A.1. 安全模型设计要求 .................................... 57
   A.1.1. 威胁 ................................................. 57
   A.1.2. 安全处理 ............................................ 58
   A.1.3. 验证接收消息中的安全戳 ............................ 59
   A.1.4. 安全管理信息库 .................................... 59
   A.1.5. 缓存的安全数据 ...................................... 59
   A.2. 消息处理模型设计要求 ................................ 60
   A.2.1. 从网络接收SNMP消息 ................................ 60
   A.2.2. 向网络发送SNMP消息 ................................ 60
   A.3. 应用程序设计要求 .................................... 61
   A.3.1. 启动消息的应用程序 ................................ 61
   A.3.2. 接收响应的应用程序 ................................ 62
   A.3.3. 接收异步消息的应用程序 .............................. 62
   A.3.4. 发送响应的应用程序 ................................ 62
   A.4. 访问控制模型设计要求 ................................ 63
   编者地址 ................................................. 63
   完整版权声明 ............................................. 64








Harrington, et al.          标准轨道                     [第3页]


RFC 3411      SNMP管理框架的架构 2002年12月


1. 引言

1.1. 概述

   本文件定义了描述SNMP管理框架的词汇表，以及描述SNMP管理框架主要部分的架构。

   本文件不提供SNMP的全面介绍。其他文档和书籍可以提供更详尽的SNMP介绍。本文件也不涉及SNMP的历史，这些内容可以在其他资料中找到。

   第1节介绍了本架构的目的、目标和设计决策。

   第2节描述了定义（元素）SNMP框架的各种类型的文档，以及它们如何融入本架构。同时提供了之前定义SNMP框架的文档的简要路线图。

   第3节详细说明了本架构的词汇及其组成部分。本节对于理解后续内容以及理解为适应本架构而编写的相关文档非常重要。

   第4节描述了在本架构中各子系统、模型和应用程序之间的抽象服务接口所用的原语。

   第5节定义了一组用于在本架构中对SNMP实体进行仪器化的管理对象。

   第6、7、8、9、10和11节属于行政性质内容。

   附录A为模型设计者提供了符合本架构的设计指南。

   本文件中的关键词“必须”、“不得”、“要求”、“应”、“不应”、“建议”、“不建议”、“推荐”、“可以”和“可选”应按照[RFC2119]中的定义理解。










Harrington, et al.          标准轨道                     [第4页]


RFC 3411      SNMP管理框架的架构 2002年12月


1.2. SNMP

   SNMP管理系统包括：

      -  若干（可能很多）节点，每个节点包含一个SNMP实体，内含命令响应和通知发起应用程序，能够访问管理仪器（传统称为代理）；

      -  至少一个SNMP实体，包含命令生成器和/或通知接收应用程序（传统称为管理器）；

      -  一种管理协议，用于在SNMP实体之间传递管理信息。

   执行命令生成器和通知接收应用程序的SNMP实体监控和控制被管理元素。被管理元素是诸如主机、路由器、终端服务器等设备，通过访问其管理信息进行监控和控制。

   本文件的目的是定义一种架构，能够在各种配置和环境中实现有效管理。该架构设计满足以下几类实现的需求：

      -  具有命令响应和/或通知发起应用的最小SNMP实体（传统称为SNMP代理）；

      -  具有代理转发应用的SNMP实体（传统称为SNMP代理）；

      -  由命令行驱动、具有命令生成器和/或通知接收应用的SNMP实体（传统称为SNMP命令行管理器）；

      -  具有命令生成器和/或通知接收、以及命令响应和/或通知发起应用的SNMP实体（传统称为中级管理器或双角色实体）；

      -  具有命令生成器和/或通知接收、以及可能的其他类型应用，用于管理大量被管理节点（传统称为（网络）管理站点）。





Harrington, et al.          标准轨道                     [第5页]


RFC 3411      SNMP管理框架的架构 2002年12月


1.3.  本架构的目标

   本架构由以下目标驱动：

      -  尽可能利用已有材料。它主要基于之前的工作，非正式称为SNMPv2u和SNMPv2*，这些又基于SNMPv2p。

      -  解决对安全的SET支持的需求，这是SNMPv1和SNMPv2c中最重要的缺陷之一。

      -  使架构的部分内容能够在标准轨道上推进，即使尚未就所有部分达成共识。

      -  设计出具有较长生命期的SNMP框架架构。

      -  保持SNMP尽可能简单。

      -  使部署符合标准的最小实现成本较低。

      -  使得随着新方法的出现，可以升级SNMP的部分内容，而不影响整个SNMP框架。

      -  支持大型网络所需的功能，同时确保支持某一功能的成本与其重要性成正比。

1.4.  本架构的安全需求

   许多传统的网络协议威胁也适用于管理问题，因此也会影响任何在SNMP管理框架中使用的安全模型。其他威胁则不适用于管理问题。本节讨论主要威胁、次要威胁以及较次要的威胁。

   在本架构中，任何安全模型应提供保护的主要威胁包括：

      信息修改
         该威胁指未授权实体可能篡改在传输中的SNMP消息，从而进行未授权的管理操作，包括伪造对象值。

      冒充
         该威胁指通过假冒具有相应权限的身份，进行未授权的管理操作。

   其他次要威胁，任何在本架构中使用的安全模型也应提供保护，包括：

      消息流修改
         SNMP协议通常基于无连接的传输服务，可能在任何子网络服务上运行。消息的重排序、延迟或重放在许多子网络服务的自然操作中都可能发生。消息流修改威胁指恶意篡改消息顺序、延迟或重放，以进行未授权的管理操作。

      信息泄露
         该威胁指窃听SNMP引擎之间的通信。根据本地政策，可能需要防范此类威胁。

   至少存在两类威胁，安全模型在本架构中无需保护，因为它们被认为较不重要：

      拒绝服务
         安全模型无需应对广泛的攻击，导致授权用户的服务被拒绝。在许多情况下，这类拒绝服务攻击与网络故障难以区分，而后者是任何可行管理协议必须应对的。

      流量分析
         安全模型无需应对流量分析攻击。许多流量模式是可预测的——管理实体可能由少数管理站点定期管理——因此，保护免受流量分析的优势有限。





Harrington, et al.          标准轨道                     [第7页]


RFC 3411      SNMP管理框架的架构 2002年12月


1.5.  设计决策

   为实现架构的目标和满足安全需求，做出了一系列设计决策：

- 架构
  应该定义一个架构，明确文档之间的概念边界。应当定义子系统，描述SNMP框架中特定部分提供的抽象服务。抽象服务接口（由服务原语描述）界定了文档之间的抽象边界，以及由SNMP框架的概念子系统提供的抽象服务。

- 自包含的文档
  针对SNMP框架某一特定部分的处理所需的程序元素和MIB对象，应在同一文档中定义，并且尽可能不在其他文档中引用。这使得各部分可以作为独立且自包含的单元进行设计和文档编写，这与SNMP MIB模块的整体方法一致。随着SNMP的演变，描述其他部分的文档不会受到直接影响。这种模块化设计允许安全模型、认证和隐私机制以及消息格式在需要时升级和补充。自包含的文档可以在不同的时间线上沿着标准化路径推进。

  这种规范的模块化并不意味着对实现施加任何具体要求。

- 威胁
  安全子系统中的安全模型应当保护主要威胁和次要威胁：信息修改、伪装、消息流修改和信息泄露。它们不必保护免受拒绝服务攻击和流量分析的威胁。

- 远程配置
  安全和访问控制子系统引入了一整套新的SNMP配置参数。安全子系统还需要在各个SNMP实体之间频繁更换密钥。为了在大型运营环境中实现部署，这些SNMP参数必须支持远程配置。

Harrington 等人          标准轨迹                     [第8页]

RFC 3411      SNMP管理框架的架构 2002年12月

- 有控的复杂性
  认识到简单管理设备的生产者希望尽量减少SNMP所用资源。同时，也存在需要更复杂配置的场景，这些场景可以投入更多资源以提供更多功能。设计旨在平衡这两种环境的需求，使更复杂的环境可以在逻辑上扩展简单环境。

---

2.  文档概述

下图展示了符合SNMP架构的一组文档。

+------------------------- 文档集 ----------------------------+
|                                                          |
| +----------+              +-----------------+  +----------------+ |
| | 文档     |              | 适用性声明      |  | 共存与过渡     | |
| | 路线图   |              |                 |  |                | |
| +----------+              +-----------------+  +----------------+ |
|                                                          |
| +--------------------------------------------------------+ |
| | 消息处理                                              | |
| | +----------------+  +-----------------+  +--------------+ | |
| | | 传输映射       |  | 消息处理与调度  |  | 安全         | | |
| | |                |  |                 |  |              | | |
| | +----------------+  +-----------------+  +--------------+ | |
| +--------------------------------------------------------+ |
|                                                          |
| +--------------------------------------------------------+ |
| | PDU处理                                                 | |
| | +----------------+  +-----------------+  +--------------+ | |
| | | 协议操作       |  | 应用程序        |  | 访问控制     | | |
| | +----------------+  +-----------------+  +--------------+ | |
| +--------------------------------------------------------+ |
|                                                          |
| +--------------------------------------------------------+ |
| | 信息模型                                               | |
| | +--------------+   +--------------+    +--------------+ | |
| | | 管理信息结构   |   | 文本约定      |    | 一致性声明   | | |
| | |               |   |              |    |              | | |
| | +--------------+   +--------------+    +--------------+ | |
| +--------------------------------------------------------+ |
|                                                          |
| +--------------------------------------------------------+ |
| | MIB模块（支持多种格式，例如：）                          | |
| | +----------------+ +----------------+                     | |
| | | SMIv1（STD 18） | | SMIv2（STD 58） |                     | |
| | | 格式            | | 格式            |                     | |
| | +----------------+ +----------------+                     | |
| +--------------------------------------------------------+ |
+------------------------------------------------------------+

每个文档都可以被替换或补充。本架构文档特别描述了新文档如何融入消息和PDU处理相关的文档集。

2.1.  文档路线图

  可以编写一个或多个文档，描述一组文档如何共同构成特定的框架。文档集的配置可能随时间变化，因此“路线图”应当在一个独立于标准文档的文档中维护。

  例如，“互联网标准管理框架的引言和适用性声明” [RFC3410] 就是此类路线图的示例。

2.2.  适用性声明

  SNMP在不同规模和复杂度的网络中使用，管理需求也各异。有些模型将针对特定管理问题设计，比如消息安全。

  可以编写一个或多个文档，描述某些版本的SNMP或SNMP中的模型适用的环境，以及某些模型可能不适用的环境。

2.3.  共存与过渡

  进化架构的目的是允许新模型取代或补充现有模型。模型之间的交互可能导致不兼容、安全“漏洞”及其他不良影响。

  共存文档旨在详细说明已识别的异常情况，并描述解决模型间交互问题的必要和推荐行为。

  共存文档可以与模型定义文档分开编写，用于描述和解决模型定义之间的交互异常。

  另外，也可以在共存文档或单独的文档中描述模型之间的过渡建议。

  例如，[RFC2576]，“互联网标准网络管理框架的版本1、2和3的共存”。

2.4.  传输映射

  SNMP消息通过多种传输方式进行传输。传输映射文档的目的是定义SNMP与传输之间的映射方式。

2.5.  消息处理

  消息处理模型文档定义消息格式，通常由SNMP消息头中的版本字段标识。该文档还可以定义用于消息处理和版本特定交互仪表化的MIB模块。

  SNMP引擎包含一个或多个消息处理模型，因此可以支持多版本SNMP消息的收发。

2.6.  安全

  某些环境需要安全协议交互。安全通常在两个阶段应用：

    - 消息的传输/接收阶段，及
    - 消息内容的处理阶段。

  在本文档中，“安全”指消息级安全；“访问控制”指应用于协议操作的安全措施。

  认证、加密和时效性检查是消息级安全的常用功能。

  安全文档描述安全模型、模型保护的威胁、模型目标、用于实现目标的协议，可能还会定义MIB模块，用于描述处理过程中使用的数据，以及远程配置消息级安全参数（如密钥）。

  一个SNMP引擎可以同时支持多个安全模型。

2.7.  访问控制

  在处理过程中，可能需要控制对管理对象的访问权限。

  访问控制模型定义判断是否允许访问管理对象的机制。它可能定义在一个MIB模块中，用于处理时的访问策略，以及支持远程配置。

2.8.  协议操作

  SNMP消息封装了SNMP协议数据单元（PDU）。PDU定义了接收SNMP引擎执行的操作。协议操作文档的目的是定义协议的操作，涉及PDU的处理。每个PDU属于以下一种或多种类别：

    1) 读类（Read Class）：
       包含检索管理信息的协议操作。例如，[RFC3416]定义了以下读类操作：GetRequest-PDU、GetNextRequest-PDU和GetBulkRequest-PDU。

    2) 写类（Write Class）：
       包含试图修改管理信息的协议操作。例如，[RFC3416]定义了写类操作：SetRequest-PDU。

    3) 响应类（Response Class）：
       包含对先前请求的响应操作。例如，[RFC3416]定义了响应类：Response-PDU、Report-PDU。

    4) 通知类（Notification Class）：
       包含向通知接收应用发送通知的操作。例如，[RFC3416]定义了通知类操作：Trapv2-PDU、InformRequest-PDU。

    5) 内部类（Internal Class）：
       包含在SNMP引擎内部交换的操作。例如，[RFC3416]定义了内部类操作：Report-PDU。

  以上五类分类基于PDU的功能特性。还可以根据是否期望响应对PDU进行分类：

    6) 确认类（Confirmed Class）：
       包含会导致接收SNMP引擎返回响应的所有操作。例如，[RFC3416]定义了确认类的操作：GetRequest-PDU、GetNextRequest-PDU、GetBulkRequest-PDU、SetRequest-PDU和InformRequest-PDU。

    7) 非确认类（Unconfirmed Class）：
       包含不需要确认的所有操作。例如，[RFC3416]定义了非确认类的操作：Report-PDU、Trapv2-PDU和GetResponse-PDU。

  应用文档定义支持哪些协议操作。

2.9.  应用程序

  一个SNMP实体通常包含多个应用程序。应用程序利用SNMP引擎的服务完成特定任务。它们协调管理信息操作的处理，并可能使用SNMP消息与其他SNMP实体通信。

  应用程序文档描述应用的目的、所需的SNMP引擎服务，以及用于执行管理操作的协议操作和信息模型。

  应用程序文档还定义了用以具体描述管理信息结构、文本约定、符合性要求和支持的操作的文档集。

2.10. 管理信息结构

  管理信息被视为一组管理对象，存放在虚拟信息存储区——管理信息库（MIB）中。相关对象的集合在MIB模块中定义。

  管理信息结构文档的目的是建立定义对象、模块及其他管理信息元素的符号表示法。

2.11. 文本约定

  在设计MIB模块时，定义新类型（类似于SMI中定义的类型，但具有更精确的语义或特殊语义）非常有用。这些新类型称为文本约定，可以在单独的文档中定义，也可以在MIB模块中定义。

2.12. 一致性声明

  可能需要定义实现的最低要求以及实际达到的实现水平。此类定义由一致性声明文档使用的符号表示。

2.13. 管理信息库模块

  MIB文档描述一组管理对象，用于监控某个管理节点的某个方面。

2.13.1.  SNMP监控MIBs

一个SNMP MIB文档可以定义一组管理对象，用于监测SNMP协议本身。此外，文档中还可以定义MIB模块，描述SNMP架构的某些部分，例如消息处理模型、安全模型等，旨在监测这些模型并实现远程配置。

2.14. SNMP框架文档

该架构旨在实现SNMP框架各部分的有序演进。

在本文档的其余部分，“子系统”一词指的是对框架某一部分的抽象且不完整的规范，这些规范由模型规范进一步细化。

“模型”描述子系统的具体设计，定义符合该模型的附加约束和规则。模型具有足够的细节，以便实现该规范。

“实现”是子系统的实例，符合一个或多个特定模型。

SNMP第1版（SNMPv1）是最初的互联网标准网络管理框架，详见RFC 1155、1157和1212。

SNMP第2版（SNMPv2）是在SNMPv1框架基础上派生的SNMPv2框架，详见STD 58、RFC 2578、2579、2580，以及STD 62、RFC 3416、3417和3418。SNMPv2没有定义消息格式。

基于社区的SNMP第2版（SNMPv2c）是对SNMPv2框架的实验性扩展，详见[RFC1901]。它增加了与SNMPv1消息格式类似的SNMPv2c消息格式。

SNMP第3版（SNMPv3）是一个可扩展的SNMP框架，扩展了SNMPv2框架，支持以下内容：

- 新的SNMP消息格式，
- 消息安全（安全性）,
- 访问控制，
- 远程配置SNMP参数。

其他SNMP框架（即其他实现子系统的配置）也应与本架构保持一致。

3. 架构元素

本节介绍架构的各个元素及其命名方式。命名主要有三类：

1）实体的命名，
2）身份的命名，
3）管理信息的命名。

此外，架构还定义了一些用于文档中的其他结构的名称。

3.1. 实体的命名

SNMP实体是该架构的实现。每个SNMP实体由一个SNMP引擎和一个或多个相关应用组成。

下图展示了SNMP实体及其内部组件的详细结构。

（图示略）

3.1.1. SNMP引擎

SNMP引擎提供消息的发送与接收、消息的认证与加密，以及对管理对象的访问控制服务。每个SNMP引擎与其所在的SNMP实体一一对应。

引擎包括：

1）调度器（Dispatcher），
2）消息处理子系统（Message Processing Subsystem），
3）安全子系统（Security Subsystem），
4）访问控制子系统（Access Control Subsystem）。

3.1.1.1. snmpEngineID

在管理域内，snmpEngineID是SNMP引擎的唯一标识符。由于SNMP引擎与SNMP实体一一对应，它也唯一标识该实体在该管理域中的身份。注意，不同管理域中的SNMP实体可能具有相同的snmpEngineID值。管理域的联合可能需要分配新的值。

3.1.1.2. 调度器

每个SNMP引擎只有一个调度器。它支持在引擎中同时处理多版本的SNMP消息，方法包括：

- 通过网络发送和接收SNMP消息，
- 确定消息的版本并与相应的消息处理模型交互，
- 为SNMP应用提供将PDU传递到应用的抽象接口，
- 为SNMP应用提供将PDU发送到远程SNMP实体的抽象接口。

3.1.1.3. 消息处理子系统

消息处理子系统负责准备待发送的消息，以及从接收的消息中提取数据。

它可能包含多个消息处理模型，如下图所示。

（图示略）

3.1.1.3.1. 消息处理模型

每个消息处理模型定义特定版本SNMP消息的格式，并协调该版本消息格式的准备和提取工作。

（后续内容略，结构类似，详细描述安全子系统、访问控制子系统、应用程序等组件及其模型和协议。）

总结：本文档详细描述了SNMP管理框架的架构元素，包括实体、引擎、子系统（消息处理、安全、访问控制）以及应用程序的组成和交互方式。这些定义确保了不同实现之间的兼容性和扩展性。

+------------------------------+
|           网络               |
+------------------------------+
   ^       ^              ^
   |       |              |
   v       v              v
+-----+ +-----+       +-------+
| UDP | | IPX | ...   | 其他  |
+-----+ +-----+       +-------+              （传统的SNMP代理）
+-------------------------------------------------------------------+
|              ^                                                    |
|              |        +---------------------+  +----------------+ |
|              |        | 消息处理子系统       |  | 安全子系统     | |
| 调度器        v        +---------------------+  +----------------+ |
| +-------------------+ |     +------------+  |  |                | |
| | 传输映射          | |  +->| v1MP *    |<--->| +------------+ | |
| | （如RFC 3417）     | |  |  +------------+  |  | | 其他安全模型 | |
| |                   | |  |  +------------+  |  | |                | |
| | 消息调度器        | |  +->| v2cMP *   |<--->| | 用户基础安全模型 | |
| |                   | |  |  +------------+  |  |                | |
| | PDU调度器         | |  |  +------------+  |  |                | |
| +-------------------+ |  +->| v3MP *    |<--->| +------------+ | |
|              ^        |     +------------+  |  |                | |
|              |        +---------------------+  +----------------+ |
|              v                                                    |
|      +-------+-------------------------+---------------+          |
|      ^                                 ^               ^          |
|      |                                 |               |          |
|      v                                 v               v          |
| +-------------+   +---------+   +--------------+  +-------------+ |
| |  命令响应器   |   |  访问控制  |   | 通知发起器   |  | 代理转发器   | |
| |  应用程序     |<->| 控制       |<->| 应用程序     |  | 应用程序     | |
| +-------------+   +---------+   +--------------+  +-------------+ |
|      ^                                 ^                          |
|      |                                 |                          |
|      v                                 v                          |
| +----------------------------------------------+                  |
| |             MIB仪表化                     |      SNMP实体   |
+-------------------------------------------------------------------+






Harrington 等人          标准追踪                     [第24页]


RFC 3411      SNMP管理框架架构 2002年12月


3.2.  身份的命名

                            主要身份
                                ^
                                |
                                |
   +----------------------------|-------------+
   | SNMP引擎                 v             |
   |                    +--------------+      |
   |                    |              |      |
   |  +-----------------| securityName |---+  |
   |  | 安全模型        |              |   |  |
   |  |                 +--------------+   |  |
   |  |                         ^          |  |
   |  |                         |          |  |
   |  |                         v          |  |
   |  |  +------------------------------+  |  |
   |  |  |                              |  |  |
   |  |  |  模型                        |  |  |
   |  |  |  依赖                        |  |  |
   |  |  |  安全ID                      |  |  |
   |  |  |                              |  |  |
   |  |  +------------------------------+  |  |
   |  |                         ^          |  |
   |  |                         |          |  |
   |  +-------------------------|----------+  |
   |                            |             |
   |                            |             |
   +----------------------------|-------------+
                                |
                                v
                             网络

3.2.1.  主要身份（Principal）

   主要身份是代表“谁”的实体，即服务提供或处理的对象。

   主要身份可以是：在特定角色中行动的个人；一组以特定角色行动的个人；一个应用程序或多个应用程序的集合；以及它们的组合。

3.2.2.  securityName（安全名）

   安全名是表示主要身份的可读字符串。它具有模型无关的格式，可以在特定安全模型之外使用。

3.2.3.  模型依赖的安全ID

   模型依赖的安全ID是某个安全模型中securityName的特定表示。

   模型依赖的安全ID可能是可读的，也可能不可读，且具有模型特定的语法。例如，社区名或用户名。

   将模型依赖的安全ID转换为安全名，或反之的责任由相关的安全模型承担。

3.3.  管理信息的命名

   管理信息存放在SNMP实体中，命令响应应用程序可以在多个上下文中本地访问这些信息。该应用程序使用的contextEngineID等于其关联SNMP引擎的snmpEngineID。

































Harrington 等人          标准追踪                     [第26页]


RFC 3411      SNMP管理框架架构 2002年12月


   +--------------------------------------------------------------+
   |  SNMP实体（由snmpEngineID标识，例如：                     |
   |  '800002b804616263'H（企业696，字符串"abc"））             |
   |                                                              |
   |  +---------------------------------------------------------+ |
   |  | SNMP引擎（由snmpEngineID标识）                            | |
   |  |                                                          | |
   |  | +-------------+ +------------+ +-----------+ +-----------+ | |
   |  | |             | |            | |           | |           | | |
   |  | | 调度器      | | 消息处理    | | 安全子系统 | | 访问控制  | | |
   |  | |             | | 子系统      | |           | | 子系统     | | |
   |  | |             | |            | |           | |           | | |
   |  | +-------------+ +------------+ +-----------+ +-----------+ | |
   |  |                                                          | |
   |  +---------------------------------------------------------+ |
   |                                                              |
   |  +---------------------------------------------------------+ |
   |  |  命令响应应用程序                                         | |
   |  |  （contextEngineID，例如：'800002b804616263'H）            | |
   |  |                                                          | |
   |  |  示例contextNames：                                       | |
   |  |                                                          | |
   |  |  "bridge1"          "bridge2"            ""（默认）        | |
   |  |  ---------          ---------            ------------        | |
   |  |      |                  |                   |                | |
   |  +------|------------------|-------------------|--------------+  |
   |         |                  |                   |                |
   |  +------|------------------|-------------------|--------------+  |
   |  |  MIB | 仪表化        |                   |                | |
   |  |  +---v------------+ +---v------------+ +----v-----------+  | |
   |  |  | 上下文        | | 上下文        | | 上下文        |  | |
   |  |  |                | |                | |                |  | |
   |  |  | +------------+ | | +------------+ | | +------------+ |  | |
   |  |  | | 桥接MIB     | | | | 桥接MIB     | | | | 其他MIB     | |  | |
   |  |  | +------------+ | | +------------+ | | +------------+ |  | |
   |  |  |                | |                | |                |  | |
   |  |  |                | |                | | +------------+ |  | |
   |  |  |                | |                | | | 其他MIB     | |  | |
   |  |  |                | |                | | +------------+ |  | |
   |  |  |                | |                | |                |  | |
+-----------------------------------------------------------------+









Harrington 等人          标准追踪                     [第27页]


RFC 3411      SNMP管理框架架构 2002年12月


3.3.1.  SNMP上下文（Context）

   SNMP上下文，简称“上下文”，是SNMP实体可访问的管理信息集合。一个管理信息项可能存在于多个上下文中。SNMP实体可能访问多个上下文。

   通常，每个管理对象类型在管理域内有多个实例。为了简化，MIB模块定义的实例识别方法不允许在管理域内的所有实例中区分每个实例；而是只在某个范围或“上下文”内识别实例。一个管理域内可能存在多个上下文。上下文通常是物理设备，或逻辑设备，甚至可以涵盖多个设备，或者单个设备的子集，或者多个设备的子集，但上下文始终定义为单个SNMP实体的子集。因此，为了识别管理域中的某个管理信息项，除了对象类型和实例外，还必须指定其contextName和contextEngineID。

   例如，ifDescr [RFC2863]定义为网络接口的描述。要识别设备X的第一个网络接口的描述，需要四个信息：提供访问设备X管理信息的SNMP实体的snmpEngineID、contextName（device-X）、管理对象类型（ifDescr）以及实例（“1”）。

   每个上下文在管理域内至少有一个唯一标识。相同的管理信息项可以存在于多个上下文中。一个管理信息项可能有多个唯一标识。当管理信息项存在于多个上下文中，或一个上下文有多个唯一标识时，就会出现这种情况。

   由contextEngineID和contextName组成的组合可以唯一标识管理域内的一个上下文；注意，可能存在多个不同的contextEngineID和contextName组合，它们可以唯一标识同一个上下文。

3.3.2.  contextEngineID（上下文引擎ID）

   在一个管理域内，contextEngineID唯一标识一个SNMP实体，该实体可以实现具有特定contextName的上下文实例。

3.3.3.  contextName（上下文名）

   上下文名用于命名一个上下文。每个SNMP实体内，contextName必须是唯一的。

3.3.4.  scopedPDU（范围PDU）

   范围PDU是包含contextEngineID、contextName和PDU的数据块。

   PDU是SNMP协议数据单元，包含在特定上下文中命名的信息，该信息由contextEngineID和contextName的组合在管理域内唯一标识。关于SNMP PDU的更多信息，请参见RFC 3416。

3.4.  其他构造

3.4.1.  maxSizeResponseScopedPDU（最大响应范围PDU大小）

   maxSizeResponseScopedPDU是发送方愿意接受的范围PDU的最大尺寸。注意，范围PDU的大小不包括SNMP消息头的大小。

3.4.2.  本地配置数据存储（LCD）

   SNMP实体中的子系统、模型和应用程序可能需要保存自己的配置数据集。

   这些配置数据的部分内容可以作为管理对象访问。

   这些数据集的集合称为实体的本地配置数据存储（LCD）。

3.4.3.  securityLevel（安全级别）

   该架构定义了三种安全级别：

      - 无认证无隐私（noAuthNoPriv）

      - 有认证无隐私（authNoPriv）

      - 有认证有隐私（authPriv）

这些值按顺序排列：noAuthNoPriv 小于 authNoPriv，而 authNoPriv 小于 authPriv。

每条消息都关联一个安全级别。所有子系统（消息处理、安全、访问控制）以及应用程序在处理消息及其内容时，必须提供安全级别的值，或遵循所提供的安全级别。

4.  抽象服务接口

   已定义抽象服务接口，用于描述SNMP实体内各子系统之间的概念性接口。抽象服务接口旨在帮助澄清SNMP实体的外部可观察行为，而不限制实现的结构或组织。特别地，它们不应被解释为API或API的要求声明。

   这些抽象服务接口由一组原语定义，描述提供的服务以及调用这些服务时传递的抽象数据元素。本节列出为各子系统定义的原语。

4.1.  调度器原语

   调度器通常通过其PDU调度器向SNMP应用程序提供服务。本节描述由PDU调度器提供的原语。






















Harrington 等人          标准追踪                     [第30页]


RFC 3411      SNMP管理框架架构 2002年12月


4.1.1.  生成外发请求或通知

   PDU调度器提供以下原语，供应用程序向另一个SNMP实体发送SNMP请求或通知：

   statusInformation =              -- 成功时返回sendPduHandle
                                      -- 失败时返回errorIndication
     sendPdu(
     IN   transportDomain           -- 传输域
     IN   transportAddress          -- 传输地址
     IN   messageProcessingModel    -- 通常为SNMP版本
     IN   securityModel             -- 使用的安全模型
     IN   securityName              -- 代表此主要身份
     IN   securityLevel             -- 请求的安全级别
     IN   contextEngineID           -- 来自/在此实体的数据
     IN   contextName               -- 此上下文中的数据
     IN   pduVersion                -- PDU的版本
     IN   PDU                       -- SNMP协议数据单元
     IN   expectResponse            -- TRUE或FALSE
          )

4.1.2.  处理入站请求或通知PDU

   PDU调度器提供以下原语，将入站SNMP PDU传递给应用程序：

处理PDU（请求/通知PDU）

   processPdu(                      -- 处理请求或通知PDU
     IN   messageProcessingModel    -- 通常为SNMP版本
     IN   securityModel             -- 使用的安全模型
     IN   securityName              -- 代表此主体
     IN   securityLevel             -- 安全级别
     IN   contextEngineID           -- 来自/位于此SNMP实体的数据
     IN   contextName               -- 来自/在此上下文中的数据
     IN   pduVersion                -- PDU的版本
     IN   PDU                       -- SNMP协议数据单元
     IN   maxSizeResponseScopedPDU  -- 响应PDU的最大尺寸
     IN   stateReference            -- 指向状态信息的引用
          )                         -- 发送响应时所需

Harrington 等人          标准轨迹                    [第31页]

RFC 3411      SNMP管理框架架构  2002年12月

4.1.3. 生成外发响应

   PDU调度器提供以下原语，供应用程序返回SNMP响应PDU给PDU调度器：

   result =                         -- 成功或失败
   returnResponsePdu(
     IN   messageProcessingModel    -- 通常为SNMP版本
     IN   securityModel             -- 使用的安全模型
     IN   securityName              -- 代表此主体
     IN   securityLevel             -- 与接收请求相同
     IN   contextEngineID           -- 来自/位于此SNMP实体的数据
     IN   contextName               -- 来自/在此上下文中的数据
     IN   pduVersion                -- PDU的版本
     IN   PDU                       -- SNMP协议数据单元
     IN   maxSizeResponseScopedPDU  -- 发送方能接受的最大尺寸
     IN   stateReference            -- 指向状态信息的引用
                                    -- 与请求一起提供
     IN   statusInformation         -- 成功或错误指示
                                    -- 出错时为错误计数器OID/值
          )

4.1.4. 处理入站响应PDU

   PDU调度器提供以下原语，将入站SNMP响应PDU传递给应用程序：

   processResponsePdu(              -- 处理响应PDU
     IN   messageProcessingModel    -- 通常为SNMP版本
     IN   securityModel             -- 使用的安全模型
     IN   securityName              -- 代表此主体
     IN   securityLevel             -- 安全级别
     IN   contextEngineID           -- 来自/位于此SNMP实体的数据
     IN   contextName               -- 来自/在此上下文中的数据
     IN   pduVersion                -- PDU的版本
     IN   PDU                       -- SNMP协议数据单元
     IN   statusInformation         -- 成功或错误指示
     IN   sendPduHandle             -- 来自sendPdu的句柄
          )

4.1.5. 注册处理SNMP PDU的责任

   应用程序可以根据以下原语，向PDU调度器注册/注销对特定contextEngineID、特定pduType的责任。具体可以注册的pduType列表由包含PDU调度器的SNMP实体支持的消息处理模型决定。

   statusInformation =            -- 成功或错误指示
     registerContextEngineID(
     IN   contextEngineID         -- 负责此项
     IN   pduType                 -- 要注册的pduType
          )

   unregisterContextEngineID(
     IN   contextEngineID         -- 放弃此项责任
     IN   pduType                 -- 要注销的pduType
          )

   注意：registerContextEngineID和unregisterContextEngineID抽象服务接口的实现可能提供特定实现的方法，允许应用程序注册/注销所有可能的contextEngineID或pduType参数值。

4.2. 消息处理子系统原语

   调度器与消息处理模型交互，以处理特定版本的SNMP消息。本节描述消息处理子系统提供的原语。

4.2.1. 准备外发SNMP请求或通知消息

   消息处理子系统提供此原语，用于准备外发的SNMP请求或通知消息：

   statusInformation =              -- 成功或错误指示
     prepareOutgoingMessage(
     IN   transportDomain           -- 使用的传输域
     IN   transportAddress          -- 使用的传输地址
     IN   messageProcessingModel    -- 通常为SNMP版本
     IN   securityModel             -- 使用的安全模型
     IN   securityName              -- 代表此主体
     IN   securityLevel             -- 请求的安全级别
     IN   contextEngineID           -- 来自/位于此实体的数据
     IN   contextName               -- 来自/在此上下文中的数据
     IN   pduVersion                -- PDU的版本
     IN   PDU                       -- SNMP协议数据单元
     IN   expectResponse            -- TRUE或FALSE
     IN   sendPduHandle             -- 用于匹配响应的句柄
     OUT  destTransportDomain       -- 目标传输域
     OUT  destTransportAddress      -- 目标传输地址
     OUT  outgoingMessage           -- 要发送的消息
     OUT  outgoingMessageLength     -- 消息长度
          )

4.2.2. 准备外发SNMP响应消息

   消息处理子系统提供此原语，用于准备外发的SNMP响应消息：

   result =                         -- 成功或失败
     prepareResponseMessage(
     IN   messageProcessingModel    -- 通常为SNMP版本
     IN   securityModel             -- 与接收请求相同
     IN   securityName              -- 与接收请求相同
     IN   securityLevel             -- 与接收请求相同
     IN   contextEngineID           -- 来自/位于此SNMP实体的数据
     IN   contextName               -- 来自/在此上下文中的数据
     IN   pduVersion                -- PDU的版本
     IN   PDU                       -- SNMP协议数据单元
     IN   maxSizeResponseScopedPDU  -- 能接受的最大尺寸
     IN   stateReference            -- 指向状态信息的引用
                                    -- 与请求一起提供
     IN   statusInformation         -- 成功或错误指示
                                    -- 出错时为错误计数器OID/值
     OUT  destTransportDomain       -- 目标传输域
     OUT  destTransportAddress      -- 目标传输地址
     OUT  outgoingMessage           -- 要发送的消息
     OUT  outgoingMessageLength     -- 消息长度
          )

4.2.3. 从入站SNMP消息准备数据元素

   消息处理子系统提供此原语，用于准备入站SNMP消息的抽象数据元素：

   result =                         -- 成功或错误指示
     prepareDataElements(
     IN   transportDomain           -- 来源传输域
     IN   transportAddress          -- 来源传输地址
     IN   wholeMsg                  -- 从网络接收的完整消息
     IN   wholeMsgLength            -- 从网络接收的消息长度
     OUT  messageProcessingModel    -- 通常为SNMP版本
     OUT  securityModel             -- 使用的安全模型
     OUT  securityName              -- 代表此主体
     OUT  securityLevel             -- 请求的安全级别
     OUT  contextEngineID           -- 来自/位于此实体的数据
     OUT  contextName               -- 来自/在此上下文中的数据
     OUT  pduVersion                -- PDU的版本
     OUT  PDU                       -- SNMP协议数据单元
     OUT  pduType                   -- SNMP PDU类型
     OUT  sendPduHandle             -- 匹配请求的句柄
     OUT  maxSizeResponseScopedPDU  -- 发送方能接受的最大尺寸
     OUT  statusInformation         -- 成功或错误指示
                                    -- 出错时为错误计数器OID/值
     OUT  stateReference            -- 指向状态信息的引用
                                    -- 用于可能的响应

4.3. 访问控制子系统原语

   应用程序通常是访问控制子系统服务的客户端。

   提供以下原语，用于检查是否允许访问：

   statusInformation =              -- 成功或错误指示
     isAccessAllowed(
     IN   securityModel             -- 使用的安全模型
     IN   securityName              -- 请求访问的主体
     IN   securityLevel             -- 安全级别
     IN   viewType                  -- 读、写或通知视图
     IN   contextName               -- 包含变量名的上下文
     IN   variableName              -- 被管理对象的OID
          )

4.4. 安全子系统原语

   消息处理子系统是安全子系统服务的典型客户端。

4.4.1. 生成请求或通知消息

   安全子系统提供以下原语，用于生成请求或通知消息：

   statusInformation =
     generateRequestMsg(
     IN   messageProcessingModel    -- 通常为SNMP版本
     IN   globalData                -- 消息头、管理数据
     IN   maxMessageSize            -- 发送SNMP实体的最大消息尺寸
     IN   securityModel             -- 用于外发消息
     IN   securityEngineID          -- 权威SNMP实体
     IN   securityName              -- 代表此主体
     IN   securityLevel             -- 请求的安全级别
     IN   scopedPDU                 -- 消息（明文）负载
     OUT  securityParameters        -- 由安全模块填写
     OUT  wholeMsg                  -- 完整生成的消息
     OUT  wholeMsgLength            -- 生成消息的长度
          )

4.4.2. 处理入站消息

   安全子系统提供此原语，用于处理入站消息：

   statusInformation =              -- 错误指示或成功
                                    -- 出错时为错误计数器OID/值
     processIncomingMsg(
     IN   messageProcessingModel    -- 通常为SNMP版本
     IN   maxMessageSize            -- 发送SNMP实体的最大消息尺寸
     IN   securityParameters        -- 接收消息的安全参数
     IN   securityModel             -- 接收消息的安全模型
     IN   securityLevel             -- 安全级别
     IN   wholeMsg                  -- 网络上传输的完整消息
     IN   wholeMsgLength            -- 接收的消息长度
     OUT  securityEngineID          -- 权威SNMP实体
     OUT  securityName              -- 主体的识别信息
     OUT  scopedPDU,                -- 消息（明文）负载
     OUT  maxSizeResponseScopedPDU  -- 发送方能处理的最大尺寸
     OUT  securityStateReference    -- 指向安全状态的引用
          )                         -- 处理响应所需的信息

4.4.3. 生成响应消息

   安全子系统提供以下原语，用于生成响应消息：

   statusInformation =
     generateResponseMsg(
     IN   messageProcessingModel    -- 通常为SNMP版本
     IN   globalData                -- 消息头、管理数据
     IN   maxMessageSize            -- 发送SNMP实体的最大消息尺寸
     IN   securityModel             -- 用于外发消息
     IN   securityEngineID          -- 权威SNMP实体
     IN   securityName              -- 代表此主体
     IN   securityLevel             -- 用于外发消息
     IN   scopedPDU                 -- 消息（明文）负载
     IN   securityStateReference    -- 指向安全状态信息的引用（来自原始请求）
     OUT  securityParameters        -- 由安全模块填写
     OUT  wholeMsg                  -- 完整生成的消息
     OUT  wholeMsgLength            -- 生成消息的长度
          )

4.5. 常用原语

   这些原语由多个子系统提供。

4.5.1. 释放状态引用信息

   所有传递stateReference信息的子系统，还提供一个原语，用于释放持有的状态信息内存：

   stateRelease(
     IN   stateReference       -- 要释放的引用句柄
          )

4.6. 场景图

4.6.1. 命令生成器或通知发起者

   此图展示了命令生成器或通知发起应用如何请求发送PDU，以及响应（异步）如何返回给该应用。

   命令           调度器               消息             安全
   生成器          |                   处理模型
   |               |                     |             |
   |   sendPdu     |                     |             |
   |--------------->|                     |             |
   |               | prepareOutgoingMessage |             |
   |               |----------------------->|             |
   |               |                     | generateRequestMsg  |
   |               |                     |------------------->|
   |               |                     |             |
   |               |                     |<------------------|
   |               |                     |             |
   |               |<--------------------|             |
   |               |                     |             |
   |               |------------------+  |             |
   |               |  发送SNMP请求消息  |  |             |
   |               |  到网络             |  |             |
   |               |                   v  |             |
   |               |                   :  :             |
   |               |                   :  :             |
   |               |                   :  :             |
   |               |                   |  |             |
   |               |  接收SNMP响应消息  |  |             |
   |               |  从网络           |  |             |
   |               |<------------------+  |             |
   |               |                     |             |
   |               | prepareDataElements |             |
   |               |--------------------->|             |
   |               |                     | processIncomingMsg  |
   |               |                     |------------------->|
   |               |                     |             |
   |               |                     |<------------------|
   |               |                     |             |
   |               |<--------------------|             |
   | processResponsePdu |               |             |
   |<--------------|                     |             |
   |               |                     |             |

4.6.2. 命令响应应用场景图

   此图展示了命令响应器或通知接收者如何注册处理pduType，SNMP消息接收后如何调度PDU到应用程序，以及响应（异步）如何返回到网络。

   命令               调度器             消息             安全
   响应者             |                  处理模型
   |                  |                     |             |
   | registerContextEngineID |             |             |
   |----------------------->|             |             |
   |<-----------------------|  接收SNMP消息 |             |
   |                  | from网络        |             |
   |                  |<--------------+ |             |
   |                  |                     |             |
   |                  | prepareDataElements |             |
   |                  |------------------->|             |
   |                  |                     | processIncomingMsg |
   |                  |                     |------------------->|
   |                  |                     |             |
   |                  |                     |<------------------|
   |                  |                     |             |
   |                  |<-------------------|             |
   |     processPdu   |                     |             |
   |<-----------------|                     |             |
   |                  |                     |             |
   | returnResponsePdu |                   |             |
   |------------------>|                     |             |
   |                  | prepareResponseMsg |             |
   |                  |------------------->|             |
   |                  |                     | generateResponseMsg |
   |                  |                     |------------------->|
   |                  |                     |             |
   |                  |                     |<------------------|
   |                  |                     |             |
   |                  |<-------------------|             |
   |                  |                     |             |
   |                  |--------------+     |             |
   |                  |  发送SNMP消息  |     |             |
   |                  |  到网络        |     |             |
   |                  |              v  |     |             |

（以上为部分场景图示意，全文内容较长，已尽量完整翻译。）

SNMP-框架-管理信息库定义 ::= 开始

导入
    模块标识符，对象类型，
    对象标识符，
    snmp模块                           来自 SNMPv2-SMI
    文本约定                         来自 SNMPv2-TC
    模块合规性，对象组             来自 SNMPv2-CONF;

snmpFrameworkMIB 模块标识符
    最后更新 "200210140000Z"
    组织机构 "SNMPv3 工作组"
    联系信息 "工作组电子邮件：snmpv3@lists.tislabs.com
                订阅：snmpv3-request@lists.tislabs.com

                联席主席：Russ Mundy
                            网络联盟实验室
                邮寄地址：15204 Omega Drive, Suite 300
                          罗克维尔，MD 20850-4601
                          美国
                电子邮件：mundy@tislabs.com
                电话：+1 301-947-7107

                联席主席兼编辑：David Harrington
                            Enterasys 网络
                邮寄地址：35 Industrial Way
                          P. O. Box 5005
                          罗切斯特，新罕布什尔州 03866-5005
                          美国
                电子邮件：dbh@enterasys.com
                电话：+1 603-337-2614

                编辑：Randy Presuhn
                        BMC 软件公司
                邮寄地址：2141 North First Street
                          圣何塞，加利福尼亚 95131
                电子邮件：randy_presuhn@bmc.com
                电话：+1 408-546-1006

                编辑：Bert Wijnen
                        朗讯科技
                邮寄地址：Schagen 33
                          3461 GL Linschoten
                          荷兰

哈灵顿等人。          标准轨迹                     [第40页]

RFC 3411      SNMP管理框架架构  2002年12月

描述：SNMP管理架构的管理信息库

版权（C）互联网协会（2002年）。本版本的MIB模块是RFC 3411的一部分；完整的法律声明请参见RFC本身。

修订版本 "200210140000Z" -- 2002年10月14日
描述：本次修订的更改：
- 更新了各种管理信息。
- 修正了一些拼写错误。
- 修正了关于SnmpEngineID描述中的拼写错误，导致范围重叠为127。
- 将SnmpAdminString定义中的'255a'改为'255t'，以符合当前的SMI。
- 重新措辞SnmpSecurityModel描述中值零的“reserved”。
- 分配安全模型的算法应为每个企业块提供256个，而非255个。
- 示例引擎ID“abcd”不合法，已替换为“800002b804616263'H”，基于示例企业696，字符串“abc”。
- 增加了引擎ID应在重新初始化后保持不变的说明。
此修订作为RFC 3411发布。

修订版本 "199901190000Z" -- 1999年1月19日
描述：更新了编辑者地址，修正了拼写错误。作为RFC 2571发布。

修订版本 "199711200000Z" -- 1997年11月20日
描述：初始版本，发布于RFC 2271。

定义：{ snmpModules 10 }

-- SNMP管理架构中使用的文本约定 ***

SnmpEngineID ::= 文本约定
    状态       当前
    描述："SNMP引擎的管理唯一标识符。此类型的对象用于识别，而非寻址，尽管在生成特定值时可能会使用地址。

该对象的值不得全部为零或全部为'ff'H，也不得为空字符串（长度为零）。

该对象的初始值可以通过操作员控制台输入或算法函数配置。在后者情况下，建议使用以下示例算法。

在系统上存在多个引擎的情况下，不应使用此算法，因为会导致所有引擎具有相同的ID值。

1）第一个比特用于指示其余数据的组成方式。

  0 - 按照企业使用SNMPv3之前的旧方法定义。见第2项。

  1 - 按照本架构定义，见第3项。

注意：这允许现有的引擎ID（也称为AgentID [RFC1910]）与任何新用法共存。

2）snmpEngineID长度为12个八位字节。

  前四个八位字节设置为由互联网号码分配局（IANA）分配的企业SNMP管理私有企业编号的二进制等价物。例如，如果Acme Networks被分配了{ enterprises 696 }，则前四个八位字节为'000002b8'H。

  剩余的八个八位字节由一个或多个企业特定的方法确定。这些方法必须设计成最大程度地确保在代理的管理域中该值的唯一性。例如，可以是SNMP实体的IP地址，或某个接口的MAC地址，且每个地址都应适当用随机八位字节填充。如果定义了多种方法，建议第一个八位字节指示所用的方法，其余八位字节为该方法的函数。

3）八位字节串的长度可变。

  前四个八位字节设置为由互联网号码分配局（IANA）分配的企业SNMP管理私有企业编号的二进制等价物。例如，如果Acme Networks被分配了{ enterprises 696 }，则前四个八位字节为'000002b8'H。

  最左边的比特设置为1。例如，前述Acme Networks的值变为'800002b8'H。

  第五个八位字节指示其余部分（第6个及之后的八位字节）如何格式化。第五个八位字节的值为：

    0 - 保留，未使用。

    1 - IPv4地址（4个八位字节）
        最低的非特殊IP地址

    2 - IPv6地址（16个八位字节）
        最低的非特殊IP地址

    3 - MAC地址（6个八位字节）
        最低的IEEE MAC地址，按规范顺序

    4 - 文本，管理分配
        最大剩余长度27

    5 - 八位字节，管理分配
        最大剩余长度27

    6-127 - 保留，未使用

    128-255 - 按企业定义
        最大剩余长度27

"

语法：八位字节字符串（长度范围：5到32）

---

SnmpSecurityModel ::= 文本约定
    状态       当前
    描述："唯一标识安全子系统中安全模型的标识符。

安全模型的值分配如下：

- 零值不标识任何特定的安全模型。

- 1到255之间的值（含）为标准轨道安全模型，由互联网号码分配局（IANA）管理。

- 大于255的值为企业特定的安全模型。企业特定的securityModel值定义为：

  enterpriseID * 256 + 企业内的安全模型编号

例如，某企业定义的第四个安全模型，其enterpriseID为1，则值为259。

这种安全模型值的分配方案允许最多255个基于标准的安全模型，以及每个企业最多256个安全模型。

预计在实际中，分配新安全模型值的频率会很低，因为同时使用的安全模型越多，互操作性越可能受到影响。因此，认为此范围已足够。如果未来标准委员会认为此数字不足，可以为企业分配一个企业编号，以获得额外的256个值。

注意：最高有效位必须为零；因此，23位用于组织设计和定义非标准安全模型。这限制了新专有安全模型的定义范围，仅限于前8,388,608个企业。

在编码形式中，securityModel值通常只需一个字节，因为在实际中，大多数消息的左边比特为零，符号扩展由编码规则抑制。

目前，已有几个securityModel值被定义用于SNMP或预留给相关MIB对象，具体如下：

  0 - 保留，用于“任何”
  1 - 保留，用于SNMPv1
  2 - 保留，用于SNMPv2c
  3 - 基于用户的安全模型（USM）

---

SnmpMessageProcessingModel ::= 文本约定
    状态       当前
    描述："唯一标识消息处理子系统中消息处理模型的标识符。

消息处理模型的值分配如下：

- 0到255之间的值（含）为标准轨道消息处理模型，由互联网号码分配局（IANA）管理。

- 大于255的值为企业特定的消息处理模型。定义为：

  enterpriseID * 256 + 企业内的消息处理模型编号

例如，某企业定义的第四个消息处理模型，其enterpriseID为1，则值为259。

这种分配方案允许最多255个基于标准的消息处理模型，以及每个企业最多256个。

预计在实际中，分配新消息处理模型值的频率会很低，因为模型越多，互操作性越可能受影响。认为此范围已足够。如未来需要，可为企业分配编号以获得更多值。

注意：最高有效位必须为零；因此，23位用于组织设计和定义非标准消息处理模型。这限制了新专有模型的定义范围，仅限于前8,388,608个企业。

在编码形式中，messageProcessingModel值通常只需一个字节，因为大多数消息的左边比特为零，符号扩展由编码规则抑制。

目前，已有几个值被定义用于SNMP，具体如下：

  0 - 保留，用于SNMPv1
  1 - 保留，用于SNMPv2c
  2 - 保留，用于SNMPv2u和SNMPv2*
  3 - 保留，用于SNMPv3

---

SnmpSecurityLevel ::= 文本约定
    状态       当前
    描述："SNMP消息可以使用的安全级别，包括：

  noAuthNoPriv - 无认证，无隐私
  authNoPriv - 有认证，无隐私
  authPriv - 有认证，有隐私

这些值按顺序排列，noAuthNoPriv 小于 authNoPriv，authNoPriv 小于 authPriv。
"
    语法       整数 { noAuthNoPriv(1), authNoPriv(2), authPriv(3) }

---

SnmpAdminString ::= 文本约定
    显示提示   "255t"
    状态       当前
    描述："包含管理信息的八位字节字符串，优选为人类可读的形式。

为了便于国际化，该信息使用ISO/IEC IS 10646-1字符集，采用RFC2279描述的UTF-8变换格式编码为八位字节字符串。

由于标准的修正不断增加新的码点，实施者必须准备好处理从0x00000000到0x7fffffff的任何码点。不能接受不符合UTF-8编码的码点或超出此范围的字节序列。

应避免使用控制码。

当需要表示换行符时，应使用CR LF控制码序列。

应避免在前后使用空白字符。

对于用户界面硬件或软件不直接支持的码点，可以提供十六进制等其他输入和显示方式。

对于用7位US-ASCII编码的信息，UTF-8编码与US-ASCII编码相同。

UTF-8可能需要多个字节表示一个字符/码点；因此，该对象的长度（以八位字节计）可能不同于编码的字符数。同样，大小限制指的是编码的八位字节数，而非字符数。

注意：当此文本约定用于作为索引的对象时，必须指定SIZE限制，以确保任何对象实例的子标识符数不超过128（见[RFC3416]）。

注意：SnmpAdminString对象的大小以八位字节为单位，而非字符。

snmpFrameworkAdmin
    OBJECT IDENTIFIER ::= { snmpFrameworkMIB 1 }
snmpFrameworkMIBObjects
    OBJECT IDENTIFIER ::= { snmpFrameworkMIB 2 }
snmpFrameworkMIBConformance
    OBJECT IDENTIFIER ::= { snmpFrameworkMIB 3 }

-- SNMP引擎组 ********************************************

snmpEngine OBJECT IDENTIFIER ::= { snmpFrameworkMIBObjects 1 }






哈灵顿等人          标准轨道                    [第48页]


RFC 3411      SNMP管理框架架构  2002年12月


snmpEngineID     OBJECT-TYPE
    SYNTAX       SnmpEngineID
    MAX-ACCESS   只读
    STATUS       当前
    DESCRIPTION "SNMP引擎的管理唯一标识符。

                 该信息应存储在非易失性存储中，以确保在SNMP引擎重新初始化时保持不变。
                "
    ::= { snmpEngine 1 }

snmpEngineBoots  OBJECT-TYPE
    SYNTAX       INTEGER (1..2147483647)
    MAX-ACCESS   只读
    STATUS       当前
    DESCRIPTION "自上次配置snmpEngineID以来，SNMP引擎重新初始化的次数。
                "
    ::= { snmpEngine 2 }

snmpEngineTime   OBJECT-TYPE
    SYNTAX       INTEGER (0..2147483647)
    UNITS        "秒"
    MAX-ACCESS   只读
    STATUS       当前
    DESCRIPTION "自上次snmpEngineBoots对象值发生变化以来的秒数。
                 当增加此对象的值会导致其超过最大值时，
                 snmpEngineBoots会像重新初始化一样递增，随后此对象的值重置为零。
                "
    ::= { snmpEngine 3 }

snmpEngineMaxMessageSize OBJECT-TYPE
    SYNTAX       INTEGER (484..2147483647)
    MAX-ACCESS   只读
    STATUS       当前
    DESCRIPTION "该SNMP引擎能发送或接收并处理的最大SNMP消息长度（以字节为单位），
                 由所有可用传输方式支持的最大消息大小中的最小值决定。
                "
    ::= { snmpEngine 4 }



哈灵顿等人          标准轨道                    [第49页]


RFC 3411      SNMP管理框架架构  2002年12月


-- 认证和隐私协议的注册点 ****************************************

snmpAuthProtocols OBJECT-IDENTITY
    STATUS        当前
    DESCRIPTION  "用于注册标准轨道认证协议的注册点，适用于SNMP管理框架。
                 "
    ::= { snmpFrameworkAdmin 1 }

snmpPrivProtocols OBJECT-IDENTITY
    STATUS        当前
    DESCRIPTION  "用于注册标准轨道隐私协议的注册点，适用于SNMP管理框架。
                 "
    ::= { snmpFrameworkAdmin 2 }

-- 合规性信息 ******************************************

snmpFrameworkMIBCompliances
               OBJECT IDENTIFIER ::= { snmpFrameworkMIBConformance 1 }
snmpFrameworkMIBGroups
               OBJECT IDENTIFIER ::= { snmpFrameworkMIBConformance 2 }

-- 合规性声明

snmpFrameworkMIBCompliance MODULE-COMPLIANCE
    STATUS       当前
    DESCRIPTION "实现SNMP管理框架MIB的SNMP引擎的合规声明。
                "
    MODULE    -- 本模块
        MANDATORY-GROUPS { snmpEngineGroup }

    ::= { snmpFrameworkMIBCompliances 1 }

-- 合规性单元

snmpEngineGroup OBJECT-GROUP
    OBJECTS {
              snmpEngineID,
              snmpEngineBoots,
              snmpEngineTime,
              snmpEngineMaxMessageSize
            }
    STATUS       当前
    DESCRIPTION "用于识别和确定SNMP引擎配置及当前时间状态的对象集合。
                "
    ::= { snmpFrameworkMIBGroups 1 }

结束

6. IANA注意事项

   本文档定义了由IANA管理的三个编号空间，一个用于安全模型，另一个用于消息处理模型，第三个用于SnmpEngineID格式。

6.1. 安全模型

   由IANA管理的SnmpSecurityModel文本约定值范围为0到255（含），专用于标准轨道安全模型。如果未来此范围不足，可以为企业编号分配额外的256个值。

   截至目前，已定义或预留用于SNMP的安全模型值如下：

                           0  保留用于“任何”
                           1  保留用于SNMPv1
                           2  保留用于SNMPv2c
                           3  用户基础安全模型（USM）

6.2. 消息处理模型

   由IANA管理的SnmpMessageProcessingModel文本约定值范围为0到255（含）。每个值唯一标识SNMP管理架构中消息处理子系统的标准轨道消息处理模型。

   如果未来此范围不足，可以为标准委员会申请企业编号，以获得额外的256个值。

   截至目前，已定义用于SNMP的消息处理模型值如下：

                           0  保留用于SNMPv1
                           1  保留用于SNMPv2c
                           2  保留用于SNMPv2u和SNMPv2*
                           3  保留用于SNMPv3



Harrington等人          标准轨道                    [第51页]


RFC 3411      SNMP管理框架架构  2002年12月


6.3. SnmpEngineID格式

   SnmpEngineID文本约定的第五个八位字节包含格式标识符。由IANA管理的值范围为6到127（含）。每个值唯一标识一种标准轨道的SnmpEngineID格式。

7. 知识产权

   IETF不对本文档所述技术的实现或使用中可能涉及的任何知识产权或其他权利的有效性或范围发表任何立场，也不保证已尽力识别此类权利。关于IETF在标准轨道和标准相关文档中的权利事项的程序，详见RFC 2028。任何为公开发布而提出的权利声明、许可保证或试图获得一般许可或使用此类专有权利的努力的副本，可以从IETF秘书处获取。

   IETF欢迎任何相关方就可能涉及实践本标准的技术的版权、专利或专利申请或其他专有权利提出意见。请将相关信息提交给IETF执行董事。

8. 致谢

   本文档由SNMPv3工作组的努力成果。特别感谢以下SNMPv3工作组成员：

      哈拉尔德·特维特·阿尔维斯特兰（Maxware）
      戴夫·巴特尔（SNMP Research, Inc.）
      艾伦·比尔德（Disney Worldwide Services）
      保罗·贝雷沃茨（SWI Systemware/Halcyon Inc.）
      马丁·比约克伦（爱立信）
      乌里·布鲁门塔尔（IBM T.J. Watson研究中心）
      杰夫·凯斯（SNMP Research, Inc.）
      约翰·库兰（BBN）
      麦克·丹尼尔（康柏计算机公司）
      马克斯·德夫林（Eltrax Systems）
      约翰·弗利克（惠普）
      罗布·弗莱（MCI）
      韦斯·哈达克（加州大学戴维斯分校，信息技术 - D.C.A.S.）




Harrington等人          标准轨道                    [第52页]


RFC 3411      SNMP管理框架架构  2002年12月


      大卫·哈灵顿（Cabletron Systems Inc.）
      劳伦·海因茨（BMC Software, Inc.）
      N.C. Hien（IBM T.J. Watson研究中心）
      迈克尔·柯克汉姆（InterWorking Labs, Inc.）
      戴夫·莱维（SNMP Research, Inc.）
      路易斯·A·马马科斯（UUNET Technologies Inc.）
      乔·马尔佐（诺特尔网络）
      保罗·迈耶（Secure Computing Corporation）
      基思·麦克洛格赖（思科系统）
      鲍勃·摩尔（IBM）
      拉斯·蒙迪（TIS实验室，网络联盟）
      鲍勃·纳塔莱（ACE*COMM公司）
      麦克·奥德尔（UUNET Technologies Inc.）
      戴夫·珀金斯（DeskTalk）
      彼得·波尔金霍恩（布鲁内尔大学）
      兰迪·普雷斯霍恩（BMC Software, Inc.）
      大卫·里德（TIS实验室，网络联盟）
      大卫·里德（SNMP Research, Inc.）
      阿列克谢·罗马诺夫（Quality Quorum）
      肖恩·鲁蒂耶（Epilogue）
      约尔根·舍恩沃尔德（布拉赫斯维格工业大学）
      鲍勃·斯图尔特（思科系统）
      麦克·撒切尔（独立顾问）
      伯特·温恩（IBM T.J. Watson研究中心）

   本文档基于IETF安全与管理框架演进咨询团队的建议。该咨询团队成员包括：

      大卫·哈灵顿（Cabletron Systems Inc.）
      杰夫·约翰逊（思科系统）
      大卫·莱维（SNMP Research, Inc.）
      约翰·林恩（Openvision）
      拉斯·蒙迪（可信信息系统）主席
      肖恩·鲁蒂耶（Epilogue）
      格伦·沃特斯（诺特尔）
      伯特·温恩（IBM T. J. Watson研究中心）

   根据咨询团队和SNMPv3工作组章程的建议，设计尽可能借鉴之前的RFC和草案。特别感谢之前被称为SNMPv2u和SNMPv2*的设计作者：

      杰夫·凯斯（SNMP Research, Inc.）
      大卫·哈灵顿（Cabletron Systems Inc.）
      大卫·莱维（SNMP Research, Inc.）
      基思·麦克洛格赖（思科系统）
      布赖恩·奥基夫（惠普）



Harrington等人          标准轨道                    [第53页]


RFC 3411      SNMP管理框架架构  2002年12月


9. 安全注意事项

   本文档描述了实现中如何包含安全模型以保护管理消息，以及访问控制模型以控制对管理信息的访问。

   提供的安全级别由具体的安全模型实现和访问控制模型实现决定。

   应用程序可以访问未加密的数据。应用程序应采取合理措施保护数据不被泄露。

   购买者有责任确保：

      1) 实现符合本架构定义的规则，

      2) 所用的安全和访问控制模型满足组织的安全和访问需求，

      3) 模型和应用的实现符合模型和应用规范，

      4) 实现保护配置秘密，避免意外泄露。

   本文档还包含一个MIB定义模块。所定义的对象都不可写，且其所代表的信息不被认为特别敏感。然而，如果在特定环境中被视为敏感，应通过配置适当的安全和访问控制模型限制访问。

10. 参考文献

10.1. 规范性参考文献

   [RFC2119]   Bradner, S., "用于RFC中的关键词以指示需求级别", BCP 14, RFC 2119, 1997年3月。

   [RFC2279]   Yergeau, F., "UTF-8，ISO 10646的转换格式", RFC 2279, 1998年1月。

   [RFC2578]   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,
               Rose, M. 和 S. Waldbusser, "管理信息结构版本2（SMIv2）", STD 58, RFC 2578, 1999年4月。

   [RFC2579]   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,
               Rose, M. 和 S. Waldbusser, "SMIv2的文本约定", STD 58, RFC 2579, 1999年4月。

   [RFC2580]   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,
               Rose, M. 和 S. Waldbusser, "SMIv2的合规声明", STD 58, RFC 2580, 1999年4月。

   [RFC3412]   Case, J., Harrington, D., Presuhn, R. 和 B. Wijnen,
               "简单网络管理协议（SNMP）的消息处理与调度", STD 62, RFC 3412, 2002年12月。

   [RFC3413]   Levi, D., Meyer, P. 和 B. Stewart, "简单网络管理协议（SNMP）应用", STD 62, RFC 3413, 2002年12月。

   [RFC3414]   Blumenthal, U. 和 B. Wijnen, "版本3的用户基础安全模型（USM）", STD 62, RFC 3414, 2002年12月。

   [RFC3415]   Wijnen, B., Presuhn, R. 和 K. McCloghrie, "基于视图的访问控制模型（VACM）", STD 62, RFC 3415, 2002年12月。

   [RFC3416]   Presuhn, R., Case, J., McCloghrie, K., Rose, M. 和 S. Waldbusser, "SNMP的协议操作", STD 62, RFC 3416, 2002年12月。

   [RFC3417]   Presuhn, R., Case, J., McCloghrie, K., Rose, M. 和 S. Waldbusser, "SNMP的传输映射", STD 62, RFC 3417, 2002年12月。

   [RFC3418]   Presuhn, R., Case, J., McCloghrie, K., Rose, M. 和 S. Waldbusser, "SNMP的管理信息库（MIB）", STD 62, RFC 3418, 2002年12月。



Harrington等人          标准轨道                    [第55页]


RFC 3411      SNMP管理框架架构  2002年12月


10.2. 补充性参考文献

   [RFC1155]   Rose, M. 和 K. McCloghrie, "TCP/IP互联网的管理信息结构和标识", STD 16, RFC 1155, 1990年5月。

   [RFC1157]   Case, J., Fedor, M., Schoffstall, M. 和 J. Davin, "简单网络管理协议", STD 15, RFC 1157, 1990年5月。

   [RFC1212]   Rose, M. 和 K. McCloghrie, "简明MIB定义", STD 16, RFC 1212, 1991年3月。

   [RFC1901]   Case, J., McCloghrie, K., Rose, M. 和 S. Waldbusser, "面向社区的SNMPv2简介", RFC 1901, 1996年1月。

   [RFC1909]   McCloghrie, K., 编者, "SNMPv2的管理基础设施", RFC 1909, 1996年2月。

   [RFC1910]   Waters, G., 编者, "SNMPv2的用户基础安全模型", RFC 1910, 1996年2月。

   [RFC2028]   Hovey, R. 和 S. Bradner, "参与IETF标准流程的组织", BCP 11, RFC 2028, 1996年10月。

   [RFC2576]   Frye, R., Levi, D., Routhier, S. 和 B. Wijnen, "互联网标准管理框架的版本1、2和3的共存", RFC 2576, 2000年3月。

   [RFC2863]   McCloghrie, K. 和 F. Kastenholz, "接口组MIB", RFC 2863, 2000年6月。

   [RFC3410]   Case, J., Mundy, R., Partain, D. 和 B. Stewart, "互联网标准管理框架的介绍和适用性声明", RFC 3410, 2002年12月。





Harrington等人          标准轨道                    [第56页]


RFC 3411      SNMP管理框架架构  2002年12月


附录A

A.  模型设计者指南

本附录描述了为设计符合本文档定义架构的模型提供的指导原则。

SNMPv1和SNMPv2c是两种使用社区机制提供基础认证和访问控制的SNMP框架。SNMPv1和SNMPv2c框架可以与按照本架构设计的框架共存，也可以设计出修改版的SNMPv1和SNMPv2c框架以满足本架构的要求，但本文档不提供关于此类共存的指导方针。

在任何子系统模型中，不应引用其他子系统的具体模型，也不应引用由其他子系统的特定模型定义的数据。

子系统之间的数据传输被刻意描述为一组固定的抽象数据元素和原语函数，这些可以被重载以满足多个模型定义的需求。

定义在本架构中的模型应使用子系统之间的标准原语，可能还会定义将抽象数据元素转换为模型可用格式的具体机制。这一限制的存在是为了使子系统和模型的文档能够在编写时考虑到它们的共同边界。供应商在实现中不必识别这些边界。

架构定义了子系统之间应提供的某些标准服务，并定义了请求这些服务的抽象服务接口。

每个子系统的模型定义应支持标准服务接口，但其提供服务的方式、性能等，取决于具体的模型定义。

A.1 安全模型设计要求

A.1.1 威胁

描述安全模型的文档必须说明该模型如何防护“本架构安全需求”部分（第1.4节）中描述的威胁。

A.1.2 安全处理

接收的消息必须由安全子系统模型进行验证。验证包括必要时的认证和隐私处理，但允许发送不需要认证或隐私的消息。

接收的消息包含在处理过程中使用的特定安全级别（securityLevel）。所有需要隐私的消息也必须要求认证。

安全模型规定了进行认证和隐私处理的规则。模型可以定义机制以提供额外的安全特性，但模型定义必须限制在使用（可能是部分的）本文档中定义的抽象数据元素，用于子系统间的数据传输。

每个安全模型可以允许多种安全协议在实现中同时使用。每个模型定义了如何根据安全级别和相关参数选择协议。每个安全模型及其相关协议定义了如何识别发送/接收实体，以及如何配置密钥。

支持的认证和隐私协议由对象标识符（OID）唯一标识。IETF标准的认证或隐私协议应在snmpAuthProtocols或snmpPrivProtocols子树中定义。企业特定的协议标识符应在企业子树中定义。

隐私方面，安全模型定义了消息的哪一部分被加密。

用于安全的持久数据应可由SNMP管理，但是否将MIB的实例作为符合性要求由安全模型定义。

安全模型可以在安全子系统中被替换。SNMP引擎中可以同时存在多个安全模型实现。为了促进互操作性，SNMP社区应保持定义的安全模型数量较少。

A.1.3 验证接收消息中的安全戳

消息处理模型要求安全模型：

- 验证消息未被篡改，

- 认证生成消息的主体身份。

- 如果消息被加密，则进行解密。

模型还可以定义其他要求，提供额外服务，但在子系统间传输数据时，必须使用本文档定义的（可能是子集的）抽象数据元素。实现可以不受此限制。

消息处理模型使用第4.4.2节描述的processIncomingMsg原语。

A.1.4 安全MIB

每个安全模型定义其所需的MIB模块，包括支持的安全协议所需的任何MIB模块。MIB模块应与使用它们的程序同时定义。MIB模块应遵循正常的访问控制规则。

模型相关的安全ID与securityName之间的映射必须能通过SNMP确定（前提是实例化相关的MIB且访问控制策略允许访问）。

A.1.5 缓存的安全数据

每个接收的消息，安全模型会缓存状态信息，以便即使在请求和响应之间本地配置数据存储发生变化，也能用相同的安全信息生成响应消息。

消息处理模型负责在不再需要时显式释放缓存数据。为此，安全模型会将抽象的securityStateReference数据元素传递给消息处理模型。

缓存的安全数据可以通过生成响应隐式释放，也可以通过使用stateRelease原语（第4.5.1节）显式释放。

A.2 消息处理模型设计要求

SNMP引擎包含一个消息处理子系统，可能包含多个消息处理模型。

消息处理模型必须始终（在概念上）传递完整的PDU，即从不只转发部分varBind列表。

A.2.1 从网络接收SNMP消息

收到网络消息后，SNMP引擎中的调度器确定SNMP消息的版本，并与相应的消息处理模型交互以确定抽象数据元素。

消息处理模型支持的SNMP消息格式，并描述如何确定抽象数据元素的值（如msgID、msgMaxSize、msgFlags、msgSecurityParameters、securityModel、securityLevel等）。它与安全模型交互，使用第4.4.2节描述的processIncomingMsg原语，为消息提供安全处理。

A.2.2 发送SNMP消息到网络

SNMP引擎中的调度器与消息处理模型交互，准备发出的消息。为此，它使用以下原语：

- 请求和通知：prepareOutgoingMessage（第4.2.1节）

- 响应消息：prepareResponseMessage（第4.2.2节）

在准备发出SNMP消息时，消息处理模型会与安全模型交互，确保消息安全。使用的原语包括：

- 请求和通知：generateRequestMsg（第4.4.1节）

- 响应消息：generateResponseMsg（第4.4.3节）

一旦消息由消息处理模型准备好，调度器会通过适当的传输将消息发送到目标地址。

A.3 应用程序设计要求

在应用程序中，可能会明确绑定到特定的SNMP消息版本（即特定的消息处理模型）和特定的访问控制模型，但不应引用由特定消息处理模型或访问控制模型定义的任何数据。

在应用程序中，不应引用任何特定的安全模型或由其定义的数据。

应用程序应决定是否对操作应用显式或隐式访问控制，以及在需要时选择使用哪个访问控制模型。

应用程序负责定义用于提供特定服务的任何MIB模块。

应用程序与SNMP引擎交互，发起消息、接收响应、接收异步消息和发送响应。

A.3.1 发起消息的应用程序

应用程序可以请求SNMP引擎使用sendPdu原语（第4.1.1节）发送包含SNMP命令或通知的消息。

如果希望向多个目标发送消息，责任在于应用程序提供迭代机制。

SNMP引擎假设已对PDU应用必要的访问控制，不提供访问控制服务。

引擎会检查“expectResponse”参数，如果期望收到响应，则会缓存相关信息，以便后续响应能关联到此消息，并返回给应用程序。还会返回一个sendPduHandle，供后续将响应与此消息对应。

A.3.2 接收响应的应用程序

SNMP引擎会将收到的响应消息与未完成的请求消息匹配，并使用processResponsePdu原语（第4.1.4节）将响应转发给相关应用程序。

A.3.3 接收异步消息的应用程序

当SNMP引擎收到非响应请求的消息时，必须确定该消息应交付给哪个应用程序。

希望接收异步消息的应用程序应使用registerContextEngineID原语（第4.1.5节）向引擎注册。

希望停止接收异步消息的应用程序应使用unregisterContextEngineID原语（第4.1.5节）注销。

每个PDU类型和contextEngineID组合同时只允许一个注册。重复注册会被忽略。尝试重复注册的应用程序会收到errorIndication。

所有包含已注册的PDU类型和contextEngineID组合的异步消息都将发给注册支持该组合的应用程序。

引擎会使用processPdu原语（第4.1.2节）将PDU转发给注册的应用程序。

A.3.4 发送响应的应用程序

请求操作需要响应。应用程序通过returnResponsePdu原语（第4.1.3节）发送响应。

contextEngineID、contextName、securityModel、securityName、securityLevel和stateReference参数来自最初的processPdu调用。PDU和statusInformation是处理的结果。

A.4 访问控制模型设计要求

访问控制模型决定是否允许指定的securityName对特定管理对象执行请求的操作。它规定了访问控制的规则。

用于访问控制的持久数据应可由SNMP管理，但是否将MIB实例作为符合性要求由访问控制模型定义。

访问控制模型必须提供isAccessAllowed原语。

编辑人员联系方式

Bert Wijnen  
Lucent Technologies  
Schagen 33  
3461 GL Linschoten  
荷兰  
电话：+31 348-680-485  
电子邮箱：bwijnen@lucent.com

David Harrington  
Enterasys Networks  
邮政信箱：5005  
工业路35号  
罗切斯特，新罕布什尔州 03866-5005  
美国  
电话：+1 603-337-2614  
电子邮箱：dbh@enterasys.com

Randy Presuhn  
BMC Software, Inc.  
北第一街2141号  
圣何塞，加利福尼亚 95131  
美国  
电话：+1 408-546-1006  
传真：+1 408-965-0359  
电子邮箱：randy_presuhn@bmc.com

版权声明

版权所有（C）互联网协会（2002年）。保留所有权利。

本文件及其翻译版本可以被复制并提供给他人，且可以准备、复制、出版和分发其衍生作品，无论是对其进行评论、解释还是协助其实施，全部或部分，均不受任何限制，前提是所有此类副本和衍生作品都必须包含上述版权声明和本段内容。然而，严禁以任何方式修改本文件本身，例如删除版权声明或对互联网协会或其他互联网组织的引用，除非出于制定互联网标准的需要，在此情况下必须遵循互联网标准流程中关于版权的规定，或出于将其翻译成非英语语言的需要。

上述授予的有限权限是永久性的，不会被互联网协会或其继任者或受让人撤销。

本文件及其中包含的信息是“按原样”提供的，互联网协会和互联网工程任务组（IETF）对其不作任何明示或暗示的保证，包括但不限于对使用本文件中的信息不会侵犯任何权利或对其适销性或特定用途适用性的任何保证。

致谢

目前，RFC编辑工作的资金由互联网协会提供。

Harrington 等人，标准轨迹 [第64页]
# RFC 3412 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs3001-3500/rfc3412.txt

网络工作组                                            J. Case
评论请求编号：3412                           SNMP研究公司
标准：62                                              D. Harrington
废止：2572                                       Enterasys Networks
类别：标准轨道                                    R. Presuhn
                                                      BMC软件公司
                                                               B. Wijnen
                                                     朗讯技术公司
                                                          2002年12月


               简单网络管理协议（SNMP）的消息处理与调度

本备忘录的状态

   本文档为互联网社区制定了一个互联网标准轨道协议，旨在征求讨论和改进建议。请参阅当前版本的《互联网官方协议标准》（STD 1），了解该协议的标准化状态和现行状态。本文档的分发不受限制。

版权声明

   版权所有（C）互联网协会（2002年）。保留所有权利。

摘要

   本文档描述了SNMP架构中SNMP消息的消息处理与调度。它定义了将多版本SNMP消息调度到相应SNMP消息处理模型的程序，以及将PDU调度到SNMP应用程序的流程。本文档还介绍了一个消息处理模型——SNMPv3消息处理模型。此文档废止RFC 2572。
















Case等人                标准轨道                     [第1页]


RFC 3412      SNMP消息处理与调度  2002年12月


目录

   1. 引言 ....................................................    3
   2. 概述 ....................................................    4
   2.1. 调度器 ................................................    5
   2.2. 消息处理子系统 ........................................    5
   3. 消息处理与调度的组成要素 ..............................    6
   3.1. messageProcessingModel ..................................    6
   3.2. pduVersion ..............................................    6
   3.3. pduType .................................................    7
   3.4. sendPduHandle ...........................................    7
   4. 调度器程序元素 ..........................................    7
   4.1. 向网络发送SNMP消息 ....................................    7
   4.1.1. 发送请求或通知 ......................................    8
   4.1.2. 发送响应到网络 ......................................    9
   4.2. 从网络接收SNMP消息 ....................................   11
   4.2.1. 接收SNMP消息的调度 ..................................   11
   4.2.2. 入站消息的PDU调度 ..................................   12
   4.2.2.1. 入站请求和通知 ..................................   13
   4.2.2.2. 入站响应 ..........................................   14
   4.3. 应用程序注册以处理PDU类型 ............................   15
   4.4. 应用程序注销以处理PDU类型 ............................   16
   5. 定义 ....................................................   16
   5.1. SNMP消息处理与调度的定义 ..............................   16
   6. SNMPv3消息格式 ...........................................   19
   6.1. msgVersion ............................................   20
   6.2. msgID .................................................   20
   6.3. msgMaxSize ............................................   21
   6.4. msgFlags ..............................................   21
   6.5. msgSecurityModel ......................................   24
   6.6. msgSecurityParameters .................................   24
   6.7. scopedPduData .........................................   24
   6.8. scopedPDU .............................................   24
   6.8.1. contextEngineID .....................................   24
   6.8.2. contextName .........................................   25
   6.8.3. data ................................................   25
   7. v3MP程序元素 ............................................   25
   7.1. 准备发出的SNMP消息 ....................................   26
   7.2. 从入站SNMP消息准备数据元素 ..........................   32
   8. 知识产权 ................................................   37
   9. 致谢 ....................................................   38
   10. 安全考虑 ..............................................   39
   11. 参考文献 ..............................................   40
   11.1. 标准性参考文献 ......................................   40
   11.2. 资料性参考文献 ......................................   41
   12. 编者地址 ..............................................   42
   13. 完整版权声明 ..........................................   43




Case等人                标准轨道                     [第2页]


RFC 3412      SNMP消息处理与调度  2002年12月


1. 引言

   描述互联网管理框架的架构 [RFC3411] 指出，SNMP引擎由以下部分组成：

      1）调度器
      2）消息处理子系统
      3）安全子系统
      4）访问控制子系统

   应用程序利用这些子系统提供的服务。

   理解SNMP架构及其术语对于理解本文档中描述的消息处理子系统和调度器在架构中的位置，以及它们如何与架构中的其他子系统交互，至关重要。读者应已阅读并理解了[RFC3411]中定义的SNMP架构描述。

   SNMP引擎中的调度器负责发送和接收SNMP消息。它还将SNMP PDU调度到SNMP应用程序。当需要准备SNMP消息或从SNMP消息中提取数据时，调度器会将这些任务委托给消息处理子系统中的特定版本的消息处理模型。

   消息处理模型负责处理特定版本的SNMP消息，并协调与安全子系统的交互，以确保对正在处理的SNMP消息应用了正确的安全措施。

   调度器、消息处理子系统和应用程序之间的交互通过SNMP架构定义的抽象数据元素和抽象服务接口原语进行建模。

   类似地，消息处理子系统与安全子系统之间的交互也通过SNMP架构定义的抽象数据元素和抽象服务接口原语进行建模。

   本文档中的关键词“必须”、“不得”、“需要”、“应”、“不应”、“建议”、“不建议”、“推荐”、“可以”和“可选”应按照BCP 14（RFC 2119）中的定义进行解释。







Case等人                标准轨道                     [第3页]


RFC 3412      SNMP消息处理与调度  2002年12月


2. 概述

   下图展示了消息处理在SNMP应用、安全子系统和传输映射中的关系。

   +--------------------------------------------------------------+
   | SNMP实体                                                    |
   |                                                              |
   | +--------------------------------------------------------+  |
   | | 应用程序                                                 |  |
   | | +-----------+  +--------------+                          |  |
   | | | 命令生成器 |  | 通知发起者   |                          |  |
   | | +-----------+  +--------------+  +-----------+  +--------------+| |
   | | +-----------+  +--------------+  | 代理      |  | 其他应用程序 | | |
   | | | 命令响应  |  | 通知接收者   |  | 转发器    |  |              | | |
   | | +-----------+  +--------------+  +-----------+  +--------------+| |
   | +--------------------------------------------------------------+ |
   |        ^                ^               ^           ^             |
   |        |                |               |           |             |
   |        v                v               v           v             |
   |        +--------+-------+---------------+-----------+             |
   |                 ^                                              |
   |                 |    +---------------------+  +-----------------+ |
   |                 |    | 消息处理子系统       |  | 安全子系统       | |
   | 调度器          v    |                     |  |                 | |
   | +------------------+ |  +->| v1MP     * |<--->| +-------------+ | |
   | | PDU调度器        | |  |  +------------+  |  | | 其他安全模型 | | |
   | |                  | |  |  +------------+  |  | +-------------+ | |
   | |                  | |  +->| v2cMP    * |<--->|                 | |
   | | 消息调度器        | |  |  +------------+  |  |                 | |
   | |                  | |  |  +------------+  |  | +-------------+ | |
   | |                  | |  +->| v3MP     * |<--->| 用户基础安全模型 | |
   | | 传输映射          | |  |  +------------+  |  |                 | |
   | | (如RFC 3417)      | |  +->| otherMP  * |<--->| +-------------+ | |
   | +------------------+ |     +------------+  |  |                 | |
   |          ^           +---------------------+  +-----------------+ |
   |          |                                                        |
   +----------|--------------------------------------------------------+
              v
     +------------------+
     |   网络           |           * 可能存在多个模型。
     +------------------+




Case等人                标准轨道                     [第4页]


RFC 3412      SNMP消息处理与调度  2002年12月


2.1. 调度器

   调度器是SNMP引擎的核心部分。引擎中只有一个调度器，其职责是将任务调度到多个版本的消息处理模型，以及将PDU调度到不同的应用程序。

   对于发出的消息，应用程序提供待发送的PDU和准备及发送消息所需的数据，并指定将使用哪个版本的消息处理模型来处理安全相关的操作。一旦消息准备完毕，调度器就会发送该消息。

   对于接收的消息，调度器会判断消息的SNMP版本，并将消息传递给对应版本的消息处理模型，以提取消息的组成部分，并协调安全服务的处理。经过版本特定的处理后，PDU调度器会决定哪个应用程序（如果有的话）应接收该PDU进行处理，并将其转发。

   调度器在发送和接收SNMP消息的过程中，会收集关于SNMP消息和SNMP引擎在管理对象中的行为的统计信息，以便远程SNMP实体可以访问这些信息。本文档定义了这些管理对象、包含它们的MIB模块，以及如何利用这些管理对象提供有用的管理功能。

2.2. 消息处理子系统

   SNMP消息处理子系统是SNMP引擎中与调度器交互以处理特定版本SNMP消息的部分。它包含一个或多个消息处理模型。

   本文在第6节中描述了一个消息处理模型，即SNMPv3消息处理模型。SNMPv3消息处理模型在单独的章节中定义，旨在表明可以同时存在多个（独立的）消息处理模型，并且这些模型可以在不同的文档中描述。未来，SNMPv3消息处理模型可以被其他模型所替代或补充。预期未来会开发的两个消息处理模型包括SNMPv1消息格式 [RFC1157] 和SNMPv2c消息格式 [RFC1901]，也可能根据需要开发其他模型。







Case等人                标准轨道                     [第5页]


RFC 3412      SNMP消息处理与调度  2002年12月


3. 消息处理与调度的组成要素

   有关定义，请参阅 [RFC3411]，包括：

      contextEngineID
      contextName
      scopedPDU
      maxSizeResponseScopedPDU
      securityModel
      securityName
      securityLevel
      messageProcessingModel

   对于入站消息，版本特定的消息处理模块会向调度器提供这些值。对于出站消息，应用程序会向调度器提供这些值。

   在某些版本的处理过程中，这些值可能从接收的消息中提取；在其他版本中，可能通过算法或实现定义的机制确定。确定这些值的机制对调度器而言是无关紧要的。

   以下附加或扩展的定义用于调度器内部。

3.1.  messageProcessingModel

   messageProcessingModel的值标识一个消息处理模型。消息处理模型描述了从消息中提取数据、生成消息、调用securityModel以应用安全服务、将版本特定的消息格式转换为调度器可用的通用格式，以及将调度器格式的数据转换为版本特定消息格式的版本相关程序。

3.2.  pduVersion

   pduVersion的值代表协议操作的特定版本及其相关的PDU格式，例如SNMPv1或SNMPv2 [RFC3416]。pduVersion的值特定于消息中包含的PDU版本，以及应用程序处理的PDU。调度器不会直接使用pduVersion的值。

   应用程序在请求PDU调度器发送PDU到另一个SNMP引擎时，指定pduVersion。调度器会将pduVersion传递给消息处理模型，以确保正确处理PDU。

   对于入站消息，pduVersion由版本特定的消息处理模块提供给调度器。PDU调度器随后将pduVersion传递给应用程序，以便其正确处理PDU。例如，命令响应应用程序需要知道是否应使用[RFC3416]中的程序和语法元素，而不是SNMPv1中定义的内容。

3.3.  pduType

   pduType的值代表一种特定的协议操作类型。pduType的值特定于消息中包含的PDU版本。

   应用程序注册支持特定的pduType，以对应特定的contextEngineID。

   对于入站消息，pduType由版本特定的消息处理模块提供给调度器。调度器随后将pduType用于将PDU调度到注册了该pduType的应用程序，依据关联的scopedPDU的contextEngineID。

3.4.  sendPduHandle

   该句柄用于协调SNMP引擎与应用程序之间请求和响应的处理。该句柄在所有版本的消息处理模型中必须唯一，仅具有局部意义。

4. 调度器程序元素

   本节描述调度器在生成和处理SNMP消息时遵循的程序。

4.1. 向网络发送SNMP消息

   本节描述SNMP引擎在每次发送SNMP消息时所遵循的流程。









Case等人                标准轨道                     [第6页]


RFC 3412      SNMP消息处理与调度  2002年12月


4.1.1.  发送请求或通知

以下是上述英文内容的中文流畅翻译：

```
当应用程序希望向另一个（远程）应用程序发送SNMP PDU，即发起通信（如请求或通知）时，调度器会按照以下程序操作。

1）应用程序通过抽象服务原语请求此操作：

statusInformation =              -- 成功时返回sendPduHandle
                                   -- 失败时返回errorIndication
  sendPdu(
    IN   transportDomain           -- 使用的传输域
    IN   transportAddress          -- 目标网络地址
    IN   messageProcessingModel    -- 通常为SNMP版本
    IN   securityModel             -- 使用的安全模型
    IN   securityName              -- 代表此主体
    IN   securityLevel             -- 请求的安全级别
    IN   contextEngineID           -- 来自/在此实体的数据
    IN   contextName               -- 来自/在此上下文中的数据
    IN   pduVersion                -- PDU的版本
    IN   PDU                       -- SNMP协议数据单元
    IN   expectResponse            -- TRUE或FALSE
  )

2）如果messageProcessingModel的值不代表调度器已知的消息处理模型，则会向调用应用程序返回一个errorIndication（实现相关），不进行后续处理。

3）调度器生成一个sendPduHandle，用于协调后续处理。

4）消息调度器将请求通过抽象服务原语发送到由messageProcessingModel标识的特定版本的消息处理模块：

statusInformation =              -- 成功或错误指示
  prepareOutgoingMessage(
    IN   transportDomain           -- 按应用程序指定
    IN   transportAddress          -- 按应用程序指定
    IN   messageProcessingModel    -- 按应用程序指定
    IN   securityModel             -- 按应用程序指定
    IN   securityName              -- 按应用程序指定
    IN   securityLevel             -- 按应用程序指定
    IN   contextEngineID           -- 按应用程序指定
    IN   contextName               -- 按应用程序指定
    IN   pduVersion                -- 按应用程序指定
    IN   PDU                       -- 按应用程序指定
    IN   expectResponse            -- 按应用程序指定
    IN   sendPduHandle             -- 在步骤3中确定
    OUT  destTransportDomain       -- 目标传输域
    OUT  destTransportAddress      -- 目标传输地址
    OUT  outgoingMessage           -- 要发送的消息
    OUT  outgoingMessageLength     -- 消息长度
  )

5）如果statusInformation指示有错误，则将errorIndication返回给调用应用程序，不进行后续处理。

6）如果statusInformation指示成功，则返回sendPduHandle给应用程序，并发送outgoingMessage。用于发送的传输由destTransportDomain返回，发送的地址由destTransportAddress返回。

出站消息处理完成。

4.1.2. 向网络发送响应

当应用程序希望将响应返回给SNMP请求的发起者时，遵循以下程序。

1）应用程序可以通过抽象服务原语请求：

result =
returnResponsePdu(
 IN   messageProcessingModel   -- 通常为SNMP版本
 IN   securityModel            -- 使用的安全模型
 IN   securityName             -- 代表此主体
 IN   securityLevel            -- 与接收请求时相同
 IN   contextEngineID          -- 来自/在此SNMP实体的数据
 IN   contextName              -- 来自/在此上下文中的数据
 IN   pduVersion               -- PDU的版本
 IN   PDU                      -- SNMP协议数据单元
 IN   maxSizeResponseScopedPDU -- 响应PDU的最大尺寸
 IN   stateReference           -- 状态信息的引用
 IN   statusInformation        -- 成功或错误指示（错误计数器OID和值，当错误时）

2）消息调度器将请求通过抽象服务原语发送到由接收到的messageProcessingModel值标识的消息处理模型：

result =                       -- SUCCESS或errorIndication
  prepareResponseMessage(
    IN   messageProcessingModel   -- 由MP模块指定
    IN   securityModel            -- 由MP模块指定
    IN   securityName             -- 由MP模块指定
    IN   securityLevel            -- 由MP模块指定
    IN   contextEngineID          -- 由MP模块指定
    IN   contextName              -- 由MP模块指定
    IN   pduVersion               -- 由MP模块指定
    IN   PDU                      -- 由MP模块指定
    IN   maxSizeResponseScopedPDU -- 由MP模块指定
    IN   stateReference           -- 由应用程序指定
    IN   statusInformation        -- 由应用程序指定
    OUT  destTransportDomain      -- 目标传输域
    OUT  destTransportAddress     -- 目标传输地址
    OUT  outgoingMessage          -- 要发送的消息
    OUT  outgoingMessageLength    -- 消息长度
  )

3）如果结果为errorIndication，则将errorIndication返回给调用应用程序，不进行后续处理。

4）如果结果成功，则发送outgoingMessage。传输由destTransportDomain返回，发送地址由destTransportAddress返回。

消息处理完成。

4.2. 接收网络中的SNMP消息

本节描述SNMP引擎在接收SNMP消息时所遵循的程序。

请注意，为了简洁起见，避免文本过长或过于复杂，以下步骤中省略了一些细节。特别是，程序元素并不总是明确指出何时需要释放状态信息。一般规则是：如果在“丢弃消息且不进行后续处理”时有状态信息，则必须同时释放。

4.2.1. 接收SNMP消息的调度

1）增加snmpInPkts计数器[RFC3418]。

2）以实现相关的方式确定SNMP消息的版本。如果无法充分解析数据包以确定SNMP版本，则增加snmpInASNParseErrs计数器，并丢弃消息，不进行后续处理。如果版本不支持，则增加snmpInBadVersions计数器，并丢弃消息。

3）确定原始传输域和原始传输地址。

4）将消息传递给版本特定的消息处理模型，模型返回调度器所需的抽象数据元素。使用抽象服务原语：

result =                        -- SUCCESS或errorIndication
  prepareDataElements(
    IN   transportDomain          -- 第3步确定的源
    IN   transportAddress         -- 第3步确定的源
    IN   wholeMsg                 -- 从网络接收的完整消息
    IN   wholeMsgLength           -- 从网络接收的消息长度
    OUT  messageProcessingModel   -- 通常为SNMP版本
    OUT  securityModel            -- 指定的安全模型
    OUT  securityName             -- 代表此主体
    OUT  securityLevel            -- 指定的安全级别
    OUT  contextEngineID          -- 来自/在此实体的数据
    OUT  contextName              -- 来自/在此上下文中的数据
    OUT  pduVersion               -- PDU的版本
    OUT  PDU                      -- SNMP协议数据单元
    OUT  pduType                  -- PDU类型
    OUT  sendPduHandle            -- 匹配请求的句柄
    OUT  maxSizeResponseScopedPDU -- 最大响应PDU尺寸
    OUT  statusInformation        -- 成功或错误指示（错误计数器OID和值）
    OUT  stateReference           -- 状态信息的引用，用于可能的响应
  )

5）如果结果为FAILURE（错误指示），则丢弃消息，不进行后续处理。

6）此时，抽象数据元素已准备完毕，处理将继续，如4.2.2节所述，即入站消息的PDU调度。

4.2.2. 入站消息的PDU调度

调度PDU的元素依赖于sendPduHandle的值。如果sendPduHandle为<none>，表示这是请求或通知，适用第4.2.2.1节的程序；如果不为<none>，则表示这是响应，适用第4.2.2.2节的程序。

4.2.2.1. 入站请求和通知

当sendPduHandle为<none>，表示请求或通知时，遵循以下程序：

1）利用contextEngineID和pduType的组合，确定注册了此请求或通知的应用程序。

2）如果没有应用程序注册，则：

  a）增加snmpUnknownPDUHandlers计数器。

  b）使用抽象服务原语生成响应消息：

  result =                       -- SUCCESS或FAILURE
  prepareResponseMessage(
    IN   messageProcessingModel    -- 由MP模块提供
    IN   securityModel             -- 由MP模块提供
    IN   securityName              -- 由MP模块提供
    IN   securityLevel             -- 由MP模块提供
    IN   contextEngineID           -- 由MP模块提供
    IN   contextName               -- 由MP模块提供
    IN   pduVersion                -- 由MP模块提供
    IN   PDU                       -- 由MP模块提供
    IN   maxSizeResponseScopedPDU  -- 由MP模块提供
    IN   stateReference            -- 由MP模块提供
    IN   statusInformation         -- 错误指示加上snmpUnknownPDUHandlers OID和值对
    OUT  destTransportDomain       -- 目标传输域
    OUT  destTransportAddress      -- 目标传输地址
    OUT  outgoingMessage           -- 要发送的消息
    OUT  outgoingMessageLength     -- 消息长度
  )

  c）如果结果为SUCCESS，则将准备好的消息发送给请求的发起者，依据传输域和传输地址。传输由destTransportDomain返回，发送地址由destTransportAddress返回。

  d）丢弃入站消息，不进行后续处理，消息处理结束。

3）将PDU调度到应用程序，使用抽象服务原语：

processPdu(                     -- 处理请求/通知
  IN   messageProcessingModel   -- 由MP模块提供
  IN   securityModel            -- 由MP模块提供
  IN   securityName             -- 由MP模块提供
  IN   securityLevel            -- 由MP模块提供
  IN   contextEngineID          -- 由MP模块提供
  IN   contextName              -- 由MP模块提供
  IN   pduVersion               -- 由MP模块提供
  IN   PDU                      -- 由MP模块提供
  IN   maxSizeResponseScopedPDU -- 由MP模块提供
  IN   stateReference           -- 由MP模块提供
                                -- 发送响应时需要
)

消息处理结束。

4.2.2.2. 入站响应

当sendPduHandle不为<none>，表示这是响应，遵循以下程序：

1）根据实现定义的方式，利用sendPduHandle的值确定等待响应的应用程序。

2）如果未找到等待的应用程序，则丢弃消息，不进行后续处理，并释放stateReference。增加snmpUnknownPDUHandlers计数器。消息处理结束。

3）丢弃关于该消息的所有缓存信息，包括stateReference。

4）使用抽象服务原语将响应调度到应用程序：

processResponsePdu(              -- 处理响应PDU
  IN   messageProcessingModel    -- 由MP模块提供
  IN   securityModel             -- 由MP模块提供
  IN   securityName              -- 由MP模块提供
  IN   securityLevel             -- 由MP模块提供
  IN   contextEngineID           -- 由MP模块提供
  IN   contextName               -- 由MP模块提供
  IN   pduVersion                -- 由MP模块提供
  IN   PDU                       -- 由MP模块提供
  IN   statusInformation         -- 由MP模块提供
  IN   sendPduHandle             -- 由MP模块提供
)

消息处理结束。

4.3. 应用程序注册以处理特定PDU类型

希望处理特定PDU的应用程序必须向PDU调度器注册。应用程序需指定其负责的contextEngineID和pduType组合。

1）应用程序通过抽象接口原语注册：

statusInformation =           -- 成功或错误指示
  registerContextEngineID(
    IN   contextEngineID        -- 负责此ID
    IN   pduType                -- 要注册的pduType
  )

注意：实现可能提供同时注册多个contextEngineID（如全部ID）的方法，也可能提供同时注册多个pduType的方式。

2）参数可进行有效性检查；若无效，则返回errorIndication（invalidParameter）给应用程序。
```

每个由contextEngineID和pduType组成的组合只能注册一次。如果另一个应用程序已经为指定的组合注册了，则会向该应用程序返回一个errorIndication（alreadyRegistered）。  

案例等人  标准轨迹  [第15页]  

RFC 3412  SNMP消息处理与调度  2002年12月  

4) 否则，注册信息将被保存，以便SNMP PDU可以被调度到该应用程序。  

4.4.  应用程序取消注册以处理PDU类型  

不再需要处理某些PDU的应用程序必须向PDU调度器取消注册。  

1) 应用程序通过抽象服务原语进行取消注册：  

```
unregisterContextEngineID(
  IN   contextEngineID        -- 放弃对此的责任
  IN   pduType                -- 要取消注册的pduType或多个pduType
)
```  

注意：实现可以提供请求同时取消多个contextEngineID值（例如所有的contextEngineID值）的方式，也可以提供请求同时取消多个pduType值的方式。  

2) 如果已注册的contextEngineID和pduType组合存在，则删除该注册。  

如果不存在这样的注册，则忽略该请求。  

5.  定义  

5.1.  SNMP消息处理与调度的定义  

SNMP-MPD-MIB定义 ::= BEGIN  

导入  
  MODULE-COMPLIANCE, OBJECT-GROUP  FROM SNMPv2-CONF  
  MODULE-IDENTITY, OBJECT-TYPE,  
  snmpModules, Counter32  FROM SNMPv2-SMI;  

snmpMPDMIB 模块标识  
  最后更新 "200210140000Z"  
  组织 "SNMPv3工作组"  
  联系信息 "工作组电子邮件：snmpv3@lists.tislabs.com  
                订阅：snmpv3-request@lists.tislabs.com  

                联席主席：Russ Mundy  
                网络联盟实验室  
                邮寄地址：15204 Omega Drive, Suite 300  
                          Rockville, MD 20850-4601  
                          美国  

                电子邮件：mundy@tislabs.com  
                电话：+1 301-947-7107  

                联席主席与共同编辑：David Harrington  
                Enterasys Networks  
                邮寄地址：35 Industrial Way  
                          P. O. Box 5005  
                          Rochester NH 03866-5005  
                          美国  
                电子邮件：dbh@enterasys.com  
                电话：+1 603-337-2614  

                共同编辑：Jeffrey Case  
                SNMP研究公司  
                邮寄地址：3001 Kimberlin Heights Road  
                          Knoxville, TN 37920-9716  
                          美国  
                电子邮件：case@snmp.com  
                电话：+1 423-573-1434  

                共同编辑：Randy Presuhn  
                BMC软件公司  
                邮寄地址：2141 North First Street  
                          San Jose, CA 95131  
                          美国  
                电子邮件：randy_presuhn@bmc.com  
                电话：+1 408-546-1006  

                共同编辑：Bert Wijnen  
                Lucent Technologies  
                邮寄地址：Schagen 33  
                          3461 GL Linschoten  
                          荷兰  
                电子邮件：bwijnen@lucent.com  
                电话：+31 348-680-485  
  "  
  描述  "用于消息处理与调度的MIB  
  版权所有 (C) 互联网协会 (2002)。本MIB模块的版本是RFC 3412的一部分；完整的法律声明请参见RFC本身。"
  修订  "200210140000Z"  -- 2002年10月14日  
  描述  "更新了地址，作为RFC 3412发布。"  
  修订  "199905041636Z"  -- 1999年5月4日  
  描述  "更新了地址，作为RFC 2572发布。"  

案例等人  标准轨迹  [第17页]  

RFC 3412  SNMP消息处理与调度  2002年12月  

修订  "199709300000Z"  -- 1997年9月30日  
描述  "原始版本，作为RFC 2272发布。"  
::= { snmpModules 11 }  

-- 管理分配 ***************************************  

snmpMPDAdmin  OBJECT IDENTIFIER  ::=  { snmpMPDMIB 1 }  
snmpMPDMIBObjects  OBJECT IDENTIFIER  ::=  { snmpMPDMIB 2 }  
snmpMPDMIBConformance  OBJECT IDENTIFIER  ::=  { snmpMPDMIB 3 }  

-- SNMP消息统计 *************************************  

snmpMPDStats  OBJECT IDENTIFIER  ::=  { snmpMPDMIBObjects 1 }  

snmpUnknownSecurityModels  OBJECT-TYPE  
  SYNTAX  Counter32  
  MAX-ACCESS  read-only  
  STATUS  current  
  描述  "SNMP引擎接收的包总数中，由于引用了未被SNMP引擎支持的securityModel而被丢弃的包数。"  
  ::= { snmpMPDStats 1 }  

snmpInvalidMsgs  OBJECT-TYPE  
  SYNTAX  Counter32  
  MAX-ACCESS  read-only  
  STATUS  current  
  描述  "SNMP引擎接收的包总数中，由于SNMP消息中的组件无效或不一致而被丢弃的包数。"  
  ::= { snmpMPDStats 2 }  

snmpUnknownPDUHandlers  OBJECT-TYPE  
  SYNTAX  Counter32  
  MAX-ACCESS  read-only  
  STATUS  current  
  描述  "SNMP引擎接收的包总数中，由于包中的PDU无法传递给负责处理该pduType的应用程序（例如，没有为正确的contextEngineID和pduType组合注册任何SNMP应用程序）而被丢弃的包数。"  
  ::= { snmpMPDStats 3 }  

-- 合规性信息 ***************************************  

snmpMPDMIBConpliances  OBJECT IDENTIFIER  ::=  { snmpMPDMIBConformance 1 }  
snmpMPDMIBGroups  OBJECT IDENTIFIER  ::=  { snmpMPDMIBConformance 2 }  

-- 合规性声明  

snmpMPDCompliance  MODULE-COMPLIANCE  
  STATUS  current  
  描述  "实现SNMP-MPD-MIB的SNMP实体的合规声明。"  
  模块  -- 本模块  
    必须-组  { snmpMPDGroup }  
  ::=  { snmpMPDMIBCompliances 1 }  

snmpMPDGroup  OBJECT-GROUP  
  OBJECTS  {  
    snmpUnknownSecurityModels,  
    snmpInvalidMsgs,  
    snmpUnknownPDUHandlers  
  }  
  STATUS  current  
  描述  "提供远程监控SNMP消息处理与调度过程的一组对象。"  
  ::=  { snmpMPDMIBGroups 1 }  

结束  

6.  SNMPv3消息格式  

本节定义SNMPv3消息格式及相应的SNMP版本3消息处理模型（v3MP）。  

SNMPv3MessageSyntax 定义 ::= BEGIN  

SNMPv3消息 ::= 序列 {  
  -- 标识SNMPv3消息的布局  
  -- 该元素在SNMPv1和SNMPv2c中位置相同，便于识别  
  -- 采用值3表示snmpv3  
  msgVersion INTEGER (0 .. 2147483647),  
  -- 管理参数  
  msgGlobalData HeaderData,  
  -- 安全模型特定参数  
  -- 格式由安全模型定义  
  msgSecurityParameters OCTET STRING,  
  msgData  ScopedPduData  
}  

HeaderData ::= 序列 {  
  msgID      INTEGER (0..2147483647),  
  msgMaxSize INTEGER (484..2147483647),  

  msgFlags   OCTET STRING (SIZE(1)),  
             --  .... ...1   认证标志（authFlag）  
             --  .... ..1.   私有标志（privFlag）  
             --  .... .1..   可报告标志（reportableFlag）  
             --  请注意：  
             --  .... ..00   表示无认证无私有（noAuthNoPriv）  
             --  .... ..01   表示仅认证无私有（authNoPriv）  
             --  .... ..10   保留，禁止使用  
             --  .... ..11   表示认证私有（authPriv）  

  msgSecurityModel INTEGER (1..2147483647)  
}  

ScopedPduData ::= 选择 {  
  plaintext    ScopedPDU,  
  encryptedPDU OCTET STRING  -- 加密的ScopedPDU值  
}  

ScopedPDU ::= 序列 {  
  contextEngineID  OCTET STRING,  
  contextName      OCTET STRING,  
  data             ANY -- 例如，定义在[RFC3416]中的PDU  
}  
结束  

6.1.  msgVersion  

msgVersion字段设置为snmpv3(3)，标识该消息为SNMP版本3消息。  

6.2.  msgID  

msgID在两个SNMP实体之间用于协调请求消息和响应，以及由v3MP协调架构内不同子系统模型对消息的处理。  

建议以避免重用任何未完成的值的方式生成msgID。这样可以防止某些重放攻击。  

一种可能的实现策略是使用snmpEngineBoots [RFC3411]的低位比特作为msgID值的高位部分，低位部分为单调递增的整数。  

注意：PDU中的请求ID（request-id）可由SNMP应用程序用来识别PDU；而msgID由引擎用来识别携带PDU的消息。  

即使解密PDU（以及请求ID）失败，引擎仍需识别该消息。  

不应假设msgID的值与请求ID的值相等。  

响应的msgID值应取自其响应的消息中的msgID值。  

通过使用msgID值，引擎可以区分（可能的多个）未完成的请求，从而关联传入的响应与未完成的请求。  

在使用不可靠数据报服务的情况下，msgID还提供了一种简单的方法，用于识别网络中重复的消息。  

如果请求被重传，应为每次重传使用新的msgID值。  

6.3.  msgMaxSize  

消息的msgMaxSize字段传达发件方支持的最大消息大小，即发件方在使用的传输上接收其他SNMP引擎发送的SNMP消息（无论是响应还是其他类型消息）时所能接受的最大消息大小。  

在生成SNMP消息时，msgMaxSize由生成该消息的SNMP引擎提供。  

在接收端SNMP引擎中，msgMaxSize用于确定发件方能容纳的最大消息大小。  

6.4.  msgFlags  

消息的msgFlags字段包含多个位字段，用于控制消息的处理。  

reportableFlag是辅助判断是否必须发送Report PDU的次要标志。  

仅在消息的PDU部分无法解码（例如，由于加密密钥错误）时使用。  

如果PDU可以解码，则PDU类型决定是否发送Report PDU。  

当使用reportableFlag时，如果其值为1，则在可能导致生成Report PDU的条件下，必须返回Report PDU给发件方。  

如果reportableFlag为0，则不应发送Report PDU。  

当消息包含来自未确认类别（Unconfirmed Class）的PDU（如Report PDU、响应类型的PDU如Response PDU，或未确认通知类型的PDU如SNMPv2-trap PDU）时，reportableFlag必须始终为0。  

对于来自已确认类别（Confirmed Class）的PDU（包括请求类型的PDU如Get PDU和确认通知类型的PDU如Inform PDU），reportableFlag必须始终为1。  

如果在包含未确认类别PDU的消息（如Report PDU、Response PDU或SNMPv2-trap PDU）中将reportableFlag设置为1，则接收方必须将其作为0处理。  

如果在包含请求类型PDU（如Get PDU）或确认通知类型PDU（如Inform PDU）的消息中将reportableFlag设置为0，则接收方必须将其作为1处理。  

Report PDU由SNMPv3消息处理模型直接生成，用于引擎间通信，但也可以传递给应用程序处理。  

接收Report PDU的SNMP引擎可以根据Report PDU中的第一个（也是唯一的）varBind中的错误计数器，判断远程SNMP引擎检测到的问题类型。  

根据检测到的错误，SNMP引擎可能尝试发送修正后的SNMP消息；如果无法做到，则将错误信息传递给代表其发起失败SNMP请求的应用程序。  

msgFlags字段中的authFlag和privFlag由发送方设置，用以指示在消息发送前应用的安全级别。  

接收方在收到消息并处理内容时，必须应用相同的安全级别。  

安全级别包括：noAuthNoPriv（无认证无私有）、authNoPriv（仅认证）、authPriv（认证和私有）。  

详细信息请参见SNMP架构文档[RFC3411]。  

a) authFlag  

如果authFlag为1，则由发送消息的SNMP引擎使用的securityModel必须标识出生成该消息的securityName，并以安全模型特定的方式提供足够的数据，使接收方能够验证身份。  

通常，这种验证能让接收方合理确信：  

- 该消息是代表与securityName相关的主体发出的，  
- 未被重定向，  
- 在传输途中未被修改，  
- 未被重放。  

如果authFlag为0，则由发送消息的SNMP引擎使用的securityModel必须标识出生成该消息的securityName，但不需要提供足够的数据让接收方验证身份，因为在这种情况下无需验证消息的真实性。  

b) privFlag

如果privFlag被设置，则由发送该消息的SNMP引擎所使用的securityModel必须同时保护该SNMP消息中的scopedPDU，防止泄露，即必须对scopedPDU进行加密/解密。如果privFlag为零，则所使用的securityModel不需要保护数据免于泄露。

SNMP架构明确要求：如果选择了隐私（privacy），则也必须进行认证（authentication）。也就是说，如果privFlag被设置，则authFlag也必须被设置为1。

authFlag和privFlag的组合定义了安全级别，具体如下：

- authFlag为零，privFlag为零 -> securityLevel为noAuthNoPriv（无认证无隐私）
- authFlag为零，privFlag为一  -> 无效组合，详见下文
- authFlag为一，privFlag为零 -> securityLevel为authNoPriv（认证但无隐私）
- authFlag为一，privFlag为一  -> securityLevel为authPriv（认证且有隐私）

当遇到authFlag为零且privFlag为一的无效组合时，程序（见下文）会描述应采取的措施。

msgFlags中的其他位为保留位，发送消息时必须设置为零，接收消息时应忽略。

---

第6.5节：msgSecurityModel

SNMPv3的消息处理模块（v3MP）支持多种安全模型同时存在，为SNMPv3消息提供安全服务。SNMPv3消息中的msgSecurityModel字段标识了消息的发送方所使用的安全模型，因此接收方必须使用相应的安全模型进行安全处理。不同安全模型的映射方式由实现决定。

第6.6节：msgSecurityParameters

SNMPv3消息中的msgSecurityParameters字段用于发送端和接收端的安全模型模块之间的通信。该字段中的数据仅由安全模型使用，其内容和格式由安全模型定义。此字段是一个八位字节字符串（OCTET STRING），不由v3MP解释，而是传递给消息中指定的安全模型的本地实现。

第6.7节：scopedPduData

scopedPduData字段表示明文的scopedPDU（如果msgFlags中的privFlag为零），或者表示经过加密的PDU（编码为OCTET STRING），必须由所用的securityModel解密以获得明文的scopedPDU。

第6.8节：scopedPDU

scopedPDU包含用于标识管理上下文的唯一信息和PDU。PDU中的对象标识符指向在指定上下文中（预期）可访问的管理对象。

第6.8.1节：contextEngineID

SNMPv3消息中的contextEngineID在管理域内唯一标识一个SNMP实体，该实体可以实现具有特定contextName的上下文实例。

对于接收消息，contextEngineID与pduType结合使用，以确定scopedPDU将被送往哪个应用程序进行处理。

对于发出消息，v3MP会将contextEngineID设置为应用程序在请求中提供的值。

第6.8.2节：contextName

contextName字段与contextEngineID一起，标识消息中PDU部分所包含管理信息的具体上下文。contextName在由contextEngineID指定的SNMP实体内是唯一的，该实体可能实现了PDU中引用的管理对象。发起消息的应用程序提供该值，接收端应用程序在处理时也会使用。

第6.8.3节：data

SNMPv3消息中的data字段包含PDU。PDU类型由v3MP用以确定消息的类型。v3MP规定，PDU必须是[RFC3416]中定义的类型之一。

---

第7节：v3MP的操作流程要素

本节描述SNMP引擎在生成和处理SNMP消息时，依据SNMPv3消息处理模型所遵循的程序。

请注意，为了简洁起见，以下步骤中省略了一些细节，以避免内容过长或过于复杂。

a) 某些步骤指出，在处理接收消息时遇到错误条件，应生成包含Report PDU的消息，并丢弃原消息，不进行后续处理。但除非能确定引发Report PDU的PDU属于确认类（Confirmed Class），或者reportableFlag被设置为1且无法确定PDU类别，否则不得生成Report PDU。

b) 操作流程中的某些环节未明确指出何时应释放状态信息。一般规则是：如果在“丢弃消息且不进行后续处理”时有可用的状态信息，则应同时释放。

---

第7.1节：准备发出的SNMP消息

描述从消息调度器传入的数据元素开始，准备生成SNMPv3消息的流程。

1) 消息调度器可以请求准备包含Read Class、Write Class或Notification Class PDU的SNMPv3消息。

a) 它根据抽象服务原语发出请求：

```
statusInformation = prepareOutgoingMessage(
  IN   transportDomain        -- 请求的传输域
  IN   transportAddress       -- 请求的目标地址
  IN   messageProcessingModel -- 通常为SNMP版本
  IN   securityModel          -- 要使用的安全模型
  IN   securityName           -- 代表此主体
  IN   securityLevel          -- 请求的安全级别
  IN   contextEngineID        -- 来自/在此实体的数据
  IN   contextName            -- 来自/在此上下文中的数据
  IN   pduVersion             -- PDU的版本*
  IN   PDU                    -- SNMP协议数据单元
  IN   expectResponse         -- TRUE或FALSE*
  IN   sendPduHandle          -- 用于匹配入站响应的句柄
  OUT  destTransportDomain    -- 目标传输域
  OUT  destTransportAddress   -- 目标传输地址
  OUT  outgoingMessage        -- 要发送的消息
  OUT  outgoingMessageLength  -- 消息长度
)
```

*注意：SNMPv3消息处理模型不使用expectResponse或pduVersion的值。

b) 生成唯一的msgID。用于msgID的数字不应近期使用过，且不得与任何未完成请求的msgID相同。

2) 消息调度器可以请求准备包含Response Class或Internal Class PDU的SNMPv3消息。

（以下内容省略，内容与上文类似，描述了响应消息的准备流程。）

---

此流程包括：从请求中提取缓存信息、生成响应或报告PDU、设置相关字段、构造scopedPDU、设置msgGlobalData、调用安全模型生成完整消息等步骤，确保消息的正确生成和安全性。

（全文较长，以上为主要内容的翻译概要。）

如果PDU来自已确认类或通知类，则：

a) 如果PDU来自未确认类，则securityEngineID被设置为该实体的snmpEngineID的值。

否则，将以实现相关的方式确定目标实体的snmpEngineID，可能会使用transportDomain和transportAddress。securityEngineID的值被设置为目标实体的snmpEngineID。

b) 调用指定的安全模型，根据以下原语生成消息：

statusInformation =
 generateRequestMsg(
 IN  messageProcessingModel -- SNMPv3消息处理模型
 IN  globalData             -- msgGlobalData，来自第7步
 IN  maxMessageSize         -- 来自第7步c)中的msgMaxSize
 IN  securityModel          --由调用者提供
 IN  securityEngineID       --权威的SNMP实体
                            --来自第9a)步
 IN  securityName           --由调用者提供
 IN  securityLevel          --由调用者提供
 IN  scopedPDU              --在第6步中准备好
 OUT securityParameters     --由安全模块填写
 OUT wholeMsg               --完整生成的消息
 OUT wholeMsgLength         --生成消息的长度
 )

如果从安全模型返回后，statusInformation中包含errorIndication，则丢弃该消息，并返回errorIndication，以便将其返回给调用应用程序，不进行进一步处理。SNMPv3消息处理完成。

c) 如果PDU来自已确认类，则会缓存有关发出消息的信息，并创建一个特定于实现的stateReference。缓存的信息包括以下值：

- sendPduHandle
- msgID
- snmpEngineID
- securityModel
- securityName
- securityLevel
- contextEngineID
- contextName

d) 返回一个SUCCESS结果。SNMPv3消息处理完成。

---

7.2. 从接收的SNMP消息中准备数据元素

本节描述了从SNMPv3消息中提取数据的过程，以及为消息调度器的进一步处理准备所需数据元素的步骤。

1) 根据抽象服务原语，将消息从消息调度器传入：

result =                       -- SUCCESS或errorIndication
  prepareDataElements(
  IN  transportDomain          --源传输域
  IN  transportAddress         --源传输地址
  IN  wholeMsg                 --从网络接收的完整消息
  IN  wholeMsgLength           --从网络接收的消息长度
  OUT messageProcessingModel   --通常为SNMP版本
  OUT securityModel            --要使用的安全模型
  OUT securityName             --代表此主体
  OUT securityLevel            --请求的安全级别
  OUT contextEngineID          --来自/在此实体上的数据
  OUT contextName              --来自/在此上下文中的数据
  OUT pduVersion               --PDU的版本
  OUT PDU                      --SNMP协议数据单元
  OUT pduType                  --SNMP PDU类型
  OUT sendPduHandle            --匹配请求的句柄
  OUT maxSizeResponseScopedPDU --接收方能接受的最大响应范围
  OUT statusInformation        --成功或errorIndication
                                --错误计数器OID和值
                                --当errorIndication时
  OUT stateReference           --指向状态信息的引用
                                --用于可能的响应
  )

2) 如果接收的消息不是[RFC3417]中定义的SNMPv3Message值的序列化，则将snmpInASNParseErrs计数器[RFC3418]加1，丢弃该消息，不进行进一步处理，并返回FAILURE结果。SNMPv3消息处理完成。

3) 从消息中提取msgVersion、msgID、msgMaxSize、msgFlags、msgSecurityModel、msgSecurityParameters和msgData的值。

4) 如果msgSecurityModel组件的值与支持的安全模型不匹配，则将snmpUnknownSecurityModels计数器加1，丢弃该消息，不进行进一步处理，并返回FAILURE结果。SNMPv3消息处理完成。

---

5) 根据msgFlags组件中的authFlag和privFlag位，确定securityLevel，规则如下：

a) 如果authFlag未设置且privFlag未设置，则securityLevel设为noAuthNoPriv。

b) 如果authFlag已设置且privFlag未设置，则securityLevel设为authNoPriv。

c) 如果authFlag已设置且privFlag已设置，则securityLevel设为authPriv。

d) 如果authFlag未设置且privFlag已设置，则将snmpInvalidMsgs计数器加1，丢弃该消息，不进行进一步处理，并返回FAILURE。SNMPv3消息处理完成。

e) msgFlags中的其他位将被忽略。

6) 调用实现的安全模块，依据securityModel组件指定的安全模型，提供认证和隐私服务。此操作依据抽象服务原语：

statusInformation =            -- errorIndication或成功
                                -- 若出错，则为错误计数器OID和值
  processIncomingMsg(
  IN  messageProcessingModel   -- SNMPv3消息处理模型
  IN  maxMessageSize           --发出SNMP实体的最大消息大小
  IN  securityParameters       --接收消息的安全参数
  IN  securityModel            --接收消息的安全模型
  IN  securityLevel            --安全级别
  IN  wholeMsg                 --在网络上传输的消息
  IN  wholeMsgLength           --消息长度
  OUT securityEngineID         --权威的SNMP实体
  OUT securityName             --主体的标识
  OUT scopedPDU,               --消息（明文）负载
  OUT maxSizeResponseScopedPDU --发出方能接受的最大响应范围
  OUT securityStateReference   --安全状态的引用
  )

如果安全模块返回errorIndication，则：

a) 如果statusInformation中包含OID/值对，则尝试生成Report PDU（参见第7.1节第3步）。

1) 如果从processIncomingMsg返回的scopedPDU，则确定contextEngineID、contextName和PDU。

2) 缓存消息信息，并创建一个状态引用（实现相关）。缓存内容包括：

- msgVersion
- msgID
- securityLevel
- msgFlags
- msgMaxSize
- securityModel
- maxSizeResponseScopedPDU
- securityStateReference

3) 根据抽象服务原语，请求准备并发送Report-PDU：

result =                     -- SUCCESS或FAILURE
returnResponsePdu(
IN  messageProcessingModel   -- SNMPv3(3)
IN  securityModel            --与接收请求相同
IN  securityName             --来自processIncomingMsg
IN  securityLevel            --与接收请求相同
IN  contextEngineID          --第6a)第1步
IN  contextName              --第6a)第1步
IN  pduVersion               --SNMPv2-PDU
IN  PDU                      --第6a)第1步
IN  maxSizeResponseScopedPDU --来自processIncomingMsg
IN  stateReference           --第6a)第2步
IN  statusInformation        --来自processIncomingMsg
)

b) 丢弃接收的消息，不进行进一步处理，返回FAILURE。SNMPv3消息处理完成。

7) 解析scopedPDU以提取contextEngineID、contextName和PDU。如发生任何解析错误，则将snmpInASNParseErrs计数器[RFC3418]加1，丢弃安全状态信息，丢弃消息，不进行进一步处理，并返回FAILURE。SNMPv3消息处理完成。将未知PDU类型视为解析错误为实现选项。

---

8) pduVersion的确定依赖于实现方式。对于SNMPv3，pduVersion为SNMPv2-PDU。

9) pduType的确定也依赖于实现方式。根据[RFC3416]，pduType包括：

- GetRequest-PDU
- GetNextRequest-PDU
- GetBulkRequest-PDU
- SetRequest-PDU
- InformRequest-PDU
- SNMPv2-Trap-PDU
- Response-PDU
- Report-PDU

10) 如果pduType来自响应类或内部类，则：

a) 使用msgID组件的值查找对应的未完成请求的缓存信息。如果未找到对应的请求，则丢弃安全状态信息，丢弃消息，不进行进一步处理，并返回FAILURE。SNMPv3消息处理完成。

b) 从缓存中取出sendPduHandle。

否则，将sendPduHandle设置为<none>，为实现定义的值。

11) 如果pduType来自内部类，则：

a) 使用Report-PDU的内容，依据实现相关方式创建statusInformation。此statusInformation将转发给与sendPduHandle关联的应用。

b) 检索与未完成消息相关的缓存数据（由stateReference指示）。如果securityModel或securityLevel值与缓存值不同，则应认识到在noAuthNoPriv安全级别下传递的内部类PDU可能存在伪造或重放攻击的风险。如果接收方意识到这些风险，使用此类未认证消息是可以接受的，并可能在发现引擎ID或检测远程节点配置错误方面发挥作用。

当securityModel或securityLevel值与缓存值不同，实施可以保留关于未完成请求的缓存信息，以防收到的内部类PDU可能不合法。否则，任何关于未完成请求的缓存信息都将被丢弃。

c) 丢弃该消息的安全状态信息。

d) 将stateReference设为<none>。

e) 返回SUCCESS。SNMPv3消息处理完成。

12) 如果pduType来自响应类，则：

a) 取出与未完成请求相关的缓存数据（由stateReference指示），包括：

- snmpEngineID
- securityModel
- securityName
- securityLevel
- contextEngineID
- contextName

b) 如果从接收消息中提取的值与缓存值不同，则丢弃关于未完成请求的任何缓存信息，丢弃接收的消息，不进行进一步处理，并返回FAILURE。SNMPv3消息处理完成。

当securityModel或securityLevel值与缓存值不同，实施可以保留关于未完成请求的缓存信息，以防收到的响应类PDU可能不合法。

c) 否则，丢弃关于未完成请求的任何缓存信息，将stateReference设为<none>。

d) 返回SUCCESS。SNMPv3消息处理完成。

13) 如果pduType来自已确认类，则：

a) 如果securityEngineID的值不等于snmpEngineID的值，则丢弃安全状态信息，丢弃关于此消息的任何缓存信息，丢弃消息，不进行进一步处理，并返回FAILURE。SNMPv3消息处理完成。

b) 缓存消息信息，并创建一个状态引用（实现相关）。缓存内容包括：

- msgVersion
- msgID
- securityLevel
- msgFlags
- msgMaxSize
- securityModel
- maxSizeResponseScopedPDU
- securityStateReference

c) 返回SUCCESS。SNMPv3消息处理完成。

14) 如果pduType来自未确认类，则返回SUCCESS。SNMPv3消息处理完成。

---

8. 知识产权

IETF不对本文档所述技术的实现或使用可能涉及的任何知识产权或其他权利的有效性或范围发表任何立场，也不表示已努力识别任何此类权利。关于IETF在标准轨和标准相关文档中的权利程序，详见BCP-11。任何为公开发布而提出的权利声明、许可保证或为实现本规范而尝试获得的通用许可，都可从IETF秘书处获得。

IETF鼓励任何相关方向其报告可能涉及实现本标准所需技术的版权、专利或专利申请或其他专有权利。请将相关信息提交给IETF执行董事。

---

9. 致谢

本文件是SNMPv3工作组努力的成果。特别感谢以下SNMPv3工作组成员：

Harald Tveit Alvestrand（Maxware）
Dave Battle（SNMP Research, Inc.）
Alan Beard（Disney Worldwide Services）
Paul Berrevoets（SWI Systemware/Halcyon Inc.）
Martin Bjorklund（爱立信）
Uri Blumenthal（IBM T. J. Watson研究中心）
Jeff Case（SNMP Research, Inc.）
John Curran（BBN）
Mike Daniele（康柏计算机公司）
T. Max Devlin（Eltrax Systems）
John Flick（惠普）
Rob Frye（MCI）
Wes Hardaker（加州大学戴维斯分校信息技术部-D.C.A.S.）
David Harrington（Cabletron Systems Inc.）
Lauren Heintz（BMC Software, Inc.）
N.C. Hien（IBM T. J. Watson研究中心）
Michael Kirkham（InterWorking Labs, Inc.）
Dave Levi（SNMP Research, Inc.）
Louis A Mamakos（UUNET Technologies Inc.）
Joe Marzot（诺基亚网络公司）
Paul Meyer（Secure Computing Corporation）
Keith McCloghrie（思科系统公司）
Bob Moore（IBM）
Russ Mundy（Network Associates的TIS实验室）
Bob Natale（ACE*COMM公司）
Mike O'Dell（UUNET Technologies Inc.）
Dave Perkins（DeskTalk）
Peter Polkinghorne（布鲁内尔大学）
Randy Presuhn（BMC Software, Inc.）
David Reeder（Network Associates的TIS实验室）
David Reid（SNMP Research, Inc.）
Aleksey Romanov（Quality Quorum）
Shawn Routhier（Epilogue）
Juergen Schoenwaelder（布伦瑞克工业大学）
Bob Stewart（思科系统公司）
Mike Thatcher（独立顾问）
Bert Wijnen（IBM T. J. Watson研究中心）

该文件基于IETF安全与管理框架演进咨询团队的建议。该咨询团队成员包括：

David Harrington（Cabletron Systems Inc.）
Jeff Johnson（思科系统公司）
David Levi（SNMP Research Inc.）
John Linn（Openvision）
Russ Mundy（Trusted Information Systems，主席）
Shawn Routhier（Epilogue）
Glenn Waters（诺基亚）
Bert Wijnen（IBM T. J. Watson研究中心）

根据咨询团队和SNMPv3工作组章程的建议，设计尽可能借鉴之前的RFC和草案。因此，特别感谢之前设计方案SNMPv2u和SNMPv2*的作者们：

Jeff Case（SNMP Research, Inc.）
David Harrington（Cabletron Systems Inc.）
David Levi（SNMP Research, Inc.）
Keith McCloghrie（思科系统公司）
Brian O'Keefe（惠普）
Marshall T. Rose（Dover Beach Consulting）
Jon Saperia（BGS Systems Inc.）
Steve Waldbusser（国际网络服务公司）
Glenn W. Waters（贝尔-北方研究有限公司）

10. 安全考虑

调度器协调消息的处理，以提供管理消息的安全级别，并将SNMP PDU引导至正确的SNMP应用程序。

消息处理模型，特别是本文定义的v3MP，在消息处理过程中与安全子系统中的安全模型通过[RFC3411]中定义的抽象服务接口原语交互。

实际提供的安全级别主要由具体的安全模型实现和集成到框架中的SNMP应用实现决定。应用程序可以访问未加密的数据。应用程序应采取合理措施保护数据不被泄露，并在通过网络传输数据时遵守securityLevel，并调用访问控制模型的服务以实现访问控制。

在SNMP实体之间通信时，msgID元素的值必须避免重放攻击。该值不需要不可预测，但必须不重复。

在不安全的网络上传输时，任何交换中的消息若处于noAuthNoPriv安全级别，都存在第三方伪造或重放消息的风险。大多数交换中的所有消息都处于相同的安全级别。当最终消息是内部类PDU时，该消息可以在noAuthNoPriv或authNoPriv级别传递，与前面消息的安全级别无关。以authNoPriv级别传递的内部类PDU不被视为安全隐患。以noAuthNoPriv级别传递的内部类PDU存在伪造或重放攻击的风险。如果接收方意识到这些风险，使用此类未认证消息是可以接受的，并且在发现引擎ID或检测远程节点配置错误时可能具有一定的实用价值。

本文还包含一个MIB定义模块。所定义的对象都不可写，且其所代表的信息不被认为特别敏感。但如果在特定环境中被视为敏感，应通过配置适当的安全和访问控制模型限制访问。

11. 参考文献

11.1. 核心参考文献

[RFC2119] Bradner, S.，“用于指示RFC中需求级别的关键词”，BCP 14，RFC 2119，1997年3月。

[RFC2578] McCloghrie, K.等，“管理信息结构版本2（SMIv2）”，STD 58，RFC 2578，1999年4月。

[RFC2580] McCloghrie, K.等，“SMIv2的符合性声明”，STD 58，RFC 2580，1999年4月。

[RFC3411] Harrington, D.等，“描述简单网络管理协议（SNMP）管理框架的体系结构”，STD 62，RFC 3411，2002年12月。

[RFC3413] Levi, D.等，“SNMP应用”，STD 62，RFC 3413，2002年12月。

[RFC3414] Blumenthal, U.和B. Wijnen，“第3版SNMP的基于用户的安全模型（USM）”，STD 62，RFC 3414，2002年12月。

[RFC3415] Wijnen, B.等，“SNMP的基于视图的访问控制模型（VACM）”，STD 62，RFC 3415，2002年12月。

[RFC3416] Presuhn, R.等，“SNMP协议操作的第2版”，STD 62，RFC 3416，2002年12月。

[RFC3417] Presuhn, R.等，“SNMP的传输映射”，STD 62，RFC 3417，2002年12月。

[RFC3418] Presuhn, R.等，“SNMP管理信息库（MIB）”，STD 62，RFC 3418，2002年12月。

11.2. 补充性参考文献

[RFC1901] Case, J.等，“社区基础的SNMPv2介绍”，RFC 1901，1996年1月。

[RFC2028] Hovey, R.和S. Bradner，“参与IETF标准制定的组织”，BCP 11，RFC 2028，1996年10月。

[RFC2576] Frye, R.等，“互联网标准管理框架的第1、2、3版的共存”，RFC 2576，2000年3月。

[RFC3410] Case, J.等，“互联网标准管理框架的介绍和适用性声明”，RFC 3410，2002年12月。

12. 编者联系方式

Jeffrey Case
SNMP Research, Inc.
3001 Kimberlin Heights Road
诺克斯维尔，TN 37920-9716
美国
电话：+1 423-573-1434
电子邮箱：case@snmp.com

David Harrington
Enterasys Networks
35 Industrial Way
邮政信箱：5005
罗切斯特，NH 03866-5005
美国
电话：+1 603-337-2614
电子邮箱：dbh@enterasys.com

Randy Presuhn
BMC Software, Inc.
2141 North First Street
圣何塞，CA 95131
美国
电话：+1 408-546-1006
电子邮箱：randy_presuhn@bmc.com

Bert Wijnen
朗讯科技
Schagen 33
3461 GL Linschoten
荷兰
电话：+31 348-680-485
电子邮箱：bwijnen@lucent.com

13. 完整版权声明

版权所有（C）互联网协会（2002年）。保留所有权利。

本文件及其翻译版本可被复制、提供给他人，且可对其进行评论、解释或协助实现的派生作品进行复制、出版和分发，且不受任何限制，前提是所有此类副本和派生作品都必须包含上述版权声明和本段内容。然而，除非为制定互联网标准的目的而进行必要的修改（在此过程中必须遵循互联网标准制定的版权程序）或为了将其翻译成非英语语言，否则不得以任何方式修改本文件，例如删除版权声明或对互联网协会或其他互联网组织的引用。

上述授予的有限权限是永久的，不会被互联网协会或其继任者或受让人撤销。

本文件及其中包含的信息是“按原样”提供的，互联网协会和互联网工程任务组（IETF）不对其作任何明示或暗示的保证，包括但不限于其使用不会侵犯任何权利或具有适销性或特定用途的暗示保证。

致谢

RFC编辑功能的资金目前由互联网协会提供。
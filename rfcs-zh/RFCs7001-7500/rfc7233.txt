# RFC 7233 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs7001-7500/rfc7233.txt

互联网工程任务组（IETF）                  R. Fielding，主编
意见征求稿：7233                                              Adobe
废止：2616                                              Y. Lafon，主编
类别：标准轨道                                              W3C
ISSN：2070-1721                                            J. Reschke，主编
                                                               greenbytes
                                                               2014年6月


         超文本传输协议（HTTP/1.1）：范围请求

摘要

   超文本传输协议（HTTP）是一种无状态的应用层协议，用于分布式、协作式的超文本信息系统。本文档定义了范围请求及其响应的构造和组合规则。

本备忘录的状态

   这是一个互联网标准轨道的文档。

   本文档由互联网工程任务组（IETF）制定，代表了IETF社区的共识。它已经过公开审查，并已获互联网工程指导组（IESG）批准发布。关于互联网标准的更多信息，请参见RFC 5741第2节。

   有关本文件当前状态、任何勘误以及如何提供反馈的信息，可以在 http://www.rfc-editor.org/info/rfc7233 获取。




















Fielding 等人             标准轨道                     [第1页]


RFC 7233                 HTTP/1.1 范围请求               2014年6月


版权声明

   版权所有（c）2014 IETF信托及本文档作者。保留所有权利。

   本文档受BCP 78和IETF信托关于IETF文档的法律规定（http://trustee.ietf.org/license-info）约束，适用于本文档发布之日。请仔细阅读这些文件，它们描述了您对本文件的权利和限制。从本文档中提取的代码组件必须包括简化BSD许可证文本（详见信托法律规定第4.e节），且提供时不附带任何担保。

   本文档可能包含在2008年11月10日之前发布或公开的IETF文档或贡献的内容。这些内容的版权控制人可能未曾授予IETF信托允许在IETF标准流程之外修改此类内容的权利。在未获得版权控制人充分授权的情况下，不能在IETF标准流程之外修改本文档，也不能在IETF标准流程之外创建其派生作品，除非是为了将其格式化为RFC发布或翻译成非英语语言。




















Fielding 等人             标准轨道                     [第2页]


RFC 7233                 HTTP/1.1 范围请求               2014年6月


目录

   1. 引言 ....................................................4
      1.1. 合规性与错误处理 ....................................4
      1.2. 语法符号 ............................................4
   2. 范围单位 .................................................5
      2.1. 字节范围 ............................................5
      2.2. 其他范围单位 ........................................7
      2.3. Accept-Ranges ........................................7
   3. 范围请求 .................................................8
      3.1. 范围 ..................................................8
      3.2. If-Range ..............................................9
   4. 对范围请求的响应 ........................................10
      4.1. 206 部分内容 ........................................10
      4.2. Content-Range ........................................12
      4.3. 组合范围 ............................................14
      4.4. 416 范围不满足 ......................................15
   5. IANA注意事项 ............................................16
      5.1. 范围单位注册表 .....................................16
           5.1.1. 过程 ..........................................16
           5.1.2. 注册 ..........................................16
      5.2. 状态码注册 ..........................................17
      5.3. 头字段注册 ..........................................17
      5.4. 媒体类型注册 ........................................17
           5.4.1. Internet媒体类型 multipart/byteranges ..........18
   6. 安全考虑 ................................................19
      6.1. 利用范围发起的拒绝服务攻击 ..........................19
   7. 致谢 ....................................................19
   8. 参考文献 ................................................20
      8.1. 规范性参考 ..........................................20
      8.2. 资料性参考 ..........................................20
   附录A. Internet媒体类型 multipart/byteranges .................21
   附录B. 与RFC 2616的变更 ....................................22
   附录C. 导入的ABNF ..........................................22
   附录D. 收集的ABNF ..........................................23
   索引 .........................................................24















Fielding 等人             标准轨道                     [第3页]


RFC 7233                 HTTP/1.1 范围请求               2014年6月


1. 引言

   超文本传输协议（HTTP）客户端经常会遇到数据传输中断的情况，原因可能是请求被取消或连接中断。当客户端已存储部分表示时，通常希望在后续请求中请求剩余部分，而不是传输整个表示。同样，存储空间有限的设备可能希望只请求较大表示中的某一子集，比如一份超大文档的单个页面，或嵌入图像的尺寸。

   本文档定义了HTTP/1.1的范围请求、部分响应以及multipart/byteranges媒体类型。范围请求是HTTP的可选功能，设计目的是让未实现此功能（或不支持目标资源的此功能）的接收端仍能像普通GET请求一样响应，从而不影响互操作性。部分响应通过一个特殊的状态码表示，以避免缓存等误将其误认为完整响应。

   虽然范围请求机制旨在支持扩展的范围类型，但本规范仅定义字节范围的请求。

1.1. 合规性与错误处理

   本文档中的关键词“必须（MUST）”、“不得（MUST NOT）”、“要求（REQUIRED）”、“应（SHALL）”、“不得（SHALL NOT）”、“建议（SHOULD）”、“不建议（SHOULD NOT）”、“推荐（RECOMMENDED）”、“可以（MAY）”和“可选（OPTIONAL）”的解释遵循[RFC2119]。

   合规性标准和错误处理的考虑事项在[RFC7230]第2.5节中定义。

1.2. 语法符号

   本规范采用[RFC5234]定义的增强巴科斯-诺尔范式（ABNF）符号，结合第7节中的列表扩展（在[RFC7230]中定义），允许用“#”操作符紧凑定义逗号分隔的列表（类似于“*”操作符表示重复）。附录C描述了从其他文档导入的规则，附录D显示了所有列表操作符展开为标准ABNF的完整语法。








Fielding 等人             标准轨道                     [第4页]


RFC 7233                 HTTP/1.1 范围请求               2014年6月


2. 范围单位

   根据表示的媒介类型固有的结构，表示可以划分为若干子范围。这种“范围单位”用于在Accept-Ranges（第2.3节）响应头中声明支持范围请求，在Range（第3.1节）请求头中指明请求的表示部分，以及在Content-Range（第4.2节）负载头中描述正在传输的表示部分。

     range-unit       = bytes-unit / other-range-unit

2.1. 字节范围

   由于表示数据以字节序列的形式在负载中传输，字节范围对于任何可通过HTTP传输的表示（参见[RFC7231]第3节）都是有意义的子结构。“bytes”范围单位用于表达数据字节序列的子范围。

     bytes-unit       = "bytes"

   字节范围请求可以指定单一字节范围或多个范围。

     byte-ranges-specifier = bytes-unit "=" byte-range-set
     byte-range-set  = 1#( byte-range-spec / suffix-byte-range-spec )
     byte-range-spec = first-byte-pos "-" [ last-byte-pos ]
     first-byte-pos  = 1*DIGIT
     last-byte-pos   = 1*DIGIT

   在字节范围规范中，first-byte-pos表示范围内第一个字节的偏移量。last-byte-pos表示范围内最后一个字节的偏移量；即，指定的字节位置是包含的。字节偏移从零开始。

   字节范围规范示例：

   o  前500个字节（字节偏移0-499，包括边界）：

        bytes=0-499

   o  后500个字节（字节偏移500-999，包括边界）：

        bytes=500-999





Fielding 等人             标准轨道                     [第5页]


RFC 7233                 HTTP/1.1 范围请求               2014年6月


   如果last-byte-pos存在且小于first-byte-pos，则字节范围规范无效。

   客户端可以在不知道所选表示大小的情况下限制请求的字节数。如果last-byte-pos缺失，或其值大于等于当前表示数据的长度，则字节范围被解释为表示的剩余部分（即，服务器会用当前表示长度减一的值替换last-byte-pos的值）。

   客户端还可以使用后缀字节范围规范请求所选表示的最后N个字节。

     suffix-byte-range-spec = "-" suffix-length
     suffix-length = 1*DIGIT

   如果所选表示比指定的后缀长度短，则使用整个表示。

   以长度为10000的表示为例，其他示例包括：

   o  最后500字节（字节偏移9500-9999，包括边界）：

        bytes=-500

   或者：

        bytes=9500-

   o  仅请求第一个和最后一个字节（字节0和9999）：

        bytes=0-0,-1

   o  其他有效（但非规范）对第二个500字节的定义（字节偏移500-999，包括边界）：

        bytes=500-600,601-999
        bytes=500-700,601-999

   如果一个有效的字节范围集包含至少一个first-byte-pos小于当前表示长度的范围，或至少一个非零后缀长度的后缀字节范围，则该字节范围集是可满足的。否则，不可满足。

   在字节范围语法中，first-byte-pos、last-byte-pos和suffix-length以十进制字节数表示。由于负载长度没有预定义的限制，接收端必须预料到可能出现的大数字，避免因整数转换溢出而导致的解析错误。

2.2. 其他范围单位

   范围单位应具有可扩展性。新的范围单位应在第5.1节中注册到IANA。

     other-range-unit = token

2.3. Accept-Ranges

   “Accept-Ranges”头字段允许服务器指示其支持目标资源的范围请求。

     Accept-Ranges     = acceptable-ranges
     acceptable-ranges = 1#range-unit / "none"

   支持字节范围请求的源服务器可以发送

     Accept-Ranges: bytes

   以指示支持的范围单位。客户端可以在未收到此头字段的情况下发起范围请求。范围单位定义见第2节。

   不支持任何范围请求的目标资源的服务器可以发送

     Accept-Ranges: none

   以告知客户端不要尝试范围请求。















Fielding 等人             标准轨道                     [第6页]


RFC 7233                 HTTP/1.1 范围请求               2014年6月


3. 范围请求

3.1. 范围

   GET请求中的“Range”头字段会修改请求的语义，要求只传输所选表示数据的一个或多个子范围，而不是整个表示。

     Range = byte-ranges-specifier / other-ranges-specifier
     other-ranges-specifier = other-range-unit "=" other-range-set
     other-range-set = 1*VCHAR

   服务器可以忽略Range头字段。然而，源服务器和中间缓存应尽可能支持字节范围，因为Range支持高效恢复部分失败的传输和部分检索大表示。服务器必须忽略非GET请求中携带的Range头字段。

   服务器必须忽略包含其不理解的范围单位的Range头字段。代理可以丢弃包含其不理解的范围单位的Range头字段。

   支持范围请求的服务器可以忽略或拒绝包含超过两个重叠范围的Range头字段，或包含许多未按升序列出的微小范围的请求，因为这可能是客户端故障或故意的拒绝服务攻击（第6.1节）。客户端不应请求本质上处理和传输效率较低的多个范围，而不是一个涵盖相同数据的单一范围。

   请求多个范围的客户端应按升序列出这些范围（即它们在完整表示中通常的接收顺序），除非有特殊需要提前请求后续部分。例如，处理大型表示的用户代理可能需要先请求后续部分，特别是当表示按逆序存储页面，用户代理希望一次传输一页时。

   Range头字段在评估[RFC7232]定义的前提条件头字段后进行评估，且仅在在没有Range头字段时，响应为200（OK）。换句话说，当条件GET会导致304（未修改）响应时，Range将被忽略。

   If-Range头字段（第3.2节）可以作为应用Range头字段的前提条件。

   如果所有前提条件都成立，服务器支持目标资源的Range头字段，且指定的范围（第2.1节定义）有效且可满足，服务器应返回206（部分内容）响应，负载中包含一个或多个对应请求中可满足范围的部分表示，详见第4节。

如果所有的前提条件都成立，且服务器支持目标资源的Range请求头字段，但所指定的范围无效或无法满足，服务器应当返回416（Range Not Satisfiable）状态码。

3.2.  If-Range（如果范围）

当客户端拥有某个表示的部分副本，并希望获得该表示的最新完整版本时，可以在请求中使用Range头字段结合条件GET（使用If-Unmodified-Since和/或If-Match）来实现。然而，如果预条件失败（即表示已被修改），客户端将不得不发起第二次请求以获取当前的完整表示。

“如果范围”头字段允许客户端“跳过”第二次请求。非正式地，它的含义如下：如果表示未被修改，则发送我请求的Range部分；否则，发送整个表示。

     If-Range = entity-tag / HTTP-date

客户端不得在请求中没有Range头字段的情况下生成If-Range头字段。服务器必须忽略在没有Range头字段的请求中收到的If-Range头字段。源服务器必须忽略在请求目标资源不支持Range请求时收到的If-Range头字段。

客户端不得生成包含弱实体标签的If-Range头字段。除非客户端没有对应表示的实体标签且日期是强验证器（根据[RFC7232]第2.2.2节定义的），否则不得在If-Range头字段中使用HTTP-date。

评估If-Range预条件的服务器在比较实体标签时，必须使用强比较函数（见[RFC7232]第2.3.2节），并且如果提供的HTTP-date不是强验证器，必须将条件评估为假。有效的实体标签可以通过检查其前两个字符是否为引号（DQUOTE）与有效HTTP-date区分。

如果If-Range头字段中的验证器与目标资源所对应的当前验证器匹配，服务器应按请求处理Range头字段；如果不匹配，服务器必须忽略Range头字段。注意，这种精确匹配（包括HTTP-date的情况）不同于评估If-Unmodified-Since条件时的“早于或等于”比较。

4.  对Range请求的响应

4.1.  206 Partial Content（部分内容）

206状态码表示服务器成功满足了目标资源的范围请求，传输了一个或多个符合请求Range头字段中满足条件范围的部分。

如果只传输单个部分，生成206响应的服务器必须在响应头中包含Content-Range字段，描述所包含的范围，并在响应体中包含该范围的内容。例如：

```
HTTP/1.1 206 Partial Content
Date: Wed, 15 Nov 1995 06:25:24 GMT
Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT
Content-Range: bytes 21010-47021/47022
Content-Length: 26012
Content-Type: image/gif

... 26012字节的部分图片数据 ...
```

如果传输多个部分，生成206响应的服务器必须生成一个“multipart/byteranges”类型的负载（定义在附录A中），并在Content-Type头中包含该媒体类型及其必需的boundary参数。为了避免与单部分响应混淆，服务器不得在多部分响应的HTTP头部分生成Content-Range字段（该字段将在每个部分中单独发送）。

在多部分负载的每个正文部分的头区域，服务器必须生成对应该部分范围的Content-Range字段。如果原本在200（OK）响应中有Content-Type字段，服务器应在每个部分的头中生成相同的Content-Type。例如：

```
HTTP/1.1 206 Partial Content
Date: Wed, 15 Nov 1995 06:25:24 GMT
Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT
Content-Length: 1741
Content-Type: multipart/byteranges; boundary=THIS_STRING_SEPARATES

--THIS_STRING_SEPARATES
Content-Type: application/pdf
Content-Range: bytes 500-999/8000

...第一个范围内容...
--THIS_STRING_SEPARATES
Content-Type: application/pdf
Content-Range: bytes 7000-7999/8000

...第二个范围内容...
--THIS_STRING_SEPARATES--
```

当请求多个范围时，服务器可以合并任何重叠的范围，或那些由较小间隙分隔的范围（其间隙小于多部分负载的开销），不论这些范围在Range头字段中出现的顺序如何。由于多部分负载每个部分的开销大约为80字节（取决于媒体类型和boundary参数长度），传输许多小的非连续部分可能比传输整个表示更低效。

服务器不得对单个范围请求生成多部分响应，因为不请求多部分的客户端可能不支持多部分响应。然而，如果请求了多个范围且只找到一个满足条件的范围，服务器可以只生成一个包含单一正文部分的多部分负载。不能处理多部分响应的客户端不得发出请求以请求多个范围。

生成多部分响应时，服务器应按收到Range头字段中范围的顺序发送各部分（除那些不可满足或已合并的范围外）。

当生成206响应时，除上述必需字段外，服务器还应生成以下字段（如果在相同请求的200响应中会发送）：
Date、Cache-Control、ETag、Expires、Content-Location和Vary。

如果在带有If-Range头字段的请求中生成206响应，服务器应只生成上述必需字段，不应生成其他表示字段，因为客户端已拥有包含这些字段的先前响应。否则，必须生成所有在200响应中会包含的表示字段。

206响应默认可缓存，除非有明确的缓存控制指示（参见[RFC7234]第4.2.2节）。

4.2.  Content-Range（内容范围）

Content-Range头字段在单部分的206（Partial Content）响应中用以指示所包含的部分范围，在多部分的206响应中用以指示每个正文部分的范围，以及在416（Range Not Satisfiable）响应中提供所选表示的信息。

内容格式如下：

```
Content-Range = byte-content-range / other-content-range

byte-content-range  = bytes-unit SP ( byte-range-resp / unsatisfied-range )

byte-range-resp     = byte-range "/" ( complete-length / "*" )
byte-range          = first-byte-pos "-" last-byte-pos
unsatisfied-range   = "*/" complete-length

complete-length     = 1*DIGIT

other-content-range = other-range-unit SP other-range-resp
other-range-resp    = *CHAR
```

如果一个206（Partial Content）响应中的Content-Range头字段中的范围单位（第2节）不被接收方理解，接收方不得尝试将其与存储的表示合并。接收此类消息的代理应将其转发。

对于字节范围，发件人应指明完整的表示长度（除非长度未知或难以确定）。用“*”字符表示长度未知。

示例：当发件人知道所选表示的完整长度为1234字节时：

```
Content-Range: bytes 42-1233/1234
```

当长度未知时：

```
Content-Range: bytes 42-1233/*
```

Content-Range字段值无效的情况包括：范围的最后字节位置小于第一个字节位置，或完整长度小于等于最后字节位置。无效的Content-Range应不被合并。

服务器在响应字节范围请求时，应在Content-Range中包含未满足范围的范围值，例如：

```
Content-Range: bytes */1234
```

此处的完整长度表示所选表示的当前长度。

Content-Range头字段对非206和416状态码没有定义意义。仅在206（Partial Content）和416（Range Not Satisfiable）状态码中，Content-Range才有明确含义。

以下示例显示所选表示总长度为1234字节的Content-Range值：

- 前500字节：

  ```
  Content-Range: bytes 0-499/1234
  ```

- 后500字节：

  ```
  Content-Range: bytes 500-999/1234
  ```

- 除前500字节外的所有内容：

  ```
  Content-Range: bytes 500-1233/1234
  ```

- 最后500字节：

  ```
  Content-Range: bytes 734-1233/1234
  ```

4.3.  Range合并

如果连接提前关闭或请求中使用了一个或多个Range规格，响应可能只传输表示的子范围。经过多次此类传输后，客户端可能已收到同一表示的多个范围。这些范围只有在它们都具有相同的强验证器（见[RFC7232]第2.1节）时，才能安全合并。

拥有多个目标资源GET请求部分响应的客户端，可以在它们共享相同强验证器的情况下，将这些响应合并为一个更大的连续范围。

如果最新的响应是不完整的200（OK）响应，则该响应的头字段将用于合并的响应，并替换存储的匹配响应的头字段。

如果最新的响应是206（Partial Content），且至少有一个匹配的存储响应是200（OK），则合并响应的头字段采用最新的200响应的头字段；如果所有匹配的存储响应都是206响应，则采用具有最新头字段的存储响应作为合并响应的头部来源，但客户端必须用新响应中提供的其他头字段（除Content-Range外）替换存储响应中的对应字段。

合并响应的正文由新响应中的部分内容范围与所有选中的响应的内容范围的合集组成。如果合集覆盖整个表示，则客户端必须将合并响应视为完整的200（OK）响应，包括反映完整长度的Content-Length头字段。否则，客户端应将连续范围视为以下之一：表示的前缀（不完整的200响应）、包含多部分的206（Partial Content）响应，或多个206响应（每个包含一个连续范围，由Content-Range指示）。

4.4.  416 Range Not Satisfiable（范围无法满足）

416（范围不满足）状态码表示请求的Range头字段（第3.1节）中的范围与所选资源的当前范围没有重叠，或者请求的范围集因无效范围或请求过多的小范围或重叠范围而被拒绝。

对于字节范围而言，未与当前范围重叠意味着所有byte-range-spec值的第一个字节位置都大于所选表示的当前长度。当在响应字节范围请求时生成此状态码，发送方应生成一个Content-Range头字段，指明所选表示的当前长度（第4.2节）。

例如：

```
HTTP/1.1 416 Range Not Satisfiable
Date: Fri, 20 Jan 2012 15:41:54 GMT
Content-Range: bytes */47022
```

注意：由于服务器可以选择忽略Range头，许多实现会直接用整个所选表示作为200（OK）响应返回。这部分原因在于大多数客户端准备接受200（OK）响应以完成任务（虽然效率较低），以及客户端可能不会停止发出无效的部分请求，直到收到完整的表示。因此，即使在最合适的情况下，客户端也不能依赖于一定会收到416（范围不满足）响应。
# RFC 3501 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs3501-4000/rfc3501.txt

网络工作组                                         M. Crispin
意见请求编号：3501                      华盛顿大学
废止：2060                                               2003年3月
类别：标准轨道


            互联网消息访问协议 - 版本4修订版1

本备忘录的状态

   本文件为互联网社区制定的互联网标准轨道协议，旨在征求讨论和改进建议。请参阅当前版本的《互联网官方协议标准》（STD 1），了解该协议的标准化状态和现状。本备忘录的分发不受限制。

版权声明

   版权所有（C）互联网协会（2003年）。保留所有权利。

摘要

   互联网消息访问协议，版本4修订版1（IMAP4rev1），允许客户端访问和操作服务器上的电子邮件消息。IMAP4rev1允许对邮箱（远程消息文件夹）进行操作，其功能与本地文件夹基本一致。IMAP4rev1还提供了离线客户端与服务器重新同步的能力。

   IMAP4rev1包括创建、删除、重命名邮箱，检查新消息，永久删除消息，设置和清除标志，解析RFC 2822和RFC 2045，搜索，以及选择性获取消息属性、文本和部分内容的操作。IMAP4rev1中的消息通过数字访问，这些数字可以是消息序列号或唯一标识符。

   IMAP4rev1支持单一服务器。支持多台IMAP4rev1服务器配置的机制在RFC 2244中讨论。

   IMAP4rev1不定义发邮件的方法；此功能由如RFC 2821的邮件传输协议处理。








Crispin                     标准轨道                     [第1页]


RFC 3501                         IMAPv4                       2003年3月


目录

   IMAP4rev1协议规范 ..............................................  4
   1. 如何阅读本文 ..............................................  4
   1.1. 本文结构 .................................................  4
   1.2. 本文使用的约定 ...........................................  4
   1.3. 对实现者的特别说明 .......................................  5
   2. 协议概述 ....................................................  6
   2.1. 链路层 ...................................................  6
   2.2. 命令与响应 ...............................................  6
   2.2.1. 客户端协议发送端与服务器协议接收端 ....................  6
   2.2.2. 服务器协议发送端与客户端协议接收端 ....................  7
   2.3. 消息属性 .................................................  8
   2.3.1. 消息编号 ...............................................  8
   2.3.1.1. 唯一标识符（UID）消息属性 ............................  8
   2.3.1.2. 消息序列号消息属性 .................................. 10
   2.3.2. 标志（Flags）消息属性 ................................ 11
   2.3.3. 内部日期消息属性 ...................................... 12
   2.3.4. [RFC-2822] 大小消息属性 ................................ 12
   2.3.5. 信封结构消息属性 ...................................... 12
   2.3.6. 正文结构消息属性 ...................................... 12
   2.4. 消息文本 ................................................. 13
   3. 状态与流程图 ............................................... 13
   3.1. 未认证状态 ............................................... 13
   3.2. 已认证状态 ............................................... 13
   3.3. 已选择状态 ............................................... 13
   3.4. 退出状态 ................................................. 14
   4. 数据格式 .................................................... 16
   4.1. 原子（Atom） ............................................. 16
   4.2. 数字 ..................................................... 16
   4.3. 字符串 ................................................... 16
   4.3.1. 8位和二进制字符串 ..................................... 17
   4.4. 括号列表 ................................................. 17
   4.5. NIL ...................................................... 17
   5. 操作注意事项 ............................................... 18
   5.1. 邮箱命名 .................................................  18
   5.1.1. 邮箱层级命名 ...........................................  19
   5.1.2. 邮箱命名空间命名规范 ...................................  19
   5.1.3. 邮箱国际命名规范 .......................................  19
   5.2. 邮箱大小和消息状态更新 ..................................  21
   5.3. 无命令进行时的响应 .......................................  21
   5.4. 自动退出计时器 ...........................................  22
   5.5. 多个命令同时进行 ........................................  22
   6. 客户端命令 .................................................  23
   6.1. 任何状态下的客户端命令 ..................................  24
   6.1.1. CAPABILITY命令 .........................................  24
   6.1.2. NOOP命令 ...............................................  25
   6.1.3. LOGOUT命令 .............................................  26



Crispin                     标准轨道                     [第2页]


RFC 3501                         IMAPv4                       2003年3月


   6.2. 未认证状态下的客户端命令 ................................  26
   6.2.1. STARTTLS命令 ...........................................  27
   6.2.2. AUTHENTICATE命令 .......................................  28
   6.2.3. LOGIN命令 ..............................................  30
   6.3. 已认证状态下的客户端命令 ................................  31
   6.3.1. SELECT命令 .............................................  32
   6.3.2. EXAMINE命令 ............................................  34
   6.3.3. CREATE命令 .............................................  34
   6.3.4. DELETE命令 .............................................  35
   6.3.5. RENAME命令 .............................................  37
   6.3.6. SUBSCRIBE命令 ..........................................  39
   6.3.7. UNSUBSCRIBE命令 ........................................  39
   6.3.8. LIST命令 ...............................................  40
   6.3.9. LSUB命令 ...............................................  43
   6.3.10. STATUS命令 ............................................  44
   6.3.11. APPEND命令 ............................................  46
   6.4. 选择状态下的客户端命令 ..................................  47
   6.4.1. CHECK命令 .............................................  47
   6.4.2. CLOSE命令 .............................................  48
   6.4.3. EXPUNGE命令 ...........................................  49
   6.4.4. SEARCH命令 ............................................  49
   6.4.5. FETCH命令 .............................................  54
   6.4.6. STORE命令 .............................................  58
   6.4.7. COPY命令 ..............................................  59
   6.4.8. UID命令 ...............................................  60
   6.5. 实验/扩展的客户端命令 ....................................  62
   6.5.1. X<atom>命令 ............................................  62
   7. 服务器响应 ..................................................  62
   7.1. 服务器状态响应 ...........................................  63
   7.1.1. OK响应 .................................................  65
   7.1.2. NO响应 .................................................  66
   7.1.3. BAD响应 ................................................  66
   7.1.4. PREAUTH响应 ............................................  67
   7.1.5. BYE响应 ................................................  67
   7.2. 服务器和邮箱状态响应 ....................................  68
   7.2.1. CAPABILITY响应 .........................................  68
   7.2.2. LIST响应 ...............................................  69
   7.2.3. LSUB响应 ...............................................  70
   7.2.4. STATUS响应 .............................................  70
   7.2.5. SEARCH响应 .............................................  71
   7.2.6. FLAGS响应 ..............................................  71
   7.3. 邮箱大小的服务器响应 ....................................  71
   7.3.1. EXISTS响应 .............................................  71
   7.3.2. RECENT响应 .............................................  72
   7.4. 消息状态的服务器响应 ....................................  72
   7.4.1. EXPUNGE响应 ............................................  72
   7.4.2. FETCH响应 ..............................................  73
   7.5. 命令继续请求的服务器响应 ................................  79



Crispin                     标准轨道                     [第3页]


RFC 3501                         IMAPv4                       2003年3月


   8. 示例IMAP4rev1连接 ........................................  80
   9. 正式语法 ..................................................  81
   10. 作者说明 .................................................  92
   11. 安全注意事项 .............................................  92
   11.1. STARTTLS安全注意事项 ..................................  92
   11.2. 其他安全考虑 ...........................................  93
   12. IANA注意事项 ............................................  94
   附录 .........................................................  95
   A. 参考文献 .................................................  95
   B. 与RFC 2060的变更 .........................................  97
   C. 关键词索引 ............................................... 103
   作者地址 ....................................................  107
   完整版权声明 ...............................................  108

IMAP4rev1协议规范

1. 如何阅读本文

1.1. 本文结构

   本文从实现IMAP4rev1客户端或服务器的角度撰写。除了第2节的协议概述外，内容并非专为理解协议操作而优化。第3至第5节提供IMAP4rev1操作的整体背景和定义。

   第6、7和9节分别描述IMAP命令、响应和语法。这些内容相互关联，几乎不可能单独理解其中任何一部分。特别是，不要仅凭命令部分推断命令语法，应参照正式语法部分。

1.2. 本文使用的约定

   “约定”指基本原则或程序。本文中的约定在本节说明。

   在示例中，“C:”表示客户端发出的行，“S:”表示服务器发出的行。

   本文中的关键词“必须”、“不得”、“要求”、“应”、“不应”、“可以”和“可选”按照[KEYWORDS]中的定义解释。

   “can”一词（非“may”）用以指可能的情况或场景，而非协议的可选功能。

   “用户”指人类用户，“客户端”指用户运行的软件。

   “连接”指从建立网络连接到终止的整个客户端/服务器交互过程。

   “会话”指从选择邮箱（SELECT或EXAMINE命令）开始，到结束（选择另一个邮箱、CLOSE命令或连接终止）之间的交互。

   除非另有说明，字符均为7位US-ASCII。其他字符集用“CHARSET”表示，详见[MIME-IMT]和[CHARSET]。CHARSET除了定义字符集外，还具有其他重要语义，详见相关文档。

   IMAP中存在若干协议约定，指非严格属于IMAP协议的实践，但被广泛接受。实现时应注意这些约定，避免冲突。例如，不能用“&”作为层级分隔符，因为它与邮箱国际命名规范冲突，邮箱名中的其他“&”也会受到影响。

1.3. 对实现者的特别说明

   强烈建议IMAP协议的实现者结合[IMAP-IMPLEMENTATION]中的建议文档一同阅读，以帮助理解协议细节及构建互操作性良好的产品。

   IMAP4rev1设计为向上兼容早期的[IMAP2]和未发布的IMAP2bis协议。它在很大程度上兼容RFC 1730描述的IMAP4协议，唯一例外是某些在RFC 1730中添加但后来被移除的问题功能。在IMAP4rev1的发展过程中，早期协议中的某些内容已变得过时。IMAP4rev1中可能遇到的过时命令、响应和数据格式详见[IMAP-OBSOLETE]。

   与早期协议中最常用的变体IMAP2bis的兼容性问题，详见[IMAP-COMPAT]。关于IMAP2的历史变体的完整讨论在[IMAP-HISTORICAL]中，本文主要具有历史意义。

   IMAP最初基于较旧的[RFC-822]标准开发，因此IMAP中的一些fetch项名称中包含“RFC822”。除RFC822.SIZE外，已有更现代的替代方案，例如RFC822.HEADER的现代版本为BODY.PEEK[HEADER]。在所有情况下，“RFC822”应理解为指向更新的[RFC-2822]标准的引用。

2. 协议概述

2.1. 链路层

   IMAP4rev1协议假设使用可靠的数据流，如TCP。当使用TCP时，IMAP4rev1服务器监听端口143。

2.2. 命令与响应

   一个IMAP4rev1连接包括建立客户端/服务器网络连接、服务器的初始问候，以及双方的交互。这些交互由客户端命令、服务器数据和服务器完成状态响应组成。

   客户端和服务器之间传输的所有内容均为行，即以CRLF结尾的字符串。IMAP4rev1的协议接收端要么逐行读取，要么读取已知长度的字节序列，后跟一行。

2.2.1. 客户端协议发送端与服务器协议接收端

   客户端命令启动一个操作。每个客户端命令前都带有一个标识符（通常为短的字母数字字符串，例如A0001、A0002等），称为“标签”。每个命令由客户端生成不同的标签。

   客户端必须严格遵守本规范中的语法。发送缺少或多余空格或参数的命令属于语法错误。

   有两种情况会导致客户端发出的行不代表完整命令：一是命令参数用字节数引号括起（详见数据格式中的字面值描述）；二是命令参数需要服务器反馈（如AUTHENTICATE命令）。在任何一种情况下，如果服务器准备好接收字节（适用时）和命令剩余部分，会发出命令续行请求响应，前缀为“+”。

        注意：如果服务器检测到命令错误，会发出带有匹配命令标签的BAD完成响应，拒绝该命令，阻止客户端继续发送。

        服务器也可能对其他命令（如多条命令同时进行）发出完成响应，或无标签数据。在任何情况下，命令续行请求仍待处理；客户端应对响应采取相应措施，并读取服务器的下一响应。在所有情况下，客户端必须在发起新命令前，完成所有当前命令的响应处理（包括所有续行响应和续行内容）。

   IMAP4rev1服务器的协议接收端会读取客户端发来的命令行，解析命令及参数，并传输服务器数据和命令完成状态响应。

2.2.2. 服务器协议发送端与客户端协议接收端

服务器向客户端传输的数据以及不表示命令完成状态的响应，前缀为“*”，被称为未标记响应（untagged responses）。

服务器数据可能是客户端命令的结果，也可能由服务器单方面发送。由特定命令产生的服务器数据与由服务器单方面发送的服务器数据在语法上没有区别。

服务器完成结果响应指示操作的成功或失败。它使用与发起操作的客户端命令相同的标签进行标记。因此，如果多个命令同时进行，服务器完成响应中的标签将标识该响应对应的命令。服务器可能的完成响应有三种：OK（表示成功）、NO（表示失败）或BAD（表示协议错误，例如未识别的命令或命令语法错误）。

服务器应严格执行本规范中规定的语法。任何存在协议语法错误的客户端命令（包括但不限于缺少或多余的空格或参数）都应被拒绝，客户端会收到一个BAD的服务器完成响应。

IMAP4rev1客户端的协议接收者会读取来自服务器的响应行，然后根据响应的第一个标记（可以是标签、“*”或“+”）采取相应措施。

客户端必须随时准备接受任何服务器响应，包括未请求的服务器数据。服务器数据应被记录，以便客户端可以引用其记录的副本，而无需向服务器发送请求命令。在某些情况下，服务器数据必须被记录。

关于此主题的详细讨论请参见“服务器响应”部分。

2.3. 消息属性

除了消息正文外，每条消息还具有多个相关属性。这些属性可以单独检索，也可以与其他属性或消息正文一起检索。

2.3.1. 消息编号

在IMAP4rev1中，消息可以通过两种编号方式访问：唯一标识符（UID）或消息序列号。

2.3.1.1. 唯一标识符（UID）消息属性

每条消息被赋予一个32位值，结合唯一标识符有效性值（见下文）形成一个64位值，必须永远不指向邮箱中的其他消息或同名邮箱的后续消息。唯一标识符在邮箱中按严格递增的方式分配；每添加一条新消息，都会获得比之前消息更高的UID。与消息序列号不同，唯一标识符不一定连续。

消息的唯一标识符在会话期间不得更改，且应在会话之间保持不变。会话之间唯一标识符的任何变化，必须通过UIDVALIDITY机制检测到。持久的唯一标识符对于客户端从之前的会话中重新同步状态（例如离线或断线访问的客户端）是必要的，详细内容请参见[IMAP-DISC]。

每个邮箱关联两个值以帮助处理唯一标识符：下一个唯一标识符值和唯一标识符有效性值。

下一个唯一标识符值是预期将分配给新消息的值。除非唯一标识符有效性值也发生变化（见下文），否则该值应满足以下两个条件：一是在没有新消息添加时不变；二是在每次添加新消息时都会变化，即使这些新消息随后被删除。

注意：下一个唯一标识符值旨在为客户端提供一种判断自上次检查以来是否有新消息到达的方法。它并不保证任何消息一定会拥有该唯一标识符。客户端只能在获取该值时假设，之后到达的消息的UID将大于或等于该值。

唯一标识符有效性值在邮箱选择时的未标记OK响应中以UIDVALIDITY响应码发送。如果早期会话中的唯一标识符未能在当前会话中持续存在，则必须使用比之前会话更大的UIDVALIDITY值。

注意：理想情况下，唯一标识符应始终持久存在。虽然本规范承认在某些服务器环境中持久化可能不可避免，但强烈建议采用避免此问题的消息存储实现技术，例如：

1）唯一标识符必须在邮箱中严格递增。如果物理消息存储被非IMAP代理重新排序，则需要重新生成邮箱中的唯一标识符，因为原有的唯一标识符不再严格递增。

2）如果消息存储没有机制存储唯一标识符，则必须在每次会话中重新生成唯一标识符，并且每个会话必须有唯一的UIDVALIDITY值。

3）如果删除邮箱后在未来创建了同名新邮箱，服务器必须要么保留之前邮箱的唯一标识符，要么为新邮箱分配新的UIDVALIDITY值。一个合理的UIDVALIDITY值可以是邮箱创建的日期/时间的32位表示。可以使用常数（如1），但前提是保证唯一标识符永不重用，即使邮箱被删除（或重命名）后再用同名创建新邮箱。

4）邮箱名、UIDVALIDITY和UID的组合必须永远指向该服务器上的单一不可变消息。特别是，内部日期、[RFC-2822]大小、信封、正文结构和消息文本（包括RFC822、RFC822.HEADER、RFC822.TEXT以及所有BODY[...]获取项）都不得更改。这不包括消息编号，也不包括由STORE命令设置的属性（如FLAGS）。

2.3.1.2. 消息序列号（Sequence Number）消息属性

相对于邮箱中的消息位置，从1开始到消息总数的相对位置。此位置必须按升序排列的唯一标识符排序。每添加一条新消息，都会分配一个比之前消息多1的消息序列号。

在会话中，消息序列号可以重新分配。例如，当一条消息被永久删除（expunged）时，后续所有消息的序列号会减1，邮箱中的消息总数也会减少。同样，新的消息也可以被分配曾经由其他消息占用的序列号。

除了按相对位置访问消息外，消息序列号还可以用于数学计算。例如，收到未标记的“11 EXISTS”响应之前，曾收到“8 EXISTS”，说明有3条新消息，序列号为9、10和11。又如，在一个有523条消息的邮箱中，消息287的UID为12345，则比它UID更大的消息有236条，比它UID更小的消息有286条。

2.3.2. 标志（Flags）消息属性

一组零个或多个命名的标记（tokens），与消息相关联。通过向标记列表中添加或移除标记来设置或清除标记。IMAP4rev1中有两类标记：系统标记和关键词（keywords）。每个标记可以是永久的，也可以是会话范围内的。

系统标记是本规范预定义的标记名，所有系统标记以“\”开头。某些系统标记（如\Deleted和\Seen）具有特殊语义，详见其他部分。目前定义的系统标记包括：

- \Seen：消息已被阅读
- \Answered：消息已被回复
- \Flagged：消息被“标记”为紧急/特殊关注
- \Deleted：消息已被标记为待删除（等待EXPUNGE）
- \Draft：消息尚未完成撰写（标记为草稿）
- \Recent：消息“最近”到达此邮箱。此会话是首次被通知到此消息的会话；如果会话是读写的，后续会话将不会看到此消息的\Recent标记。客户端不能更改此标记。

如果无法确定此会话是否为首次通知到该消息的会话，则应将该消息视为“recent”。

当多个连接同时选择同一邮箱时，不可预知哪些连接会看到带有\Recent标记的新到达消息，哪些不会。

关键词由服务器实现定义。关键词不以“\”开头。服务器可以允许客户端在邮箱中定义新关键词（详见PERMANENTFLAGS响应码的说明）。

标记可以是永久的，也可以是会话范围内的，具体取决于每个标记。永久标记是指客户端可以永久添加或移除的标记；即，后续会话也能看到这些标记的变化。会话标记的更改仅在该会话中有效。

注意：\Recent系统标记是会话标记的特殊情况。它不能在STORE或APPEND命令中作为参数使用，因此不能被更改。

2.3.3. 内部日期（Internal Date）消息属性

消息在服务器上的内部日期和时间。这不是[RFC-2822]头部中的日期时间，而是反映消息接收时间的日期和时间。在通过[SMTP]传递的消息中，应为最终投递的日期时间（定义见[SMTP]）。在通过IMAP4rev1的COPY命令传递的消息中，应为源消息的内部日期时间。在通过IMAP4rev1的APPEND命令传递的消息中，应为在APPEND命令中指定的日期时间。其他情况由实现定义。

2.3.4. [RFC-2822]大小（Size）消息属性

消息的字节数，以[RFC-2822]格式表示。

2.3.5. 信封结构（Envelope Structure）消息属性

消息的[RFC-2822]头部的解析表示。注意，IMAP的信封结构与SMTP的信封不同。

2.3.6. 正文结构（Body Structure）消息属性

消息的[MIME-IMB]正文结构信息的解析表示。

2.4. 消息正文

除了可以获取完整的[RFC-2822]消息文本外，IMAP4rev1还允许获取部分消息正文。具体包括：消息头、消息体、某个[MIME-IMB]正文部分或正文头。

3. 状态与流程图

一旦客户端与服务器建立连接，IMAP4rev1连接就处于四种状态之一。初始状态由服务器的问候信息标识。大多数命令仅在特定状态下有效。在不适当的状态下尝试执行命令属于协议错误，服务器会以BAD或NO（取决于服务器实现）作为命令完成的响应。

3.1. 未认证状态

在未认证状态下，客户端必须提供认证凭据，才能执行大多数命令。除非连接已预先认证，否则在连接开始时会进入此状态。

3.2.  认证状态

在已认证状态下，客户端已通过身份验证，必须在允许影响消息的命令之前选择一个邮箱进行访问。进入此状态的情况包括：预先认证的连接开始时、提供了可接受的认证凭据后、选择邮箱时发生错误后，或在成功执行CLOSE命令后。

3.3.  已选状态

在已选状态下，已成功选择了一个邮箱进行访问。

3.4.  注销状态

在注销状态下，连接正在被终止。此状态可以由客户端请求（通过LOGOUT命令）触发，也可以由客户端或服务器单方面采取行动引起。

如果客户端请求进入注销状态，服务器必须在关闭连接之前，发送一条未标记的BYE响应和一条标记为OK的响应以确认LOGOUT命令；客户端必须在关闭连接之前，读取到标记为OK的响应。

服务器不得在未发送包含原因的未标记BYE响应的情况下单方面关闭连接。客户端也不应单方面关闭连接，而应发出LOGOUT命令。如果服务器检测到客户端已单方面关闭连接，服务器可以省略未标记的BYE响应，直接关闭连接。

（以下为连接状态流程图的描述）

+----------------------+
| 连接已建立           |
+----------------------+
          ||
          \/
+--------------------------------------+
|          服务器问候                  |
+--------------------------------------+
          || (1)       || (2)        || (3)
          \/           ||            ||
+-----------------+    ||            ||
| 未认证          |    ||            ||
+-----------------+    ||            ||
   || (7)   || (4)       ||            ||
   ||       \/           \/            ||
   ||     +----------------+           ||
   ||     | 已认证        |<=++       ||
   ||     +----------------+  ||       ||
   ||       || (7)   || (5)   || (6)   ||
   ||       ||       \/       ||       ||
   ||       ||    +--------+  ||       ||
   ||       ||    | 已选   |==++       ||
   ||       ||    +--------+           ||
   ||       ||       || (7)            ||
   \/       \/       \/                \/
+--------------------------------------+
|               注销                   |
+--------------------------------------+
          ||
          \/
+--------------------------------------+
| 双方关闭连接                        |
+--------------------------------------+

说明：
(1) 无预认证的连接（问候为OK）
(2) 预认证连接（PREAUTH问候）
(3) 被拒绝的连接（BYE问候）
(4) 成功的LOGIN或AUTHENTICATE命令
(5) 成功的SELECT或EXAMINE命令
(6) CLOSE命令，或SELECT/EXAMINE失败
(7) LOGOUT命令、服务器关闭或连接关闭

---

4.  数据格式

IMAP4rev1使用文本命令和响应。IMAP4rev1中的数据可以采用多种形式：原子（atom）、数字（number）、字符串（string）、括号列表（parenthesized list）或NIL。注意，某一数据项可能具有多种形式；例如，定义为“astring”语法的数据项可以是原子或字符串。

4.1.  原子

由一个或多个非特殊字符组成。

4.2.  数字

由一个或多个数字字符组成，表示一个数值。

4.3.  字符串

字符串有两种形式：字面量（literal）或引号字符串（quoted string）。字面量是字符串的一般形式。引号字符串是另一种避免处理字面量开销的替代方式，但字符使用有限制。

字面量是由零个或多个八位字节（包括CR和LF）组成，前缀用一个大括号（“{”），后跟八位字节数，再是闭合大括号（“}”）和CRLF。在服务器到客户端传输的字面量中，CRLF后紧跟八位字节数据；在客户端到服务器传输的字面量中，客户端必须等待接收命令延续请求（后文会描述）后，才能发送八位字节数据（以及命令的其余部分）。

引号字符串是一系列零个或多个7位字符（不包括CR和LF），两端用双引号（“"”）括起。

空字符串可以用“”（两个双引号之间无字符）表示，也可以用“{0}”加CRLF表示（八位字节数为0的字面量）。

注意：即使八位字节数为0，传输字面量的客户端也必须等待接收命令延续请求。

4.3.1.  8位和二进制字符串

支持通过[MIME-IMB]内容传输编码传输8位文本和二进制邮件。IMAP4rev1实现可以在字面量中传输8位或多字节字符，但应仅在识别了[CHARSET]的情况下这样做。

虽然定义了BINARY体编码，但不允许未编码的二进制字符串。二进制字符串是指包含NUL字符的任何字符串。实现必须在传输前将二进制数据编码成文本形式（如BASE64）。含有大量CTL字符的字符串也可能被视为二进制。

4.4.  括号列表

数据结构用“括号列表”表示，即由空格分隔的一系列数据项，左右由括号包围。括号列表可以包含其他括号列表，使用多层括号表示嵌套。

空列表用“()”表示，即没有成员的括号列表。

4.5.  NIL

特殊形式“NIL”表示某个数据项不存在，通常以字符串或括号列表形式出现，与空字符串“""”或空括号列表“()”不同。

注意：NIL从不用于以原子形式表示的数据项。例如，邮箱名为“NIL”表示名为NIL的邮箱，而非不存在的邮箱名。这是因为邮箱名使用“astring”语法，既可以是原子，也可以是字符串。相反，addr-name为NIL表示不存在的个人名，因为addr-name使用“nstring”语法，NIL或字符串，但绝不为原子。

---

5.  操作注意事项

以下规则旨在确保所有IMAP4rev1实现的互操作性。

5.1.  邮箱命名

邮箱名为7位字符。客户端实现不得尝试创建8位字符的邮箱名，应将LIST或LSUB返回的任何8位字符邮箱名解释为UTF-8。服务器实现应禁止创建8位字符邮箱名，也不应在LIST或LSUB中返回此类邮箱名。关于非ASCII邮箱名的表示方法，详见5.1.3节。

注意：早期版本的协议未定义8位邮箱名。一些站点使用本地8位字符集表示非ASCII邮箱名，但此类用法不互操作，现已正式弃用。

大小写不敏感的邮箱名INBOX是一个特殊名称，代表“该用户在此服务器上的主邮箱”。其他名称的解释由实现决定。

特别地，本规范不对非INBOX邮箱名的大小写敏感性作出规定。有的服务器实现完全区分大小写，有的在新建名称时保持大小写，但其他情况下不敏感，还有的会强制转换为特定大小写。客户端必须与这些实现兼容。如果服务器对非INBOX邮箱名大小写不敏感，则必须按照第5.1.3节的国际命名规则特殊处理。

创建新邮箱名时的注意事项：

1）任何属于原子特殊字符（见正式语法）的字符，都必须用引号字符串或字面量表示。

2）CTL字符和其他非图形字符难以在用户界面中表示，应尽量避免。

3）虽然通配符字符（“%”和“*”）在邮箱名中有效，但由于与通配符解释的冲突，使用此类邮箱名配合LIST和LSUB命令较为困难。

4）通常由服务器实现决定，用于分隔层级的字符应被保留。

5）字符“#”和“&”具有约定俗成的含义，应避免在非特殊用途中使用。

5.1.1.  邮箱层级命名

如果希望导出层级邮箱名，必须使用单一字符从左到右表示层级关系。所有层级使用相同的层级分隔符。

5.1.2.  邮箱命名空间

按照惯例，任何以“#”开头的邮箱名的第一个层级元素标识该邮箱名的“命名空间”。这有助于区分不同类型的邮箱存储，每个存储有自己的命名空间。

例如，提供USENET新闻组访问的实现可以使用“#news”命名空间，将USENET新闻组“comp.mail.misc”表示为“#news.comp.mail.misc”，而“comp.mail.misc”也可以指不同的对象（如用户的私人邮箱）。

5.1.3.  国际邮箱命名

IMAP4rev1中，国际邮箱名采用经过修改的UTF-7编码（详见[UTF-7]）。此修改UTF-7也可在早期协议版本的服务器中使用。

在修改UTF-7中，除“&”外的可打印US-ASCII字符（即0x20-0x25和0x27-0x7e）代表其自身。“&”字符（0x26）用两个字节序列“&-”表示。

其他字符（0x00-0x1f和0x7f-0xff）用修改后的BASE64编码表示，区别在于用“,””替代“/”。修改后的BASE64不得用于表示任何可以自我表示的US-ASCII字符。

“&”用来切换到修改的BASE64编码，“-”用来切换回US-ASCII。没有隐式的从BASE64切换到US-ASCII，空转（如“-&”在BASE64中，或“&-”在US-ASCII中）是不允许的。所有名称起始和结束都必须是US-ASCII字符，即以非ASCII字符结尾的名称必须以“-”结束。

这些修改旨在解决UTF-7的以下问题：

1）UTF-7用“+”字符进行切换，这与邮箱名中“+”的常用用途（尤其是USENET新闻组名）冲突。

2）UTF-7的编码使用BASE64，含有“/”字符，容易与层级分隔符冲突。

3）UTF-7禁止未编码使用“\”，而“\”常用作层级分隔符。

4）UTF-7禁止未编码使用“~”，但某些服务器用“~”表示主目录。

5）UTF-7允许多种替代表达同一字符串，尤其是可打印US-ASCII字符的编码。

虽然修改UTF-7是一种约定，但它对包含“&”字符的邮箱名的服务器处理提出了特定要求。服务器必须保持修改的BASE64部分的原始形式，区分大小写，即使名称本身不敏感。

服务器应验证包含“&”字符的邮箱名（作为CREATE参数）是否符合修改UTF-7语法，没有多余的切换，没有对可打印US-ASCII字符的编码，避免使用不必要的BASE64编码。

导出不遵循修改UTF-7的服务器必须将包含非ASCII字符或“&”的邮箱名转换为修改UTF-7。

例如，以下是一个混合英文、中文和日文的邮箱名：
~peter/mail/&U,BTFw-/&ZeVnLIqe-

例如，字符串“&Jjo！”不是有效的邮箱名称，因为在“！”之前没有进行US-ASCII字符集的转换。正确的形式应为“&Jjo-！”。“&U,BTFw-&ZeVnLIqe-”这个字符串不被允许，因为它包含多余的字符集切换。正确的形式应为“&U,BTF2XlZyyKng-”。

5.2. 邮箱大小和消息状态更新

在任何时候，服务器都可以主动向客户端发送未请求的数据。有时，这种行为是必须的。例如，除了服务器之外的其他代理可以向邮箱添加消息（如新消息投递）、更改邮箱中消息的标志（如多个代理同时访问同一邮箱）或甚至删除邮箱中的消息。在处理命令的过程中，如果观察到邮箱大小发生变化，服务器必须自动发送邮箱大小的更新。服务器还应自动发送消息标志的更新，而无需客户端明确请求。

关于服务器通知客户端删除消息的特殊规则，以防止同步错误；详细信息请参见EXPUNGE响应的描述。特别地，不允许发送会减少邮箱中消息数量的EXISTS响应；只有EXPUNGE响应可以实现这一点。

无论客户端如何决定记忆服务器数据，客户端实现必须记录邮箱大小的更新。它不得假设在首次选择邮箱后，任何后续命令都会返回邮箱的大小。

5.3. 无进行中的命令时的响应

在没有命令进行时，服务器实现可以发送未标记的响应（除了EXPUNGE）。发送此类响应的服务器必须考虑流控问题。具体来说，它们必须要么（1）确认数据的大小不超过底层传输的可用窗口，要么（2）使用非阻塞写入。

Crispin  规范追踪  [第21页]

RFC 3501  IMAPv4  2003年3月

5.4. 自动注销定时器

如果服务器设置了非活动自动注销定时器，该定时器的持续时间必须至少为30分钟。在此期间内，只要收到任何来自客户端的命令，就应重置自动注销定时器。

5.5. 多个命令同时进行

客户端可以在不等待前一个命令完成的情况下，发送另一个命令，但须遵守歧义规则（见下文）和底层数据流的流控限制。同样，服务器也可以在处理当前命令的同时开始处理另一个命令，但须遵守歧义规则。然而，任何命令的续发请求和续发内容必须在发起后续命令之前协商完成。

除非会引发歧义（即影响其他命令结果），否则不得在等待的情况下连续发送多个命令。如果服务器检测到可能的歧义，它必须按客户端提供的顺序完成执行命令。

最明显的歧义例子是一个命令会影响另一个命令的结果，例如，获取消息标志（FETCH）和存储（STORE）同一消息的标志。

不那么明显的歧义发生在允许未标记的EXPUNGE响应的命令（除FETCH、STORE和SEARCH之外），因为未标记的EXPUNGE响应可能会使后续命令中的序列号失效。对于FETCH、STORE和SEARCH命令来说，这不是问题，因为在这些命令执行期间，服务器禁止发送EXPUNGE响应。因此，如果客户端发出除FETCH、STORE或SEARCH之外的任何命令，必须等待该命令完成后再发带有消息序列号的后续命令。

注意：UID FETCH、UID STORE和UID SEARCH与FETCH、STORE和SEARCH不同。如果客户端发出UID命令，必须等待该命令完成后，才能发带有消息序列号的命令。

例如，以下不等待的命令序列是无效的：

- FETCH + NOOP + STORE
- STORE + COPY + FETCH
- COPY + COPY
- CHECK + FETCH

以下是有效的不等待命令序列示例：

- FETCH + STORE + SEARCH + CHECK
- STORE + COPY + EXPUNGE

UID SEARCH + UID SEARCH是否有效，取决于第二个UID SEARCH是否包含消息序列号。

6. 客户端命令

本节描述IMAP4rev1中的客户端命令。命令按允许的状态分类。允许在多种状态下的命令列在“最低允许状态”中（例如，认证状态和已选择状态下有效的命令都列在已认证状态命令中）。

命令参数（在下面的命令描述中由“Arguments:”标识）是按功能描述的，而非按语法。命令参数的具体语法在“正式语法”部分详细说明。

某些命令会引发特定的服务器响应；这些在命令描述中由“Responses:”标识。有关这些响应的详细信息，请参见“响应”部分的描述，以及“正式语法”部分的具体语法。任何命令都可能导致服务器数据的传输。因此，不特别要求服务器返回数据的命令，说明为“没有特定响应”而非“无”。

命令描述中的“Result:”指的是对命令可能返回的标记状态响应，以及对这些状态响应的任何特殊解释。

只有成功执行且被记录为会改变状态的命令，才会改变连接的状态。被拒绝的命令（BAD响应）不会改变连接或已选择邮箱的状态。失败的命令（NO响应）通常也不会改变连接或已选择邮箱的状态，除非是SELECT和EXAMINE命令。

6.1. 任意状态下的客户端命令

以下命令在任何状态下都有效：CAPABILITY、NOOP和LOGOUT。

6.1.1. CAPABILITY命令

参数：无

响应：必须的未标记响应：CAPABILITY

结果：OK——能力列出完成；BAD——命令未知或参数无效

CAPABILITY命令请求列出服务器支持的能力。服务器必须在响应“OK”之前，发送一个包含“IMAP4rev1”在内的单一未标记CAPABILITY响应，列出所有支持的能力。

以“AUTH=”开头的能力名表示服务器支持该特定的认证机制。所有此类名称都属于本规范的一部分。例如，实验性“blurdybloop”认证器的授权能力应为“AUTH=XBLURDYBLOOP”，而不是“XAUTH=BLURDYBLOOP”或“XAUTH=XBLURDYBLOOP”。

其他能力名指扩展、修订或补充本规范的内容。有关更多信息，请参见CAPABILITY响应的文档。除本规范定义的基本IMAP4rev1能力集外，不启用其他能力，除非客户端明确请求。

客户端和服务器实现必须支持STARTTLS、LOGINDISABLED和AUTH=PLAIN（详见[IMAP-TLS]）能力。安全注意事项部分有重要信息。

有关站点或特定实现能力的形式，请参见“客户端命令——实验/扩展”部分。

示例：
C: abcd CAPABILITY
S: * CAPABILITY IMAP4rev1 STARTTLS AUTH=GSSAPI
S: LOGINDISABLED
S: abcd OK CAPABILITY completed
C: efgh STARTTLS
S: efgh OK STARTLS completed
<TLS协商，后续命令在[TLS]层进行>
C: ijkl CAPABILITY
S: * CAPABILITY IMAP4rev1 AUTH=GSSAPI AUTH=PLAIN
S: ijkl OK CAPABILITY completed

6.1.2. NOOP命令

参数：无

响应：无特定响应（但见下文）

结果：OK——成功完成；BAD——命令未知或参数无效

NOOP命令总是成功。它不执行任何操作。

由于任何命令都可能以未标记数据返回状态更新，NOOP命令可以用作在非活动期间定期轮询新消息或消息状态更新的方式（这是首选方法）。它还可以用来重置服务器上的非活动自动注销定时器。

示例：
C: a002 NOOP
S: a002 OK NOOP completed
. . .
C: a047 NOOP
S: * 22 EXPUNGE
S: * 23 EXISTS
S: * 3 RECENT
S: * 14 FETCH (FLAGS (\Seen \Deleted))
S: a047 OK NOOP completed

6.1.3. LOGOUT命令

参数：无

响应：必须的未标记响应：BYE

结果：OK——注销完成；BAD——命令未知或参数无效

LOGOUT命令通知服务器，客户端已完成连接。服务器必须在（标记的）OK响应之前，发送未标记的BYE响应，然后关闭网络连接。

示例：
C: A023 LOGOUT
S: * BYE IMAP4rev1 Server logging out
S: A023 OK LOGOUT completed
（服务器和客户端随后关闭连接）

6.2. 未认证状态下的客户端命令

在未认证状态下，AUTHENTICATE或LOGIN命令用于建立认证并进入已认证状态。AUTHENTICATE命令提供多种认证技术、隐私保护和完整性检查的通用机制；而LOGIN命令使用传统的用户名和明文密码对，没有建立隐私保护或完整性检查的手段。

STARTTLS命令是建立会话隐私保护和完整性检查的另一种方式，但不进行认证，也不进入已认证状态。

服务器实现可以允许在未进行认证的情况下访问某些邮箱。这可以通过[ANONYMOUS]中描述的匿名[SASL]认证器实现。较早的做法是使用用户名“anonymous”的LOGIN命令；在这种情况下，虽然需要密码，但服务器可以接受任何密码。对匿名用户的限制依赖于实现。

一旦认证（包括匿名认证）完成，就不能再返回未认证状态。

除了通用命令（CAPABILITY、NOOP和LOGOUT）外，未认证状态下还可以使用以下命令：STARTTLS、AUTHENTICATE和LOGIN。关于这些命令的重要信息，请参见安全注意事项部分。

6.2.1. STARTTLS命令

参数：无

响应：无特定响应

结果：OK——开始TLS协商完成；BAD——命令未知或参数无效

在服务器发出带有“OK”标记的响应后，立即开始[TLS]协商。客户端发出STARTTLS命令后，必须等待服务器响应并完成[TLS]协商后，才能发出其他命令。

即使在TLS协商期间提供了客户端凭据，服务器仍保持在未认证状态。这不妨碍如EXTERNAL（定义在[SASL]中）等认证机制，利用TLS协商确定的客户端身份。

启动TLS后，客户端必须丢弃关于服务器能力的缓存信息，并应重新发出CAPABILITY命令，以防止中间人攻击篡改能力列表。服务器在启动TLS后，可能会广告不同的能力。

示例：
C: a001 CAPABILITY
S: * CAPABILITY IMAP4rev1 STARTTLS LOGINDISABLED
S: a001 OK CAPABILITY completed
C: a002 STARTTLS
S: a002 OK Begin TLS negotiation now
<TLS协商，后续命令在[TLS]层进行>
C: a003 CAPABILITY
S: * CAPABILITY IMAP4rev1 AUTH=PLAIN
S: a003 OK CAPABILITY completed
C: a004 LOGIN joe password
S: a004 OK LOGIN completed

6.2.2. AUTHENTICATE命令

参数：认证机制名称

响应：可以请求继续数据

结果：OK——认证完成，进入已认证状态；NO——认证失败（不支持的机制或凭据被拒绝）；BAD——命令未知或参数无效，认证交换被取消

AUTHENTICATE命令指示服务器进行[SASL]认证机制的认证。如果服务器支持请求的机制，它会进行认证协议交换以验证和识别客户端。它还可以协商一个可选的安全层，用于后续协议交互。如果不支持请求的机制，服务器应通过发送带有标签的NO响应拒绝该命令。

AUTHENTICATE命令不支持[SASL]中的可选“初始响应”功能。[SASL]第5.1节规定了如何处理使用初始响应的认证机制。

该协议配置文件中指定的服务名称为“imap”。

认证协议交换由一系列特定于认证机制的服务器挑战和客户端响应组成。服务器挑战由带有“+”标记的命令续传请求响应组成，后跟BASE64编码的字符串。客户端响应由一行BASE64编码的字符串组成。如果客户端希望取消认证交换，可以发出一行仅包含“*”的响应。如果服务器收到此类响应，必须通过发送带有标签的BAD响应来拒绝AUTHENTICATE命令。

如果通过[SASL]认证交换协商出安全层，则在客户端完成认证交换的CRLF之后立即生效，对于服务器则在带标签的OK响应的CRLF之后生效。

虽然客户端和服务器实现必须实现AUTHENTICATE命令本身，但不要求实现除[IMAP-TLS]中描述的PLAIN机制之外的任何认证机制。此外，认证机制也不要求支持任何安全层。

注意：除非协商了STARTTLS命令或提供了其他保护会话免受密码窃听的机制，否则服务器实现必须支持一种配置，即不允许任何明文密码机制。服务器不应使用允许明文密码机制而没有此类保护机制的配置。客户端和服务器实现应实现不使用明文密码的其他[SASL]机制，例如[SASL]中描述的GSSAPI机制和/或[DIGEST-MD5]机制。

服务器和客户端可以支持多种认证机制。服务器应在响应CAPABILITY命令时列出其支持的认证机制，以便客户端知道可以使用哪些机制。

服务器可以在成功的AUTHENTICATE命令的带标签的OK响应中包含CAPABILITY响应码，以自动发送能力信息。如果客户端识别这些自动能力，则无需单独发送CAPABILITY命令。只有在未协商安全层的情况下，才应这样做，因为作为AUTHENTICATE命令一部分的带标签的OK响应未受到加密/完整性检查的保护。[SASL]要求在这种情况下客户端重新发出CAPABILITY命令。

如果AUTHENTICATE命令以NO响应失败，客户端可以尝试使用另一种认证机制，发出另一个AUTHENTICATE命令，也可以尝试使用LOGIN命令进行认证（详见第6.2.3节）。换句话说，客户端可以按偏好顺序请求不同的认证类型，最后使用LOGIN作为备选方案。

在认证交换过程中，客户端传递的授权身份由服务器解释为客户端请求权限的用户名。

示例：  
S: * OK IMAP4rev1 Server  
C: A001 AUTHENTICATE GSSAPI  
S: +  
C: YIIB+wYJKoZIhvcSAQICAQBuggHqMIIB5qADAgEFoQMCAQ6iBw  
  MFACAAAACjggEmYYIBIjCCAR6gAwIBBaESGxB1Lndhc2hpbmd0  
  b24uZWR1oi0wK6ADAgEDoSQwIhsEaW1hcBsac2hpdmFtcy5jYW  
  Mud2FzaGluZ3Rvbi5lZHWjgdMwgdCgAwIBAaEDAgEDooHDBIHA  
  cS1GSa5b+fXnPZNmXB9SjL8Ollj2SKyb+3S0iXMljen/jNkpJX  
  AleKTz6BQPzj8duz8EtoOuNfKgweViyn/9B9bccy1uuAE2HI0y  
  C/PHXNNU9ZrBziJ8Lm0tTNc98kUpjXnHZhsMcz5Mx2GR6dGknb  
  I0iaGcRerMUsWOuBmKKKRmVMMdR9T3EZdpqsBd7jZCNMWotjhi  
  vd5zovQlFqQ2Wjc2+y46vKP/iXxWIuQJuDiisyXF0Y8+5GTpAL  
  pHDc1/pIGmMIGjoAMCAQGigZsEgZg2on5mSuxoDHEA1w9bcW9n  
  FdFxDKpdrQhVGVRDIzcCMCTzvUboqb5KjY1NJKJsfjRQiBYBdE  
  NKfzK+g5DlV8nrw81uOcP8NOQCLR5XkoMHC0Dr/80ziQzbNqhx  
  O6652Npft0LQwJvenwDI13YxpwOdMXzkWZN/XrEqOWp6GCgXTB  
  vCyLWLlWnbaUkZdEYbKHBPjd8t/1x5Yg==  
S: + YGgGCSqGSIb3EgECAgIAb1kwV6ADAgEFoQMCAQ+iSzBJoAMC  
  AQGiQgRAtHTEuOP2BXb9sBYFR4SJlDZxmg39IxmRBOhXRKdDA0  
  uHTCOT9Bq3OsUTXUlk0CsFLoa8j+gvGDlgHuqzWHPSQg==  
C:  
S: + YDMGCSqGSIb3EgECAgIBAAD/////6jcyG4GE3KkTzBeBiVHe  
  ceP2CWY0SR0fAQAgAAQEBAQ=  
C: YDMGCSqGSIb3EgECAgIBAAD/////3LQBHXTpFfZgrejpLlLImP  
  wkhbfa2QteAQAgAG1yYwE=  
S: A001 OK GSSAPI认证成功

注意：服务器挑战和客户端响应中的换行仅为编辑清晰起见，实际认证中不存在。

6.2.3.  LOGIN命令

参数：用户名、密码

响应：此命令没有特定响应

结果：  
OK - 登录完成，进入已认证状态  
NO - 登录失败：用户名或密码被拒绝  
BAD - 命令未知或参数无效

LOGIN命令用于向服务器标识客户端，并携带明文密码进行用户认证。

服务器可以在成功的LOGIN命令的带标签的OK响应中包含CAPABILITY响应码，以自动发送能力信息。如果客户端识别这些自动能力，则无需单独发送CAPABILITY命令。

示例：  
C: a001 LOGIN SMITH SESAME  
S: a001 OK LOGIN completed

注意：在不安全的网络（如互联网）上使用LOGIN命令存在安全风险，因为任何监控网络流量的人都可以获取明文密码。除非作为最后手段，否则不应使用LOGIN命令，建议客户端实现应提供禁用自动使用LOGIN命令的机制。

除非协商了STARTTLS命令或提供了其他保护会话免受密码窃听的机制，否则服务器必须实现一种配置，即广告LOGINDISABLED能力且不允许使用LOGIN命令。服务器不应在没有此类保护机制的情况下允许使用LOGIN命令。客户端在广告了LOGINDISABLED能力后，不应发送LOGIN命令。

6.3. 客户端命令——已认证状态

在已认证状态下，允许操作邮箱作为原子实体的命令。这些命令中，SELECT和EXAMINE命令会选择邮箱以进行访问，并进入已选择状态。

除通用命令（CAPABILITY、NOOP和LOGOUT）外，以下命令在已认证状态下有效：SELECT、EXAMINE、CREATE、DELETE、RENAME、SUBSCRIBE、UNSUBSCRIBE、LIST、LSUB、STATUS和APPEND。

6.3.1. SELECT命令

参数：邮箱名

响应：  
必需的未标记响应：FLAGS、EXISTS、RECENT  
必需的OK未标记响应：UNSEEN、PERMANENTFLAGS、UIDNEXT、UIDVALIDITY

结果：  
OK - 选择完成，进入已选择状态  
NO - 选择失败，仍在已认证状态：没有此邮箱，无法访问邮箱  
BAD - 命令未知或参数无效

SELECT命令选择一个邮箱，以便可以访问其中的消息。在返回OK之前，服务器必须向客户端发送以下未标记数据。注意，早期版本的协议只要求FLAGS、EXISTS和RECENT未标记数据；因此，客户端实现应对缺失的数据采用默认行为，具体见各项说明。

FLAGS：邮箱中定义的标志。详见FLAGS响应的描述。

<n> EXISTS：邮箱中的消息数。详见EXISTS响应的描述。

<n> RECENT：设置了\Recent标志的消息数。详见RECENT响应的描述。

OK [UNSEEN <n>]：邮箱中第一条未见消息的序列号。如果缺少此项，客户端无法假设第一条未见消息的位置，需发出SEARCH命令查找。

OK [PERMANENTFLAGS (<标志列表>)]：客户端可以永久更改的消息标志列表。如果缺少此项，客户端应假设所有标志都可以永久更改。

OK [UIDNEXT <n>]：下一个唯一标识符值。详见第2.3.1.1节。若缺少此项，客户端无法假设下一唯一标识符的值。

OK [UIDVALIDITY <n>]：唯一标识符有效性值。详见第2.3.1.1节。若缺少此项，服务器不支持唯一标识符。

每次连接中只能选择一个邮箱；同时访问多个邮箱需要多个连接。SELECT命令会自动取消任何已选择的邮箱，然后尝试新选择。因此，如果已选择邮箱后尝试失败的SELECT命令，则没有任何邮箱被选中。

如果客户端被允许修改邮箱，服务器应在带标签的OK响应前加上“[READ-WRITE]”响应码。

如果客户端不允许修改邮箱但允许读取访问，则邮箱以只读方式选择，服务器必须在带标签的OK响应前加上“[READ-ONLY]”响应码。通过SELECT的只读访问与EXAMINE命令不同，某些只读邮箱可能允许在每个用户（而非全局）基础上更改永久状态。比如，服务器上的.netnews消息在其.newsrc文件中标记的“只读”永久状态就是此类示例。

示例：  
C: A142 SELECT INBOX  
S: * 172 EXISTS  
S: * 1 RECENT  
S: * OK [UNSEEN 12] 第12条消息为第一条未见消息  
S: * OK [UIDVALIDITY 3857529045] UID有效  
S: * OK [UIDNEXT 4392] 预估下一UID  
S: * FLAGS (\Answered \Flagged \Deleted \Seen \Draft)  
S: * OK [PERMANENTFLAGS (\Deleted \Seen \*)] 限制  
S: A142 OK [READ-WRITE] 选择完成

6.3.2. EXAMINE命令

参数：邮箱名

响应：  
必需的未标记响应：FLAGS、EXISTS、RECENT  
必需的OK未标记响应：UNSEEN、PERMANENTFLAGS、UIDNEXT、UIDVALIDITY

结果：  
OK - 检查完成，进入已选择状态  
NO - 检查失败，仍在已认证状态：没有此邮箱，无法访问邮箱  
BAD - 命令未知或参数无效

EXAMINE命令与SELECT相同，返回相同的输出，但所选邮箱被标识为只读。不得更改邮箱的永久状态，包括每用户状态，特别是EXAMINE必须不导致消息失去\Recent标志。

对EXAMINE命令的带标签的OK响应的文本必须以“[READ-ONLY]”响应码开头。

示例：  
C: A932 EXAMINE blurdybloop  
S: * 17 EXISTS  
S: * 2 RECENT  
S: * OK [UNSEEN 8] 第8条消息为第一条未见消息  
S: * OK [UIDVALIDITY 3857529045] UID有效  
S: * OK [UIDNEXT 4392] 预估下一UID  
S: * FLAGS (\Answered \Flagged \Deleted \Seen \Draft)  
S: * OK [PERMANENTFLAGS ()] 不允许永久标志  
S: A932 OK [READ-ONLY] 检查完成

6.3.3. CREATE命令

参数：邮箱名

响应：无特定响应

结果：  
OK - 创建完成  
NO - 创建失败：无法创建该名称的邮箱  
BAD - 命令未知或参数无效

CREATE命令创建一个具有指定名称的邮箱。只有成功创建新邮箱时才返回OK响应。尝试创建INBOX或已存在的邮箱名是错误的。任何创建错误都会返回带标签的NO响应。

如果邮箱名以服务器的层级分隔符字符（由LIST命令返回）结尾，则表示客户端打算在该层级下创建邮箱名。未要求此声明的服务器实现应忽略它。无论如何，创建的名称不带层级分隔符。

如果服务器的层级分隔符字符出现在名称的其他位置，服务器应创建任何必要的上级层级名称，以确保CREATE命令成功。例如，在层级分隔符为“/”的服务器上，尝试创建“foo/bar/zap”应自动创建“foo/”和“foo/bar/”，如果它们不存在。

如果新邮箱的名称与已删除的邮箱相同，则其唯一标识符必须大于之前邮箱的任何唯一标识符，除非新实例具有不同的唯一标识符有效性值。详见UID命令的描述。

示例：  
C: A003 CREATE owatagusiam/  
S: A003 OK CREATE完成  
C: A004 CREATE owatagusiam/blurdybloop  
S: A004 OK CREATE完成

注意：此示例的解释取决于LIST命令是否将“/”作为层级分隔符返回。如果“/”是层级分隔符，则会创建一个名为“owatagusiam”的新层级，并在其中包含一个成员“blurdybloop”。否则，将在同一层级下创建两个邮箱。

6.3.4. 删除（DELETE）命令

参数：邮箱名称

响应：此命令没有特定的响应

结果：
- OK - 删除完成
- NO - 删除失败：无法删除该名称的邮箱
- BAD - 命令未知或参数无效

DELETE命令会永久删除具有指定名称的邮箱。只有在邮箱被成功删除后，才会返回带标签的OK响应。尝试删除INBOX或不存在的邮箱名称是错误的。

DELETE命令不得删除下级层级名称。例如，如果“foo”有一个下级“foo.bar”（假设“.”是层级分隔符），则删除“foo”时不得删除“foo.bar”。尝试删除具有下级层级名称且具有\Noselect邮箱属性的名称也是错误的（有关LIST响应的详细说明请参见相关部分）。

允许删除具有下级层级名称且没有\Noselect邮箱属性的名称。在这种情况下，该邮箱中的所有消息将被删除，并且该名称将获得\Noselect邮箱属性。

必须保留已删除邮箱的最高使用唯一标识符（UID），以确保用相同名称创建的新邮箱不会重用旧邮箱的标识符，除非新邮箱具有不同的唯一标识符有效性值。有关详细信息，请参见UID命令的说明。

示例：
```
C: A682 LIST "" *
S: * LIST () "/" blurdybloop
S: * LIST (\Noselect) "/" foo
S: * LIST () "/" foo/bar
S: A682 OK LIST completed
C: A683 DELETE blurdybloop
S: A683 OK DELETE completed
C: A684 DELETE foo
S: A684 NO 名称“foo”具有下级层级名称
C: A685 DELETE foo/bar
S: A685 OK DELETE 完成
C: A686 LIST "" *
S: * LIST (\Noselect) "/" foo
S: A686 OK LIST completed
C: A687 DELETE foo
S: A687 OK DELETE 完成
```

6.3.5. 重命名（RENAME）命令

参数：现有邮箱名称，新邮箱名称

响应：此命令没有特定的响应

结果：
- OK - 重命名完成
- NO - 重命名失败：无法将邮箱重命名为该名称，或无法将其重命名为该名称
- BAD - 命令未知或参数无效

RENAME命令用于更改邮箱的名称。只有在成功重命名后，才会返回带标签的OK响应。尝试从不存在的邮箱名称重命名，或重命名到已存在的邮箱名称，都是错误的。任何重命名错误都会返回带标签的NO响应。

如果名称具有下级层级名称，则这些下级名称也必须被重命名。例如，将“foo”重命名为“zap”时，“foo/bar”也会被重命名为“zap/bar”（假设“/”是层级分隔符）。

如果服务器的层级分隔符字符出现在名称中，服务器应创建完成重命名所需的任何上级层级名称。例如，在以“/”为层级分隔符的服务器上，将“foo/bar/zap”重命名为“baz/rag/zowie”时，应创建“baz/”和“baz/rag/”（如果它们不存在的话）。

应保留旧邮箱名称的最高使用唯一标识符（UID），以避免用相同名称创建的新邮箱重用旧邮箱的标识符，除非新邮箱具有不同的唯一标识符有效性值。详细信息请参见UID命令的说明。

重命名INBOX是允许的，并具有特殊行为。它会将INBOX中的所有消息移动到具有新名称的邮箱中，同时清空INBOX。如果服务器支持INBOX的下级层级名称，则这些名称不会受到重命名的影响。

示例：
```
C: A682 LIST "" *
S: * LIST () "/" blurdybloop
S: * LIST (\Noselect) "/" foo
S: * LIST () "/" foo/bar
S: A682 OK LIST completed
C: A683 RENAME blurdybloop sarasoop
S: A683 OK RENAME completed
C: A684 RENAME foo zowie
S: A684 OK RENAME Completed
C: A685 LIST "" *
S: * LIST () "/" sarasoop
S: * LIST (\Noselect) "/" zowie
S: * LIST () "/" zowie/bar
S: A685 OK LIST completed

C: Z432 LIST "" *
S: * LIST () "." INBOX
S: * LIST () "." INBOX.bar
S: Z432 OK LIST completed
C: Z433 RENAME INBOX old-mail
S: Z433 OK RENAME completed
C: Z434 LIST "" *
S: * LIST () "." INBOX
S: * LIST () "." INBOX.bar
S: * LIST () "." old-mail
S: Z434 OK LIST completed
```

6.3.6. 订阅（SUBSCRIBE）命令

参数：邮箱

响应：此命令没有特定的响应

结果：
- OK - 订阅完成
- NO - 订阅失败：无法订阅该名称
- BAD - 命令未知或参数无效

SUBSCRIBE命令将指定的邮箱名称添加到服务器的“活动”或“已订阅”邮箱集（由LSUB命令返回）。只有在订阅成功时，才会返回带标签的OK响应。

服务器可以验证SUBSCRIBE的邮箱参数以确认其存在，但不得单方面从订阅列表中移除已不存在的邮箱名称。

注意：此要求的原因在于，服务器可以选择在邮箱内容过期后，例行删除某个已知名称的邮箱（例如“system-alerts”），以便在需要时重新创建。

示例：
```
C: A002 SUBSCRIBE #news.comp.mail.mime
S: A002 OK SUBSCRIBE completed
```

6.3.7. 取消订阅（UNSUBSCRIBE）命令

参数：邮箱名称

响应：此命令没有特定的响应

结果：
- OK - 取消订阅完成
- NO - 取消订阅失败：无法取消订阅该名称
- BAD - 命令未知或参数无效

UNSUBSCRIBE命令将指定的邮箱名称从服务器的“活动”或“已订阅”邮箱集（由LSUB命令返回）中移除。只有在取消订阅成功时，才会返回带标签的OK响应。

示例：
```
C: A002 UNSUBSCRIBE #news.comp.mail.mime
S: A002 OK UNSUBSCRIBE completed
```

6.3.8. 列出（LIST）命令

参数：参考名称
邮箱名称（可能包含通配符）

响应：未加标签的LIST响应

结果：
- OK - 列表完成
- NO - 列表失败：无法列出该参考或名称
- BAD - 命令未知或参数无效

LIST命令返回客户端所有名称的子集。会返回零个或多个未加标签的LIST响应，内容包括名称属性、层级分隔符和名称；详细说明请参见LIST响应的描述。

LIST命令应快速返回数据，不应延误。例如，不应花费过多时间计算“已标记”或“未标记”状态或执行其他处理；如果每个名称需要1秒处理时间，则1200个名称的列表将耗时20分钟！

空字符串（""）作为参考名称参数，表示邮箱名称按照SELECT的方式解释。返回的邮箱名称必须与提供的名称模式匹配。非空的参考名称参数是邮箱或邮箱层级的名称，指示邮箱名称的解释上下文。

空字符串（""）作为邮箱名称参数，是一种特殊请求，用于返回层级分隔符和参考中给定名称的根名称。返回的根名称可以是空字符串（如果参考不是根或为空）。无论如何，都会返回一个层级分隔符（或NIL，表示没有层级结构）。这允许客户端在没有实际邮箱存在的情况下，获取层级分隔符（或确认邮箱名称是扁平的）。

参考名称和邮箱名称参数会被解释为一种规范形式，表示明确的从左到右的层级结构。返回的邮箱名称也将采用这种解释形式。

注意：参考参数的解释由实现定义，取决于服务器是否具有“当前工作目录”和“跳出字符”的概念，这些字符会覆盖当前工作目录。

例如，在导出UNIX或NT文件系统的服务器上，参考参数包含当前工作目录，邮箱名称则在当前目录中解释。

如果服务器没有跳出字符的概念，规范形式通常是将参考名称与邮箱名称连接。例如，参考“foo/bar”和邮箱“rag/baz”可能被解释为“foo/bar/rag/baz”、“foo/barrag/baz”或“foo/rag/baz”。客户端不应在用户明确请求外使用此类参考。

字符“*”是通配符，匹配当前位置的零个或多个字符。字符“%”类似于“*”，但不匹配层级分隔符。如果“%”是邮箱名称参数的最后一个字符，则还会返回匹配的层级级别。如果这些层级不是可选的邮箱，则会带有\Noselect属性（详见LIST响应描述）。

【完】

服务器实现允许在某些情况下“隐藏”其他可访问的邮箱，避免某些字符或名称与通配符匹配。例如，一个基于 UNIX 的服务器可能限制“*”的解释，使得以“/”开头的字符不匹配。

如果该服务器支持此用户的INBOX，并且大写字符串“INBOX”与上述描述的引用和邮箱名称参数（带通配符）匹配，则LIST命令的输出中会包含特殊名称INBOX。省略INBOX的条件是SELECT INBOX会返回失败；这与用户的实际INBOX是否位于此服务器或其他服务器无关。

示例：
```
客户端：A101 LIST "" ""
服务器：* LIST (\Noselect) "/" ""
服务器：A101 OK LIST 完成
客户端：A102 LIST #news.comp.mail.misc ""
服务器：* LIST (\Noselect) "." #news.
服务器：A102 OK LIST 完成
客户端：A103 LIST /usr/staff/jones ""
服务器：* LIST (\Noselect) "/" /
服务器：A103 OK LIST 完成
客户端：A202 LIST ~/Mail/ %
服务器：* LIST (\Noselect) "/" ~/Mail/foo
服务器：* LIST () "/" ~/Mail/meetings
服务器：A202 OK LIST 完成
```

6.3.9. LSUB 命令

参数：引用名称，邮箱名称（可带通配符）

响应：未标记的响应：LSUB

结果：
- OK - 订阅列表已完成
- NO - 订阅失败：无法列出该引用或名称
- BAD - 命令未知或参数无效

LSUB命令返回用户声明为“活跃”或“已订阅”的邮箱名称子集。会返回零个或多个未标记的LSUB响应。参数格式与LIST相同。

返回的未标记LSUB响应可能包含不同的邮箱标志，若发生这种情况，则LIST的未标记响应中的标志被视为更具权威。

使用带“%”通配符的LSUB时会出现特殊情况。例如，订阅了“foo/bar”（层级分隔符为“/”）但未订阅“foo”。此时，LSUB返回的应是“foo”，而非“foo/bar”，且必须标记为\Noselect。

服务器不得单方面从订阅列表中移除已存在的邮箱名，即使该邮箱名不再存在。

示例：
```
客户端：A002 LSUB "#news." "comp.mail.*"
服务器：* LSUB () "." #news.comp.mail.mime
服务器：* LSUB () "." #news.comp.mail.misc
服务器：A002 OK LSUB 完成
客户端：A003 LSUB "#news." "comp.%"
服务器：* LSUB (\NoSelect) "." #news.comp.mail
服务器：A003 OK LSUB 完成
```

6.3.10. STATUS 命令

参数：邮箱名，状态数据项名称

响应：未标记的响应：STATUS

结果：
- OK - 状态已完成
- NO - 状态失败：无该名称的状态信息
- BAD - 命令未知或参数无效

STATUS命令请求指定邮箱的状态信息。它不会改变当前选中的邮箱，也不会影响查询邮箱中的消息状态（尤其是不会使消息的\Recent标志丢失）。

STATUS提供了无需打开第二个IMAP4rev1连接、无需执行EXAMINE命令即可查询邮箱状态的替代方案。

与LIST不同，STATUS的响应速度不一定快，在某些情况下可能较慢。在某些实现中，服务器可能需要以只读方式内部打开邮箱以获取某些状态信息。此外，STATUS不接受通配符。

注意：STATUS旨在访问除当前已选邮箱之外的其他邮箱的状态。由于STATUS可能会导致邮箱内部打开，而在已选邮箱上可以通过其他方式获取相同信息，因此不应在当前已选邮箱上使用STATUS。

此外，STATUS绝不应作为“检查新消息”的操作（详见第7节、第7.3.1节和第7.3.2节，了解正确的检查新消息的方法）。

由于STATUS的响应可能较慢，客户端不应期望连续发出多个STATUS命令而获得良好的性能。

可请求的状态数据项包括：
- MESSAGES：邮箱中的消息数
- RECENT：带\Recent标志的消息数
- UIDNEXT：邮箱的下一个唯一标识符值（详见第2.3.1.1节）
- UIDVALIDITY：邮箱的唯一标识符有效性值（详见第2.3.1.1节）
- UNSEEN：未标记为\Seen的消息数

示例：
```
客户端：A042 STATUS blurdybloop (UIDNEXT MESSAGES)
服务器：* STATUS blurdybloop (MESSAGES 231 UIDNEXT 44292)
服务器：A042 OK STATUS 完成
```

6.3.11. APPEND 命令

参数：邮箱名，可选的标志括号列表，可选的日期/时间字符串，消息正文（literal）

响应：无特定响应

结果：
- OK - 添加完成
- NO - 添加错误：无法添加到该邮箱，标志、日期/时间或消息文本出错
- BAD - 命令未知或参数无效

APPEND命令将字面量参数作为新消息追加到指定邮箱的末尾。该消息应符合[RFC-2822]格式，允许包含8位字符。若服务器无法正确保存8位数据，必须能通过[MIME-IMB]内容传输编码可逆转换为7位。

注意：可能存在例外，例如草稿消息，某些必要的[RFC-2822]头部行在消息字面量中被省略。必须理解并谨慎权衡这样做的全部影响。

如果指定了标志括号列表，标志应设置在新消息中；否则，标志列表默认为空，但“\Recent”标志会被设置。

如果指定了日期时间，内部日期应设置为该值；否则，默认为当前日期和时间。

如果追加失败，邮箱必须恢复到尝试追加前的状态，不允许部分追加。

如果目标邮箱不存在，服务器必须返回错误，且不得自动创建邮箱。除非确定无法创建，否则应在NO响应的文本前加上“[TRYCREATE]”提示客户端可以尝试创建邮箱并重试。

如果邮箱已被选中，正常的新消息操作应立即通知客户端（如通过未标记的EXISTS响应）。如果未通知，客户端可以在一次或多次追加后发出NOOP命令（或在失败时发出CHECK命令）。

示例：
```
客户端：A003 APPEND saved-messages (\Seen) {310}
服务器：+ 准备接收字面量数据
客户端：Date: Mon, 7 Feb 1994 21:52:25 -0800 (PST)
客户端：From: Fred Foobar <foobar@Blurdybloop.COM>
客户端：Subject: afternoon meeting
客户端：To: mooch@owatagu.siam.edu
客户端：Message-Id: <B27397-0100000@Blurdybloop.COM>
客户端：MIME-Version: 1.0
客户端：Content-Type: TEXT/PLAIN; CHARSET=US-ASCII
客户端：
客户端：Hello Joe, do you think we can meet at 3:30 tomorrow?
客户端：
服务器：A003 OK APPEND 完成
```
注意：APPEND命令不用于消息传递，因为它没有提供传输[SMTP]信封信息的机制。

6.4. 客户端命令——已选择状态

在已选择状态下，允许操作邮箱中消息的命令。

除了通用命令（CAPABILITY、NOOP、LOGOUT）和已认证状态命令（SELECT、EXAMINE、CREATE、DELETE、RENAME、SUBSCRIBE、UNSUBSCRIBE、LIST、LSUB、STATUS、APPEND）外，以下命令在已选择状态下也有效：CHECK、CLOSE、EXPUNGE、SEARCH、FETCH、STORE、COPY、UID。

6.4.1. CHECK 命令

参数：无

响应：无特定响应

结果：
- OK - 检查已完成
- BAD - 命令未知或参数无效

CHECK命令请求对当前已选邮箱进行一次检查点（checkpoint）。检查点涉及与邮箱相关的任何实现相关的维护操作（如同步内存状态与磁盘状态），这些操作通常不会在每个命令中自动执行。检查点可能需要一定的时间完成。如果服务器没有此类维护，CHECK等同于NOOP。

不能保证CHECK会引发未标记的EXISTS响应。应使用NOOP进行新消息轮询。

示例：
```
客户端：FXXZ CHECK
服务器：FXXZ OK 检查完成
```

6.4.2. CLOSE 命令

参数：无

响应：无特定响应

结果：
- OK - 关闭已完成，现处于已认证状态
- BAD - 命令未知或参数无效

CLOSE命令会永久删除所有带有\Deleted标志的消息，并返回已选状态到已认证状态。不会发送未标记的EXPUNGE响应。

如果邮箱通过EXAMINE命令被选中或以只读方式选中，则不会删除任何消息，也不会报错。

即使已选中邮箱，也可以在不先发出CLOSE命令的情况下发出SELECT、EXAMINE或LOGOUT命令。这些命令会隐式关闭当前邮箱（不执行expunge）。当删除大量消息时，使用CLOSE-LOGOUT或CLOSE-SELECT比EXPUNGE-LOGOUT或EXPUNGE-SELECT快得多，因为不会发送未标记的EXPUNGE响应（客户端可能会忽略）。

示例：
```
客户端：A341 CLOSE
服务器：A341 OK CLOSE 完成
```

6.4.3. EXPUNGE 命令

参数：无

响应：未标记的EXPUNGE响应

结果：
- OK - 删除完成
- NO - 删除失败（如权限不足）
- BAD - 命令未知或参数无效

EXPUNGE命令会永久删除所有带有\Deleted标志的消息。每删除一条消息，都会发送未标记的EXPUNGE响应。

示例：
```
客户端：A202 EXPUNGE
服务器：* 3 EXPUNGE
服务器：* 4 EXPUNGE
服务器：* 7 EXPUNGE
服务器：* 11 EXPUNGE
服务器：A202 OK EXPUNGE 完成
```
（注：示例中，编号3、4、7、11的消息都带有\Deleted标志。）

6.4.4. SEARCH 命令

参数：可选的[CHARSET]指定，搜索条件（一个或多个）

响应：必需的未标记响应：SEARCH

结果：
- OK - 搜索完成
- NO - 搜索错误：无法搜索指定的[CHARSET]或条件
- BAD - 命令未知或参数无效

SEARCH命令在邮箱中查找符合条件的消息。搜索条件由一个或多个搜索键组成。服务器的未标记SEARCH响应会列出符合条件的消息序列号。

当指定多个键时，结果是所有符合这些键的消息的交集（AND操作）。例如，条件DELETED FROM "SMITH" SINCE 1-Feb-1994表示自1994年2月1日以来由Smith删除的所有消息。搜索键也可以是括号括起来的搜索键列表（用于OR和NOT键）。

服务器实现可能会排除除TEXT和MESSAGE以外的其他内容媒体类型的[MIME-IMB]正文部分，以在搜索匹配中考虑。

可选的 [CHARSET] 规范由“CHARSET”一词后跟注册的 [CHARSET] 组成。它指示出现在搜索条件中的字符串所使用的字符集 [CHARSET]。在比较文本之前，必须对 [MIME-IMB] 内容传输编码和 [RFC-2822]/[MIME-IMB] 头部中的字符串进行解码，特别是那些在非 US-ASCII 字符集中的字符串。US-ASCII 必须支持；其他 [CHARSET] 可能也会被支持。

如果服务器不支持指定的 [CHARSET]，它必须返回一个带标签的 NO 响应（而不是 BAD）。此响应应包含 BADCHARSET 响应码，服务器支持的 [CHARSET] 列表也可以在其中列出。

在所有使用字符串的搜索键中，如果字符串是字段的子串，则消息与该搜索键匹配。匹配不区分大小写。

定义的搜索键如下。有关参数的精确语法定义，请参阅正式语法部分。

<sequence set>
  指定消息序列号集的消息。

ALL
  邮箱中的所有消息；作为 AND 连接的默认初始键。

ANSWERED
  设置有 \Answered 标志的消息。

BCC <string>
  在信封结构的 BCC 字段中包含指定字符串的消息。

BEFORE <date>
  内部日期（忽略时间和时区）早于指定日期的消息。

BODY <string>
  在消息正文中包含指定字符串的消息。

CC <string>
  在信封结构的 CC 字段中包含指定字符串的消息。

DELETED
  设置有 \Deleted 标志的消息。

DRAFT
  设置有 \Draft 标志的消息。

FLAGGED
  设置有 \Flagged 标志的消息。

FROM <string>
  在信封结构的 FROM 字段中包含指定字符串的消息。

HEADER <field-name> <string>
  具有指定字段名（定义在 [RFC-2822]）的头部，并且在头部文本（冒号之后的内容）中包含指定字符串的消息。如果搜索字符串为空，则匹配所有具有指定字段名的头部行，无论内容如何。

KEYWORD <flag>
  设置了指定关键字标志的消息。

LARGER <n>
  大小超过指定字节数的消息。

NEW
  设置有 \Recent 标志但没有 \Seen 标志的消息。这在功能上等同于 "(RECENT UNSEEN)"。

NOT <search-key>
  不匹配指定搜索键的消息。

OLD
  没有设置 \Recent 标志的消息。这在功能上等同于 "NOT RECENT"（而非 "NOT NEW"）。

ON <date>
  内部日期（忽略时间和时区）在指定日期内的消息。

OR <search-key1> <search-key2>
  匹配任一搜索键的消息。

RECENT
  设置有 \Recent 标志的消息。

SEEN
  设置有 \Seen 标志的消息。

SENTBEFORE <date>
  [RFC-2822] 头部中的 Date 字段（忽略时间和时区）早于指定日期的消息。

SENTON <date>
  [RFC-2822] 头部中的 Date 字段（忽略时间和时区）在指定日期内的消息。

SENTSINCE <date>
  [RFC-2822] 头部中的 Date 字段（忽略时间和时区）在或晚于指定日期的消息。

SINCE <date>
  内部日期（忽略时间和时区）在或晚于指定日期的消息。

SMALLER <n>
  小于指定字节数的 [RFC-2822] 大小的消息。

SUBJECT <string>
  在信封结构的 SUBJECT 字段中包含指定字符串的消息。

TEXT <string>
  在消息的头部或正文中包含指定字符串的消息。

TO <string>
  在信封结构的 TO 字段中包含指定字符串的消息。

UID <sequence set>
  与指定唯一标识符集对应的消息。序列集范围是允许的。

UNANSWERED
  未设置 \Answered 标志的消息。

UNDELETED
  未设置 \Deleted 标志的消息。

UNDRAFT
  未设置 \Draft 标志的消息。

UNFLAGGED
  未设置 \Flagged 标志的消息。

UNKEYWORD <flag>
  未设置指定关键字标志的消息。

UNSEEN
  未设置 \Seen 标志的消息。

示例：
C: A282 SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM "Smith"
S: * SEARCH 2 84 882
S: A282 OK SEARCH completed
C: A283 SEARCH TEXT "string not in mailbox"
S: * SEARCH
S: A283 OK SEARCH completed
C: A284 SEARCH CHARSET UTF-8 TEXT {6}
C: XXXXXX
S: * SEARCH 43
S: A284 OK SEARCH completed

注意：由于本文档仅限于 7 位 ASCII 文本，因此无法显示实际的 UTF-8 数据。“XXXXXX” 是在实际事务中代表 6 个 8 位数据字节的占位符。

6.4.5. FETCH 命令

参数：序列集
     消息数据项名称或宏

响应：未标记响应：FETCH

结果：
  - OK：获取完成
  - NO：获取错误：无法获取该数据
  - BAD：命令未知或参数无效

FETCH 命令用于检索邮箱中某条消息的相关数据。要获取的数据项可以是单个原子或用括号括起来的列表。

大多数数据项（在正式语法中的 msg-att-static 规则下定义）是静态的，必须对特定消息保持不变。其他数据项（在 msg-att-dynamic 规则下定义）可能会变化，可能是由于 STORE 命令或外部事件引起。

例如，如果客户端在已知信封的情况下再次收到某条消息的 ENVELOPE，则可以安全地忽略新传输的信封。

有三个宏定义了常用的数据项集，可以代替数据项使用。宏必须单独使用，不能与其他宏或数据项同时使用。

ALL
  等价于：(FLAGS INTERNALDATE RFC822.SIZE ENVELOPE)

FAST
  等价于：(FLAGS INTERNALDATE RFC822.SIZE)

FULL
  等价于：(FLAGS INTERNALDATE RFC822.SIZE ENVELOPE BODY)

当前可以获取的已定义数据项包括：

BODY
  BODYSTRUCTURE 的非扩展形式。

BODY[<section>]<<partial>>
  特定正文部分的文本。部分规范由零个或多个由点分隔的部分说明符组成。部分说明符可以是部分编号或 HEADER、HEADER.FIELDS、HEADER.FIELDS.NOT、MIME 和 TEXT 之一。空的部分说明符指整个消息，包括头部。

每条消息至少有一个部分编号。非 [MIME-IMB] 消息，以及没有封装消息的非多部分 [MIME-IMB] 消息，只有部分 1。

多部分消息按顺序分配连续的部分编号。如果某个部分是 message 或 multipart 类型，其子部分必须由点和该嵌套多部分中的部分编号表示。

类型为 MESSAGE/RFC822 的部分也有嵌套部分编号，指向 MESSAGE 部分正文的子部分。

HEADER、HEADER.FIELDS、HEADER.FIELDS.NOT 和 TEXT 说明符可以是唯一的部分说明符，也可以在一个或多个数字部分说明符前缀，前提是数字说明符指向 MESSAGE/RFC822 类型的部分。MIME 说明符必须由一个或多个数字说明符前缀。

HEADER、HEADER.FIELDS 和 HEADER.FIELDS.NOT 说明符指向消息或封装的 [MIME-IMB] MESSAGE/RFC822 消息的 [RFC-2822] 头部。HEADER.FIELDS 和 HEADER.FIELDS.NOT 后跟字段名列表（定义在 [RFC-2822] 中），返回头部的子集。HEADER.FIELDS 返回包含匹配列表中字段名的头部字段；HEADER.FIELDS.NOT 返回不匹配的字段。字段名的匹配不区分大小写，但其他方面必须完全一致。子集不会排除头部和正文之间的 [RFC-2822] 分隔空行；除非消息没有正文且没有空行，否则空行会包含在所有头部获取中。

MIME 说明符指向该部分的 [MIME-IMB] 头部。

TEXT 说明符指向消息的文本正文，省略 [RFC-2822] 头部。

示例：一个复杂消息的部分说明符示例：
- HEADER（[RFC-2822] 头部）
- TEXT（[RFC-2822] 文本正文） MULTIPART/MIXED
- 1 TEXT/PLAIN
- 2 APPLICATION/OCTET-STREAM
- 3 MESSAGE/RFC822
- 3.HEADER（[RFC-2822] 头部）
- 3.TEXT（[RFC-2822] 文本正文） MULTIPART/MIXED
- 3.1 TEXT/PLAIN
- 3.2 APPLICATION/OCTET-STREAM
- 4 MULTIPART/MIXED
- 4.1 IMAGE/GIF
- 4.1.MIME（[MIME-IMB] 头部）
- 4.2 MESSAGE/RFC822
- 4.2.HEADER（[RFC-2822] 头部）
- 4.2.TEXT（[RFC-2822] 文本正文） MULTIPART/MIXED
- 4.2.1 TEXT/PLAIN
- 4.2.2 MULTIPART/ALTERNATIVE
- 4.2.2.1 TEXT/PLAIN
- 4.2.2.2 TEXT/RICHTEXT

可以提取指定文本的子串。通过在部分说明符后附加左尖括号（"<"）、第一个所需字节的位置、点、最大字节数和右尖括号（">"）实现。例如，如果起始字节超出正文末尾，则返回空字符串。

任何试图读取超出正文末尾的部分的部分获取都会被适当截断。起始于字节 0 的部分获取即使发生截断，也会作为部分获取返回。

注意：这意味着对 1500 字节消息的 BODY[]<0.2048>，会返回 BODY[]<0>，其中字面值大小为 1500，而不是 BODY[]。

注意：对 HEADER.FIELDS 或 HEADER.FIELDS.NOT 说明符的子串获取是在子集化头部之后进行的。

\Seen 标志会被隐式设置；如果这导致标志发生变化，应将其包含在 FETCH 响应中。

BODY.PEEK[<section>]<<partial>>
  BODY[<section>] 的另一种形式，不会隐式设置 \Seen 标志。

BODYSTRUCTURE
  消息的 [MIME-IMB] 正文结构。由服务器通过解析 [RFC-2822] 头部中的 [MIME-IMB] 头字段计算得出。

ENVELOPE
  消息的信封结构。由服务器通过解析 [RFC-2822] 头部并根据需要默认各字段计算。

FLAGS
  该消息设置的标志。

INTERNALDATE
  消息的内部日期。

RFC822
  功能上等同于 BODY[]，但在未标记的 FETCH 数据的语法上不同（返回 RFC822）。

RFC822.HEADER
  功能上等同于 BODY.PEEK[HEADER]，但在未标记的 FETCH 数据的语法上不同（返回 RFC822.HEADER）。

RFC822.SIZE
  消息的 [RFC-2822] 大小。

RFC822.TEXT
  功能上等同于 BODY[TEXT]，但在未标记的 FETCH 数据的语法上不同（返回 RFC822.TEXT）。

UID
  消息的唯一标识符。

示例：
C: A654 FETCH 2:4 (FLAGS BODY[HEADER.FIELDS (DATE FROM)])
S: * 2 FETCH ....
S: * 3 FETCH ....
S: * 4 FETCH ....
S: A654 OK FETCH completed

6.4.6. STORE 命令

参数：序列集
     消息数据项名称
     消息数据项的值

响应：未标记响应：FETCH

结果：
  - OK：存储完成
  - NO：存储错误：无法存储该数据
  - BAD：命令未知或参数无效

STORE 命令用于修改邮箱中某条消息的相关数据。通常，STORE 会返回更新后的数据值，并伴随未标记的 FETCH 响应。数据项名称后缀为 ".SILENT" 时，避免返回未标记的 FETCH，服务器应假设客户端已自行确定更新值或不关心更新值。

注意：无论是否使用了 ".SILENT" 后缀，如果检测到外部源对消息标志的更改，服务器应发送未标记的 FETCH 响应。其目的是确保标志状态的确定性，避免竞态条件。

FLAGS <标志列表>
用于替换消息的标志（除了 \Recent）为参数中的标志。替换后，返回新的标志值，就像执行了一次 FETCH 操作获取这些标志一样。

FLAGS.SILENT <标志列表>
与 FLAGS 相同，但不返回新的标志值。

+FLAGS <标志列表>
向消息的标志中添加参数中的标志。添加后，返回新的标志值，就像执行了一次 FETCH 操作获取这些标志一样。

+FLAGS.SILENT <标志列表>
与 +FLAGS 相同，但不返回新的标志值。

-FLAGS <标志列表>
从消息的标志中移除参数中的标志。移除后，返回新的标志值，就像执行了一次 FETCH 操作获取这些标志一样。

-FLAGS.SILENT <标志列表>
与 -FLAGS 相同，但不返回新的标志值。

示例：
C: A003 STORE 2:4 +FLAGS (\Deleted)
S: * 2 FETCH (FLAGS (\Deleted \Seen))
S: * 3 FETCH (FLAGS (\Deleted))
S: * 4 FETCH (FLAGS (\Deleted \Flagged \Seen))
S: A003 OK STORE completed

6.4.7. COPY 命令

参数：序列集
      邮箱名称

响应：此命令没有特定的响应

结果：OK - 复制完成
      NO - 复制错误：无法复制这些消息或到该名称
      BAD - 命令未知或参数无效

COPY 命令将指定的消息复制到目标邮箱的末尾。复制的消息应保留其标志和内部日期，且应设置 Recent 标志。

如果目标邮箱不存在，服务器应返回错误。它不应自动创建邮箱。除非确定无法创建目标邮箱，否则服务器必须在 NO 响应的文本前加上 "[TRYCREATE]" 的响应码，提示客户端可以尝试使用 CREATE 命令创建邮箱后重试复制。

如果复制因任何原因失败，服务器实现必须将目标邮箱恢复到复制尝试前的状态。

示例：
C: A003 COPY 2:4 MEETING
S: A003 OK COPY completed

6.4.8. UID 命令

参数：命令名
      命令参数

响应：未标记响应：FETCH、SEARCH

结果：OK - UID 命令完成
      NO - UID 命令错误
      BAD - 命令未知或参数无效

UID 命令有两种形式。第一种形式，它的参数是一个 COPY、FETCH 或 STORE 命令，参数与相关命令相同，但序列集中的数字是唯一标识符（UID），而非消息序列号。允许使用范围，但不能保证唯一标识符是连续的。

不存在的唯一标识符会被忽略，不会产生错误信息。因此，UID FETCH 可能返回 OK 而没有数据，UID COPY 或 UID STORE 也可能返回 OK 而没有实际操作。

第二种形式，UID 命令接受一个带有 SEARCH 命令参数的搜索命令。参数的解释与 SEARCH 相同，但搜索响应中返回的数字是唯一标识符（UID），而非消息序列号。例如，命令：
UID SEARCH 1:100 UID 443:557
返回两个序列集的交集对应的唯一标识符，范围为消息序列号 1:100 和 UID 443:557。

注意：在上述例子中，UID 范围 443:557 出现。对于不存在的唯一标识符，也会被忽略，不会报错。因此，即使 UID 443 和 557 不存在，该范围仍然有效，并会包括存在的 UID 495。

另外，UID 范围 559:* 始终包括邮箱中最后一条消息的 UID，即使 559 比任何已分配的 UID 都大。这是因为范围的内容与端点的顺序无关。因此，任何包含 * 作为端点的 UID 范围，至少表示一条消息（UID 最大的消息），除非邮箱为空。

未标记的 FETCH 响应中，"*" 后的数字始终是消息序列号，而非唯一标识符，即使是 UID 命令的响应也是如此。但服务器实现必须在由 UID 命令引发的任何 FETCH 响应中，隐式包含 UID 消息数据项，无论是否在 FETCH 中明确指定 UID 作为消息数据项。

注意：关于在 FETCH 响应中包含 UID 消息数据项的规则，主要适用于 UID FETCH 和 UID STORE 命令，包括未在 FETCH 中包含 UID 的 UID FETCH 命令。虽然其他 UID 命令引发未标记的 FETCH 的可能性较低，但此规则也适用。

示例：
C: A999 UID FETCH 4827313:4828442 FLAGS
S: * 23 FETCH (FLAGS (\Seen) UID 4827313)
S: * 24 FETCH (FLAGS (\Seen) UID 4827943)
S: * 25 FETCH (FLAGS (\Seen) UID 4828442)
S: A999 OK UID FETCH completed

6.5. 客户端命令 - 实验性/扩展

6.5.1. X<atom> 命令

参数：由实现定义

响应：由实现定义

结果：OK - 命令完成
      NO - 失败
      BAD - 命令未知或参数无效

任何以 X 前缀的命令都是实验性命令。不属于本规范、标准或标准修订版、或经 IESG 批准的实验协议的命令，必须使用 X 前缀。

由实验性命令发出的任何未标记响应（untagged responses）也必须以 X 前缀。服务器实现不得发送此类未标记响应，除非客户端通过发出相关的实验性命令请求。

示例：
C: a441 CAPABILITY
S: * CAPABILITY IMAP4rev1 XPIG-LATIN
S: a441 OK CAPABILITY completed
C: A442 XPIG-LATIN
S: * XPIG-LATIN ow-nay eaking-spay ig-pay atin-lay
S: A442 OK XPIG-LATIN completed

7. 服务器响应

服务器响应有三种形式：状态响应、服务器数据和命令继续请求。响应中包含的信息（在响应描述中由 "Contents:" 标识）是按功能描述的，而非按语法。服务器响应的具体语法在正式语法部分定义。

客户端必须随时准备接受任何响应。

状态响应可以带标签或不带标签。带标签的状态响应表示客户端命令的完成结果（OK、NO 或 BAD），并带有与命令相匹配的标签。

一些状态响应和所有服务器数据是未标记的。未标记响应由 "*" 代替标签表示。未标记状态响应表示服务器的欢迎信息，或不表示命令完成的服务器状态（例如，系统即将关闭的警告）。出于历史原因，未标记的服务器数据响应也被称为“非 solicited data”，但严格来说，只有单方面的服务器数据才是真正的“非 solicited”。

客户端在接收这些数据时，必须记录某些服务器数据；这在数据描述中会注明。这些数据传达关键信息，影响后续所有命令和响应的解释（例如，反映消息的创建或删除的更新）。

其他服务器数据应在之后的操作中参考；如果客户端不需要记录，或记录没有明显用途（如在没有进行 SEARCH 命令时的 SEARCH 响应），则应忽略。

在已选择状态下，IMAP 连接会收到单方面的未标记服务器数据。例如，服务器在执行命令时会检查邮箱中新消息，通常每个命令都会这样做；因此，发送 NOOP 命令即可检查新消息。如果发现新消息，服务器会发送未标记的 EXISTS 和 RECENT 响应，反映邮箱的新大小。支持多重访问同一邮箱的服务器实现，也应在其他代理更改消息标志或删除消息时，发送相应的未标记 FETCH 和 EXPUNGE 响应。

命令继续请求的响应使用 "+" 代替标签。服务器用此响应表示接受了不完整的客户端命令，准备接收命令的剩余部分。

7.1. 服务器响应 - 状态响应

状态响应包括：OK、NO、BAD、PREAUTH 和 BYE。OK、NO 和 BAD 可以带标签或不带标签。PREAUTH 和 BYE 始终不带标签。

状态响应可以包含可选的“响应码”。响应码由方括号内的原子组成，可能后跟空格和参数。响应码提供额外信息或状态码，超出 OK/NO/BAD 的范围，定义在有特定操作可依据这些信息执行时。

目前定义的响应码包括：

ALERT
- 包含特殊警报信息，必须以引起用户注意的方式呈现。

BADCHARSET
- 可后跟括号中的字符集列表。表示搜索失败，因为此实现不支持给定的字符集。如果提供了字符集列表，则列出此实现支持的字符集。

CAPABILITY
- 后跟能力列表。可以出现在初始的 OK 或 PREAUTH 响应中，用于传递初始能力列表。如果客户端识别此响应，则无需单独发 CAPABILITY 命令。

PARSE
- 表示在解析邮箱中消息的 [RFC-2822] 头或 [MIME-IMB] 头时出错。

PERMANENTFLAGS
- 后跟括号中的标志列表，指示客户端可以永久更改的已知标志。未在 PERMANENTFLAGS 列表中的 FLAGS 未标记响应中的标志不能被永久设置。如果客户端尝试存储（STORE）一个不在 PERMANENTFLAGS 列表中的标志，服务器要么忽略此更改，要么只在当前会话中存储状态变化。PERMANENTFLAGS 也可以包含特殊标志 \*，表示可以通过尝试在邮箱中存储这些标志来创建新关键词。

（以下内容省略，内容与前文类似，描述了其他响应码的定义和用途。）

未标记（untagged）形式的响应也被用作连接启动时的三种可能问候之一。它表示连接尚未经过认证，需要发送LOGIN命令。

示例：  
S：* OK IMAP4rev1 服务器准备就绪  
C：A001 LOGIN fred blurdybloop  
S：* OK [ALERT] 系统将在10分钟内关闭  
S：A001 OK 登录完成

7.1.2. NO响应

内容：  
可选的响应码  
人类可读的文本

NO响应表示服务器发出的操作错误信息。当带标签时，表示相关命令未成功完成。未标记的形式表示警告；命令仍可能成功完成。人类可读的文本描述了具体情况。

示例：  
C：A222 COPY 1:2 owatagusiam  
S：* NO 磁盘已满98%，请删除不必要的数据  
S：A222 OK 复制完成  
C：A223 COPY 3:200 blurdybloop  
S：* NO 磁盘已满98%，请删除不必要的数据  
S：* NO 磁盘已满99%，请删除不必要的数据  
S：A223 NO 复制失败：磁盘已满

7.1.3. BAD响应

内容：  
可选的响应码  
人类可读的文本

BAD响应表示服务器发出的错误信息。当带标签时，报告协议级别的客户端命令错误；标签指示引发错误的命令。未标记的形式表示协议级别的错误，无法确定相关命令，也可能表示服务器内部故障。人类可读的文本描述具体情况。

示例：  
C：...非常长的命令行...  
S：* BAD 命令行过长  
C：...空行...  
S：* BAD 空命令行  
C：A443 EXPUNGE  
S：* BAD 磁盘崩溃，尝试修复到新磁盘！  
S：* OK 修复成功，未丢失数据  
S：A443 OK 删除完成

7.1.4. PREAUTH响应

内容：  
可选的响应码  
人类可读的文本

PREAUTH响应总是未标记的，且是连接启动时的三种问候之一。它表示连接已通过外部方式预先认证；因此无需发送LOGIN命令。

示例：  
S：* PREAUTH IMAP4rev1 服务器已以Smith身份登录

7.1.5. BYE响应

内容：  
可选的响应码  
人类可读的文本

BYE响应总是未标记的，表示服务器即将关闭连接。人类可读的文本可以由客户端在状态报告中显示给用户。BYE响应在以下四种情况下发出：

1）作为正常注销流程的一部分。服务器在发送带标签的OK响应确认LOGOUT命令后关闭连接。  
2）作为紧急关闭通知。服务器立即关闭连接。  
3）作为自动注销的通知。服务器立即关闭连接。  
4）作为连接启动时的三种问候之一，表示服务器不愿接受来自此客户端的连接。服务器立即关闭连接。

区别：正常注销（第一种）时，连接会在发送确认后正常关闭；而因故障（其他三种）时，连接会立即关闭。在所有情况下，客户端应继续读取来自服务器的响应，直到连接关闭，以确保所有未标记或完成的响应都被读取和处理。

示例：  
S：* BYE 自动注销；闲置时间过长

7.2. 服务器响应——服务器和邮箱状态

这些响应总是未标记的。它们用于从服务器向客户端传输服务器和邮箱的状态信息。许多这些响应通常由同名命令引发。

7.2.1. CAPABILITY响应

内容：  
能力列表

CAPABILITY响应是在执行CAPABILITY命令后返回的。它包含由空格分隔的服务器支持的能力名称列表。列表中必须包括“IMAP4rev1”。

此外，客户端和服务器实现必须支持STARTTLS、LOGINDISABLED和AUTH=PLAIN（详见[IMAP-TLS]）能力。安全注意事项部分有重要信息。

以“AUTH=”开头的能力名表示服务器支持该特定的认证机制。

LOGINDISABLED能力表示LOGIN命令被禁用，即使用户名和密码有效，服务器也会以带标签的NO响应拒绝使用LOGIN命令。IMAP客户端在服务器广告了LOGINDISABLED能力时，不得发出LOGIN命令。

其他能力名表示服务器支持IMAP4rev1协议的扩展、修订或修正。服务器响应必须符合本文件，直到客户端发出使用相关能力的命令。

能力名必须以“X”开头，或是已注册的标准或标准追踪的IMAP4rev1扩展、修订或修正。除非以“X”前缀，否则服务器不得提供未注册或非标准的能力名。

客户端实现应只要求“IMAP4rev1”能力，忽略任何未知的能力名。

服务器可以在初始的PREAUTH或OK响应中自动发送能力信息，或在成功认证后在带标签的OK响应中更新CAPABILITY响应码。客户端无需单独发CAPABILITY命令。

示例：  
S：* CAPABILITY IMAP4rev1 STARTTLS AUTH=GSSAPI XPIG-LATIN

7.2.2. LIST响应

内容：  
名称属性  
层级分隔符  
名称

LIST响应由LIST命令触发。它返回符合LIST规范的单个邮箱名。一个LIST命令可能会有多个LIST响应。

定义了四个名称属性：  
\Noinferiors：  
在此名称下不可能存在子层级；现在没有，也不能创建。  
\Noselect：  
此名称不能用作可选的邮箱。  
\Marked：  
邮箱被服务器标记为“感兴趣”；可能包含自上次选择后新增的消息。  
\Unmarked：  
自上次选择后，邮箱没有新增消息。

如果服务器无法判断邮箱是否“感兴趣”，或名称是\Noselect类型，应该不发送\Marked或\Unmarked。

层级分隔符是用来区分邮箱名中层级的字符。客户端可以用它创建子邮箱，或搜索更高或更低层级。所有顶层节点的子级必须使用相同的分隔符。空值（NIL）表示没有层级结构，名称为“扁平”结构。

名称应表示明确的从左到右的层级关系，且必须在LIST和LSUB命令中有效。除非标记为\Noselect，否则名称也应在如SELECT等命令中有效。

示例：  
S：* LIST (\Noselect) "/" ~/Mail/foo

7.2.3. LSUB响应

内容：  
名称属性  
层级分隔符  
名称

LSUB响应由LSUB命令触发。它返回符合LSUB规范的单个邮箱名。可能有多个响应，格式与LIST响应相同。

示例：  
S：* LSUB () "." #news.comp.mail.misc

7.2.4. STATUS响应

内容：  
邮箱名  
状态（用括号括起来的列表）

STATUS响应由STATUS命令触发。它返回符合条件的邮箱名和请求的状态信息。

示例：  
S：* STATUS blurdybloop (MESSAGES 231 UIDNEXT 44292)

7.2.5. SEARCH响应

内容：  
零个或多个数字

SEARCH响应由SEARCH或UID SEARCH命令触发。数字代表符合搜索条件的消息。对于SEARCH，是消息序列号；对于UID SEARCH，是唯一标识符。每个数字由空格分隔。

示例：  
S：* SEARCH 2 3 6

7.2.6. FLAGS响应

内容：  
标志列表（用括号括起来）

FLAGS响应由SELECT或EXAMINE命令触发。它列出适用于此邮箱的标志（至少包括系统定义的标志）。除系统标志外，还可能存在其他标志，取决于服务器实现。

客户端必须记录FLAGS响应中的更新。

示例：  
S：* FLAGS (\Answered \Flagged \Deleted \Seen \Draft)

7.3. 服务器响应——邮箱大小

这些响应总是未标记的，用于传达邮箱大小的变化。紧跟“*”后的是一个数字，代表消息数。

7.3.1. EXISTS响应

内容：无

EXISTS响应报告邮箱中的消息数。它由SELECT或EXAMINE命令触发，或当邮箱大小变化（如新消息）时发出。

客户端必须记录此更新。

示例：  
S：* 23 EXISTS

7.3.2. RECENT响应

内容：无

RECENT响应报告设置了\Recent标志的消息数。由SELECT或EXAMINE命令触发，或邮箱大小变化时发出。

注意：不能保证最近消息的消息序列号是邮箱中最高n条消息的连续范围（n由RECENT响应报告）。例如：多个客户端同时打开同一邮箱（第一个通知的会将其视为recent，其他可能视为非recent），或邮箱被非IMAP代理重新排序。

识别最近消息的唯一可靠方法是检查消息标志中的\Recent，或执行SEARCH RECENT。

客户端必须记录RECENT响应的更新。

示例：  
S：* 5 RECENT

7.4. 服务器响应——消息状态

这些响应总是未标记的，用于传输消息数据，通常由同名命令引发。紧跟“*”后的是消息序列号。

7.4.1. EXPUNGE响应

内容：无

EXPUNGE响应表示指定的消息序列号已被永久删除。邮箱中后续消息的序列号立即减1，且此减法反映在后续响应（包括其他未标记的EXPUNGE响应）中。

EXPUNGE还会减少邮箱中的消息总数；无需发送新的EXISTS响应。

由于立即减1规则，连续的EXPUNGE响应中的消息序列号取决于删除是从低到高还是从高到低。例如：如果邮箱中最后5条消息被删除，按“低到高”顺序，服务器会发出五个未标记的EXPUNGE响应，序列号为5；而“高到低”顺序的服务器会依次发出序列号为9、8、7、6、5的未标记EXPUNGE响应。

当没有命令正在进行，或者在响应FETCH、STORE或SEARCH命令时，不得发送EXPUNGE响应。此规则的目的是防止客户端与服务器之间的消息序列号同步丢失。一个命令在完全接收完毕之前，不算“在进行中”；特别是在协商命令续传期间，命令也不算“在进行中”。

注意：UID FETCH、UID STORE和UID SEARCH是与FETCH、STORE和SEARCH不同的命令。在执行UID命令时，可以发送EXPUNGE响应。

客户端必须记录来自EXPUNGE响应的更新。

示例：S: * 44 EXPUNGE

7.4.2. FETCH响应

内容：消息数据

FETCH响应向客户端返回关于一条消息的数据。数据以数据项名称和其值的对组成，括在括号内。此响应可以由FETCH或STORE命令的结果触发，也可以由服务器单方面决定（例如，标志更新）。

当前的数据项包括：

BODY
  表示BODYSTRUCTURE的某种形式，不包含扩展数据。

BODY[<section>]<<origin octet>>
  表示指定部分的正文内容字符串。客户端应根据内容传输编码、正文类型和子类型对该字符串进行解释。

  如果指定了origin octet，则该字符串是整个正文内容的子串，从该origin octet开始。这意味着BODY[]<0>可能会被截断，但BODY[]绝不截断。

  注意：除非客户端通过FETCH BODY[<section>]<<partial>>数据项明确请求，否则服务器不得在FETCH响应中使用origin octet功能。

  如果正文中包含8位文本数据，且该部分的参数列表中包含[CHARSET]标识符，则允许使用8位字符。注意，头部（如HEADER或MIME部分，或MESSAGE/RFC822部分的头部）必须是7位字符；头部中不允许8位字符。此外，RFC-2822中定义的头部分隔空行不会受到子集化的影响，空行始终作为头部数据的一部分，除非消息没有正文且没有空行。

  非文本数据（如二进制数据）必须在传输前编码成文本形式（如BASE64），以便传输。客户端必须解码传输编码的字符串以还原原始二进制数据。

BODYSTRUCTURE
  描述消息的[MIME-IMB]正文结构的括号列表。由服务器通过解析[MIME-IMB]头字段生成，必要时为各字段赋予默认值。

  例如，一条简单的48行、2279字节的文本消息，其正文结构可能为：("TEXT" "PLAIN" ("CHARSET" "US-ASCII") NIL NIL "7BIT" 2279 48)

  多个部分通过括号嵌套表示。除正文类型外，括号列表的第一个元素是正文类型，第二个元素是多部分子类型（如mixed、digest、parallel、alternative等）。

  例如，一个由文本和BASE64编码文本附件组成的两部分消息，其正文结构可能为：
  (("TEXT" "PLAIN" ("CHARSET" "US-ASCII") NIL NIL "7BIT" 1152 23)
   ("TEXT" "PLAIN" ("CHARSET" "US-ASCII" "NAME" "cc.diff")
    "<960723163407.20117h@cac.washington.edu>" "Compiler diff" "BASE64" 4554 73)
   "MIXED")

  扩展数据紧随多部分子类型之后。扩展数据不会在BODY fetch中返回，但可以在BODYSTRUCTURE fetch中返回。若存在扩展数据，必须按定义的顺序排列。多部分正文的扩展数据顺序如下：

  - body参数括号列表
    由属性/值对组成的括号列表（例如：("foo" "bar" "baz" "rag")，其中"bar"是"foo"的值，"rag"是"baz"的值），定义见[MIME-IMB]。

  - body disposition
    由处置类型字符串和括号内的处置属性/值对组成的括号列表，定义见[DISPOSITION]。

  - body language
    表示正文语言的字符串或括号列表，定义见[LANGUAGE-TAGS]。

  - body location
    表示正文内容URI的字符串列表，定义见[LOCATION]。

  其他扩展数据尚未在此版本协议中定义。此类扩展数据可以包括零个或多个NIL、字符串、数字，或潜在的嵌套括号列表。实现客户端在请求BODYSTRUCTURE时，必须能接受此类扩展数据。服务器在未由协议修订定义前，不得发送此类扩展数据。

  非多部分正文的基本字段顺序如下：

  - body type
    表示内容媒体类型的字符串，定义见[MIME-IMB]。

  - body subtype
    表示内容子类型的字符串，定义见[MIME-IMB]。

  - body参数括号列表
    属性/值对的括号列表，定义见[MIME-IMB]。

  - body id
    内容ID字符串，定义见[MIME-IMB]。

  - body description
    内容描述字符串，定义见[MIME-IMB]。

  - body encoding
    内容传输编码字符串，定义见[MIME-IMB]。

  - body size
    表示正文大小（以字节为单位）的数字。注意，此大小是传输编码后的大小，而非解码后的实际大小。

  对于类型为MESSAGE且子类型为RFC822的正文，其后紧跟封包结构、正文结构和封装消息的文本行数。

  类型为TEXT的正文，其后紧跟正文的文本行数。注意，此大小是内容传输编码后的大小，不是解码后实际大小。

  扩展数据在基本字段和类型特定字段之后。扩展数据不会在BODY fetch中返回，但可以在BODYSTRUCTURE fetch中返回。若存在，必须按定义顺序排列。

  非多部分正文的扩展数据顺序如下：

  - body MD5
    表示正文MD5值的字符串，定义见[MD5]。

  - body disposition
    与多部分正文的body disposition相同的括号列表。

  - body language
    表示正文语言的字符串或括号列表，定义见[LANGUAGE-TAGS]。

  - body location
    表示正文内容URI的字符串列表，定义见[LOCATION]。

  其他扩展数据尚未在此版本协议中定义，规则同多部分扩展数据。

ENVELOPE
  描述消息信封结构的括号列表。由服务器通过解析[RFC-2822]头字段，按组件部分生成，必要时为字段赋默认值。

  信封结构的字段顺序为：日期、主题、发件人、发件人、回复地址、收件人、抄送、密送、回复至、消息ID。日期、主题、In-Reply-To和Message-ID字段为字符串。发件人、发件人、回复地址、收件人、抄送和密送字段为地址结构的括号列表。

  地址结构是描述电子邮件地址的括号列表。其字段顺序为：个人名、[SMTP]域名列表（源路由）、邮箱名、主机名。

  [RFC-2822]中的组语法由特殊形式的地址结构表示，其中主机名字段为NIL。如果邮箱名字段也为NIL，则表示组结束（在RFC 822语法中用分号）；如果邮箱名非NIL，则表示组开始，邮箱名字段存放组名短语。

  如果在[RFC-2822]头中缺少日期、主题、In-Reply-To和消息ID行，则对应的信封成员为NIL；如果这些头部存在但为空，则对应成员为空字符串。

  注意：某些服务器可能在“存在但为空”的情况下返回NIL信封成员。客户端应将NIL和空字符串视为相同。

  注意：RFC-2822要求所有消息都必须有有效的Date头部，因此信封中的date成员不能为NIL或空字符串。

  注意：如果存在In-Reply-To和Message-ID头部（即使为空），信封中的对应成员也不能为空字符串。

  如果在[RFC-2822]头中缺少或为空的发件人、收件人、抄送和密送头部，信封对应成员为NIL。

  如果发件人或回复地址行缺失或为空，服务器会将信封中的对应成员设置为与发件人相同（客户端无需知道此操作）。

  注意：RFC-2822要求所有消息必须有有效的From头部，因此信封中的from、sender和reply-to成员不能为NIL。

FLAGS
  表示此消息设置的标志的括号列表。

INTERNALDATE
  表示消息内部日期的字符串。

RFC822
  等同于BODY[]。

RFC822.HEADER
  等同于BODY[HEADER]。注意，此响应不会设置\Seen标志，因为RFC822.HEADER的响应数据是在FETCH RFC822.HEADER时返回的；而BODY[HEADER]是在FETCH BODY[HEADER]（会设置\Seen）或BODY.PEEK[HEADER]（不会设置\Seen）时返回的。

RFC822.SIZE
  表示消息大小（以字节为单位）的数字，依据[RFC-2822]。

RFC822.TEXT
  等同于BODY[TEXT]。

UID
  表示消息唯一标识符的数字。

示例：S: * 23 FETCH (FLAGS (\Seen) RFC822.SIZE 44827)

7.5. 服务器响应——命令续传请求

命令续传请求的响应由“+”符号（而非标签）表示。这种响应表明服务器已准备好接受客户端的命令续传。响应的其余部分是一行文本。

此响应用于AUTHENTICATE命令中，用于向客户端传输服务器数据或请求额外的客户端数据。如果命令参数是字面值（literal），也会使用此响应。

客户端不得在服务器未指示期待字面值的情况下，发送字面值的八位字节。这允许服务器逐行处理命令并拒绝错误。命令的其余部分，包括终止命令的CRLF，紧随字面值的八个字节之后。如果有其他命令参数，字面值后应跟空格和这些参数。

示例：
C: A001 LOGIN {11}
S: + Ready for additional command text
C: FRED FOOBAR {7}
S: + Ready for additional command text
C: fat man
S: A001 OK LOGIN completed
C: A044 BLURDYBLOOP {102856}
S: A044 BAD No such command as "BLURDYBLOOP"

以下是英文内容的中文翻译：

```
S：   * OK IMAP4rev1 服务准备就绪
C：   a001 登录 mrc 密码
S：   a001 OK 登录完成
C：   a002 选择收件箱
S：   * 18 存在的消息
S：   * FLAGS (\Answered \Flagged \Deleted \Seen \Draft)
S：   * 2 最近的消息
S：   * OK [UNSEEN 17] 第17条消息是第一条未读消息
S：   * OK [UIDVALIDITY 3857529045] UID有效
S：   a002 OK [READ-WRITE] 选择完成
C：   a003 获取第12条消息的完整内容
S：   * 12 FETCH (FLAGS (\Seen) INTERNALDATE "1996-07-17 02:44:25 -0700"
      RFC822.SIZE 4286 ENVELOPE ("Wed, 17 Jul 1996 02:23:25 -0700 (PDT)"
      "IMAP4rev1 WG 会议总结与纪要"
      (("Terry Gray" NIL "gray" "cac.washington.edu"))
      (("Terry Gray" NIL "gray" "cac.washington.edu"))
      (("Terry Gray" NIL "gray" "cac.washington.edu"))
      ((NIL NIL "imap" "cac.washington.edu"))
      ((NIL NIL "minutes" "CNRI.Reston.VA.US")
      ("John Klensin" NIL "KLENSIN" "MIT.EDU")) NIL NIL
      "<B27397-0100000@cac.washington.edu>")
       BODY ("TEXT" "PLAIN" ("CHARSET" "US-ASCII") NIL NIL "7BIT" 3028
       92))
S：    a003 OK 获取完成
C：    a004 获取第12条消息的头部
S：    * 12 FETCH (BODY[HEADER] {342}
S：    日期：Wed, 17 Jul 1996 02:23:25 -0700 (PDT)
S：    发件人：Terry Gray <gray@cac.washington.edu>
S：    主题：IMAP4rev1 WG 会议总结与纪要
S：    收件人：imap@cac.washington.edu
S：    抄送：minutes@CNRI.Reston.VA.US, John Klensin <KLENSIN@MIT.EDU>
S：    消息ID：<B27397-0100000@cac.washington.edu>
S：    MIME版本：1.0
S：    内容类型：TEXT/PLAIN; CHARSET=US-ASCII
S：
S：    )
S：    a004 OK 获取完成
C：    a005 将第12条消息的标志设置为已删除
S：    * 12 FETCH (FLAGS (\Seen \Deleted))
S：    a005 OK +FLAGS 完成
C：    a006 退出登录
S：    * BYE IMAP4rev1 服务器终止连接
S：    a006 OK 退出完成



Crispin                     标准轨迹                    [第80页]


RFC 3501                         IMAPv4                       2003年3月


9. 正式语法

   以下语法规范采用 [ABNF] 中规定的增强型 Backus-Naur 形式（ABNF）表示。

   在存在交叉或可选规则的情况下，如果后续规则与前面规则重叠，则必须优先考虑前面列出的规则。例如，"\Seen" 作为标志解析时是 \Seen 标志名，而不是标志扩展，尽管 "\Seen" 可以被解析为标志扩展。以下部分说明了此规则的某些实例。

        注意：[ABNF] 规则必须严格遵守，特别是：

        (1) 除非另有说明，所有字母字符不区分大小写。用大写或小写字符定义标记字符串仅为编辑清晰起见。实现必须以不区分大小写的方式接受这些字符串。

        (2) 在所有情况下，SP 指恰好一个空格。不允许用 TAB 替代、插入额外空格，或以其他方式将 SP 视为等同于 LWSP。

        (3) ASCII NUL 字符 %x00 绝对不得使用。

address         = "(" addr-name SP addr-adl SP addr-mailbox SP addr-host ")"

addr-adl        = nstring
                    ; 如果非 NIL，表示来自 [RFC-2822] 路由地址的路由信息

addr-host       = nstring
                    ; NIL 表示 [RFC-2822] 组语法，否则存放 [RFC-2822] 域名

addr-mailbox    = nstring
                    ; NIL 表示 [RFC-2822] 组的结束；如果非 NIL 且 addr-host 为 NIL，则存放 [RFC-2822] 组名；
                    ; 否则，存放 [RFC-2822] 本地部分（去除引号）

addr-name       = nstring
                    ; 如果非 NIL，存放 [RFC-2822] 邮箱中的短语（去除引号）

append          = "APPEND" SP mailbox [SP flag-list] [SP date-time] SP literal

astring         = 1*ASTRING-CHAR / string

ASTRING-CHAR   = ATOM-CHAR / resp-specials

atom            = 1*ATOM-CHAR

ATOM-CHAR       = <除 atom-specials 之外的任何 CHAR>

atom-specials   = "(" / ")" / "{" / SP / CTL / list-wildcards /
                  quoted-specials / resp-specials

authenticate    = "AUTHENTICATE" SP auth-type *(CRLF base64)

auth-type       = atom
                    ; 由 [SASL] 定义

base64          = *(4base64-char) [base64-terminal]

base64-char     = ALPHA / DIGIT / "+" / "/"
                    ; 区分大小写

base64-terminal = (2base64-char "==") / (3base64-char "=")

body            = "(" (body-type-1part / body-type-mpart) ")"

body-extension  = nstring / number /
                   "(" body-extension *(SP body-extension) ")"
                    ; 未来扩展。客户端实现必须接受 body-extension 字段。服务器实现不得生成除未来标准或标准修订版本中定义的 body-extension 字段外的内容。

body-ext-1part  = body-fld-md5 [SP body-fld-dsp [SP body-fld-lang
                  [SP body-fld-loc *(SP body-extension)]]]
                    ; 不应在非可扩展的 "BODY" 获取中返回

body-ext-mpart  = body-fld-param [SP body-fld-dsp [SP body-fld-lang
                  [SP body-fld-loc *(SP body-extension)]]]
                    ; 不应在非可扩展的 "BODY" 获取中返回

body-fields     = body-fld-param SP body-fld-id SP body-fld-desc SP
                  body-fld-enc SP body-fld-octets

body-fld-desc   = nstring

body-fld-dsp    = "(" string SP body-fld-param ")" / nil

body-fld-enc    = (DQUOTE ("7BIT" / "8BIT" / "BINARY" / "BASE64"/
                  "QUOTED-PRINTABLE") DQUOTE) / string

body-fld-id     = nstring

body-fld-lang   = nstring / "(" string *(SP string) ")"

body-fld-loc    = nstring

body-fld-lines  = number

body-fld-md5    = nstring

body-fld-octets = number

body-fld-param  = "(" string SP string *(SP string SP string) ")" / nil

body-type-1part = (body-type-basic / body-type-msg / body-type-text)
                  [SP body-ext-1part]

body-type-basic = media-basic SP body-fields
                    ; MESSAGE 子类型不得为 "RFC822"

body-type-mpart = 1*body SP media-subtype
                  [SP body-ext-mpart]

body-type-msg   = media-message SP body-fields SP envelope
                  SP body SP body-fld-lines

body-type-text  = media-text SP body-fields SP body-fld-lines

capability      = ("AUTH=" auth-type) / atom
                    ; 新能力必须以 "X" 开头或注册为 IANA 标准或标准轨迹

capability-data = "CAPABILITY" *(SP capability) SP "IMAP4rev1"
                  *(SP capability)
                    ; 服务器必须实现 STARTTLS、AUTH=PLAIN 和 LOGINDISABLED 能力
                    ; 支持 RFC 1730 兼容性的服务器必须将 "IMAP4" 列为第一个能力

CHAR8           = %x01-ff
                    ; 除 NUL (%x00) 之外的任何 OCTET

command         = tag SP (command-any / command-auth / command-nonauth / command-select) CRLF
                    ; 基于状态的模式

command-any     = "CAPABILITY" / "LOGOUT" / "NOOP" / x-command
                    ; 在所有状态下有效

command-auth    = append / create / delete / examine / list / lsub /
                  rename / select / status / subscribe / unsubscribe
                    ; 仅在已认证或已选择状态下有效

command-nonauth = login / authenticate / "STARTTLS"
                    ; 仅在未认证状态下有效

command-select  = "CHECK" / "CLOSE" / "EXPUNGE" / copy / fetch / store /
                  uid / search
                    ; 仅在已选择状态下有效

continue-req    = "+" SP (resp-text / base64) CRLF

copy            = "COPY" SP sequence-set SP mailbox

create          = "CREATE" SP mailbox
                    ; 使用 INBOX 会返回 NO 错误

date            = date-text / DQUOTE date-text DQUOTE

date-day        = 1*2DIGIT
                    ; 月份中的天数

date-day-fixed  = (SP DIGIT) / 2DIGIT
                    ; 固定格式的日期天数

date-month      = "Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun" /
                  "Jul" / "Aug" / "Sep" / "Oct" / "Nov" / "Dec"

date-text       = date-day "-" date-month "-" date-year

date-year       = 4DIGIT

date-time       = DQUOTE date-day-fixed "-" date-month "-" date-year
                  SP time SP zone DQUOTE

delete          = "DELETE" SP mailbox
                    ; 使用 INBOX 会返回 NO 错误

digit-nz        = %x31-39
                    ; 1-9

envelope        = "(" env-date SP env-subject SP env-from SP
                  env-sender SP env-reply-to SP env-to SP env-cc SP
                  env-bcc SP env-in-reply-to SP env-message-id ")"

env-bcc         = "(" 1*address ")" / nil

env-cc          = "(" 1*address ")" / nil

env-date        = nstring

env-from        = "(" 1*address ")" / nil

env-in-reply-to = nstring

env-message-id  = nstring

env-reply-to    = "(" 1*address ")" / nil

env-sender      = "(" 1*address ")" / nil

env-subject     = nstring

env-to          = "(" 1*address ")" / nil

examine         = "EXAMINE" SP mailbox

fetch           = "FETCH" SP sequence-set SP ("ALL" / "FULL" / "FAST" /
                  fetch-att / "(" fetch-att *(SP fetch-att) ")")

fetch-att       = "ENVELOPE" / "FLAGS" / "INTERNALDATE" /
                  "RFC822" [".HEADER" / ".SIZE" / ".TEXT"] /
                  "BODY" ["STRUCTURE"] / "UID" /
                  "BODY" section ["<" number "." nz-number ">"] /
                  "BODY.PEEK" section ["<" number "." nz-number ">"]






Crispin                     标准轨迹                    [第87页]


RFC 3501                         IMAPv4                       2003年3月


flag            = "\Answered" / "\Flagged" / "\Deleted" /
                  "\Seen" / "\Draft" / flag-keyword / flag-extension
                    ; 不包括 "\Recent"

flag-extension  = "\" atom
                    ; 未来扩展。客户端实现必须接受 flag-extension 标志。服务器实现不得生成除未来标准或标准修订版本中定义的 flag-extension 之外的标志。

flag-fetch      = flag / "\Recent"

flag-keyword    = atom

flag-list       = "(" [flag *(SP flag)] ")"

flag-perm       = flag / "\*"

greeting        = "*" SP (resp-cond-auth / resp-cond-bye) CRLF

header-fld-name = astring

header-list     = "(" header-fld-name *(SP header-fld-name) ")"

list            = "LIST" SP mailbox SP list-mailbox

list-mailbox    = 1*list-char / string

list-char       = ATOM-CHAR / list-wildcards / resp-specials

list-wildcards  = "%" / "*"

literal         = "{" number "}" CRLF *CHAR8
                    ; 数字表示 CHAR8 的数量

login           = "LOGIN" SP userid SP password

lsub            = "LSUB" SP mailbox SP list-mailbox











Crispin                     标准轨迹                    [第86页]


RFC 3501                         IMAPv4                       2003年3月


mailbox         = "INBOX" / astring
                    ; INBOX 不区分大小写。所有变体（如 "iNbOx"）都必须被解释为 INBOX
                    ; 不是 astring。由大小写不敏感的字符序列 "I" "N" "B" "O" "X" 组成的 astring
                    ; 被视为 INBOX 而非 astring。
                    ; 详见第5.1节，关于邮箱名称的语义细节。

mailbox-data    =  "FLAGS" SP flag-list / "LIST" SP mailbox-list /
                   "LSUB" SP mailbox-list / "SEARCH" *(SP nz-number) /
                   "STATUS" SP mailbox SP "(" [status-att-list] ")" /
                   number SP "EXISTS" / number SP "RECENT"

mailbox-list    = "(" [mbx-list-flags] ")" SP
                   (DQUOTE QUOTED-CHAR DQUOTE / nil) SP mailbox

mbx-list-flags  = *(mbx-list-oflag SP) mbx-list-sflag
                  *(SP mbx-list-oflag) /
                  mbx-list-oflag *(SP mbx-list-oflag)

mbx-list-oflag  = "\Noinferiors" / flag-extension
                    ; 其他标志；在 LIST 响应中可能出现多个

mbx-list-sflag  = "\Noselect" / "\Marked" / "\Unmarked"
                    ; 选择性标志；每个 LIST 响应中最多一个

media-basic     = ((DQUOTE ("APPLICATION" / "AUDIO" / "IMAGE" /
                  "MESSAGE" / "VIDEO") DQUOTE) / string) SP
                  media-subtype
                    ; 定义见 [MIME-IMT]

media-message   = DQUOTE "MESSAGE" DQUOTE SP DQUOTE "RFC822" DQUOTE
                    ; 定义见 [MIME-IMT]

media-subtype   = string
                    ; 定义见 [MIME-IMT]

media-text      = DQUOTE "TEXT" DQUOTE SP media-subtype
                    ; 定义见 [MIME-IMT]

message-data    = nz-number SP ("EXPUNGE" / ("FETCH" SP msg-att))

msg-att         = "(" (msg-att-dynamic / msg-att-static)
                   *(SP (msg-att-dynamic / msg-att-static)) ")"

msg-att-dynamic = "FLAGS" SP "(" [flag-fetch *(SP flag-fetch)] ")"
                    ; 可能会变动的消息属性



Crispin                     标准轨迹                    [第87页]


RFC 3501                         IMAPv4                       2003年3月


msg-att-static  = "ENVELOPE" SP envelope / "INTERNALDATE" SP date-time /
                  "RFC822" [".HEADER" / ".SIZE" / ".TEXT"] SP nstring /
                  "RFC822.SIZE" SP number /
                  "BODY" ["STRUCTURE"] SP body /
                  "BODY" section ["<" number ">"] SP nstring /
                  "UID" SP uniqueid
                    ; 对消息不得更改

nil             = "NIL"

nstring         = string / nil

number          = 1*DIGIT
                    ; 无符号 32 位整数
                    ; (0 <= n < 4,294,967,296)

nz-number       = digit-nz *DIGIT
                    ; 非零无符号 32 位整数
                    ; (0 < n < 4,294,967,296)

password        = astring

quoted          = DQUOTE *QUOTED-CHAR DQUOTE

QUOTED-CHAR     = <除引号特殊字符外的任何 TEXT-CHAR> /
                  "\" 引号特殊字符

quoted-specials = DQUOTE / "\""

rename          = "RENAME" SP mailbox SP mailbox
                    ; 使用 INBOX 作为目标会返回 NO 错误

response        = *(continue-req / response-data) response-done

response-data   = "*" SP (resp-cond-state / resp-cond-bye /
                  mailbox-data / message-data / capability-data) CRLF

response-done   = response-tagged / response-fatal

response-fatal  = "*" SP resp-cond-bye CRLF
                    ; 服务器立即关闭连接

response-tagged = tag SP resp-cond-state CRLF

resp-cond-auth  = ("OK" / "PREAUTH") SP resp-text
                    ; 认证状态条件

resp-cond-bye   = "BYE" SP resp-text

resp-cond-state = ("OK" / "NO" / "BAD") SP resp-text
                    ; 状态条件

resp-specials   = "]"

resp-text       = ["[" resp-text-code "]" SP] text

resp-text-code  = "ALERT" /
                  "BADCHARSET" [SP "(" astring *(SP astring) ")" ] /
                  capability-data / "PARSE" /
                  "PERMANENTFLAGS" SP "("
                  [flag-perm *(SP flag-perm)] ")" /
                  "READ-ONLY" / "READ-WRITE" / "TRYCREATE" /
                  "UIDNEXT" SP nz-number / "UIDVALIDITY" SP nz-number /
                  "UNSEEN" SP nz-number /
                  atom [SP 1*<除 "]" 之外的 TEXT-CHAR>]

search          = "SEARCH" [SP "CHARSET" SP astring] 1*(SP search-key)
                    ; CHARSET 参数必须注册到 IANA
```

搜索关键词 = "全部" / "已答复" / "密件抄送" SP 字符串 / 
                "之前" SP 日期 / "正文" SP 字符串 / 
                "抄送" SP 字符串 / "已删除" / "已标记" / 
                "发件人" SP 字符串 / "关键词" SP 关键词标志 / 
                "新邮件" / "旧邮件" / "在" SP 日期 / "最近" / "已读" / 
                "自" SP 日期 / "主题" SP 字符串 / 
                "文本" SP 字符串 / "收件人" SP 字符串 / 
                "未答复" / "未删除" / "未标记" / 
                "未关键词" SP 关键词标志 / "未读" / 
                ; 以上内容在 [IMAP2] 中
                "草稿" / "头部" SP 头部字段名 SP 字符串 / 
                "更大" SP 数字 / "非" SP 搜索关键词 / 
                "或" SP 搜索关键词 SP 搜索关键词 / 
                "之前已发" SP 日期 / "在" SP 日期 / 
                "自" SP 日期 / "更小" SP 数字 / 
                "UID" SP 序列集 / "非草稿" / 序列集 / 
                "(" 搜索关键词 *(SP 搜索关键词) ")"

章节          = "[" [章节规格] "]"

章节正文      = "头部" / "头部字段" [".非"] SP 头部列表 / 
                "文本"
                ; 顶层或 MESSAGE/RFC822 部分

章节部分      = nz-数字 *("." nz-数字)
                ; 正文部分嵌套

章节规格      = 章节正文 / (章节部分 ["." 章节文本])

章节文本      = 章节正文 / "MIME"
                ; 除正文内容外的文本（头部等）

选择          = "选择" SP 邮箱

序列号        = nz-数字 / "*"
                ; 消息序列号（COPY、FETCH、STORE 命令）或唯一标识符（UID COPY、UID FETCH、UID STORE）
                ; "*" 表示最大使用编号。在非空邮箱中，它是邮件总数。
                ; 在唯一标识符的情况下，它是邮箱中最后一条消息的 UID，或如果邮箱为空，则是当前的 UIDNEXT 值。
                ; 服务器应对使用超出邮箱中消息数的消息序列号的命令返回带标签的 BAD 响应。包括空邮箱时的 "*"。

范围序列  = 序列号 ":" 序列号
                ; 两个序列号值及其之间的所有值，不论顺序。
                ; 例如：2:4 和 4:2 等价，表示值 2、3、4。
                ; 例如：3291:* 表示邮箱中最后一条消息的 UID，即使该值小于 3291。

序列集      = (序列号 / 范围序列) *( "," 序列集 )
                ; 一组序列号值，不论顺序。
                ; 服务器可以合并重叠部分或以任意顺序执行。
                ; 例如：邮箱中有15条消息，序列集 2,4:7,9,12:* 等价于 2,4,5,6,7,9,12,13,14,15
                ; 例如：邮箱中有10条消息，序列集 *:4,5:7 等价于 10,9,8,7,6,5,4,5,6,7，可以重叠合并为 4,5,6,7,8,9,10。

状态        = "状态" SP 邮箱 SP "(" 状态属性 *(SP 状态属性) ")"

状态属性    = "消息数" / "最近" / "下一个UID" / "UID有效性" / "未读"

状态属性列表= 状态属性 SP 数字 *(SP 状态属性 SP 数字)

存储        = "存储" SP 序列集 SP 存储标志

存储标志    = (["+" / "-"] "标志" [".静默"]) SP
                (标志列表 / (标志 *(SP 标志)))

字符串      = 引号 / 字面值

订阅        = "订阅" SP 邮箱

标签        = 1*<任何非 "+" 的 ASTRING-CHAR 字符>

文本        = 1*TEXT-CHAR

TEXT-CHAR   = <任何 CHAR，除 CR 和 LF 之外>

时间        = 2DIGIT ":" 2DIGIT ":" 2DIGIT
                ; 时：分：秒

UID         = "UID" SP (复制 / 获取 / 搜索 / 存储)
                ; 用于替代消息序列号的唯一标识符

唯一ID      = nz-数字
                ; 严格递增

取消订阅    = "取消订阅" SP 邮箱

用户ID      = astring

X命令       = "X" 原子 <实验性命令参数>

时区        = ("+" / "-") 4DIGIT
                ; 表示东偏的小时分钟偏差（hhmm），为带符号的四位数，代表比格林威治时间早或晚的小时分钟数。用此值减去时间即得UTC时间。
                ; 格林威治时间为 "+0000"。

作者注：
   本文档是对早期文档的修订或重写，取代了其中的协议规范：RFC 2060、RFC 1730、未发表的 IMAP2bis.TXT、RFC 1176 和 RFC 1064。

安全注意事项：
   IMAP4rev1 协议事务，包括电子邮件数据，除非协商保护，否则会以明文形式在网络上传输。可以通过使用 STARTTLS、在 AUTHENTICATE 命令中协商隐私保护或其他机制实现保护。

11.1. STARTTLS 安全注意事项：
   本文档中对 STARTTLS 命令和 LOGINDISABLED 能力的定义，取代了 [IMAP-TLS] 中的定义。 [IMAP-TLS] 仍为 PLAIN [SASL] 认证器的规范依据。
   IMAP 客户端和服务器必须实现 TLS_RSA_WITH_RC4_128_MD5 [TLS] 密码套件，建议实现 TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA [TLS] 密码套件，以确保兼容性。其他密码套件为可选。
   在 TLS 协商过程中，客户端必须验证服务器主机名与证书中的身份信息是否匹配，以防中间人攻击。匹配失败时，应请求用户确认或终止连接。
   匹配规则包括：
   - 使用连接时的服务器主机名与证书中的名称比较，不得使用不安全的远程源（如 DNS 查询）派生的名称。
   - 若证书中有 subjectAltName 类型为 dNSName 的扩展，应优先使用。
   - 匹配不区分大小写。
   - 证书中可用通配符（如 *.example.com）匹配相应的子域名。
   - 多个名称时，只要匹配其中之一即接受。
   客户端和服务器必须检查 STARTTLS 和 TLS 协商的结果，确保达到预期的认证或隐私保护。

11.2. 其他安全考虑：
   - 认证失败的错误信息不应详细说明凭据无效原因。
   - 使用 LOGIN 命令会明文传输密码，应优先使用支持非明文密码的 SASL 机制，或通过 STARTTLS 保护。
   - 服务器应配置，确保在认证时：
     (1) 已协商 STARTTLS
     或
     (2) 提供其他保护机制
     或
     (3) 采取措施：
        (a) 广告 LOGINDISABLED 能力，且不在能力列表中公布明文密码的 SASL 机制（如 PLAIN）
        (b) 即使密码正确，LOGIN 返回错误
        (c) 任何使用明文密码的 SASL 机制的 AUTHENTICATE 命令返回错误
   - 认证失败时，错误信息不应指明用户名无效。
   - 服务器应限制或延迟连续的认证尝试。

其他安全细节在 AUTHENTICATE 和 LOGIN 命令的章节中有进一步讨论。

12. IANA 事项：
   IMAP4 能力由发布标准追踪或 IESG 批准的实验性 RFC 注册。注册表位于：
        http://www.iana.org/assignments/imap4-capabilities
   由于本规范修订了之前定义的 STARTTLS 和 LOGINDISABLED 扩展，注册表将相应更新。

附录：
A. 规范性参考文献
   这些文档包含理解本文所必需的定义或规范：
   [ABNF] - Crocker 和 Overell, "增强型 BNF 语法规范：ABNF", RFC 2234, 1997年11月
   [ANONYMOUS] - Newman, "匿名 SASL 机制", RFC 2245, 1997年11月
   [CHARSET] - Freed 和 Postel, "IANA 字符集注册程序", RFC 2978, 2000年10月
   [DIGEST-MD5] - Leach 和 Newman, "使用 Digest 认证作为 SASL 机制", RFC 2831, 2000年5月
   [DISPOSITION] - Troost 等, "互联网消息中的表现信息：内容处置头", RFC 2183, 1997年8月
   [IMAP-TLS] - Newman, "在 IMAP、POP3 和 ACAP 中使用 TLS", RFC 2595, 1999年6月
   [KEYWORDS] - Bradner, "RFC 中的关键词，用于指示需求级别", RFC 2119, 1997年3月
   [LANGUAGE-TAGS] - Alvestrand, "语言识别标签", RFC 3066, 2001年1月
   [LOCATION] - Palme 等, "MIME 封装的聚合文档（如 HTML）", RFC 2557, 1999年3月
   [MD5] - Myers 和 Rose, "Content-MD5 头字段", RFC 1864, 1995年10月
   [MIME-HDRS] - Moore, "MIME 第三部分：非 ASCII 文本的消息头扩展", RFC 2047, 1996年11月
   [MIME-IMB] - Freed 和 Borenstein, "MIME 第一点：互联网消息体格式", RFC 2045, 1996年11月
   [MIME-IMT] - Freed 和 Borenstein, "MIME 第二部分：媒体类型", RFC 2046, 1996年11月
   [RFC-2822] - Resnick, "互联网消息格式", RFC 2822, 2001年4月
   [SASL] - Myers, "简单认证和安全层（SASL）", RFC 2222, 1997年10月
   [TLS] - Dierks 和 Allen, "TLS 协议第1.0版", RFC 2246, 1999年1月
   [UTF-7] - Goldsmith 和 Davis, "UTF-7：Unicode的邮件安全转换格式", RFC 2152, 1997年5月

   其他文档描述了实现本协议时应考虑的质量问题：
   [IMAP-IMPLEMENTATION] - Leiba, "IMAP 实现建议", RFC 2683, 1999年9月
   [IMAP-MULTIACCESS] - Gahrns, "IMAP4 多访问邮箱实践", RFC 2180, 1997年7月

A.1. 说明性参考文献
   这些文档描述相关协议：
   [IMAP-DISC] - Austein, "断开连接的 IMAP4 客户端同步操作"
   [IMAP-MODEL] - Crispin, "IMAP4 中的分布式电子邮件模型"
   [ACAP] - Newman 和 Myers, "应用配置访问协议", RFC 2244, 1997年11月
   [SMTP] - Klensin, "简单邮件传输协议", RFC 2821, 2001年4月

   以及历史或描述本协议历史方面的文档：
   [IMAP-COMPAT] - Crispin, "IMAP4 与 IMAP2bis 的兼容性", RFC 2061, 1996年12月
   [IMAP-HISTORICAL] - Crispin, "IMAP4 与 IMAP2 和 IMAP2bis 的兼容性", RFC 1732, 1994年12月
   [IMAP-OBSOLETE] - Crispin, "互联网消息访问协议 - 过时语法", RFC 2062, 1996年12月
   [IMAP2] - Crispin, "交互式邮件访问协议第2版", RFC 1176, 1990年8月
   [RFC-822] - Crocker, "ARPA互联网文本消息格式标准", RFC 822, 1982年8月
   [RFC-821] - Postel, "简单邮件传输协议", RFC 821, 1982年8月

B. 与 RFC 2060 的变更：
   1) 澄清唯一标识符及其语义。
   2) 修正 SELECT 描述，明确 UIDVALIDITY 在 SELECT 和 EXAMINE 响应中为必需。
   3) 添加搜索失败的示例。
   4) 更正存储标志："#flag" 改为 "1#flag"。
   5) 使搜索和章节规则更清晰。
   6) 修正存储示例。
   7) 更正 "BASE645" 拼写错误。
   8) 移除两个部分（正文和 BASE64 附件）消息示例中的多余括号。
   9) 移除已过时的 "MAILBOX" 响应。
   10) 移除 mailbox-data 规则中的多余 "<"。
   11) 在 continue-req 中添加 CRLF。
   12) 明确排除 resp-text-code 中 atom 的 "]"。
   13) 澄清客户端和服务器应严格遵守协议语法。

请在第5.2节中强调，EXISTS命令不能用于缩减邮箱的大小。

添加NEWNAME到resp-text-code中。

澄清在使用LIST命令时，参数应为空字符串，而不是NIL。

说明如果邮箱命名空间是扁平结构，则空字符串邮箱名参数可以返回NIL作为层级分隔符。

澄清addr-mailbox和addr-name字段已移除RFC-2822中的引号。

更新UTF-7的相关引用。

修正6.3.11节中的示例。

说明不存在的UID会被忽略。

更新DISPOSITION的相关引用。

扩展状态图。

澄清部分获取（partial fetch）响应仅在对应的部分获取命令中返回。

添加UIDNEXT响应码。修正UIDVALIDITY定义的引用。

进一步说明“can”与“MAY”的区别。

引用RFC-2119。

澄清在修改过的UTF-7中不允许多余的移位（shifts）。

澄清修改过的UTF-7中不存在隐式移位。

在邮箱名中，“INBOX”始终表示INBOX，即使它以字符串形式出现。

在media-basic语法规则中添加缺失的左括号。

修正邮箱数据中的属性语法。

在EXAMINE响应中添加UIDNEXT。

在SELECT和EXAMINE响应中澄清UNSEEN、PERMANENTFLAGS、UIDVALIDITY和UIDNEXT的作用。它们现在是必需的，但在旧版本中不是。

用RFC编号更新相关引用。

清空text-mime2。

澄清修改过的UTF-7名称必须区分大小写，避免违反此约定。

修正UID FETCH的示例。

澄清UID FETCH、UID STORE和UID SEARCH与未标记的EXPUNGE响应的关系。

澄清“convention”一词的用法。

说明命令在完全接收之前不算“进行中”，特别是在命令续传协商期间。

澄清信封（envelope）的默认处理。

澄清SP代表唯一的一个空格字符。

禁止LIST响应中的无意义状态。

说明消息的ENVELOPE、INTERNALDATE、RFC822*、BODY*和UID是静态的。

添加BADCHARSET响应码。

用[ABNF]规范更新正式语法。

澄清CREATE语义中的尾随层级分隔符。

说明“空行”是指[RFC-2822]中的分隔空行。

澄清RENAME命令也应在完成前创建必要的层级结构。

修正body-ext-mpart在存在disposition时不需要指定语言。

澄清RFC822.HEADER响应。

修正搜索中charset参数后缺失的空格。

修正resp-text-code中BADCHARSET的引号缺失。

说明ALL、FAST和FULL选项排除其他数据项。

澄清LIST中引用参数的语义。

说明SEARCH HEADER X-FOO中的空字符串表示任何具有X-FOO字段名的消息，无论其内容。

特别保留8位邮箱名作为未来UTF-8的用途。

客户端存储未在PERMANENTFLAGS列表中的标志不是错误，但服务器会忽略或仅在会话中更改。

修正/澄清关于多余移位的描述。

修正“Changes”部分的排版错误。

澄清STATUS不能用于检查新消息。

澄清LSUB命令在使用“%”通配符时的行为。

将第7.5节中的AUTHORIZATION改为AUTHENTICATE。

澄清多部分正文类型的描述。

说明STORE FLAGS命令不影响\Recent标志。

将时区描述中的“west”改为“east”。

澄清破坏命令流水线的命令必须等待完成结果响应。

澄清EXAMINE不会影响\Recent标志。

确保MIME结构描述的一致性。

澄清日期搜索忽略INTERNALDATE或Date:头中的时间和时区信息。即“ON 13-APR-2000”指的是内部日期以“13-APR-2000”开头的消息，即使时差会导致日期变为前一天或后一天。

澄清头部获取不会在没有的情况下添加空行。

在UID讨论中说明消息是不可变的。

添加CHARSET搜索的示例。

在搜索中说明关键词是标志（flag）的一种。

强调SELECT数据响应的强制性。

在初始的OK或PREAUTH响应中添加可选的CAPABILITY响应码。

说明服务器可以在对AUTHENTICATE和LOGIN的响应中发送未标记的CAPABILITY命令。

不再认为在连接中多次发出CAPABILITY命令是不必要的。

澄清未标记的EXPUNGE会减少邮箱中的消息数。

修正“body”的定义（连接符优先级高于选择符）。

新增“实现者特别注意”部分，引用[IMAP-IMPLEMENTATION]。

澄清未标记的CAPABILITY响应应仅在未协商安全层时对AUTHENTICATE命令响应。

将原子（atom）的定义中排除“]”，并将astring中包括“]”以兼容过去的实现，删除resp-text-atom。

删除NEWNAME，因为邮箱名可以是字面量且包含“]”，功能可通过引用实现。

调整修改过的UTF-7的理由，使段落逻辑更清晰。

用MUST保证UID的唯一性。

说明客户端应持续读取响应数据直到连接关闭，而不是在收到BYE后立即关闭。

将RFC-822的引用改为RFC-2822。

说明应遵循RFC-2822而非RFC-822。

建议在LOGIN和AUTHENTICATE中使用CAPABILITY响应码，代替可选的自动能力（automatic capabilities），以增强互操作性。

实现STARTTLS和AUTH=PLAIN是强制的，建议其他[SASL]机制。

澄清“连接”状态的四个可能状态。

说明失败或被拒绝的命令不会改变状态。

将规范性和非规范性引用区分开。

在安全部分讨论认证失败的问题。

说明数据项不一定只有一种数据类型。

说明序列范围与顺序无关。

示例中修正超级移位（superfluous shifts）不能仅通过省略移位符修复的说明，整个字符串都必须重新计算。

由于[RFC-2822]使用“envelope”指代SMTP信封而非RFC-2822头部中的信封数据，已修改Envelope结构的定义。

详细阐述RFC822.HEADER响应数据与BODY[HEADER]的区别。

澄清退出（Logout）状态的语义，修改ASCII艺术图。

遵守IESG的安全要求。

添加正文URI的定义。

将序列范围定义拆分为三条规则，并为每条提供重写的描述。

将STARTTLS和LOGINDISABLED从[IMAP-TLS]中移到此处。

添加IANA考虑事项部分。

澄清新消息UID与UIDNEXT的客户端假设。

说明对permanentflags的更改会影响当前会话和后续会话。

说明通过CLOSE命令可以进入已认证状态。

强调SELECT和EXAMINE是“命令失败不改变状态”规则的例外。

说明新追加的消息会设置Recent标志。

说明新复制的消息应设置Recent标志。

所有UID命令的响应中都应返回UID。

【关键词索引部分省略，内容与前文一致】

自 <date>（搜索键） ..................................   52
较小的 <n>（搜索键） ...................................   52
STARTTLS（命令） .........................................   27
状态（命令） ...........................................   44
状态（响应） ..........................................   70
存储（命令） ............................................   58
主题 <字符串>（搜索键） ..............................   53
订阅（命令） ...........................................   38
会话标志（标志类别） ..................................   12
系统标志（标志类型） ..................................   11
文本（部分说明符） ......................................   56
文本 <字符串>（搜索键） .................................   53
收件人 <字符串>（搜索键） ...............................   53
尝试创建（响应码） ......................................   65
唯一标识符（UID）（命令） ...............................   60
UID（抓取项） ...........................................   58
UID（抓取结果） .........................................   79
UID <序列集>（搜索键） ..................................   53
UID下一（响应码） .......................................   65
UID下一（状态项） .......................................   45
UID有效性（响应码） .....................................   65
UID有效性（状态项） .....................................   45
未答复（搜索键） .......................................   53
未删除（搜索键） .......................................   53
未草稿（搜索键） .......................................   53
未标记（搜索键） .......................................   53
未关键字 <标志>（搜索键） ...............................   53
未见（响应码） .........................................   65
未见（搜索键） .........................................   53
未见（状态项） .........................................   45
取消订阅（命令） .......................................   39
唯一标识符（UID）（消息属性） ..........................    8
X<原子>（命令） .........................................   62
[RFC-2822] 大小（消息属性） ............................   12
\已答复（系统标志） ....................................   11
\已删除（系统标志） ....................................   11
\草稿（系统标志） ......................................   11
\已标记（系统标志） ....................................   11
\已标记（邮箱名称属性） .................................   69
\无下级（邮箱名称属性） ................................   69
\不选择（邮箱名称属性） ................................   69
\最新（系统标志） .......................................   11
\已阅（系统标志） .......................................   11
\未标记（邮箱名称属性） ................................   69

Crispin                     标准追踪                   [第106页]

RFC 3501                         IMAPv4                       2003年3月

作者联系方式

马克·R·克里斯平
网络与分布式计算
华盛顿大学
4545 15th Avenue NE
西雅图，WA  98105-4527

电话： (206) 543-5762

电子邮件： MRC@CAC.Washington.EDU

全文版权声明

版权所有 (C) 互联网协会（2003年）。保留所有权利。

本文件及其翻译版本可以被复制和提供给他人，也可以准备、复制、出版和分发其评论、说明或协助实现的衍生作品，全部或部分，且不受任何限制，前提是所有此类副本和衍生作品都必须包含上述版权声明和本段内容。然而，本文件本身不得以任何方式修改，例如删除版权声明或提及互联网协会或其他互联网组织，除非为制定互联网标准的目的所需，且必须遵循互联网标准流程中的版权规定，或为将其翻译成非英语语言所必需。

上述授予的有限权限是永久性的，不会被互联网协会或其继任者或受让人撤销。 本文件及其中包含的信息是“按原样”提供的，互联网协会和互联网工程任务组（IETF）不对其作任何明示或暗示的保证，包括但不限于使用本文件中的信息不会侵犯任何权利或对适销性或特定用途的适用性作出任何保证。

致谢

RFC编辑职能的资金目前由互联网协会提供。

Crispin                     标准追踪                   [第108页]
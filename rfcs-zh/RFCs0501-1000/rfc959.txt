# RFC 959 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs0501-1000/rfc959.txt

网络工作组                                          J. Postel
意见征求稿：959                                    J. Reynolds
                                                                     ISI
废止RFC：765（IEN 149）                                1985年10月

                      文件传输协议（FTP）


关于本备忘录的状态

   本备忘录是文件传输协议（FTP）的正式规范。  本备忘录的分发不受限制。

   本版本规范中包含以下新的可选命令：

      CDUP（切换到父目录）、SMNT（结构挂载）、STOU（存储唯一文件）、RMD（删除目录）、MKD（创建目录）、PWD（打印当前目录）和 SYST（系统类型）。

   注意，本规范与之前的版本兼容。

1.  引言

   FTP的目标是：1）促进文件（计算机程序和/或数据）的共享；2）鼓励间接或隐式（通过程序）使用远程计算机；3）保护用户免受主机之间文件存储系统差异的影响；4）可靠且高效地传输数据。虽然FTP可以由终端用户直接使用，但其设计主要面向程序使用。

   本规范旨在通过一种简单且易于实现的协议设计，满足大主机、小主机、个人工作站和TAC用户的多样化需求。

   本文假设读者已了解传输控制协议（TCP）[2]和Telnet协议[3]。这些文档包含在ARPA-Internet协议手册[1]中。

2.  概述

   本节将讨论FTP的历史、术语以及模型。本节定义的术语仅包括在FTP中具有特殊意义的那些。部分术语与FTP模型密切相关；在查阅术语时，部分读者可能希望同时参考FTP模型部分。







Postel & Reynolds                                               [第1页]



                                                                        
RFC 959                                                     1985年10月
文件传输协议


   2.1.  历史

      FTP经过多年的发展演变。附录III是关于FTP的请求评论（Request for Comments）文件的时间顺序汇编。这些文件包括1971年首次提出的文件传输机制，旨在在麻省理工学院（MIT）主机上实现（RFC 114），以及RFC 141中的评论和讨论。

      RFC 172提出了面向用户的主机间文件传输协议（包括终端IMP）。此协议的修订版为RFC 265，重新阐述了FTP以供进一步审查，而RFC 281则建议进行更多改动。1982年1月，RFC 294提出了“设置数据类型”事务的使用建议。

RFC 354 取代了 RFC 264 和 265。文件传输协议（FTP）现在被定义为在 ARPANET 上主机之间进行文件传输的协议，其主要功能是高效且可靠地在主机之间传输文件，并方便地使用远程文件存储功能。RFC 385 进一步评论了协议中的错误、重点内容和补充内容，而 RFC 414 提供了关于工作服务器和用户 FTP 的状态报告。1973 年发布的 RFC 430（以及其他众多 RFC）对 FTP 进行了进一步的评论。最终，一份“官方”的 FTP 文档作为 RFC 454 被发布。

到 1973 年 7 月，FTP 的最新版本相比之前的版本发生了相当大的变化，但其基本结构保持不变。RFC 542 作为新的“官方”规范发布，以反映这些变化。然而，许多基于旧规范的实现并未更新。

1974 年，RFC 607 和 614 继续对 FTP 进行评论。RFC 624 提出了进一步的设计变更和一些细微的修改。1975 年，RFC 686 标题为“Leaving Well Enough Alone”，讨论了所有早期和后续版本的 FTP 之间的差异。RFC 691 对 RFC 686 进行了小幅修订，涉及打印文件的主题。

受到从 NCP 过渡到 TCP 作为底层协议的推动，上述所有努力的成果在 RFC 765 中孕育出一个“凤凰”，成为用于 TCP 的 FTP 规范。

本版 FTP 规范旨在纠正一些细微的文档错误，改进对某些协议特性的解释，并添加一些新的可选命令。

特别地，本版本规范包括以下新的可选命令：

- CDUP - 切换到父目录
- SMNT - 结构挂载
- STOU - 存储唯一文件
- RMD - 删除目录
- MKD - 创建目录
- PWD - 打印当前目录
- SYST - 系统类型

本规范与之前的版本兼容。按照之前规范实现的程序应能自动符合本规范。

2.2 术语

ASCII

ASCII 字符集定义见 ARPA-Internet 协议手册。在 FTP 中，ASCII 字符被定义为八位码集的低半部分（即最高有效位为零）。

访问控制

访问控制定义了用户对系统的使用权限以及对系统中文件的访问权限。访问控制是防止未授权或意外使用文件的必要措施。由服务器的FTP进程负责调用访问控制。

字节大小

在FTP中，有两种字节大小值得关注：文件的逻辑字节大小，以及用于数据传输的传输字节大小。传输字节大小始终为8位。传输字节大小不一定是存储在系统中的数据字节大小，也不一定是用于解释数据结构的逻辑字节大小。

控制连接

用户端（USER-PI）与服务器端（SERVER-PI）之间用于交换命令和应答的通信路径。此连接遵循Telnet协议。

数据连接

一种全双工连接，用于在特定模式和类型下传输数据。传输的数据可以是文件的一部分、整个文件或多个文件。路径可以是在服务器数据传输进程（DTP）与用户数据传输进程（DTP）之间，或在两个服务器DTP之间。

数据端口

被动数据传输过程中，“监听”数据端口以等待主动传输进程的连接，从而建立数据连接。

DTP（数据传输进程）

负责建立和管理数据连接的进程。DTP可以是被动的，也可以是主动的。

行结束符（End-of-Line）

定义打印行分隔的序列。该序列为回车符（Carriage Return）后跟换行符（Line Feed）。

文件结束符（EOF）

定义正在传输的文件的结束条件。

记录结束符（EOR）

定义正在传输的记录的结束条件。

错误恢复

一种允许用户从某些错误中恢复的程序，例如主机系统或传输进程的失败。在FTP中，错误恢复可能涉及在特定检查点重新开始文件传输。

FTP命令

由一组命令组成，构成用户FTP到服务器FTP进程之间的控制信息流。

文件

有序的计算机数据集（包括程序），长度任意，由路径名唯一标识。

模式

     指定通过数据连接进行数据传输的方式。该模式定义了传输过程中的数据格式，包括EOR（行结束符）和EOF（文件结束符）。FTP中定义的传输模式在“传输模式”部分有详细描述。

NVT

     网络虚拟终端（Network Virtual Terminal），定义在Telnet协议中。

NVFS

     网络虚拟文件系统（Network Virtual File System）。一种定义标准网络文件系统的概念，具有标准命令和路径名约定。

页

     文件可以被结构化为一组独立的部分，称为“页”。FTP支持以索引页的形式传输不连续的文件。

路径名

     路径名被定义为用户输入到文件系统中的字符字符串，用于标识一个文件。路径名通常包含设备名和/或目录名，以及文件名规范。FTP尚未制定统一的路径名标准，每个用户必须遵循所涉及文件系统的命名约定。

PI

     协议解释器（Protocol Interpreter）。协议的用户端和服务器端具有不同的角色，分别由用户PI和服务器PI实现。

Postel & Reynolds                                               [第5页]

RFC 959                                                     1985年10月
文件传输协议

记录

     一个顺序文件可以被结构化为多个连续的部分，称为“记录”。FTP支持记录结构，但文件不一定必须具有记录结构。

应答

     由服务器通过控制连接向用户发出的确认（正面或负面）响应，用于响应FTP命令。应答的一般格式是一个完成码（包括错误码）后跟一段文本字符串。码用于程序识别，文本通常供人类用户阅读。

服务器数据传输进程（server-DTP）

     在正常的“主动”状态下，数据传输进程与“监听”数据端口建立数据连接。它设置传输和存储参数，并根据PI的命令传输数据。DTP也可以处于“被动”状态，监听数据端口等待连接，而不是主动发起连接。

服务器FTP进程

一个执行文件传输功能的进程或一组进程，它们与用户的FTP进程以及可能的另一台服务器协作。其功能包括协议解释器（PI）和数据传输进程（DTP）。

服务器协议解释器（server-PI）

服务器协议解释器在端口L上“监听”来自用户协议解释器（user-PI）的连接，并建立控制通信连接。它接收来自用户PI的标准FTP命令，发送应答，并管理服务器DTP。

类型（type）

用于数据传输和存储的数据表示类型。类型意味着在数据存储和数据传输之间进行某些转换。FTP中定义的表示类型在“建立数据连接”部分有详细描述。

用户（user）

希望获得文件传输服务的个人或代表个人的进程。人类用户可以直接与服务器FTP进程交互，但更推荐使用用户FTP进程，因为协议设计更偏向自动化。

用户数据传输进程（user-DTP）

在数据端口上“监听”来自服务器FTP进程的连接的数据传输进程。如果两个服务器之间进行数据传输，用户DTP处于非活动状态。

用户FTP进程（user-FTP process）

一组功能，包括协议解释器、数据传输进程和用户界面，共同实现与一个或多个服务器FTP进程合作的文件传输功能。用户界面允许在与用户的命令-应答对话中使用本地语言。

用户协议解释器（user-PI）

用户协议解释器从其端口U发起控制连接到服务器FTP进程，发起FTP命令，并在文件传输中管理用户DTP（如果该进程参与传输的话）。

---

2.3. FTP模型

考虑到上述定义，可以用图1所示的模型对FTP服务进行示意。

以下是英文内容的中文翻译：

```
                                            -------------
                                            |/---------\|
                                            ||   用户  ||    --------
                                            ||  界面  ||<--->| 用户 |
                                            |\----^----/|    --------
                  ----------                |     |     |
                  |/------\|  FTP命令     |/----V----\|
                  ||  服务器 |<--------------->|  用户  ||
                  ||  PI   ||   FTP应答     ||   PI   ||
                  |\--^---/|                |\----^----/|
                  |   |    |                |     |     |
      --------    |/--V---\|      数据      |/----V----\|    --------
      | 文件 |<--->|  服务器 |<--------------->|  用户  |<--->| 文件 |
      | 系统 |    ||  DTP   ||   连接        ||   DTP  ||    | 系统 |
      --------    |\-------/|                |\--------/|    --------
                  ----------                -------------

                  服务器-FTP                   用户-FTP

      备注：1. 数据连接可以双向使用。
            2. 数据连接不必始终存在。

                      图1  FTP使用模型

      在图1所描述的模型中，用户协议解释器（user-protocol interpreter）启动控制连接。控制连接遵循Telnet协议。在用户发起时，用户-PI会生成标准的FTP命令，并通过控制连接传送给服务器进程。（用户也可以直接与服务器-FTP建立控制连接，例如通过TAC终端，独立生成标准FTP命令，绕过用户-FTP进程。）服务器-PI会将标准应答通过控制连接返回给用户-PI，以响应命令。

      FTP命令指定数据连接的参数（数据端口、传输模式、表示类型和结构）以及文件系统操作的性质（存储、检索、追加、删除等）。用户-DTP或其指定的设备应在指定的数据端口“监听”，服务器则根据指定参数发起数据连接和数据传输。需要注意的是，数据端口不必在发起FTP命令的同一主机上，但用户或用户-FTP进程必须确保在指定的数据端口“监听”。还应注意，数据连接可以同时用于双向发送和接收。
```

在另一种情况下，用户可能希望在两个主机之间传输文件，而这两个主机都不是本地主机。用户会建立控制连接到这两个服务器，然后安排它们之间的数据连接。通过这种方式，控制信息传递给用户的PI（协议实现），而数据则在服务器的数据传输进程之间进行传输。以下是这种服务器到服务器交互的模型。

```
      控制连接     ------------   控制连接
      ---------->| 用户-FTP |<-----------
      |          | 用户-PI  |           |
      |          |   “C”    |           |
      V          ------------           V
 --------------                        --------------
| 服务器-FTP   |   数据连接          | 服务器-FTP   |
|     “A”      |<------------------->|     “B”      |
--------------  端口（A）            端口（B） --------------
```

图2

该协议要求在数据传输过程中，控制连接必须保持开启状态。用户有责任在完成FTP服务使用后请求关闭控制连接，而由服务器来执行关闭操作。如果控制连接在没有命令的情况下被关闭，服务器可能会中止数据传输。

FTP与Telnet的关系：

- FTP在控制连接上使用Telnet协议。
- 实现方式有两种：第一，用户PI或服务器PI可以在其自身的程序中直接实现Telnet协议的规则；第二，用户PI或服务器PI可以利用系统中现有的Telnet模块。

由于实现的简便性、代码共享和模块化编程的考虑，第二种方法更受青睐。而效率和独立性则倾向于第一种方法。在实际操作中，FTP几乎不依赖Telnet协议的全部内容，因此第一种方法通常不需要大量代码。

3. 数据传输功能

文件仅通过数据连接进行传输。控制连接用于传输命令，这些命令描述要执行的功能，以及对这些命令的回复（参见FTP回复部分）。有多个命令涉及主机之间的数据传输。这些数据传输命令包括MODE命令，用于指定数据的传输方式，以及STRUcture和TYPE命令，用于定义数据的表示方式。传输和表示基本上是相互独立的，但“流”传输模式依赖于文件结构属性，如果使用“压缩”传输模式，填充字节的性质则取决于表示类型。

3.1 数据表示与存储

数据从发送主机的存储设备传输到接收主机的存储设备。通常需要对数据进行某些转换，因为两个系统中的数据存储表示不同。例如，NVT-ASCII在不同系统中的存储表示不同。DEC TOPS-20系统通常将NVT-ASCII存储为五个7位ASCII字符，左对齐在36位字中；IBM大型机将NVT-ASCII存储为8位EBCDIC码；Multics系统将NVT-ASCII存储为四个9位字符，放在36位字中。在不同系统之间传输文本时，最好将字符转换为标准的NVT-ASCII表示。发送端和接收端需要在标准表示和各自的内部表示之间进行必要的转换。

在传输二进制数据（非字符码）时，也会出现表示上的问题，尤其是在不同字长的主机系统之间。如何发送数据以及接收端如何存储数据，有时并不十分明确。例如，从字长为32位的系统传输到字长为36位的系统时，为了效率和实用性，可能希望将32位字节在后者系统中右对齐存储在36位字中。无论如何，用户应有选择数据表示和转换功能的权限。需要注意的是，FTP提供的支持的数据显示类型非常有限。超出此限制的转换需求应由用户直接进行。

3.1.1 数据类型

数据表示在FTP中由用户通过指定表示类型来处理。这种类型可以隐式（如ASCII或EBCDIC）或显式（如本地字节）定义一个字节大小，用于解释，这个字节大小被称为“逻辑字节大小”。请注意，这与用于数据连接传输的字节大小（称为“传输字节大小”）无关，两者不应混淆。例如，NVT-ASCII的逻辑字节大小为8位。如果类型为本地字节（Local byte），则TYPE命令必须带有第二个参数，指定逻辑字节大小。传输字节大小始终为8位。

3.1.1.1. ASCII类型

这是默认类型，所有FTP实现都必须接受。它主要用于传输文本文件，除非两个主机都觉得EBCDIC类型更方便。

发送方将数据从内部字符表示转换为标准的8位NVT-ASCII表示（参见Telnet规范）。接收方则将数据从标准形式转换为其自身的内部形式。

根据NVT标准，必要时应使用<CRLF>序列来表示文本行的结束。（详见“数据表示和存储”部分末尾关于文件结构的讨论。）

使用标准的NVT-ASCII表示意味着数据必须以8位字节进行解释。

ASCII和EBCDIC类型的格式参数将在下面讨论。

3.1.1.2. EBCDIC类型

此类型旨在实现使用EBCDIC作为内部字符表示的主机之间的高效传输。

在传输过程中，数据以8位EBCDIC字符表示。字符编码是EBCDIC和ASCII功能规范之间的唯一差异。

在EBCDIC类型中，用于表示结构的行结束（而非记录结束——详见结构讨论）可能很少使用，但如果需要，应使用<NL>字符。

数据以连续比特的形式传输，为传输目的，这些比特被打包成8位的传输字节。接收端必须将数据存储为连续的比特。存储系统的结构可能需要在文件（或每个记录的文件中）填充一些空白，以达到某个方便的边界（字节、字或块）。这种填充必须全部为零，并且只能在文件（或每个记录的末尾）出现。必须有一种方法识别这些填充比特，以便在检索文件时将其去除。填充转换应广泛宣传，以便用户在存储站点处理文件时了解。

图像类型旨在高效存储和检索文件，以及传输二进制数据。建议所有FTP实现都应支持此类型。

3.1.1.4. 本地类型

数据以逻辑字节的形式传输，字节大小由强制性的第二个参数“字节大小”指定。字节大小的值必须是十进制整数，没有默认值。逻辑字节的大小不一定与传输字节的大小相同。如果两者不同，则应将逻辑字节连续打包，不考虑传输字节边界，并在末尾进行必要的填充。

当数据到达接收主机时，将根据逻辑字节大小和特定主机的情况进行转换。此转换必须是可逆的（即，使用相同参数可以检索到相同的文件），并应由FTP实现者广泛宣传。

例如，用户向具有32位字的主机发送36位浮点数，可以将数据作为逻辑字，字节大小为36。接收主机应存储这些逻辑字，以便于操作；在此例中，将36位逻辑字放入64位双字中即可。

再例如，两个具有36位字大小的主机可以使用TYPE L 36在彼此之间以字为单位传输数据。数据将以8位传输字节打包，两个主机字将由9个传输字节携带。

3.1.1.5. 格式控制

ASCII 和 EBCDIC 类型还可以接受第二个（可选）参数；该参数用于指示与文件相关联的垂直格式控制类型（如果有的话）。在 FTP 中定义了以下几种数据表示类型：

字符文件可以出于三种目的之一被传输到主机：用于打印、用于存储和后续检索，或用于处理。如果文件是为了打印而发送，接收方主机必须知道垂直格式控制是如何表示的。在第二种情况下，必须能够在主机上存储文件，然后以完全相同的形式检索出来。最后，文件应当可以从一台主机移动到另一台主机，并在第二台主机上进行处理，而不会遇到过多困难。单一的 ASCII 或 EBCDIC 格式不能满足所有这些条件。因此，这些类型具有第二个参数，用于指定以下三种格式之一：

3.1.1.5.1. 非打印（NON PRINT）

这是默认格式，如果省略第二个（格式）参数，则采用此格式。非打印格式必须被所有 FTP 实现所接受。

文件中不必包含任何垂直格式信息。如果将其传递给打印机处理程序，该程序可以假设标准的间距和边距值。

通常，这种格式将用于面向处理或仅存储的文件。

3.1.1.5.2. TELNET 格式控制

文件包含 ASCII/EBCDIC 垂直格式控制字符（即 <CR>、<LF>、<NL>、<VT>、<FF>），打印机处理程序将会适当地解释这些字符。<CR><LF>，严格按照此顺序，也表示行结束。

3.1.1.5.2.. 回车控制（ASA）

文件包含 ASA（FORTRAN）垂直格式控制字符。（参见 RFC 740 附录 C；以及 ACM 通讯，第 7 卷第 10 期，第 606 页，1964 年 10 月。）在按照 ASA 标准格式化的一行或一条记录中，第一字符不应被打印。相反，它应被用来确定在打印其余记录之前应进行的垂直移动。

ASA 标准规定了以下控制字符：

字符     垂直间距

空白        将纸张向上移动一行
0           将纸张向上移动两行
1           将纸张移动到下一页的顶部
+           无移动，即覆盖打印

显然，打印机处理过程必须有某种方式来区分结构实体的结束。如果文件具有记录结构（见下文），这就不成问题；在传输和存储过程中，记录会被明确标记。如果文件没有记录结构，则使用<CRLF>换行符序列来分隔打印行，但这些格式控制符会被ASA控制覆盖。

Postel 和 Reynolds                                              [第14页]

RFC 959                                                     1985年10月
文件传输协议

3.1.2. 数据结构

除了不同的表示类型外，FTP还允许指定文件的结构。FTP定义了三种文件结构：

- 文件结构（file-structure），没有内部结构，文件被视为连续的数据字节序列；
- 记录结构（record-structure），文件由连续的记录组成；
- 页面结构（page-structure），文件由相互独立的索引页面组成。

如果未使用STRUcture命令，默认假定为文件结构，但所有FTP实现都必须接受“文本”文件（即类型为ASCII或EBCDIC的文件）的文件和记录结构。文件的结构会影响文件的传输模式（参见传输模式部分）以及文件的解释和存储。

文件的“自然”结构取决于存储该文件的主机类型。源代码文件通常在IBM大型机上以定长记录存储，而在DEC TOPS-20上则作为字符流存储，通常按行划分，例如由<CRLF>分隔。如果要在这些不同的站点之间进行文件传输，必须有某种方式让一方识别另一方对文件的假设。

由于某些站点天生偏向文件（file-oriented），而另一些站点则偏向记录（record-oriented），如果将一种结构的文件发送到偏向另一种结构的主机，可能会出现问题。例如，如果将带有记录结构的文本文件发送到以文件结构为主的主机，那么该主机应根据记录结构对文件进行内部转换。显然，这种转换应当是有用的，但也必须是可逆的，以便在使用记录结构检索时能获得相同的文件。

对于将文件以文件结构发送到以记录结构为主的主机的情况，存在一个问题，即主机应使用什么标准将文件划分为可以本地处理的记录。如果需要进行这种划分，FTP实现应使用行结束符（如ASCII中的<CRLF>或EBCDIC文本文件中的<NL>）作为分隔符。如果FTP实现采用了这种技术，则在以文件结构检索文件时，必须准备好逆转这种转换。

3.1.2.1. 文件结构

如果未使用STRUcture命令，则默认采用文件结构。

在文件结构中，没有内部结构，文件被视为连续的数据字节序列。

3.1.2.2. 记录结构

所有FTP实现都必须接受“文本”文件（即，类型为ASCII或EBCDIC的文件）的记录结构。

在记录结构中，文件由连续的记录组成。

3.1.2.3. 页面结构

为了传输不连续的文件，FTP定义了页面结构。这类文件有时被称为“随机访问文件”或甚至是“空洞文件”。在这些文件中，可能会有与整个文件相关的其他信息（例如，文件描述符），或与文件的某一部分相关的信息（例如，页面访问控制），或两者兼有。在FTP中，这些文件的部分被称为“页面”。

为了支持不同的页面大小及相关信息，每个页面都带有一个页面头。页面头包含以下定义的字段：

- 头部长度

  表示页面头中逻辑字节的数量，包括这个字节在内。最小的头部长度为4。

- 页面索引

这是文件中该部分的逻辑页码。  
这不是该页的传输序列号，而是用来标识该文件中此页的索引。

Postel 和 Reynolds                                              [第16页]

RFC 959                                                     1985年10月  
文件传输协议

数据长度

指该页数据中的逻辑字节数。最小数据长度为0。

页类型

这是该页的类型。定义的页类型如下：

0 = 最后一页

用于表示分页结构传输的结束。头部长度必须为4，数据长度必须为0。

1 = 简单页

这是没有页级控制信息的普通分页文件的常规类型。头部长度必须为4。

2 = 描述页

用于传输整个文件的描述信息。

3 = 访问控制页

此类型包含一个额外的头部字段，用于具有页级访问控制信息的分页文件。头部长度必须为5。

可选字段

可以使用其他头部字段来提供每页的控制信息，例如每页访问控制。

所有字段的长度均为一个逻辑字节。逻辑字节的大小由TYPE命令指定。有关详细信息及页结构的具体案例，请参见附录I。

关于参数的注意事项：  
如果要使检索到的文件版本与最初传输的版本完全相同，文件必须以相同的参数存储和检索。  
反之，如果存储和检索文件时使用的参数相同，FTP实现必须返回与原始文件相同的文件。

3.2. 建立数据连接

数据传输的机制包括建立到相应端口的数据连接以及选择传输参数。用户端和服务器端的DTP（数据传输进程）都具有默认的数据端口。用户端的默认数据端口与控制连接端口相同（即U端口），而服务器端的默认数据端口则是紧邻控制连接端口的端口（即L-1端口）。

传输的字节大小为8位字节。这一字节大小仅与实际数据传输有关；对主机文件系统中数据的表示没有影响。

被动数据传输过程（这可以是用户端DTP或第二个服务器端DTP）应在发送传输请求命令之前“监听”数据端口。FTP请求命令决定数据传输的方向。服务器在收到传输请求后，会主动连接到指定的端口。当连接建立后，数据在DTP之间开始传输，服务器端的PI（协议实现）会向用户端的PI发送确认回复。

每个FTP实现必须支持使用默认数据端口，只有用户端PI可以发起更改为非默认端口的请求。

用户可以通过PORT命令指定备用的数据端口。用户可能希望将文件输出到TAC线路打印机，或从第三方主机检索文件。在后一种情况下，用户端PI会与两个服务器端PI建立控制连接。然后，一个服务器会被告知（通过FTP命令）“监听”一个连接，另一个服务器会发起连接。用户端PI会向其中一个服务器PI发送PORT命令，指明另一个服务器的传输端口。最后，双方会收到相应的传输命令。用户控制器与服务器之间的命令和应答的具体序列在FTP应答部分有详细定义。

通常，维护数据连接的责任由服务器承担——它负责发起连接和关闭连接。唯一的例外是当用户端DTP在某些传输模式下发送数据时，必须关闭连接以指示EOF（文件结束）。在以下情况下，服务器必须关闭数据连接：

1. 服务器已完成在需要关闭以指示EOF的传输模式下的数据发送。

2. 服务器收到用户端的ABORT命令。

3. 用户端发出更改端口的命令。

4. 控制连接已合法或非法地关闭。

5. 发生无法恢复的错误情况。

否则，关闭操作是服务器的一个选项，服务器必须仅通过返回250或226的回复来向用户进程指示其执行情况。

3.3 数据连接管理

默认数据连接端口：所有FTP实现必须支持使用默认的数据连接端口，且只有用户端（User-PI）可以发起非默认端口的使用。

协商非默认数据端口：用户端（User-PI）可以通过PORT命令指定一个非默认的用户端数据端口。用户端也可以请求服务器端通过PASV命令识别一个非默认的服务器端数据端口。由于连接由一对地址定义，任一操作都足以建立不同的数据连接，但也允许同时执行这两个命令，以在数据连接的两端使用新端口。

数据连接的重用：在使用流式数据传输模式时，文件结束必须通过关闭连接来指示。如果在会话中需要传输多个文件，这会带来问题，因为TCP需要保持连接记录一段时间以保证可靠通信，从而导致不能立即重新打开连接。

对此问题有两种解决方案：第一是协商使用非默认端口；第二是使用另一种传输模式。

关于传输模式的说明：流式传输模式本身是不可靠的，因为无法确定连接是否提前关闭。其他传输模式（块模式、压缩模式）不会通过关闭连接来指示文件结束，它们具有足够的FTP编码，可以解析数据连接以确定文件的结束。因此，使用这些模式时，可以保持数据连接开启，以进行多文件传输。

3.4 传输模式

在传输数据时，下一步考虑的是选择合适的传输模式。共有三种模式：一种对数据进行格式化并支持重启操作；一种在此基础上进行压缩以提高传输效率；以及一种几乎不对数据进行处理的传输方式。在最后一种模式中，传输模式会与结构属性相互作用，以确定处理的类型。在压缩模式中，表示类型决定填充字节。

所有数据传输必须以文件结束符（EOF）完成，这可以明确说明，也可以通过关闭数据连接隐含表示。对于具有记录结构的文件，所有的记录结束标志（EOR）都是明确的，包括最后一个。对于以页面结构传输的文件，则使用“最后一页”页面类型。

注意：在本节的其余部分，字节（byte）指的是“传输字节”，除非明确说明。

为了实现标准化传输，发送主机会将其内部的行结束符或记录结束符转换成传输模式和文件结构所规定的表示方式，接收主机则会进行相反的转换，将其内部符号还原。IBM大型机的记录计数字段可能在其他主机上无法识别，因此，记录结束信息可能以两个字节的控制码在流模式（Stream mode）中传输，或在块（Block）或压缩（Compressed）模式描述符中以标志位的形式传输。在没有记录结构的ASCII或EBCDIC文件中，行结束符应由<CRLF>（回车换行）或<NL>（换行）表示。由于这些转换会给某些系统带来额外工作，传输非记录结构文本文件的相同系统可能希望使用二进制表示和流模式进行传输。

Postel 和 Reynolds                                              [第20页]

RFC 959                                                     1985年10月
文件传输协议

FTP定义了以下传输模式：

3.4.1. 流模式（STREAM MODE）

数据作为字节流进行传输。对所用的表示类型没有限制；允许使用记录结构。

在具有记录结构的文件中，EOR（记录结束）和EOF（文件结束）都由两个字节的控制码指示。控制码的第一个字节全部为1，即转义字符。第二个字节的最低位（低位）为1，其他位为0，用于EOR；对于EOF，第二个字节的最低位（低位）为1，第二低位为1。也就是说，EOR的控制码值为1，EOF的控制码值为2。EOR和EOF可以在最后传输的字节中同时指示，只需将两个低位都置为1（即值为3）。如果要传输的字节是全1的字节（即0xFF），应在控制码的第二个字节中重复该字节。

如果结构是文件结构，EOF由发送主机关闭数据连接来指示，所有字节都是数据字节。

该文件以一系列数据块的形式传输，每个数据块前面都带有一个或多个头字节。头字节包含一个计数字段和描述符代码。计数字段表示整个数据块的总长度（以字节为单位），从而标志着下一个数据块的开始（没有填充位）。描述符代码定义了以下几种情况：文件中的最后一个数据块（EOF）、记录中的最后一个数据块（EOR）、重启标记（详见“错误恢复与重启”部分）或可疑数据（即传输中的数据被怀疑存在错误，不可靠）。此最后的代码并非用于FTP内部的错误控制，而是出于某些站点在交换特定类型数据（如地震或天气数据）时的需求，即使出现局部错误（如“磁带读取错误”），仍希望发送和接收所有数据，但在传输中标明某些部分为可疑。该模式允许使用记录结构，并且可以采用任何表示类型。

头部由三个字节组成。在24位的头部信息中，低16位表示字节数，高8位表示描述符代码，具体如下所示。

（此处为示意图）

块头部

| 描述符（8位） | 字节计数（16位） |

描述符代码由描述符字节中的位标志指示。已分配了四个代码，每个代码的编号是对应位的十进制值。

| 代码 | 含义 |
|-------|--------|
| 128   | 数据块结束为EOR（记录结束） |
| 64    | 数据块结束为EOF（文件结束） |
| 32    | 数据块中存在可疑错误 |
| 16    | 数据块是重启标记 |

使用这种编码方式，某个数据块可能同时具有多个描述符条件。可以标记任意数量的位。

重启标记嵌入在数据流中，作为一个完整的8位字节，代表在控制连接中使用的字符集（例如，默认的NVT-ASCII）中的可打印字符。<空格>（在相应语言中）不得在重启标记内使用。

例如，为了传输一个六字符的标记，将发送如下内容：

以下是英文内容的中文翻译：

```
            +--------+--------+--------+
            | 描述码 |  字节数  |
            | 代码=16 |   = 6   |
            +--------+--------+--------+

            +--------+--------+--------+
            | 标记   | 标记   | 标记   |
            | 8 位   | 8 位   | 8 位   |
            +--------+--------+--------+

            +--------+--------+--------+
            | 标记   | 标记   | 标记   |
            | 8 位   | 8 位   | 8 位   |
            +--------+--------+--------+


Postel 和 Reynolds                                              [第22页]



                                                                        
RFC 959                                                     1985年10月
文件传输协议


      3.4.3.  压缩模式

         需要传输的有三种信息：常规数据，以字节串形式发送；压缩数据，包括重复或填充；以及控制信息，以两字节的转义序列形式发送。如果发送的常规数据为 n>0 字节（最多127字节），这 n 字节前会有一个字节，其最高位为0，且其余7位包含数字 n。

         字节串：

             1       7                8                     8
            +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+     +-+-+-+-+-+-+-+-+
            |0|       n     | |    d(1)       | ... |      d(n)     |
            +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+     +-+-+-+-+-+-+-+-+
                                          ^             ^
                                          |---n 字节---|
                                              的数据

            长度为 n 的数据字节串 d(1), ..., d(n)
            计数 n 必须为正。

         为压缩长度为 n 的重复数据字节 d 的字符串，发送以下两个字节：

         重复字节：

              2       6               8
            +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
            |1 0|     n     | |       d       |
            +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+

         一个长度为 n 的填充字节串可以压缩成一个字节，其中填充字节根据表示类型不同而变化。如果类型为ASCII或EBCDIC，填充字节为<SP>（空格，ASCII码32，EBCDIC码64）。如果类型为图像或本地字节，填充字节为零字节。

         填充字符串：

              2       6
            +-+-+-+-+-+-+-+-+
            |1 1|     n     |
            +-+-+-+-+-+-+-+-+

         转义序列是双字节的，第一个字节是
```

以下是英文内容的中文翻译：

```
第3.4节  转义字节（全零）和块模式定义的描述符代码。描述符代码与块模式中的含义相同，适用于随后的字节串。

压缩模式在进行大规模网络传输时非常有用，可以在略微增加CPU负担的情况下获得更高的带宽。它最适合用来减小打印文件的大小，例如由RJE主机生成的文件。

3.5  错误恢复与重启

在数据传输过程中，没有机制检测比特丢失或被破坏的情况；这一级别的错误控制由TCP负责。然而，提供了重启程序，以保护用户免受严重系统故障的影响（包括主机、FTP进程或底层网络的故障）。

重启程序仅适用于块模式和压缩模式的数据传输。它要求数据的发送方在数据流中插入一个特殊的标记码，并携带一些标记信息。该标记信息仅对发送方有意义，但必须由控制连接的默认或协商语言（ASCII或EBCDIC）中的可打印字符组成。标记可以表示比特数、记录数或任何其他系统用以识别数据检查点的信息。接收方如果实现了重启程序，则会在其文件系统中标记对应的标记位置，并将此信息反馈给用户。

在系统发生故障时，用户可以通过FTP的重启程序，识别出标记点，从而重新开始数据传输。以下示例说明了重启程序的使用方法。

数据的发送方在合适的位置插入一个合适的标记块。接收方在其文件系统中标记对应的数据点，并将最后已知的发送方和接收方标记信息直接传达给用户，或者通过控制连接在110应答中传达（具体取决于谁是发送方）。在系统发生故障时，用户或控制进程可以通过发送带有服务器标记码的重启命令，重新启动服务器，命令中的参数为服务器的标记码。重启命令通过控制连接传输，紧接着是系统故障时正在执行的命令（如RETR、STOR或LIST）。

4. 文件传输功能
```

用户与服务器之间的通信通道通过从用户到标准服务器端口的TCP连接建立。用户协议解释器负责发送FTP命令并解释收到的回复；服务器协议解释器则负责解释命令、发送回复，并指挥其数据传输进程（DTP）建立数据连接并传输数据。如果数据传输的第二方（被动传输过程）是用户的数据传输进程（user-DTP），则由用户FTP主机的内部协议控制；如果是第二个服务器端的数据传输进程（server-DTP），则由其协议解释器在用户协议解释器的命令下进行控制。关于FTP回复的内容将在下一节中讨论。在本节对一些命令的描述中，明确可能的回复会更有帮助。

4.1. FTP命令

4.1.1. 访问控制命令

以下命令用于指定访问控制标识符（命令代码在括号中显示）。

用户名称（USER）

参数字段是一个Telnet字符串，用于标识用户。用户识别信息是服务器访问其文件系统所需的。此命令通常是在建立控制连接后由用户首次传输的命令（某些服务器可能要求如此）。一些服务器还可能需要额外的身份验证信息，如密码和/或账户命令。服务器可能允许在任何时候输入新的USER命令，以更改访问控制和/或会计信息。这相当于清除已提供的用户、密码和账户信息，并重新开始登录流程。所有传输参数保持不变，任何正在进行的文件传输将在旧的访问控制参数下完成。

密码（PASS）

参数字段是一个Telnet字符串，用于指定用户的密码。此命令必须紧接在用户名称（USER）命令之后，对于某些站点，它完成了用户的访问控制身份验证。由于密码信息非常敏感，通常希望对其进行“掩码”或隐藏输出，但似乎服务器没有可靠的方法实现这一点。因此，隐藏敏感密码信息的责任由用户FTP进程承担。

账户（ACCT）

参数字段是一个Telnet字符串，用于标识用户的账户。该命令不一定与USER命令相关，因为某些站点可能需要账户信息进行登录，而其他站点则仅在特定访问（如存储文件）时需要。在后者的情况下，命令可能在任何时间到达。

为了自动化处理，有响应码可以区分这些情况：当登录需要账户信息时，成功响应PASS命令的响应码为332；另一方面，如果登录不需要账户信息，成功响应PASS命令的响应码为230；如果在对话中稍后发出的命令需要账户信息，服务器应返回332或532响应码，具体取决于它是存储（等待接收ACCOUNT命令）还是丢弃该命令。

更改工作目录（CWD）

此命令允许用户切换到不同的目录或数据集以进行文件存储或检索，而不改变其登录或账户信息。传输参数也保持不变。参数是一个路径名，指定一个目录或其他系统相关的文件组标识符。

更改到父目录（CDUP）

此命令是CWD的特殊情况，旨在简化在不同操作系统之间传输目录树的程序实现，这些系统在命名父目录的语法上存在差异。响应码应与CWD的响应码相同。详细信息请参见附录II。

结构挂载（SMNT）

此命令允许用户挂载不同的文件系统数据结构，而不改变其登录或账户信息。传输参数保持不变。参数是一个路径名，指定一个目录或其他系统相关的文件组标识符。

重新初始化（REIN）

此命令终止一个USER会话，清除所有输入/输出和账户信息，但允许任何正在进行的传输完成。所有参数都重置为默认设置，控制连接保持打开状态。这与用户在打开控制连接后立即处于的状态相同。通常会预期接下来会有一个USER命令。

注销（QUIT）

此命令用于终止一个用户会话，如果没有文件传输正在进行，服务器将关闭控制连接；如果文件传输正在进行，连接将保持打开状态以等待结果响应，之后服务器会关闭连接。如果用户进程为多个用户传输文件，但不希望每次都关闭再重新连接，可以使用REIN命令代替QUIT。

控制连接意外关闭将导致服务器执行类似中止（ABOR）和注销（QUIT）的有效操作。

4.1.2. 传输参数命令

所有数据传输参数都有默认值，只有在需要更改默认参数值时才需要使用相应命令。默认值为上一次指定的值，若未曾指定，则采用此处所述的标准默认值。这意味着服务器必须“记住”相关的默认值。这些命令可以任意顺序出现，但必须在FTP服务请求之前。以下命令用于指定数据传输参数：

DATA PORT（PORT）

该参数的参数值是用于数据连接的数据端口的HOST-PORT规范。用户和服务器的数据端口都有默认值，通常情况下不需要使用此命令及其应答。如果使用此命令，参数值是一个由32位互联网主机地址和16位TCP端口地址拼接而成的地址信息。该地址信息被拆分成8位字段，每个字段的值以十进制数字（字符字符串形式）传输，字段之间用逗号分隔。一个PORT命令的示例为：

PORT h1,h2,h3,h4,p1,p2

其中，h1是互联网主机地址的高8位。

PASSIVE（PASV）

此命令请求服务器的DTP（数据传输进程）在一个非默认的数据端口上“监听”，等待连接，而不是在接收到传输命令时主动发起连接。该命令的响应中会包含服务器监听的主机和端口地址。

表示类型（TYPE）

参数指定数据表示类型，详见“数据表示与存储”部分。某些类型需要第二个参数。第一个参数用单个Telnet字符表示，ASCII和EBCDIC的第二个Format参数也是如此；本地字节类型的第二个参数是一个十进制整数，用于指示字节大小。参数之间用空格（ASCII码32）分隔。

以下代码为不同类型分配：

                         \    /
               A - ASCII |    | N - 非打印
                         |-><-| T - Telnet格式效果器
               E - EBCDIC|    | C - 回车控制（ASA）
                         /    \
               I - 图像
               
               L <字节大小> - 本地字节大小

Postel & Reynolds                                              [第28页]

RFC 959                                                     1985年10月
文件传输协议

默认的数据表示类型为ASCII非打印。如果更改了Format参数，之后只更改第一个参数，Format将恢复到默认的非打印类型。

文件结构（STRU）

参数是一个单一的Telnet字符代码，指定文件结构，详见“数据表示与存储”部分。

以下代码为结构类型分配：

               F - 文件（无记录结构）
               R - 记录结构
               P - 页面结构

默认结构为文件。

传输模式（MODE）

参数是一个单一的Telnet字符代码，指定数据传输模式，详见“传输模式”部分。

以下代码为传输模式分配：

               S - 流式
               B - 块
               C - 压缩

默认传输模式为流式。

4.1.3.  FTP服务命令

FTP服务命令定义了用户请求的文件传输或文件系统功能。FTP服务命令的参数通常是一个路径名。路径名的语法必须符合服务器端的约定（并采用标准默认值），以及控制连接的语言约定。建议的默认处理方式是使用最后指定的设备、目录或文件名，或本地用户定义的标准默认值。命令可以以任何顺序出现，但“重命名从”命令必须在“重命名到”命令之后，重启命令必须在中断的服务命令（如STOR或RETR）之后。响应FTP服务命令时传输的数据，必须始终通过数据连接发送，除非是某些信息性回复。以下命令用于指定FTP服务请求：

RETRIEVE（RETR）

此命令使服务器数据传输进程（DTP）将路径名中指定的文件的副本传输到另一端的数据连接上的服务器或用户数据传输进程（DTP）。服务器端文件的状态和内容应保持不变。

STORE（STOR）

此命令使服务器DTP接受通过数据连接传输的数据，并将数据存储为服务器端的文件。如果在服务器端已存在路径名中指定的文件，则其内容将被新传输的数据覆盖。如果不存在，则在服务器端创建一个新文件。

STORE UNIQUE（STOU）

此命令的行为类似于STOR，但生成的文件将在当前目录下以唯一的名称创建。成功开始传输后，必须在250 Transfer Started的响应中包含生成的文件名。

APPEND（带创建）（APPE）

此命令使服务器DTP接受通过数据连接传输的数据，并将数据存储在服务器端的文件中。如果路径名中指定的文件已存在，则数据将附加到该文件；否则，将在服务器端创建一个新文件。

ALLOCATE（ALLO）

此命令可能是某些服务器所必需的，用于预留足够的存储空间以容纳即将传输的新文件。参数应为十进制整数，表示为该文件预留的存储空间（以逻辑字节为单位）的字节数。对于以记录或页面结构发送的文件，可能还需要指定最大记录或页面大小（以逻辑字节为单位）；这由命令的第二个参数字段中的十进制整数表示。第二个参数是可选的，但如果提供，应与第一个参数用三个Telnet字符<SP> R <SP>分隔。此命令应在后续的STOR或APPE命令之后发出。不需要提前声明文件最大大小的服务器应将ALLO命令视为无操作（NOOP），而只对最大记录或页面大小感兴趣的服务器可以在第一个参数中接受一个虚拟值并忽略它。

重启（RESTART 或 REST）

参数字段表示服务器在文件传输中断后应从哪个数据点重新开始。此命令不会引起文件传输，而是跳过文件到指定的数据检查点。此命令应立即跟随相应的FTP服务命令，以使文件传输得以继续。

重命名（RNFR）

此命令指定要重命名的文件的旧路径名。此命令必须紧接着一个“重命名为”命令，后者指定新文件的路径名。

重命名（RNTO）

此命令指定在前一条“重命名自”命令中指定的文件的新路径名。这两个命令合起来实现文件的重命名。

中止（ABOR）

此命令告诉服务器中止之前的FTP服务命令及任何相关的数据传输。中止命令可能需要“特殊操作”，如在FTP命令部分所述，以强制服务器识别。如果之前的命令已完成（包括数据传输），则无需采取任何措施。控制连接不应由服务器关闭，但数据连接必须关闭。

当服务器收到此命令时，情况有两种：(1) FTP服务命令已完成，或(2) FTP服务命令仍在进行中。

Postel & Reynolds                                              [第31页]

RFC 959                                                     1985年10月
文件传输协议

在第一种情况下，服务器会关闭数据连接（如果已开启），并以226响应码回复，表示中止命令已成功处理。

在第二种情况下，服务器会中止正在进行的FTP服务，并关闭数据连接，返回426响应码，表示服务请求异常终止。随后，服务器会发送226响应码，表示中止命令已成功处理。

删除文件（DELE）

此命令会导致服务器端指定路径的文件被删除。如果需要额外的保护措施（例如询问“你真的想删除吗？”），应由用户的FTP客户端程序提供。

删除目录（RMD）

此命令会将指定路径的目录删除（如果路径是绝对路径），或作为当前工作目录的子目录删除（如果路径是相对路径）。详见附录II。

创建目录（MKD）

此命令会在指定路径创建一个新目录（如果路径是绝对路径），或在当前工作目录下创建一个子目录（如果路径是相对路径）。详见附录II。

显示当前目录（PWD）

此命令会返回当前工作目录的名称。详见附录II。

列出文件（LIST）

此命令会从服务器向被动数据传输点（DTP）发送一个文件列表。如果路径指定一个目录或其他文件组，服务器应传送该目录中的文件列表；如果路径指定一个文件，则应传送该文件的当前信息。空参数表示用户的当前工作目录或默认目录。数据传输通过数据连接进行，类型为ASCII或EBCDIC。（用户必须…）

确保类型（TYPE）设置为适当的ASCII或EBCDIC。

由于文件中的信息在不同系统之间可能差异很大，这些信息可能难以在程序中自动使用，但对于人工用户来说可能非常有用。

NAME LIST（NLST）

此命令会从服务器向用户端发送目录列表。路径名应指定一个目录或其他系统特定的文件组描述符；空参数表示当前目录。服务器将返回一串文件名，没有其他信息。数据将在数据连接上以ASCII或EBCDIC类型传输，作为有效的路径名字符串，用<CRLF>或<NL>分隔。（用户必须确保TYPE设置正确。）此命令旨在返回可以被程序用来自动处理文件的信息。例如，用于实现“多重获取”功能。

SITE PARAMETERS（SITE）

此命令由服务器使用，用于提供其系统特有的服务，这些服务对文件传输至关重要，但尚不足以作为协议中的通用命令。关于这些服务的性质和语法规范，可以在对HELP SITE命令的回复中说明。

SYSTEM（SYST）

此命令用于查询服务器的操作系统类型。回复的第一个单词应为当前版本的“已分配编号”文档[4]中列出的系统名称之一。

STATUS（STAT）

此命令应在控制连接上以回复的形式发送状态响应。该命令可以在文件传输过程中（同时伴随Telnet的IP和同步信号——详见FTP命令部分）发送，此时服务器会响应当前操作的状态；也可以在文件传输之间发送。在后者的情况下，命令可以带有参数字段。如果参数是路径名，则此命令类似于“list”命令，但数据将以ASCII或EBCDIC格式传输。

传输通过控制连接进行。如果提供的是部分路径名，服务器可能会响应一个包含该路径名相关文件名或属性的列表。如果没有提供参数，服务器应返回关于其FTP进程的常规状态信息。这应包括所有传输参数的当前值以及连接的状态。

HELP（帮助）

此命令应使服务器通过控制连接向用户发送有关其实现状态的帮助信息。该命令可以带有参数（例如，任何命令名称），并作为响应返回更具体的信息。回复类型为211或214。建议在输入USER命令之前允许使用HELP命令。服务器可以利用此回复来指定站点相关的参数，例如在响应HELP SITE时。

NOOP（无操作）

此命令不影响任何参数或先前输入的命令。它不执行任何操作，只要求服务器返回一个OK的回复。

文件传输协议（FTP）在所有控制连接上的通信中遵循Telnet协议的规范。由于Telnet通信所使用的语言可能是协商选项，接下来的两个部分中所有的引用都将指向“Telnet语言”和相应的“Telnet行结束码”。目前，可以将其理解为NVT-ASCII和<CRLF>。不会引用其他关于Telnet协议的规范。

FTP命令是以“Telnet字符串”形式出现，以“Telnet行结束码”终止。命令码本身是字母字符，后跟参数时以空格（<SP>）结束，否则以Telnet行结束符（EOL）结束。命令码及其语义在本节中描述；命令的详细语法在“命令”部分中规定，响应序列在“命令和响应的序列”部分中讨论，使用命令的场景在“典型FTP场景”部分中提供。

FTP命令可以分为三类：用于指定访问控制标识符的命令、用于数据传输参数的命令，以及用于FTP服务请求的命令。在数据传输进行时，某些命令（如ABOR、STAT、QUIT）可以通过控制连接发送。

服务器可能无法同时监控控制连接和数据连接，在这种情况下，可能需要采取一些特殊措施以引起服务器的注意。以下是建议的临时性顺序操作格式：

1. 用户系统在Telnet流中插入Telnet的“中断进程”(IP)信号。

2. 用户系统发送Telnet的“同步”(Synch)信号。

3. 用户系统在Telnet流中插入命令（例如，ABOR）。

4. 服务器PI在接收到“IP”后，会扫描Telnet流，寻找**恰好一个**FTP命令。

（对于其他类型的服务器，可能不需要这样做，但上述操作应不会产生异常效果。）

4.2. FTP应答

对文件传输协议（FTP）命令的应答旨在确保请求与操作的同步，保证用户进程始终了解服务器的状态。每个命令至少应产生一次应答，虽然可能会有多次应答；在多次应答的情况下，应答应易于区分。此外，一些命令会成组连续出现，例如USER、PASS和ACCT，或RNFR和RNTO。如果所有前置命令都成功，应答会显示出中间状态的存在。序列中任何一步失败，都需要从头重新执行整个序列。

命令-应答序列的详细流程将在下文的状态图中明确说明。

FTP的应答由一个三位数字（以三个字母数字字符传输）和一些文本组成。数字部分用于自动机判断下一步应进入的状态；文本部分则供人类用户阅读。设计时希望这三位数字包含足够的编码信息，使用户进程（用户PI）无需检查文本内容即可判断状态，必要时可以丢弃或传递给用户。特别是，文本内容可能依赖于服务器，因此每个应答码可能对应不同的文本内容。

应答定义为：包含三位数字代码，后跟空格。

以下是英文内容的中文翻译：

```
<SP>，后跟一行文本（其中已指定最大行长度），并以Telnet的行结束符结束。然而，也存在文本超过一行的情况。在这些情况下，必须用括号括起完整的文本，以便用户进程知道何时可以停止读取回复（即在控制连接上停止处理输入）并去做其他事情。这需要在第一行采用特殊格式，指示后续还有多行内容，以及在最后一行标记为最后一行。至少其中一行必须包含相应的回复代码，以指示事务的状态。为了满足所有方面的需求，决定第一行和最后一行的代码应相同。

因此，多行回复的格式为：第一行将以确切的回复代码开头，紧跟一个连字符“-”（也称为减号），后面是文本。最后一行将以相同的代码开头，紧跟一个空格<SP>，可选地后面跟一些文本，以及Telnet的行结束符。

例如：
    123-第一行
    第二行
    234 一个以数字开头的行
    123 最后一行

用户进程只需在行首搜索第二次出现的相同回复代码，后跟<SP>（空格），并忽略所有中间行。如果中间行以三位数字开头，服务器必须在前面补充空格以避免混淆。

这种方案允许使用标准系统例程来处理回复信息（例如STAT回复），同时在前后添加“人工”第一行和最后一行。在极少数情况下，如果这些例程能够在任何行的开头生成三位数字和空格，则每行文本的开头应偏移一些中性文本，比如空格。

该方案假设多行回复不能嵌套。

回复的三个数字各有特殊意义。这旨在允许用户进程从非常简单到非常复杂的响应。第一位数字表示响应是良好、错误还是不完整（参照状态图），一个不够复杂的用户进程将能够根据这些信息决定下一步行动（如按计划继续，或采取其他措施）。
```

请将下面的英文翻译成流畅的中文。

```
      redo, retrench, etc.) by simply examining this first digit.  A
      user-process that wants to know approximately what kind of error
      occurred (e.g. file system error, command syntax error) may
      examine the second digit, reserving the third digit for the finest
      gradation of information (e.g., RNTO command without a preceding
      RNFR).

         There are five values for the first digit of the reply code:

            1yz   Positive Preliminary reply

               The requested action is being initiated; expect another
               reply before proceeding with a new command.  (The
               user-process sending another command before the
               completion reply would be in violation of protocol; but
               server-FTP processes should queue any commands that
               arrive while a preceding command is in progress.)  This
               type of reply can be used to indicate that the command
               was accepted and the user-process may now pay attention
               to the data connections, for implementations where
               simultaneous monitoring is difficult.  The server-FTP
               process may send at most, one 1yz reply per command.

            2yz   Positive Completion reply

               The requested action has been successfully completed.  A
               new request may be initiated.

            3yz   Positive Intermediate reply

               The command has been accepted, but the requested action
               is being held in abeyance, pending receipt of further
               information.  The user should send another command
               specifying this information.  This reply is used in
               command sequence groups.

            4yz   Transient Negative Completion reply

               The command was not accepted and the requested action did
               not take place, but the error condition is temporary and
               the action may be requested again.  The user should
               return to the beginning of the command sequence, if any.
               It is difficult to assign a meaning to "transient",
               particularly when two distinct sites (Server- and
               User-processes) have to agree on the interpretation.
               Each reply in the 4yz category might have a slightly
               different time value, but the intent is that the


Postel & Reynolds                                              [Page 37]



                                                                        
RFC 959                                                     October 1985
File Transfer Protocol
```

用户进程被鼓励再次尝试。在判断回复属于4yz（临时否定）还是5yz（永久否定）类别时，一个经验法则是：如果命令可以在不改变命令形式或用户或服务器属性的情况下重复执行（例如，拼写相同，参数未变；用户未更改文件访问权限或用户名；服务器未推出新的实现），那么该回复属于4yz类别。

5yz 表示永久否定完成回复

该命令未被接受，所请求的操作未能执行。建议用户进程不要重复完全相同的请求（即在相同的顺序中重复）。即使某些“永久”错误条件也可能被修正，因此用户可能希望在未来某个时间点通过直接操作让其用户进程重新发起命令序列（例如，拼写已更改，或用户已更改其目录状态）。

以下功能类别由第二个数字编码：

x0z 语法——这些回复涉及语法错误，指语法正确但不属于任何功能类别的命令，未实现或多余的命令。

x1z 信息——这些是对信息请求（如状态或帮助）的回复。

x2z 连接——涉及控制连接和数据连接的回复。

x3z 认证与会计——用于登录过程和会计程序的回复。

x4z 尚未具体定义。

x5z 文件系统——这些回复指示服务器文件系统在请求的传输或其他文件系统操作中的状态。

第三个数字在每个功能类别中提供更细的意义划分，具体由第二个数字指定。以下的回复列表将加以说明。请注意，文本中提到的内容如下：


Postel & Reynolds                                              [第38页]

RFC 959                                                     1985年10月
文件传输协议

与每个回复相关联的代码是建议性的，而非强制性的，甚至可能会根据所关联的命令而发生变化。另一方面，回复代码必须严格遵循最后一节中的规范；也就是说，服务器实现不应为与此处描述的情况略有不同的情形自行发明新代码，而应采用已定义的代码。

例如，像 TYPE 或 ALLO 这样的命令，如果成功执行后不会为用户进程提供任何新信息，则应返回 200 回复。如果某个特定的服务器-FTP 进程未实现该命令，因为它与该计算机系统无关，例如在 TOPS20 站点上的 ALLO，仍然希望返回一个正面完成的回复，以便简单的用户进程知道可以继续其操作。在这种情况下，应使用 202 回复，例如： “无需存储分配。” 另一方面，如果命令请求一个非站点特定的操作且未被实现，则应返回 502。在此基础上，如果命令已被实现，但请求了未实现的参数，则应返回 504。

4.2.1 按功能组划分的回复代码

200 命令正常。
500 语法错误，命令无法识别。
    这可能包括命令行过长等错误。
501 参数或参数组的语法错误。
202 命令未实现，在此站点多余。
502 命令未实现。
503 命令顺序错误。
504 针对该参数未实现的命令未被实现。

110 重启标志应答。
    在这种情况下，文本必须完全一致，不能由具体实现决定；它必须为：
        MARK yyyy = mmmm
    其中 yyyy 是用户进程数据流的标记，mmmm 是服务器的对应标记（注意标记和“=”之间的空格）。
211 系统状态或系统帮助应答。
212 目录状态。
213 文件状态。
214 帮助信息。
    关于如何使用服务器或某个特定非标准命令的含义。此应答仅对人类用户有用。
215 NAME 系统类型。
    其中 NAME 是来自“已分配编号”文档中的官方系统名称。

120 服务准备就绪，需时 nnn 分钟。
220 服务为新用户准备就绪。
221 服务关闭控制连接。
    如果适用，用户已注销。
421 服务不可用，正在关闭控制连接。
    如果服务知道必须关闭，可能对任何命令的应答。
125 数据连接已打开；传输即将开始。
225 数据连接已打开；没有进行中的传输。
425 无法打开数据连接。
226 关闭数据连接。
    请求的文件操作成功（例如，文件传输或文件中止）。
426 连接关闭；传输中止。
227 进入被动模式（h1,h2,h3,h4,p1,p2）。

230 用户已登录，继续。
530 未登录。
331 用户名正确，需要密码。
332 需要账户信息以登录。
532 需要账户信息以存储文件。

150 文件状态正常；即将打开数据连接。
250 请求的文件操作已完成。
257 创建“PATHNAME”。
350 请求的文件操作待进一步信息。
450 请求的文件操作未执行。
    文件不可用（例如，文件繁忙）。
550 请求的操作未执行。
    文件不可用（例如，未找到文件，无访问权限）。
451 请求的操作中止。处理时发生本地错误。
551 请求的操作中止。页面类型未知。
452 请求的操作未执行。
    系统存储空间不足。
552 请求的文件操作中止。
    超出存储分配（针对当前目录或数据集）。
553 请求的操作未执行。
    不允许使用该文件名。

4.2.2 数字顺序的应答码列表

110 重启标志应答。
    在这种情况下，文本必须完全一致，不能由具体实现决定；应为：
         MARK yyyy = mmmm
    其中 yyyy 是用户进程数据流的标记，mmmm 是服务器的对应标记（注意标记和“=”之间的空格）。
120 服务准备就绪，预计分钟数为 nnn。
125 数据连接已打开；传输即将开始。
150 文件状态正常；即将打开数据连接。

Postel 和 Reynolds                                              [第41页]

RFC 959                                                     1985年10月
文件传输协议

200 命令成功。
202 命令未实现，在此站点多余。
211 系统状态或系统帮助应答。
212 目录状态。
213 文件状态。
214 帮助信息。
    关于如何使用服务器或某个特定非标准命令的含义。此应答仅对人类用户有用。
215 系统类型名称。
    其中 NAME 是来自“已分配编号”文档中的官方系统名称。
220 服务准备就绪，等待新用户。
221 服务关闭控制连接。
    如有必要，用户已注销。
225 数据连接已打开；没有进行中的传输。
226 关闭数据连接。
    请求的文件操作成功（例如，文件传输或文件中止）。
227 进入被动模式（h1,h2,h3,h4,p1,p2）。
230 用户已登录，继续。
250 请求的文件操作成功，已完成。
257 “路径名”已创建。

331 用户名正确，需要密码。
332 需要账户信息进行登录。
350 请求的文件操作待进一步信息。

421 服务不可用，关闭控制连接。
    如果服务知道必须关闭，可能是对任何命令的应答。
425 无法打开数据连接。
426 连接已关闭；传输中止。
450 请求的文件操作未执行。
    文件不可用（例如，文件繁忙）。
451 请求的操作中止：本地处理错误。
452 请求的操作未执行。
    系统存储空间不足。

Postel 和 Reynolds                                              [第42页]

RFC 959                                                     1985年10月
文件传输协议

500 语法错误，命令无法识别。
    这可能包括命令行过长等错误。
501 参数或参数中的语法错误。
502 命令未实现。
503 命令序列错误。
504 该参数不支持此命令。
530 未登录。
532 需要账户以存储文件。
550 请求的操作未执行。
    文件不可用（例如，文件未找到，无法访问）。
551 请求的操作中止：页面类型未知。
552 请求的文件操作中止。
    超出存储空间限制（针对当前目录或数据集）。
553 请求的操作未执行。
    不允许使用该文件名。

5.  声明性规范

5.1.  最低实现要求

为了使FTP在没有不必要的错误信息的情况下正常工作，所有服务器都必须实现以下最低功能：

- TYPE - ASCII 非打印
- MODE - 流式
- STRUCTURE - 文件，记录
- 命令 - USER，QUIT，PORT，
           TYPE，MODE，STRU（用于默认值）
           RETR，STOR，
           NOOP。

传输参数的默认值为：

- TYPE - ASCII 非打印
- MODE - 流式
- STRU - 文件

所有主机必须接受上述作为标准默认值。

5.2.  连接

服务器协议解释器应在端口L上“监听”。用户或用户协议解释器应启动全双工控制连接。服务器和用户进程应遵循《ARPA-Internet协议手册》中规定的Telnet协议的约定。服务器没有义务提供命令行编辑功能，可能要求在用户主机上完成。控制连接应在所有传输和应答完成后由服务器根据用户请求关闭。

用户数据传输进程（DTP）必须在指定的数据端口上“监听”；这可以是默认的用户端口（U）或在PORT命令中指定的端口。服务器应从其默认数据端口（L-1）使用指定的用户数据端口发起数据连接。传输的方向和所用端口将由FTP服务命令决定。

请注意，所有FTP实现必须支持使用默认端口进行数据传输，且只有用户协议解释器（USER-PI）可以发起非默认端口的使用。

当数据在两个服务器A和B之间传输时（参见图2），用户PI C会与两个服务器PI建立控制连接。其中一个服务器，比如A，会收到一个PASV命令，指示它“监听”其数据端口，而不是在接收到传输服务命令时主动建立连接。当用户PI收到对PASV命令的确认（包括监听的主机和端口信息）后，会将A的端口a通过PORT命令发送给B；B会返回一个应答。随后，用户PI可以向A和B发送相应的服务命令。服务器B会主动发起连接，传输过程开始。命令与应答的序列如下，消息在垂直方向上同步，但在水平方向上异步：

用户PI - 服务器A                     用户PI - 服务器B
------------------                     ------------------
C->A：连接                              C->B：连接
C->A：PASV
A->C：227进入被动模式。A1,A2,A3,A4,a1,a2
                                         C->B：PORT A1,A2,A3,A4,a1,a2
                                         B->C：200 好的
C->A：存储（STOR）                     C->B：检索（RETR）
                  B->A：连接到主机A，端口a

（图3）

数据连接应由服务器在“建立数据连接”部分描述的条件下关闭。如果在数据传输完成后不需要关闭连接以表示文件结束，服务器必须立即关闭连接。等待在新传输命令之后关闭是不允许的，因为用户进程已经测试了数据连接是否需要“监听”；（请记住，用户必须在发送传输请求之前“监听”已关闭的数据端口）。为了防止竞态条件，服务器在关闭数据连接后（或如果连接保持打开状态），应发送应答226（文件传输完成），用户PI应等待其中之一的应答再发出新的传输命令。

任何时候，无论是用户还是服务器发现对方关闭连接，都应立即读取连接上剩余的数据，并自行关闭连接。

5.3.  命令

这些命令是通过控制连接传输的Telnet字符字符串，具体描述请参见FTP命令部分。命令的功能和语义在访问控制命令、传输参数命令、FTP服务命令以及其他杂项命令部分进行了说明。命令的语法在此处定义。

命令以命令代码开头，后跟一个参数字段。命令代码由四个或更少的字母字符组成。大小写字母应视为相同。因此，以下任何形式都可以表示“检索”命令：

Postel & Reynolds                                              [第45页]

RFC 959                                                     1985年10月
文件传输协议

                  RETR    Retr    retr    ReTr    rETr

这也适用于表示参数值的符号，例如ASCII类型的A或a。命令代码与参数字段之间用一个或多个空格分隔。

参数字段由一个可变长度的字符字符串组成，以字符序列<CRLF>（回车换行）结束，适用于NVT-ASCII表示；对于其他协商的语言，可能会使用不同的行结束字符。需要注意的是，服务器在收到行结束码之前不应采取任何行动。

语法在下文以NVT-ASCII方式规定。参数字段中的所有字符都是ASCII字符，包括任何ASCII表示的十进制整数。方括号表示可选的参数字段。如果未选择该选项，则默认值将被假定。

---

Postel & Reynolds                                              [第46页]

RFC 959                                                     1985年10月
文件传输协议

5.3.1.  FTP命令

以下是FTP命令：

用户 <SP> <用户名> <CRLF>
密码 <SP> <密码> <CRLF>
账户信息 <SP> <账户信息> <CRLF>
更改工作目录 <SP> <路径名> <CRLF>
上级目录 <CRLF>
挂载 <SP> <路径名> <CRLF>
退出 <CRLF>
重新登录 <CRLF>
端口 <SP> <主机-端口> <CRLF>
被动模式 <CRLF>
类型 <SP> <类型码> <CRLF>
结构 <SP> <结构码> <CRLF>
模式 <SP> <模式码> <CRLF>
检索文件 <SP> <路径名> <CRLF>
存储文件 <SP> <路径名> <CRLF>
存储唯一 <CRLF>
追加存储 <SP> <路径名> <CRLF>
扩展存储 <SP> <十进制整数>
             [<SP> R <SP> <十进制整数>] <CRLF>
恢复点 <SP> <标记> <CRLF>
重命名从 <SP> <路径名> <CRLF>
重命名到 <SP> <路径名> <CRLF>
中止 <CRLF>
删除 <SP> <路径名> <CRLF>
删除目录 <SP> <路径名> <CRLF>
创建目录 <SP> <路径名> <CRLF>
打印工作目录 <CRLF>
列出目录内容 [<SP> <路径名>] <CRLF>
列出文件名列表 [<SP> <路径名>] <CRLF>
站点命令 <SP> <字符串> <CRLF>
系统类型 <CRLF>
状态 [<SP> <路径名>] <CRLF>
帮助 [<SP> <字符串>] <CRLF>
无操作 <CRLF>





Postel & Reynolds                                              [第47页]



RFC 959                                                     1985年10月
文件传输协议


5.3.2.  FTP命令参数

上述参数字段的语法（在适用时使用BNF符号表示）为：

<用户名> ::= <字符串>
<密码> ::= <字符串>
<账户信息> ::= <字符串>
<字符串> ::= <字符> | <字符><字符串>
<字符> ::= 任何128个ASCII字符，除<CR>和<LF>之外
<标记> ::= <预定义字符串>
<预定义字符串> ::= <预定义字符> | <预定义字符><预定义字符串>
<预定义字符> ::= 可打印字符，ASCII码33至126
<字节大小> ::= <数字>
<主机端口> ::= <主机号码>,<端口号码>
<主机号码> ::= <数字>,<数字>,<数字>,<数字>
<端口号码> ::= <数字>,<数字>
<数字> ::= 任何1至255的十进制整数
<类型码> ::= N | T | C
<类型码> ::= A [<空格> <结构码>]
             | E [<空格> <结构码>]
             | I
             | L <空格> <字节大小>
<结构码> ::= F | R | P
<模式码> ::= S | B | C
<路径名> ::= <字符串>
<十进制整数> ::= 任何十进制整数





Postel & Reynolds                                              [第48页]

RFC 959  1985年10月
文件传输协议

5.4. 命令与应答的排序

用户与服务器之间的通信旨在实现交替对话。因此，用户发出一条FTP命令，服务器则以一个提示性的主要应答进行回应。在用户收到此初始的成功或失败的主要应答之前，不应发送后续命令。

某些命令需要第二次应答，用户也应等待该应答。这些应答可能报告文件传输的进度或完成情况，或通知数据连接的关闭。它们是对文件传输命令的次要应答。

一个重要的通知应答组是连接问候。在正常情况下，服务器在连接建立完成后会发送一条220应答，内容为“等待输入”。用户应等待此问候消息后再发送任何命令。如果服务器暂时无法接受输入，应立即发送120“预期延迟”应答，待准备就绪后再发出220应答。这样，用户就知道在出现延迟时不要挂断连接。

自发应答

有时，“系统”会主动向用户（通常是所有用户）发送消息。例如，“系统将在15分钟后关闭”。FTP协议没有规定服务器可以主动向用户发送此类信息。建议将此类信息排入服务器的队列，并在下一次应答中传递给用户（可能以多行应答的形式）。

下表列出了每个命令的成功与失败的备选应答。这些应答必须严格遵守；服务器可以在应答中替换文本，但代码数字和特定命令应答序列所暗示的含义和动作不能更改。

命令-应答序列

在本节中，展示了命令与应答的序列。每个命令都列出其可能的应答；命令组被一起列出。首先列出预备应答（并在其下缩进列出随后的应答），然后是成功和失败的完成应答，最后是中间应答，后续的命令序列也在其中列出。这份列表构成了状态图的基础，状态图将另行介绍。

连接建立
   120
      220
   220
   421
登录
   USER
      230
      530
      500, 501, 421
      331, 332
   PASS
      230
      202
      530
      500, 501, 503, 421
      332
   ACCT
      230
      202
      530
      500, 501, 503, 421
   CWD（更改工作目录）
      250
      500, 501, 502, 421, 530, 550
   CDUP（上级目录）
      200
      500, 501, 502, 421, 530, 550
   SMNT（挂载）
      202, 250
      500, 501, 502, 421, 530, 550
退出登录
   REIN（重新登录）
      120
         220
      220
      421
      500, 502
   QUIT（退出）
      221
      500

Postel & Reynolds                                              [第50页]

RFC 959                                                     1985年10月
文件传输协议

传输参数
   PORT（端口）
      200
      500, 501, 421, 530
   PASV（被动模式）
      227
      500, 501, 502, 421, 530
   MODE（传输模式）
      200
      500, 501, 504, 421, 530
   TYPE（数据类型）
      200
      500, 501, 504, 421, 530
   STRU（结构类型）
      200
      500, 501, 504, 421, 530

文件操作命令
   ALLO（预留空间）
      200
      202
      500, 501, 504, 421, 530
   REST（断点续传）
      500, 501, 502, 421, 530
      350
   STOR（存储文件）
      125, 150
         （110）
         226, 250
         425, 426, 451, 551, 552
      532, 450, 452, 553
      500, 501, 421, 530
   STOU（存储唯一文件）
      125, 150
         （110）
         226, 250
         425, 426, 451, 551, 552
      532, 450, 452, 553
      500, 501, 421, 530
   RETR（检索文件）
      125, 150
         （110）
         226, 250
         425, 426, 451
      450, 550
      500, 501, 421, 530

列表
  125, 150
    226, 250
    425, 426, 451
  450
  500, 501, 502, 421, 530
NLST
  125, 150
    226, 250
    425, 426, 451
  450
  500, 501, 502, 421, 530
APPE
  125, 150
    (110)
    226, 250
    425, 426, 451, 551, 552
  532, 450, 550, 452, 553
  500, 501, 502, 421, 530
RNFR
  450, 550
  500, 501, 502, 421, 530
  350
RNTO
  250
  532, 553
  500, 501, 502, 503, 421, 530
DELE
  250
  450, 550
  500, 501, 502, 421, 530
RMD
  250
  500, 501, 502, 421, 530, 550
MKD
  257
  500, 501, 502, 421, 530, 550
PWD
  257
  500, 501, 502, 421, 550
ABOR
  225, 226
  500, 501, 502, 421

Postel & Reynolds                                              [第52页]

RFC 959                                                     1985年10月
文件传输协议

信息性命令
  SYST
    215
    500, 501, 502, 421
  STAT
    211, 212, 213
    450
    500, 501, 502, 421, 530
  HELP
    211, 214
    500, 501, 502, 421

其他命令
  SITE
    200
    202
    500, 501, 530
  NOOP
    200
    500, 421

6. 状态图

这里我们展示一个非常简单的FTP实现的状态图。只使用了应答码的第一位数字。每组FTP命令或命令序列都有一个状态图。

命令组的划分是通过为每个命令构建模型，然后将结构相同的模型的命令归为一组。

对于每个命令或命令序列，可能的结果有三种：成功（S）、失败（F）和错误（E）。在下面的状态图中，我们用符号B表示“开始”，用W表示“等待应答”。

我们首先展示代表最大组FTP命令的图示：

      
                               1,3    +---+
                          ----------->| E |
                         |            +---+
                         |
      +---+    命令    +---+    2      +---+
      | B |---------->| W |---------->| S |
      +---+           +---+           +---+
                         |
                         |     4,5    +---+
                          ----------->| F |
                                      +---+
      

该图模型涵盖的命令包括：

ABOR（中止传输）、ALLO（预留空间）、DELE（删除文件）、CWD（更改工作目录）、CDUP（上级目录）、SMNT（挂载文件系统）、HELP（帮助）、MODE（传输模式）、NOOP（无操作）、PASV（被动模式）、QUIT（退出）、SITE（站点特定命令）、PORT（主动模式端口）、SYST（系统类型）、STAT（状态查询）、RMD（删除目录）、MKD（创建目录）、PWD（打印工作目录）、STRU（结构类型）、TYPE（数据类型）。

---

RFC 959 文件传输协议（1985年10月）

另一组大型命令由一个非常相似的图示表示：

      
                               3      +---+
                          ----------->| E |
                         |            +---+
                         |
      +---+    命令    +---+    2      +---+
      | B |---------->| W |---------->| S |
      +---+       --->+---+           +---+
                 |     | |
                 |     | |     4,5    +---+
                 |  1  |  ----------->| F |
                  -----               +---+
      

该图模型涵盖的命令包括：

APPE（追加写入）、LIST（列出目录）、NLST（列出文件名）、REIN（重新登录）、RETR（检索文件）、STOR（存储文件）、STOU（存储唯一文件）。

请注意，第二个模型也可以用来表示第一组命令，唯一的区别在于第一组命令中，100系列的应答是意外的，因此被视为错误；而第二组命令则期望（有些可能要求）收到100系列的应答。记住，每个命令最多只允许一个100系列的应答。

其余的图示模型描述命令序列，也许最简单的是重命名序列：

      
      +---+   RNFR    +---+    1,2    +---+
      | B |---------->| W |---------->| E |
      +---+           +---+        -->+---+
                       | |        |
                3      | | 4,5    |
         --------------  ------   |
        |                      |  |   +---+
        |               ------------->| S |
        |              |   1,3 |  |   +---+
        |             2|  --------
        |              | |     |
        V              | |     |
      +---+   RNTO    +---+ 4,5 ----->+---+
      |   |---------->| W |---------->| F |
      +---+           +---+           +---+

以下是对上述英文内容的中文翻译：

---

下一张图是重启（Restart）命令的简易模型：

      
      +---+   REST    +---+    1,2    +---+
      | B |---------->| W |---------->| E |
      +---+           +---+        -->+---+
                       | |        |
                3      | | 4,5    |
         --------------  ------   |
        |                      |  |   +---+
        |               ------------->| S |
        |              |   3   |  |   +---+
        |             2|  --------
        |              | |     |
        V              | |     |
      +---+   命令     +---+ 4,5 ----->+---+
      |   |---------->| W |---------->| F |
      +---+        -->+---+           +---+
                  |      |
                  |  1   |
                   ------
      

其中，“命令”可以是 APPE、STOR 或 RETR。

我们注意到，上述三种模型是相似的。重启（Restart）与重命名（Rename）模型的不同之处仅在于第二阶段对 100 系列应答的处理，而第二组模型期望（有些可能需要）收到 100 系列的应答。请记住，每个命令最多只允许一个 100 系列的应答。

---

最复杂的图是关于登录（Login）序列的：

      
                            1
      +---+   USER    +---+------------->+---+
      | B |---------->| W | 2       ---->| E |
      +---+           +---+------  |  -->+---+
                       | |       | | |
                     3 | | 4,5   | | |
         --------------   -----  | | |
        |                      | | | |
        |                      | | | |
        |                 ---------  |
        |               1|     | |   |
        V                |     | |   |
      +---+   PASS    +---+ 2  |  ------>+---+
      |   |---------->| W |------------->| S |
      +---+           +---+   ---------->+---+
                       | |   | |     |
                     3 | |4,5| |     |
         --------------   --------   |
        |                    | |  |  |
        |                    | |  |  |
        |                 -----------
        |             1,3|   | |  |
        V                |  2| |  |
      +---+   ACCT    +---+--  |   ----->+---+
      |   |---------->| W | 4,5 -------->| F |
      +---+           +---+------------->+---+

---

最后，我们提供一个通用的图示，用于模拟命令与应答的交互过程：

以下是英文内容的中文翻译：

```
      
               ------------------------------------
              |                                    |
      开始   |                                    |
        |     V                                    |
        |   +---+  命令   +---+  2         +---+     |
         -->|   |------->|   |---------->|   |     |
            |   |        | W |           | S |-----|
         -->|   |     -->|   |-----      |   |     |
        |   +---+    |   +---+ 4,5 |     +---+     |
        |     |      |    | |      |               |
        |     |      |   1| |3     |     +---+     |
        |     |      |    | |      |     |   |     |
        |     |       ----  |       ---->| F |-----
        |     |             |            |   |
        |     |             |            +---+
         -------------------
              |
              |
              V
             结束
```

ftp（主机） multics<CR>         连接到主机S，端口L，
                                     建立控制连接。
                                     <---- 220 服务准备就绪<CRLF>。
用户名 Doe <CR>                   USER Doe<CRLF>---->
                                     <---- 331 用户名正确，
                                               需要密码<CRLF>。
密码 mumble <CR>                  PASS mumble<CRLF>---->
                                     <---- 230 用户已登录<CRLF>。
检索（本地类型）ASCII<CR>
（本地路径名）test 1 <CR>        用户-FTP以ASCII模式打开本地文件。
（远程路径名）test.pl1<CR>        RETR test.pl1<CRLF> ---->
                                     <---- 150 文件状态正常；
                                           即将打开数据连接<CRLF>。
                                     服务器建立到端口U的数据连接。
      
                                     <---- 226 数据连接关闭，
                                         文件传输成功<CRLF>。
类型 图像<CR>                     TYPE I<CRLF> ---->
                                     <---- 200 命令成功<CRLF>
存储（本地类型）图像<CR>
（本地路径名）文件转储<CR>        用户-FTP以图像模式打开本地文件。
（远程路径名）>udd>cn>fd<CR>     STOR >udd>cn>fd<CRLF> ---->
                                     <---- 550 访问被拒绝<CRLF>
终止                              QUIT <CRLF> ---->
                                     服务器关闭所有连接。

8. 连接建立

   FTP控制连接通过TCP在用户进程端口U和服务器进程端口L之间建立。该协议被分配使用服务端口21（八进制25），即L=21。

Postel & Reynolds                                              [第59页]

RFC 959                                                     1985年10月
文件传输协议

附录一 - 页面结构

   支持FTP页面结构的需求主要源于在TOPS-20系统之间高效传输文件的需要，特别是NLS使用的文件。

   TOPS-20的文件系统基于页面的概念。操作系统在以页面为单位操作文件时效率最高。操作系统提供一个接口，使许多应用程序将文件视为连续的字符流。然而，少数应用程序直接使用底层的页面结构，其中一些会创建空洞文件。

   一个TOPS-20磁盘文件由四部分组成：路径名、页面表、一组（可能为空的）页面，以及一组属性。

路径名在RETR或STOR命令中指定。它包括目录名、文件名、文件扩展名和生成号。

页表最多包含2**18个条目。每个条目可以为空，或者指向一个页面。如果不为空，还包含一些特定于页面的访问位；并非所有文件的页面都需要具有相同的访问保护。

一个页面是由连续的512个36位字组成。

文件的属性存储在文件描述符块（FDB）中，包括创建时间、写入时间、读取时间、写入者的字节数、文件结束指针、读取和写入次数、备份系统磁带编号等。

请注意，页表中的条目没有要求必须连续。空的页表槽可以位于已占用的槽之间。此外，文件结束指针只是一个数字，并不一定指向文件中的“最后”数据。TOPS-20中的普通顺序I/O调用会使文件结束指针位于最后写入的数据之后，但其他操作可能会导致它不在那儿，具体取决于特定的编程系统。

实际上，在这两种特殊情况下——“空洞”文件和文件结束指针不在文件末尾——都可能出现在NLS数据文件中。

TOPS-20的分页文件可以通过FTP传输参数：TYPE L 36、STRU P和MODE S（实际上也可以使用任何模式）进行传输。

每一页信息都带有一个头部。每个头部字段（逻辑字节）是一个TOPS-20字，因为TYPE是L 36。

头部字段包括：

- 字0：头部长度。

  头部长度为5。

- 字1：页面索引。

  如果数据是磁盘文件页面，则此数字表示该页面在文件页面映射中的编号。文件中的空洞（空白区域）不会被传输。注意，空洞并不等同于一页全零。

- 字2：数据长度。

  该页面中的数据字数（不包括头部）。因此，整个传输单元的总长度为头部长度加数据长度。

- 字3：页面类型。

  表示此块的类型编码。数据页面为类型3，FDB页面为类型2。

- 字4：页面访问控制。

  与文件页面映射中页面相关的访问位。（此完整字的内容由从网络到磁盘的程序放入SPACS的AC2中。）

在头部之后是数据长度（Data Length）数据字。数据长度目前为512（用于数据页）或31（用于文件目录块FDB）。磁盘文件页中的尾随零可以被丢弃，因此在这种情况下，数据长度可能小于512。

后续内容为RFC 959文件传输协议的相关说明，以下为中文翻译：

---

后缀和雷诺兹                                              [第61页]

RFC 959                                                     1985年10月
文件传输协议

附录二 - 目录命令

由于UNIX具有树状目录结构，目录的操作与普通文件一样方便，因此扩展FTP服务器以支持创建目录的命令是有用的。鉴于ARPA-Internet上的其他主机（包括TOPS-20和Multics）也具有树状目录结构，这些命令尽可能具有通用性。

在FTP中新增了四个目录命令：

- MKD pathname

  创建一个名为“pathname”的目录。

- RMD pathname

  删除名为“pathname”的目录。

- PWD

  打印当前工作目录的名称。

- CDUP

  切换到当前工作目录的父目录。

“pathname”参数应作为当前工作目录的子目录进行创建（删除），除非“pathname”字符串包含足够的信息以向服务器指定其他路径，例如，“pathname”是绝对路径名（在UNIX和Multics中），或者“pathname”类似于“<absolute.path>”以适用于TOPS-20。

回复代码

- CDUP命令是CWD的特殊情况，旨在简化在不同操作系统之间传输目录树时的程序实现，因为不同系统对父目录的命名语法不同。CDUP的回复代码应与CWD的回复代码相同。

- RMD的回复代码应与其文件操作对应的DELE命令的回复代码相同。

- MKD的回复代码则更为复杂。新创建的目录可能会成为未来CWD命令的目标。不幸的是，MKD的参数不总是适合作为CWD的参数。例如，当通过仅提供子目录名来创建TOPS-20子目录时，就是这种情况。也就是说，在使用TOPS-20服务器的FTP中，以下命令序列：

  MKD MYDIR
  CWD MYDIR

  可能会遇到问题，因为“MYDIR”只是子目录名，未提供完整路径。

---

失败。新目录只能通过其“绝对”路径名来引用；例如，如果在连接到目录<DFRANKLIN>时发出了MKD命令，那么新子目录只能用<DFRANKLIN.MYDIR>这个名称来引用。

即使在UNIX和Multics系统上，传递给MKD的参数也可能不合适。如果使用的是“相对”路径名（即相对于当前目录解释的路径名），用户必须处于相同的当前目录中才能访问该子目录。根据不同的应用，这可能会带来不便。而且，这种方式的鲁棒性也不强。

为了解决这些问题，在成功执行MKD命令后，服务器应返回一行类似于：

    257<空格>"<目录名>"<空格><说明>

也就是说，服务器会告诉用户在引用新创建的目录时应使用的字符串。目录名可以包含任何字符；如果目录名中嵌有双引号，应通过双引号进行转义（即“引号加倍”的方式）。

例如，用户连接到目录/usr/dm，并创建一个名为pathname的子目录：

    CWD /usr/dm
    200 目录已切换到 /usr/dm
    MKD pathname
    257 "/usr/dm/pathname" 目录已创建

如果目录名中包含双引号，例如：

    MKD foo"bar
    257 "/usr/dm/foo""bar" 目录已创建
    CWD /usr/dm/foo"bar
    200 目录已切换到 /usr/dm/foo"bar

具有相同名称的子目录已存在是一个错误，在这种情况下，服务器必须返回“访问被拒绝”的错误回复。

    CWD /usr/dm
    200 目录已切换到 /usr/dm
    MKD pathname
    521-"/usr/dm/pathname" 目录已存在；
    521 不采取任何操作。

MKD的失败回复与其创建文件的对应命令STOR类似。此外，如果子目录的名称与某个文件名冲突（即文件已存在且与子目录同名），也会返回“访问被拒绝”的错误（在UNIX系统上这是个问题，但在TOPS-20系统上不应成为问题）。

基本上，由于PWD命令返回的信息与成功的MKD命令相同，成功的PWD命令也会使用257的回复码。

【细节说明】

因为这些命令在将子树从一台机器传输到另一台机器时最为有用，请注意，除非目标主机能提供足够的信息以示区别，否则对 MKD 命令的参数应被解释为当前工作目录的子目录。在 TOPS-20 系统中，以下是其使用的一个假设示例：

   CWD <some.where>
   200 工作目录已更改
   MKD overrainbow
   257 "<some.where.overrainbow>" 目录已创建
   CWD overrainbow
   431 没有这样的目录
   CWD <some.where.overrainbow>
   200 工作目录已更改

   CWD <some.where>
   200 工作目录已更改为 <some.where>
   MKD <unambiguous>
   257 "<unambiguous>" 目录已创建
   CWD <unambiguous>

请注意，第一个示例中的结果是连接目录的子目录。相反，第二个示例中的参数包含足够的信息，使得 TOPS-20 能够判断 <unambiguous> 目录是一个顶层目录。此外，还应注意，在第一个示例中，用户“违反”了协议，因为他试图用一个不同于 TOPS-20 返回的名称访问新创建的目录。如果存在一个 <overrainbow> 目录，可能会导致问题；这是某些 TOPS-20 实现固有的歧义。类似的考虑也适用于 RMD 命令。关键点在于：除非这样做会违反主机关于相对路径和绝对路径的约定，否则主机应将 MKD 和 RMD 命令的操作数视为子目录。对 MKD 命令的 257 回复必须始终包含所创建目录的绝对路径名。

（以下为 RFC 959 关于 FTP 的相关文献资料）

附录三 - 关于 FTP 的 RFC 文献

- Bhushan, Abhay，《文件传输协议》，RFC 114（NIC 5823），MIT-Project MAC，1971年4月16日。

- Harslem, Eric 和 John Heafner，《关于 RFC 114（文件传输协议）》的评论，RFC 141（NIC 6726），RAND，1971年4月29日。

- Bhushan, Abhay 等，《文件传输协议》，RFC 172（NIC 6794），MIT-Project MAC，1971年6月23日。

- Braden, Bob，《关于 DTP 和 FTP 提案的评论》，RFC 238（NIC 7663），UCLA/CCN，1971年9月29日。

- Bhushan, Abhay 等，《文件传输协议》，RFC 265（NIC 7813），MIT-Project MAC，1971年11月17日。

麦肯齐，亚历克斯，“对文件传输协议的建议补充”，
RFC 281（NIC 8163），BBN，1971年12月8日。

布尚，阿拜，“在文件传输协议中使用‘设置数据类型’事务”，
RFC 294（NIC 8304），MIT-Project MAC，1972年1月25日。

布尚，阿拜，“文件传输协议”，
RFC 354（NIC 10596），MIT-Project MAC，1972年7月8日。

布尚，阿拜，“关于文件传输协议（RFC 354）的评论”，
RFC 385（NIC 11357），MIT-Project MAC，1972年8月18日。

希克斯，格雷格，“用户FTP文档”，
RFC 412（NIC 12404），犹他州，1972年11月27日。

布尚，阿拜，“文件传输协议（FTP）状态及进一步评论”，
RFC 414（NIC 12406），MIT-Project MAC，1972年11月20日。

布雷登，鲍勃，“关于文件传输协议的评论”，
RFC 430（NIC 13299），UCLA/CCN，1973年2月7日。

托马斯，鲍勃，及鲍勃·克莱门茨，“FTP服务器间交互”，
RFC 438（NIC 13770），BBN，1973年1月15日。

布雷登，鲍勃，“在FTP中打印文件”，
RFC 448（NIC 13299），UCLA/CCN，1973年2月27日。

麦肯齐，亚历克斯，“文件传输协议”，
RFC 454（NIC 14333），BBN，1973年2月16日。

波斯特尔与雷诺兹                                              [第66页]

RFC 959                                                     1985年10月
文件传输协议

布雷斯勒，鲍勃，及鲍勃·托马斯，“通过FTP检索邮件”，
RFC 458（NIC 14378），BBN-NET和BBN-TENEX，1973年2月20日。

尼古斯，南希，“文件传输协议”，
RFC 542（NIC 17759），BBN，1973年7月12日。

克里拉诺维奇，马克，及乔治·格雷格，“关于文件传输协议的评论”，
RFC 607（NIC 21255），UCSB，1974年1月7日。

波格兰，肯，及南希·尼古斯，“对RFC 607——文件传输协议评论的回应”，
RFC 614（NIC 21530），BBN，1974年1月28日。

克里拉诺维奇，马克，乔治·格雷格，韦恩·哈撒韦，及吉姆·怀特，“关于文件传输协议的评论”，
RFC 624（NIC 22054），UCSB，艾姆斯研究中心，SRI-ARC，1974年2月28日。

布尚，阿拜，“FTP评论及对RFC 430的回应”，
RFC 463（NIC 14573），MIT-DMCG，1973年2月21日。

布雷登，鲍勃，“FTP数据压缩”，
RFC 468（NIC 14742），UCLA/CCN，1973年3月8日。

布尚，阿拜，“FTP与网络邮件系统”，
RFC 475（NIC 14919），MIT-DMCG，1973年3月6日。

布雷斯勒，鲍勃，及鲍勃·托马斯，“FTP服务器间交互——第二部分”，
RFC 478（NIC 14947），BBN-NET和BBN-TENEX，1973年3月26日。

怀特，吉姆，“NIC期刊中FTP的使用”，
RFC 479（NIC 14948），SRI-ARC，1973年3月8日。

怀特，吉姆，“主机依赖的FTP参数”，
RFC 480（NIC 14949），SRI-ARC，1973年3月8日。

帕德利普斯基，迈克，“一个FTP命令命名问题”，
RFC 506（NIC 16157），MIT-Multics，1973年6月26日。

戴恩，约翰，“给FTP组的备忘录（文件访问协议提案）”，
RFC 520（NIC 16819），伊利诺伊州，1973年6月25日。

梅里曼，罗伯特，“UCSD-CC 服务器-FTP 设施”，RFC 532（NIC 17451），加州大学圣地亚哥分校计算机中心，1973年6月22日。

布拉登，鲍勃，“TENEX FTP 问题”，RFC 571（NIC 18974），加州大学洛杉矶分校/计算机网络中心，1973年11月15日。

后邮（Postel）与雷诺兹（Reynolds）                                              [第67页]

RFC 959                                                     1985年10月
文件传输协议

麦肯齐（McKenzie），亚历克斯，与乔恩·邮（Jon Postel），“Telnet 和 FTP 实现——时间表变更”，RFC 593（NIC 20615），BBN 和 MITRE，1973年11月29日。

苏斯曼（Sussman），朱莉，“使用 FTP 错误代码以实现更可靠的邮件服务”，RFC 630（NIC 30237），BBN，1974年4月10日。

邮（Postel），乔恩，“修订的 FTP 回复代码”，RFC 640（NIC 30843），加州大学洛杉矶分校/国家微电子中心（NMC），1974年6月5日。

哈维（Harvey），布莱恩，“保持现状”，RFC 686（NIC 32481），SU-AI，1975年5月10日。

哈维（Harvey），布莱恩，“再试一次 FTP”，RFC 691（NIC 32700），SU-AI，1975年5月28日。

利布（Lieb），J.，“FTP 的 CWD 命令”，RFC 697（NIC 32963），1975年7月14日。

哈伦斯坦（Harrenstien），肯，“FTP 扩展：XSEN”，RFC 737（NIC 42217），SRI-KL，1977年10月31日。

哈伦斯坦（Harrenstien），肯，“FTP 扩展：XRSQ/XRCP”，RFC 743（NIC 42758），SRI-KL，1977年12月30日。

莱布林（Lebling），P. 大卫，“FTP 邮件和 MLFL 调查”，RFC 751，麻省理工学院，1978年12月10日。

邮（Postel），乔恩，“文件传输协议规范”，RFC 765，信息科学研究所（ISI），1980年6月。

曼金斯（Mankins），大卫，弗兰克林（Dan Franklin）和欧文（Buzz Owen），“目录导向的 FTP 命令”，RFC 776，BBN，1980年12月。

帕德利普斯基（Padlipsky），迈克尔，“FTP 独特命名存储命令”，RFC 949，MITRE，1985年7月。

---

后邮（Postel）与雷诺兹（Reynolds）                                              [第68页]

RFC 959                                                     1985年10月
文件传输协议

参考文献

[1] 费恩勒（Feinler），伊丽莎白，“互联网协议过渡工作簿”，网络信息中心，斯坦福研究所（SRI）国际，1982年3月。

[2] 后邮（Postel），乔恩，“传输控制协议——DARPA互联网项目协议规范”，RFC 793，DARPA，1981年9月。

[3] 后邮（Postel），乔恩，与乔伊斯·雷诺兹（Joyce Reynolds），“Telnet 协议规范”，RFC 854，ISI，1983年5月。

[4] 雷诺兹（Reynolds），乔伊斯，与乔恩·邮（Jon Postel），“已分配编号”，RFC 943，ISI，1985年4月。
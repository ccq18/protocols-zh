# RFC 8259 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs8001-8500/rfc8259.txt

互联网工程任务组（IETF） T. Bray，编辑
征求意见稿：8259
废止：7159
2017年12月
类别：标准轨道
ISSN：2070-1721

JavaScript对象表示法（JSON）数据交换格式

摘要

JavaScript对象表示法（JSON）是一种轻量级、基于文本、与语言无关的数据交换格式。它源自ECMAScript编程语言标准。JSON定义了一套用于结构化数据便携式表示的小型格式规则。

本文档消除了与其他JSON规范之间的不一致之处，修正了规范中的错误，并提供了基于经验的互操作性指导。

本备忘录的状态

这是一个互联网标准轨道的文档。

该文档由互联网工程任务组（IETF）制定，代表了IETF社区的共识。它已经过公开审查，并获得互联网工程指导组（IESG）的批准发布。关于互联网标准的更多信息，请参见RFC 7841的第2节。

有关本文件当前状态、任何勘误表以及如何提供反馈的信息，可以访问https://www.rfc-editor.org/info/rfc8259。

版权声明

版权所有（c）2017年IETF信托及被列为作者的个人。保留所有权利。

本文件受BCP 78和IETF信托关于IETF文件的法律规定（https://trustee.ietf.org/license-info）约束，适用于本文件发布之日。请仔细阅读这些文件，因为它们描述了您对本文件的权利和限制。从本文件中提取的代码组件必须包括简化BSD许可证文本（详见信托法律规定第4.e节），并且在没有担保的情况下提供。

本文件可能包含在2008年11月10日之前发布或公开的IETF文件或贡献的内容。这些内容的版权控制人可能未授权IETF信托允许在IETF标准流程之外对其进行修改。在未获得版权控制人充分授权的情况下，不能在IETF标准流程之外修改本文件，也不能在IETF标准流程之外创建其派生作品，除非是为了将其格式化为RFC发布或翻译成非英语语言。

目录

1. 引言 ........................................ 3
  1.1. 本文使用的约定 ......................... 4
  1.2. JSON的规范 ............................. 4
  1.3. 本次修订介绍 ........................... 5
2. JSON语法 .................................... 5
3. 值 .......................................... 6
4. 对象 ........................................ 6
5. 数组 ........................................ 7
6. 数字 ........................................ 7
7. 字符串 ...................................... 8
8. 字符串和字符问题 ............................ 9
  8.1. 字符编码 ............................... 9
  8.2. Unicode字符 ............................ 10
  8.3. 字符串比较 ............................. 10
9. 解析器 ...................................... 10
10. 生成器 ..................................... 10
11. IANA考虑事项 ............................... 11
12. 安全性考虑 ................................. 12
13. 示例 ....................................... 12
14. 参考文献 ................................... 14
  14.1. 规范性参考文献 ....................... 14
  14.2. 补充性参考文献 ....................... 14
附录A. 与RFC 7159的变更 ...................... 16
贡献者 ......................................... 16
作者联系方式 ................................... 16

1. 引言

JavaScript对象表示法（JSON）是一种用于结构化数据序列化的文本格式。它源自JavaScript的对象字面量，定义在ECMAScript编程语言标准第三版（[ECMA-262]）中。

JSON可以表示四种基本类型（字符串、数字、布尔值和null）以及两种结构类型（对象和数组）。

字符串是零个或多个Unicode字符的序列[UNICODE]。请注意，此引用指向Unicode的最新版本，而非特定版本。未来Unicode规范的变更预计不会影响JSON的语法。

对象是无序的零个或多个名称/值对的集合，其中名称是字符串，值可以是字符串、数字、布尔值、null、对象或数组。

数组是有序的零个或多个值的序列。

“对象”和“数组”这两个术语源自JavaScript的习惯用法。

JSON的设计目标是简洁、便携、文本化，并且是JavaScript的子集。

1.1. 本文使用的约定

本文中，“必须”（MUST）、“不得”（MUST NOT）、“必需”（REQUIRED）、“应”（SHALL）、“不得应”（SHALL NOT）、“建议”（SHOULD）、“不建议”（SHOULD NOT）、“推荐”（RECOMMENDED）、“不推荐”（NOT RECOMMENDED）、“可以”（MAY）和“可选”（OPTIONAL）等关键词，只有在全部大写且如本文所示时，才按BCP 14 [RFC2119][RFC8174]的定义理解。

本文的语法规则按照[RFC5234]的描述进行解释。

1.2. JSON的规范

本文件取代了[RFC7159]。RFC7159废止了[RFC4627]，后者最初描述了JSON并注册了媒体类型“application/json”。

JSON也在[ECMA-404]中有描述。

前一句中的对ECMA-404的引用是规范性的，不是通常意义上的“实施者需要查阅以理解本文件”，而是强调在其所有规范中，“JSON文本”这一术语的定义没有不一致之处。然而，值得注意的是，ECMA-404允许一些实践，而这些实践在本规范中建议避免，以最大程度地实现互操作性。

两份规范的语法目标保持一致，尽管描述不同。如果发现两者之间存在差异，ECMA和IETF将合作更新两份文档。

如果未来任何一份文档发生变更，ECMA和IETF将共同努力，确保两份文档保持一致。

1.3. 本次修订介绍

自RFC 4627发布以来，JSON得到了广泛应用。这些经验揭示了一些模式，虽然被规范允许，但会引发互操作性问题。

此外，关于RFC 4627（见RFC勘误ID 607 [Err607] 和3607 [Err3607]）以及RFC 7159（见RFC勘误ID 3915 [Err3915]、4264 [Err4264]、4336 [Err4336] 和4388 [Err4388]）也报告了少量勘误。

本文件的目标是应用勘误，消除与其他JSON规范之间的不一致，并强调可能导致互操作性问题的做法。

2. JSON语法

一个JSON文本是由一系列标记组成。标记集包括六个结构字符、字符串、数字和三个字面值。

JSON文本是一个序列化的值。请注意，之前的某些JSON规范将JSON文本限制为对象或数组。只生成对象或数组的实现，在接收JSON文本时，将具有互操作性，因为所有实现都将接受这些作为符合规范的JSON文本。

      JSON文本 = ws 值 ws

以下是六个结构字符：

      begin-array     = ws %x5B ws  ; [ 左方括号

      begin-object    = ws %x7B ws  ; { 左大括号

      end-array       = ws %x5D ws  ; ] 右方括号

      end-object      = ws %x7D ws  ; } 右大括号

      name-separator  = ws %x3A ws  ; : 冒号

      value-separator = ws %x2C ws  ; , 逗号

无关紧要的空白字符允许出现在任何结构字符之前或之后。

      ws = *(
              %x20 /              ; 空格
              %x09 /              ; 水平制表符
              %x0A /              ; 换行符
              %x0D )              ; 回车符

3. 值

一个JSON值必须是对象、数组、数字或字符串，或以下三种字面值之一：

      false
      null
      true

字面值必须为小写。不允许其他字面值。

      value = false / null / true / object / array / number / string

      false = %x66.61.6c.73.65   ; false

      null  = %x6e.75.6c.6c      ; null

      true  = %x74.72.75.65      ; true

4. 对象

对象结构由一对大括号包围，内部包含零个或多个名称/值对（成员）。名称是字符串。每个名称后跟一个冒号，冒号后是对应的值。值与名称之间用单个冒号分隔。对象中的名称应唯一。

      object = begin-object [ member *( value-separator member ) ] end-object

      member = string name-separator value

当对象中的所有名称都唯一时，软件实现接收该对象的行为是互操作的，因为所有实现都将对名称-值映射达成一致。当对象中的名称不唯一时，接收该对象的软件行为将不可预测。许多实现只报告最后一对名称/值，其他实现则报告错误或无法解析该对象，还有一些实现会报告所有的名称/值对，包括重复的。

（未完，全文较长，以上为部分翻译内容，后续部分可继续提供。）

JSON解析库在是否将对象成员的顺序暴露给调用软件方面存在差异。行为不依赖于成员顺序的实现将具有互操作性，因为它们不会受到这些差异的影响。

5. 数组

数组结构用方括号括起来，包含零个或多个值（或元素）。元素之间用逗号分隔。

array = begin-array [ value *( value-separator value ) ] end-array

数组中的值类型没有要求必须相同。

6. 数字

数字的表示方式类似于大多数编程语言中使用的方式。数字以十进制使用数字字符表示，包含一个整数部分，可以前置一个可选的负号，后面可以跟有小数部分和/或指数部分。前导零不允许。

小数部分是一个小数点后跟一个或多个数字。

指数部分以大写或小写字母E开头，后面可以跟一个正号或负号，再跟一个或多个数字。

数字值不能表示为grammar中未定义的形式（如Infinity和NaN）是不允许的。

number = [ minus ] int [ frac ] [ exp ]

decimal-point = %x2E       ; .

digit1-9 = %x31-39         ; 1-9

e = %x65 / %x45            ; e E

exp = e [ minus / plus ] 1*DIGIT

frac = decimal-point 1*DIGIT

int = zero / ( digit1-9 *DIGIT )

minus = %x2D               ; -

plus = %x2B                ; +

zero = %x30                ; 0

该规范允许实现对接受数字的范围和精度设置限制。由于实现普遍支持IEEE 754二进制64位（双精度）数字[IEEE754]，因此可以通过期望的精度范围内的近似实现实现良好的互操作性。像1E400或3.141592653589793238462643383279这样的JSON数字可能表明潜在的互操作性问题，因为它暗示创建它的软件期望接收软件具有比广泛可用的更高的数值范围和精度。

注意，当使用此类软件时，范围在 [-(2^53)+1, (2^53)-1] 内的整数在互操作性方面是可行的，即实现会在其数值上达成一致。

7. 字符串

字符串的表示类似于C语言家族的惯例。字符串以引号开始和结束。所有Unicode字符都可以放在引号内，除了必须转义的字符：引号、反斜杠和控制字符（U+0000到U+001F）。

任何字符都可以被转义。如果字符在基本多语言平面（U+0000到U+FFFF）内，则可以用六字符序列表示：反斜杠，后跟小写字母u，再跟四个十六进制数字，编码字符的码点。十六进制字母A到F可以是大写或小写。例如，只包含单个反斜杠字符的字符串可以表示为"\u005C"。

另外，也有两字符序列的转义表示一些常用字符。例如，只包含单个反斜杠字符的字符串可以更紧凑地表示为"\\"。

对于不在基本多语言平面内的扩展字符，使用12字符序列编码UTF-16代理对。例如，只包含G音符字符（U+1D11E）的字符串可以表示为"\uD834\uDD1E"。

string = quotation-mark *char quotation-mark

char = unescaped /
    escape (
        %x22 /          ; " 引号 U+0022
        %x5C /          ; \ 反斜杠 U+005C
        %x2F /          ; / 斜杠 U+002F
        %x62 /          ; b 退格符 U+0008
        %x66 /          ; f 换页符 U+000C
        %x6E /          ; n 换行符 U+000A
        %x72 /          ; r 回车符 U+000D
        %x74 /          ; t 制表符 U+0009
        %x75 4HEXDIG )  ; uXXXX  Unicode字符

escape = %x5C              ; \

quotation-mark = %x22      ; "

unescaped = %x20-21 / %x23-5B / %x5D-10FFFF

8. 字符串和字符问题

8.1 字符编码

在非封闭生态系统中的系统之间交换的JSON文本必须使用UTF-8 [RFC3629]编码。

之前的JSON规范未强制要求使用UTF-8进行传输，但绝大多数基于JSON的软件实现都选择使用UTF-8编码，甚至成为实现互操作性的唯一途径。

实现不得在网络传输的JSON文本开头添加字节顺序标记（U+FEFF）。为了互操作性，解析JSON文本的实现可以忽略字节顺序标记的存在，而不是将其视为错误。

8.2 Unicode字符

当一个JSON文本中的所有字符串都由Unicode字符[UNICODE]（无论是否转义）组成时，该JSON文本在互操作性方面是可靠的，即所有解析它的软件实现都将就对象和数组中名称及字符串值的内容达成一致。

然而，本规范中的ABNF允许成员名和字符串值包含无法编码Unicode字符的比特序列；例如"\uDEAD"（未配对的UTF-16代理对）。曾经观察到的实例包括库在截断UTF-16字符串时未检查是否拆分了代理对。接收包含此类值的JSON文本的软件行为不可预测，例如，可能会返回不同的字符串长度值，甚至导致严重的运行时异常。

8.3 字符串比较

软件实现通常需要测试对象成员的名称是否相等。将文本表示转换为Unicode码单元序列后逐个比较的实现，在所有情况下都能达成一致，即在字符串相等或不等方面达成一致。例如，未转换转义字符的字符串比较实现可能错误地认为"a\\b"和"a\u005Cb"不相等。

9. 解析器

JSON解析器将JSON文本转换为另一种表示形式。JSON解析器必须接受所有符合JSON语法的文本。也可以接受非JSON格式或扩展。

实现可以对接受的文本大小、嵌套深度、数字范围和精度、字符串长度和字符内容设置限制。

10. 生成器

JSON生成器生成JSON文本。生成的文本必须严格符合JSON语法。

11. IANA考虑事项

JSON的媒体类型为application/json。

类型名：application

子类型名：json

必需参数：无

可选参数：无

编码考虑：二进制

安全考虑：参见RFC 8259第12节

互操作性考虑：详见RFC 8259

已发布的规范：RFC 8259

使用此媒体类型的应用程序：
JSON已被用于在用以下编程语言编写的应用程序之间交换数据：ActionScript、C、C#、Clojure、ColdFusion、Common Lisp、E、Erlang、Go、Java、JavaScript、Lua、Objective CAML、Perl、PHP、Python、Rebol、Ruby、Scala和Scheme。

附加信息：
魔数：无
文件扩展名：.json
Macintosh文件类型代码：TEXT

联系人及电子邮箱：
IESG
<iesg@ietf.org>

预期用途：普通

使用限制：无

作者：
Douglas Crockford
<douglas@crockford.com>

变更控制：
IESG
<iesg@ietf.org>

注意：此注册未定义“charset”参数，添加此参数对符合规范的接收方几乎没有影响。

12. 安全考虑

通常，脚本语言存在安全问题。JSON是JavaScript的子集，但排除了赋值和调用。

由于JSON的语法借鉴自JavaScript，因此可以使用该语言的"eval()"函数解析大部分JSON文本（但不是全部；某些字符如U+2028行分隔符和U+2029段落分隔符在JSON中合法，但在JavaScript中不合法）。这通常构成不可接受的安全风险，因为文本可能包含可执行代码和数据声明。相同的考虑也适用于任何其他编程语言中符合其语法的eval()类函数。

13. 示例

这是一个JSON对象：

{
  "Image": {
      "Width":  800,
      "Height": 600,
      "Title":  "View from 15th Floor",
      "Thumbnail": {
          "Url":    "http://www.example.com/image/481989943",
          "Height": 125,
          "Width":  100
      },
      "Animated" : false,
      "IDs": [116, 943, 234, 38793]
    }
}

其Image成员是一个对象，包含一个Thumbnail对象和一个ID数组。

这是包含两个对象的JSON数组：

[
  {
     "precision": "zip",
     "Latitude":  37.7668,
     "Longitude": -122.3959,
     "Address":   "",
     "City":      "SAN FRANCISCO",
     "State":     "CA",
     "Zip":       "94107",
     "Country":   "US"
  },
  {
     "precision": "zip",
     "Latitude":  37.371991,
     "Longitude": -122.026020,
     "Address":   "",
     "City":      "SUNNYVALE",
     "State":     "CA",
     "Zip":       "94085",
     "Country":   "US"
  }
]

以下是三个只包含值的简短JSON文本：

"Hello world!"

42

true

14. 参考文献

14.1 标准性参考

[ECMA-404] Ecma International，“JSON数据交换格式”，标准ECMA-404，<http://www.ecma-international.org/publications/standards/Ecma-404.htm>。

[IEEE754] IEEE，“IEEE浮点算术标准”，IEEE 754。

[RFC2119] Bradner, S.，“在RFC中用以指示需求级别的关键词”，BCP 14，RFC 2119，DOI 10.17487/RFC2119，1997年3月，<https://www.rfc-editor.org/info/rfc2119>。

[RFC3629] Yergeau, F.，“UTF-8，ISO 10646的变换格式”，STD 63，RFC 3629，DOI 10.17487/RFC3629，2003年11月，<https://www.rfc-editor.org/info/rfc3629>。

[RFC5234] Crocker, D.，等，“语法规范的扩展BNF：ABNF”，STD 68，RFC 5234，DOI 10.17487/RFC5234，2008年1月，<https://www.rfc-editor.org/info/rfc5234>。

[RFC8174] Leiba, B.，“RFC 2119关键词的大写与小写的歧义”，BCP 14，RFC 8174，DOI 10.17487/RFC8174，2017年5月，<https://www.rfc-editor.org/info/rfc8174>。

[UNICODE] Unicode联盟，“Unicode标准”，<http://www.unicode.org/versions/latest/>。

14.2 非标准性参考

[ECMA-262] Ecma International，“ECMAScript语言规范”，标准ECMA-262，第3版，1999年12月，<http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf>。

[Err3607] RFC勘误，Erratum ID 3607，RFC 4627，<https://www.rfc-editor.org/errata/eid3607>。

[Err3915] RFC勘误，Erratum ID 3915，RFC 7159，<https://www.rfc-editor.org/errata/eid3915>。

[Err4264] RFC勘误，Erratum ID 4264，RFC 7159，<https://www.rfc-editor.org/errata/eid4264>。

[Err4336] RFC勘误，Erratum ID 4336，RFC 7159，<https://www.rfc-editor.org/errata/eid4336>。

[Err4388] RFC勘误，Erratum ID 4388，RFC 7159，<https://www.rfc-editor.org/errata/eid4388>。

[Err607] RFC勘误，Erratum ID 607，RFC 4627，<https://www.rfc-editor.org/errata/eid607>。

[RFC4627] Crockford, D.，“JavaScript对象表示法（JSON）的application/json媒体类型”，RFC 4627，DOI 10.17487/RFC4627，2006年7月，<https://www.rfc-editor.org/info/rfc4627>。

[RFC7159] Bray, T.，等，“JavaScript对象表示法（JSON）数据交换格式”，RFC 7159，DOI 10.17487/RFC7159，2014年3月，<https://www.rfc-editor.org/info/rfc7159>。

附录A. 与RFC 7159的变更

本节列出本文件与RFC 7159之间的差异。

- 1.2节已更新，反映ECMA-262中JSON规范的移除，将ECMA-404作为规范性引用，并说明“规范性”的具体含义。

- 1.3节已更新，反映针对RFC 7159（而非RFC 4627）提出的勘误。

- 8.1节已更改，要求在网络传输中使用UTF-8编码。

- 12节已更新，增强了对使用ECMAScript的eval()函数带来的安全风险描述的精确性。

- 14.1节已更新，加入ECMA-404为规范性参考。

- 14.2节已更新，移除ECMA-404，更新ECMA-262版本，刷新勘误列表。

贡献者

RFC 4627由Douglas Crockford撰写。本文件是在此基础上做了少量修改，因此大部分内容来自他。

作者联系方式

Tim Bray（编辑）
Textuality

电子邮件：tbray@textuality.com

布雷                          标准轨道                   [第16页]
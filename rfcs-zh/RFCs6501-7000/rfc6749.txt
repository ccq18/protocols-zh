# RFC 6749 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs6501-7000/rfc6749.txt

互联网工程任务组（IETF）                     D. Hardt，主编
征求意见稿：6749                                    微软
废止：5849                                              2012年10月
类别：标准轨道
ISSN：2070-1721


                 OAuth 2.0 授权框架

摘要

   OAuth 2.0 授权框架允许第三方应用程序在代表资源拥有者的情况下，通过协调资源拥有者与HTTP服务之间的批准交互，获取对HTTP服务的有限访问权限，或者允许第三方应用程序自行获取访问权限。本规范取代并废止了RFC 5849中描述的OAuth 1.0协议。

本备忘录的状态

   这是一个互联网标准轨道的文档。

   本文档由互联网工程任务组（IETF）制定，代表IETF社区的共识。它已经过公开审查，并获得互联网工程指导组（IESG）的批准发布。关于互联网标准的更多信息，请参见RFC 5741的第2节。

   有关本文件的最新状态、任何勘误以及反馈方式的信息，可在 http://www.rfc-editor.org/info/rfc6749 获取。

版权声明

   版权所有 (c) 2012 IETF Trust及本文档作者。保留所有权利。

   本文档受BCP 78及IETF信托关于IETF文档的法律规定（http://trustee.ietf.org/license-info）约束，适用于本文档发布之日。请仔细阅读这些文件，它们描述了您对本文件的权利和限制。从本文档中提取的代码组件必须包含简化BSD许可证文本（详见信托法律条款第4.e节），且不提供任何担保。

Hardt                        标准轨道                    [第1页]

RFC 6749                        OAuth 2.0                   2012年10月

目录

1. 引言 ....................................................4
   1.1 角色 ..................................................6
   1.2 协议流程 ..............................................7
   1.3 授权授权方式 ..........................................8
        1.3.1 授权码 .........................................8
        1.3.2 隐式 ...........................................8
        1.3.3 资源拥有者密码凭证 ............................9
        1.3.4 客户端凭证 ..................................9
   1.4 访问令牌 ............................................10
   1.5 刷新令牌 ............................................10
   1.6 TLS版本 .............................................12
   1.7 HTTP重定向 ..........................................12
   1.8 互操作性 ............................................12
   1.9 表示符约定 ..........................................13
2. 客户端注册 ............................................13
   2.1 客户端类型 ..........................................14
   2.2 客户端标识符 ........................................15
   2.3 客户端认证 ..........................................16
        2.3.1 客户端密码 ..................................16
        2.3.2 其他认证方法 ................................17
   2.4 未注册客户端 ........................................17
3. 协议端点 ..............................................18
   3.1 授权端点 ............................................18
        3.1.1 响应类型 ....................................19
        3.1.2 重定向端点 ..................................19
   3.2 令牌端点 ............................................21
        3.2.1 客户端认证 ..................................22
   3.3 访问令牌范围 ........................................23
4. 获取授权 ..............................................23
   4.1 授权码授权 ..........................................24
        4.1.1 授权请求 ....................................25
        4.1.2 授权响应 ....................................26
        4.1.3 访问令牌请求 ................................29
        4.1.4 访问令牌响应 ................................30
   4.2 隐式授权 ............................................31
        4.2.1 授权请求 ....................................33
        4.2.2 访问令牌响应 ................................35
   4.3 资源拥有者密码凭证授权 ............................37
        4.3.1 授权请求与响应 ................................39
        4.3.2 访问令牌请求 ..................................39
        4.3.3 访问令牌响应 ..................................40
   4.4 客户端凭证授权 ......................................40
        4.4.1 授权请求与响应 ................................41
        4.4.2 访问令牌请求 ..................................41
        4.4.3 访问令牌响应 ..................................42
   4.5 扩展授权方式 ........................................42

Hardt                        标准轨道                    [第2页]

RFC 6749                        OAuth 2.0                   2012年10月

5. 颁发访问令牌 ..........................................43
   5.1 成功响应 ............................................43
   5.2 错误响应 ............................................45
6. 刷新访问令牌 ..........................................47
7. 访问受保护资源 ........................................48
   7.1 访问令牌类型 ........................................49
   7.2 错误响应 ............................................49
8. 扩展性 ..................................................50
   8.1 定义访问令牌类型 ....................................50
   8.2 定义新端点参数 ......................................50
   8.3 定义新授权授权类型 ..................................51
   8.4 定义新授权端点响应类型 ..............................51
   8.5 定义额外错误代码 ....................................51
9. 原生应用 ................................................52
10. 安全考虑 ..............................................53
   10.1 客户端认证 ........................................53
   10.2 客户端冒充 ........................................54
   10.3 访问令牌 ..........................................55
   10.4 刷新令牌 ..........................................55
   10.5 授权码 ............................................56
   10.6 授权码重定向URI操控 ..............................56
   10.7 资源拥有者密码凭证 .................................57
   10.8 请求机密性 ........................................58
   10.9 确保端点真实性 ....................................58
   10.10 密码猜测攻击 .....................................58
   10.11 钓鱼攻击 .........................................58
   10.12 跨站请求伪造 .....................................59
   10.13 点击劫持 .........................................60
   10.14 代码注入与输入验证 ...............................60
   10.15 开放重定向器 .....................................60
   10.16 在隐式流程中滥用访问令牌以冒充资源拥有者 ..........61
11. IANA注意事项 .........................................62
   11.1 OAuth访问令牌类型注册表 ............................62
        11.1.1 注册模板 ....................................62
   11.2 OAuth参数注册表 ....................................63
        11.2.1 注册模板 ....................................63
        11.2.2 初始注册内容 ................................64
   11.3 OAuth授权端点响应类型注册表 .........................66
        11.3.1 注册模板 ....................................66
        11.3.2 初始注册内容 ................................67
   11.4 OAuth扩展错误注册表 ..................................67
        11.4.1 注册模板 ....................................68
12. 参考文献 ..............................................68
   12.1 规范性参考文献 ....................................68
   12.2 资料性参考文献 ....................................70

Hardt                        标准轨道                    [第3页]

RFC 6749                        OAuth 2.0                   2012年10月

附录A. 增强型Backus-Naur形式（ABNF）语法 ..............71
   A.1  "client_id" 语法 ....................................71
   A.2  "client_secret" 语法 ................................71
   A.3  "response_type" 语法 ................................71
   A.4  "scope" 语法 ........................................72
   A.5  "state" 语法 ........................................72
   A.6  "redirect_uri" 语法 ................................72
   A.7  "error" 语法 ........................................72
   A.8  "error_description" 语法 ..............................72
   A.9  "error_uri" 语法 ....................................72
   A.10 "grant_type" 语法 ....................................73
   A.11 "code" 语法 ..........................................73
   A.12 "access_token" 语法 ..................................73
   A.13 "token_type" 语法 ....................................73
   A.14 "expires_in" 语法 ....................................73
   A.15 "username" 语法 ......................................73
   A.16 "password" 语法 ......................................73
   A.17 "refresh_token" 语法 .................................74
   A.18 端点参数语法 ........................................74
附录B. application/x-www-form-urlencoded媒体类型的使用 ...74
附录C. 致谢 ..............................................75

1. 引言

   在传统的客户端-服务器认证模型中，客户端通过使用资源拥有者的凭证向服务器请求受限资源（受保护资源）。为了让第三方应用程序访问受限资源，资源拥有者会将其凭证（通常是明文密码）分享给第三方。这带来了若干问题和限制：

   o  第三方应用需要存储资源拥有者的凭证以备将来使用，通常是明文密码。

   o  服务器必须支持密码认证，尽管密码本身存在安全隐患。

   o  第三方应用获得对资源拥有者受保护资源的权限过于宽泛，资源拥有者无法限制访问的持续时间或限制访问的资源子集。

   o  资源拥有者不能仅撤销某个第三方的访问权限，而不影响其他第三方，必须通过更改该第三方的密码来实现。

   o  任何第三方应用的泄露都可能导致资源拥有者的密码和所有受保护数据的泄露。

   OAuth通过引入授权层，区分客户端角色与资源拥有者角色，解决了上述问题。在OAuth中，客户端请求访问由资源拥有者控制、由资源服务器托管的资源，且获得的凭证（访问令牌）与资源拥有者的凭证不同。

   客户端不再使用资源拥有者的凭证直接访问受保护资源，而是获取一个访问令牌——一个表示特定权限范围、有效期和其他访问属性的字符串。访问令牌由授权服务器在资源拥有者的批准下发给第三方客户端。客户端使用该访问令牌访问由资源服务器托管的受保护资源。

   例如，资源拥有者（用户）可以授权打印服务（客户端）访问存储在图片分享服务（资源服务器）中的受保护照片，而无需与打印服务共享用户名和密码。用户直接在受信任的服务器（授权服务器）上进行身份验证，授权服务器随后发放特定委托权限的凭证（访问令牌）给打印服务。

   本规范设计用于HTTP（[RFC2616]）环境中。OAuth在其他协议上的使用超出范围。

   OAuth 1.0协议（[RFC5849]）作为信息性文档发布，是由一个临时的社区努力形成的。该标准轨道规范基于OAuth 1.0的部署经验，以及从更广泛的IETF社区收集的用例和扩展需求。OAuth 2.0协议与OAuth 1.0不向后兼容。两者可以在网络上共存，且实现可以选择支持两者。然而，本规范的意图是新实现应支持本文件中定义的OAuth 2.0，而OAuth 1.0仅用于支持现有部署。OAuth 2.0与OAuth 1.0在实现细节上几乎没有重叠。熟悉OAuth 1.0的实现者在阅读本文件时应避免假设其结构和细节。

1.1 角色

   OAuth定义了四个角色：

   资源拥有者（resource owner）
      有能力授予对受保护资源访问权限的实体。当资源拥有者是个人时，称为终端用户。

   资源服务器（resource server）
      托管受保护资源的服务器，能够接受并响应使用访问令牌的受保护资源请求。

   客户端（client）
      代表资源拥有者发起受保护资源请求的应用程序，并获得其授权。“客户端”一词不暗示任何特定的实现特性（例如，应用程序是在服务器、桌面还是其他设备上运行）。

   授权服务器（authorization server）
      在成功认证资源拥有者并获得授权后，向客户端发放访问令牌的服务器。

   授权服务器与资源服务器之间的交互超出本规范范围。授权服务器可以是同一服务器，也可以是不同实体。一个授权服务器可以发放被多个资源服务器接受的访问令牌。

1.2 协议流程

     +--------+                               +---------------+
     |        |--(A)- 授权请求 ->             | 资源拥有者  |
     |        |                               |               |
     |        |<-(B)-- 授权授予 -----------    |               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(C)-- 授权授予请求 ->          | 授权服务器   |
     | 客户端 |                               |               |
     |        |<-(D)----- 访问令牌 -----------   |               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(E)----- 访问令牌 --------->     | 资源服务器  |
     |        |                               |               |
     |        |<-(F)--- 受保护资源 -----------   |               |
     +--------+                               +---------------+

                     图1：抽象协议流程

   图1所示的抽象OAuth 2.0流程描述了四个角色之间的交互，包括以下步骤：

   (A)  客户端请求资源拥有者授权。授权请求可以直接发给资源拥有者（如图所示），也可以通过授权服务器作为中介间接发出。

   (B)  客户端收到授权授予（授权码），这是代表资源拥有者授权的凭证，使用本规范定义的四种授权码类型之一或扩展类型表达。授权码类型取决于客户端请求授权的方法以及授权服务器支持的类型。

   (C)  客户端通过向授权服务器认证并提交授权授予，请求访问令牌。

   (D)  授权服务器认证客户端、验证授权授予，若有效，则发放访问令牌。

   (E)  客户端用访问令牌向资源服务器请求受保护资源，并通过提供访问令牌进行认证。

   (F)  资源服务器验证访问令牌，若有效，则响应请求。

   客户端获取授权授予的首选方法（步骤(A)和(B)）是通过授权服务器作为中介，如第4.1节中的图3所示。

1.3 授权授予

   授权授予是代表资源拥有者授权（访问其受保护资源）的凭证，客户端用以获取访问令牌。本规范定义了四种授权码类型——授权码、隐式、资源拥有者密码凭证和客户端凭证——以及定义其他类型的扩展机制。

1.3.1 授权码

   授权码通过使用授权服务器作为客户端与资源拥有者之间的中介获得。客户端不直接向资源拥有者请求授权，而是引导资源拥有者到授权服务器（通过其用户代理，详见[RFC2616]），授权服务器再引导资源拥有者返回给客户端授权码。

   在引导资源拥有者返回授权码之前，授权服务器会对资源拥有者进行认证并获得授权。由于资源拥有者仅在授权服务器上进行认证，其凭证从未与客户端共享。

授权码提供了一些重要的安全优势，例如能够验证客户端身份，以及将访问令牌直接传输给客户端，而无需经过资源所有者的用户代理，从而减少被他人（包括资源所有者）窃取的风险。

1.3.2. 隐式授权

隐式授权是一种简化的授权码流程，专为在浏览器中使用JavaScript等脚本语言实现的客户端优化。在隐式流程中，客户端不会获得授权码，而是直接获得访问令牌（这是资源所有者授权的结果）。由于没有中间凭据（如授权码）发放，也不需要用这些凭据换取访问令牌，因此该授权类型为“隐式”。

在隐式授权流程中，授权服务器在发放访问令牌时不会验证客户端身份。在某些情况下，可以通过用来传递访问令牌的重定向URI验证客户端身份。访问令牌可能会暴露给资源所有者或其他访问资源所有者用户代理的应用程序。

隐式授权提高了某些客户端（如基于浏览器的应用程序）的响应速度和效率，因为它减少了获取访问令牌所需的往返次数。然而，这种便利性应权衡其安全风险，例如在第10.3节和第10.16节中描述的那些，尤其是在授权码授权类型可用的情况下。

1.3.3. 资源所有者密码凭据

资源所有者密码凭据（即用户名和密码）可以直接作为授权凭据，用于获取访问令牌。只有在资源所有者与客户端之间具有高度信任（例如，客户端是设备操作系统的一部分或是具有高度权限的应用程序），且没有其他授权方式（如授权码）时，才应使用此方式。

尽管此授权类型要求客户端直接访问资源所有者的凭据，但这些凭据仅用于一次请求，并换取一个访问令牌。通过用长效的访问令牌或刷新令牌替换凭据，可以避免客户端存储资源所有者的凭据以备将来使用。

1.3.4. 客户端凭据

当授权范围仅限于客户端控制的受保护资源，或已与授权服务器预先安排的受保护资源时，可以使用客户端凭据（或其他形式的客户端认证）作为授权凭据。客户端凭据通常在客户端代表自己行动（即客户端也是资源所有者）或请求访问已预先授权的受保护资源时使用。

---

硬特（Hardt）                        标准轨迹                    [第8页]

RFC 6749                        OAuth 2.0                   2012年10月

---

1.4. 访问令牌

访问令牌是用于访问受保护资源的凭据。它是代表授权发放给客户端的字符串，通常对客户端来说是不可解析的。令牌表示资源所有者授予的特定权限范围和有效期，由资源服务器和授权服务器共同执行验证。

令牌可以是用于检索授权信息的标识符，也可以是自包含的、可验证的授权信息（即由数据和签名组成的令牌字符串）。为了使用令牌，客户端可能还需要额外的认证凭据，这超出了本规范的范围。

访问令牌提供了一个抽象层，取代了不同的授权结构（如用户名和密码），由资源服务器理解。这种抽象允许发放比授权凭据更受限制的访问令牌，也减少了资源服务器对多种认证方法的理解需求。

访问令牌可以有不同的格式、结构和使用方式（例如，具有加密特性），具体取决于资源服务器的安全需求。访问令牌的属性和访问受保护资源的方法超出了本规范的范围，由配套规范（如[RFC6750]）定义。

---

1.5. 刷新令牌

刷新令牌是用于获取新访问令牌的凭据。授权服务器向客户端发放刷新令牌，客户端在当前访问令牌失效或过期时使用它来获取新的访问令牌，或请求具有相同或更窄权限的额外访问令牌（新令牌可能比原有的有效期更短，权限更少）。发放刷新令牌是可选的，由授权服务器决定。如果授权服务器发放了刷新令牌，它会在发放访问令牌时一并提供（即图1中的步骤（D））。

刷新令牌是代表资源所有者授予给客户端的授权的字符串，通常对客户端是不可解析的。它表示用于检索授权信息的标识符。不同于访问令牌，刷新令牌仅用于与授权服务器交互，绝不发送给资源服务器。

---

图2：刷新过期的访问令牌

流程包括以下步骤：

(A) 客户端通过向授权服务器提交授权凭据请求访问令牌。

(B) 授权服务器验证客户端身份和授权凭据，若有效，则发放访问令牌和刷新令牌。

(C) 客户端用访问令牌向资源服务器发起受保护资源请求。

(D) 资源服务器验证访问令牌，若有效，则响应请求。

(E) 步骤（C）和（D）重复，直到访问令牌过期。如果客户端知道访问令牌已过期，则跳到步骤（G）；否则，继续请求。

(F) 由于访问令牌无效，资源服务器返回无效令牌错误。

(G) 客户端通过向授权服务器提交刷新令牌请求新访问令牌。客户端的认证要求取决于客户端类型和授权服务器策略。

(H) 授权服务器验证刷新令牌，若有效，则发放新访问令牌（以及可选的新的刷新令牌）。

步骤（C）、（D）、（E）和（F）超出了本规范的范围，详见第7节。

---

1.6. TLS版本

本规范使用传输层安全（TLS）时，所采用的TLS版本会随着时间推移而变化，依据广泛部署情况和已知安全漏洞。目前（撰写时）最新版本为TLS 1.2 [RFC5246]，但部署范围有限，可能不易实现。TLS 1.0 [RFC2246]是最广泛部署的版本，提供最好的互操作性。

实现可以支持其他符合安全需求的传输层安全机制。

---

1.7. HTTP重定向

本规范广泛使用HTTP重定向，即客户端或授权服务器引导资源所有者的用户代理到另一个目标。虽然示例中使用HTTP 302状态码，但任何其他可用的用户代理实现的重定向方法都被允许，且视为实现细节。

---

1.8. 互操作性

OAuth 2.0提供了一个具有明确安全属性的丰富授权框架。然而，作为一个高度可扩展、包含许多可选组件的框架，单凭本规范可能会导致实现之间的互操作性差异。

此外，本规范还未完全定义一些必要的组件（如客户端注册、授权服务器能力、端点发现），没有这些组件，客户端必须手动配置以特定的授权服务器和资源服务器才能实现互操作。

该框架设计时明确预期未来会定义规范化的配置文件和扩展，以实现完整的Web规模互操作性。

---

1.9. 符号约定

本规范中的关键词“必须（MUST）”、“不得（MUST NOT）”、“必需（REQUIRED）”、“应（SHALL）”、“不得（SHALL NOT）”、“建议（SHOULD）”、“不建议（SHOULD NOT）”、“推荐（RECOMMENDED）”、“可以（MAY）”和“可选（OPTIONAL）”的解释遵循[RFC2119]。

本规范采用[RFC5234]中的增强型巴科斯-诺尔范式（ABNF）表示法。此外，规则URI-reference也包括在“统一资源标识符（URI）：通用语法” [RFC3986]中。

某些安全相关术语的定义参照[RFC4949]，包括但不限于“攻击”、“认证”、“授权”、“证书”、“机密性”、“凭据”、“加密”、“身份”、“签名”、“信任”、“验证”和“核实”。

除非另有说明，所有协议参数名和值均区分大小写。

---

2. 客户端注册

在启动协议之前，客户端需向授权服务器注册。客户端注册的具体方式超出本规范范围，但通常涉及用户通过HTML注册表单进行交互。

客户端注册不要求客户端与授权服务器直接交互。当授权服务器支持时，可以通过其他方式建立信任并获取必要的客户端属性（如重定向URI、客户端类型），例如使用自签发或第三方签发的声明，或由授权服务器通过可信渠道进行客户端发现。

在注册客户端时，客户端开发者应：

- 指定客户端类型（详见第2.1节），
- 提供其重定向URI（详见第3.1.2节），
- 以及包括授权服务器要求的其他信息（如应用名称、网站、描述、标志图片、法律条款的接受情况）。

---

2.1. 客户端类型

OAuth定义了两种客户端类型，基于它们能否安全地与授权服务器进行身份验证（即能否保护其凭据的机密性）：

- 机密型（confidential）：能够保护凭据机密性（如在安全服务器上实现，凭据访问受限），或能通过其他方式进行安全认证的客户端。
- 公开型（public）：无法保护凭据机密性（如在资源所有者使用的设备上运行的本地应用或基于浏览器的应用），且不能通过其他方式安全认证。

客户端类型的划分依据由授权服务器定义的安全认证能力和对凭据暴露的接受程度。授权服务器不应假设任何客户端类型。

一个客户端可以由多个不同类型和安全环境的组件组成（例如，既有机密的服务器端组件，也有公开的浏览器端组件的分布式客户端）。如果授权服务器不支持此类客户端或未提供注册指导，客户端应将每个组件作为单独的客户端进行注册。

---

本规范围绕以下客户端配置文件设计：

网页应用程序
网页应用程序是一种在Web服务器上运行的机密客户端。资源所有者通过在设备上的用户代理中呈现的HTML用户界面访问该客户端。客户端凭据以及任何发放给客户端的访问令牌都存储在Web服务器上，资源所有者无法访问或暴露这些信息。

基于用户代理的应用程序
基于用户代理的应用程序是一种公共客户端，其客户端代码从Web服务器下载并在资源所有者使用的设备上的用户代理（例如Web浏览器）中执行。协议数据和凭据对资源所有者来说很容易获取（甚至常常可见）。由于此类应用程序驻留在用户代理中，因此在请求授权时可以无缝利用用户代理的功能。

本地应用程序
本地应用程序是一种公共客户端，安装并在资源所有者使用的设备上运行。协议数据和凭据对资源所有者是可访问的。假设应用程序中包含的任何客户端认证凭据都可以被提取。另一方面，动态发放的凭据，如访问令牌或刷新令牌，可以获得一定程度的保护。至少，这些凭据应受到保护，避免被应用程序可能交互的恶意服务器访问。在某些平台上，这些凭据可能还受到来自同一设备上其他应用程序的保护。

2.2 客户端标识符
授权服务器为注册的客户端发放一个客户端标识符——一个唯一的字符串，代表客户端提供的注册信息。客户端标识符不是秘密；它会暴露给资源所有者，不能单独用于客户端认证。客户端标识符对授权服务器是唯一的。

本规范未定义客户端标识符字符串的大小。客户端应避免对标识符大小做出假设。授权服务器应记录其发放的任何标识符的长度。

2.3 客户端认证
如果客户端类型为机密客户端，客户端与授权服务器将建立一种适合其安全需求的客户端认证方法。授权服务器可以接受任何符合其安全要求的客户端认证方式。

机密客户端通常会被发放（或建立）一组用于与授权服务器认证的凭据（例如密码、公钥/私钥对）。

授权服务器也可以为公共客户端建立客户端认证方法，但不得依赖公共客户端认证来识别客户端。

每次请求中，客户端不得使用多于一种认证方法。

2.3.1 客户端密码
持有客户端密码的客户端可以使用[RFC2617]定义的HTTP基本认证方案来与授权服务器进行认证。客户端标识符使用附录B中的“application/x-www-form-urlencoded”编码算法编码，编码后的值作为用户名；客户端密码也使用相同的算法编码，作为密码。授权服务器必须支持HTTP基本认证方案以验证已获得客户端密码的客户端。

例如（为了显示方便，换行仅为排版效果）：
```
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
```
或者，授权服务器也可以支持在请求体中包含客户端凭据，使用以下参数：
- client_id（必需）：在第2.2节描述的注册过程中发放给客户端的标识符。
- client_secret（必需）：客户端密钥。如果客户端密钥为空字符串，客户端可以省略该参数。

通过在请求体中包含这两个参数来传递客户端凭据并不推荐，且应仅限于无法直接使用HTTP基本认证方案（或其他基于密码的HTTP认证方案）的客户端。参数只能在请求体中传输，不得包含在请求URI中。

例如，使用请求体参数刷新访问令牌（为了排版方便，换行仅为排版效果）：
```
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
```
在使用密码认证发送请求时，授权服务器必须要求使用TLS（详见第1.6节）。

由于此认证方法涉及密码，授权服务器必须保护任何使用该端点的接口，防止暴力破解攻击。

2.3.2 其他认证方法
授权服务器可以支持任何符合其安全要求的HTTP认证方案。当使用其他认证方法时，授权服务器必须定义客户端标识符（注册记录）与认证方案之间的映射关系。

2.4 未注册的客户端
本规范不排除未注册客户端的使用，但此类客户端的使用超出本规范的范围，需进行额外的安全分析，并评估其互操作性影响。

3. 协议端点
授权过程使用两个授权服务器端点（HTTP资源）：
- 授权端点：由客户端使用，通过用户代理重定向资源所有者以获取授权。
- 令牌端点：由客户端使用，用于交换授权授予以获取访问令牌，通常需要客户端认证。

此外，还有一个客户端端点：
- 重定向端点：由授权服务器用来将包含授权凭据的响应返回给客户端，通过资源所有者的用户代理。

并非所有授权授予类型都使用这两个端点。扩展的授权类型可以根据需要定义额外的端点。

3.1 授权端点
授权端点用于与资源所有者交互，获取授权授予。授权服务器必须首先验证资源所有者的身份。授权服务器如何验证资源所有者（如用户名密码登录、会话cookie）超出本规范范围。

客户端获取授权端点位置的方法也超出本规范范围，但通常在服务文档中提供。

端点URI可以包含“application/x-www-form-urlencoded”格式（详见附录B）的查询组件（[RFC3986]第3.4节），在添加额外查询参数时必须保留。端点URI不得包含片段。

由于请求授权端点会导致用户认证和明文凭据（在HTTP响应中）传输，授权服务器在向授权端点发送请求时，必须要求使用TLS（详见第1.6节）。

授权服务器必须支持HTTP“GET”方法[RFC2616]用于授权端点，也可以支持“POST”方法。

未赋值的参数应视为被省略。授权服务器必须忽略无法识别的请求参数。请求和响应参数不得重复出现。

3.1.1 响应类型
授权端点用于授权码授予类型和隐式授予类型流程。客户端通过以下参数通知授权服务器所需的授权类型：
- response_type（必需）：值必须是“code”以请求授权码（详见第4.1.1节）、“token”以请求访问令牌（隐式授予，详见第4.2.1节），或注册的扩展值（详见第8.4节）。

扩展响应类型可以包含空格分隔的值列表（%x20），值的顺序无关（例如“a b”与“b a”相同）。这些复合响应类型的含义由各自的规范定义。

如果请求中缺少“response_type”参数，或响应类型无法识别，授权服务器必须返回错误响应（详见第4.1.2.1节）。

3.1.2 重定向端点
完成与资源所有者的交互后，授权服务器将资源所有者的用户代理重定向回客户端。重定向到客户端的端点由在注册或请求授权时与授权服务器预先建立的重定向端点URI完成。

重定向端点URI必须是绝对URI（[RFC3986]第4.3节）。可以包含“application/x-www-form-urlencoded”格式的查询组件（详见附录B），在添加额外参数时必须保留。不得包含片段。

3.1.2.1 端点请求的机密性
当请求响应类型为“code”或“token”，或重定向请求会在开放网络上传输敏感凭据时，重定向端点应要求使用TLS（详见第1.6节）。本规范未强制要求使用TLS，因为在撰写时，强制客户端部署TLS对许多开发者来说是个重大障碍。如果没有TLS，授权服务器应在重定向前警告资源所有者端点不安全（例如在授权请求中显示警告信息）。

缺乏传输层安全可能严重影响客户端和其被授权访问的受保护资源的安全性。特别是在授权过程被用作客户端代表最终用户进行委托认证（如第三方登录服务）时，传输层安全尤为关键。

3.1.2.2 注册要求
授权服务器必须要求以下类型的客户端注册其重定向端点：
- 公开客户端。
- 使用隐式授予的机密客户端。

授权服务器应要求所有客户端在使用授权端点前注册其重定向端点。

授权服务器应要求客户端提供完整的重定向URI（客户端可以使用“state”请求参数实现每次请求的定制）。如果无法要求注册完整的重定向URI，授权服务器应至少要求注册URI的方案、授权域和路径（允许客户端在请求授权时动态变化重定向URI的查询部分）。

授权服务器可以允许客户端注册多个重定向端点。

未注册重定向URI可能导致攻击者利用授权端点作为开放重定向器（详见第10.15节）。

3.1.2.3 动态配置
如果注册了多个重定向URI，或只注册了部分URI，或未注册任何URI，客户端必须在授权请求中通过“redirect_uri”参数包含重定向URI。

当请求中包含重定向URI时，授权服务器必须将其与已注册的一个或多个URI（或URI组件）进行匹配（详见[RFC3986]第6节）。如果注册时提供了完整URI，必须用简单字符串比较（详见[RFC3986]第6.2.1节）。

3.1.2.4 无效端点
如果授权请求因缺少、无效或不匹配的重定向URI而验证失败，授权服务器应通知资源所有者错误信息，不得自动将用户代理重定向到无效的URI。

3.1.2.5 端点内容
重定向请求通常会返回一个HTML文档，由用户代理处理。如果HTML响应直接作为重定向请求的结果返回，HTML中的任何脚本都将获得完全访问重定向URI及其包含的凭据的权限。

客户端不应在重定向端点响应中包含任何第三方脚本（例如第三方分析、社交插件、广告网络）。相反，客户端应从URI中提取凭据，并再次将用户代理重定向到另一个端点，避免暴露凭据（无论是在URI中还是其他位置）。如果包含第三方脚本，客户端必须确保其自身的脚本（用于提取和删除URI中的凭据）会优先执行。

3.2. 令牌端点

令牌端点由客户端使用，以提交授权授予或刷新令牌来获取访问令牌。除了隐式授权类型（因为直接发放访问令牌），每次授权授予都使用令牌端点。

客户端获取令牌端点位置的方式超出本规范范围，但通常在服务文档中提供。

端点URI可以包含“application/x-www-form-urlencoded”格式（参见附录B）的查询组件（[RFC3986]第3.4节），在添加额外查询参数时必须保留。端点URI不得包含片段部分。

由于向令牌端点的请求会传输明文凭据（在HTTP请求和响应中），授权服务器必须在发送请求到令牌端点时要求使用TLS，具体见第1.6节。

客户端在请求访问令牌时必须使用HTTP的“POST”方法。

没有值的参数必须视为被省略。授权服务器必须忽略未识别的请求参数。请求和响应参数不得重复出现。

3.2.1. 客户端认证

保密客户端或其他持有客户端凭据的客户端在向令牌端点发起请求时，必须按照第2.3节的描述进行认证。客户端认证用于：

- 强制绑定刷新令牌和授权码到其发放的客户端。尤其在授权码通过不安全通道传输或重定向URI未完整注册时，客户端认证至关重要。

- 在客户端被攻破时，通过禁用客户端或更改其凭据来防止攻击者滥用被盗的刷新令牌。更改一组凭据比撤销全部刷新令牌要快得多。

- 实施认证管理的最佳实践，要求定期轮换凭据。轮换一整套刷新令牌较为困难，而轮换单一组客户端凭据则简单得多。

客户端可以在向令牌端点发起请求时，使用“client_id”请求参数标识自己。在“authorization_code”授权类型的请求中，未认证的客户端必须发送“client_id”，以防止误接受为不同“client_id”的客户端的代码。这可以防止认证码被替换（但对受保护资源没有额外安全保护）。

3.3. 访问令牌范围

授权端点和令牌端点允许客户端通过“scope”请求参数指定访问范围。授权服务器用“scope”响应参数通知客户端实际发放的访问令牌范围。

“scope”参数的值由空格分隔的区分大小写字符串组成，由授权服务器定义。如果包含多个空格分隔的字符串，它们的顺序无关，每个字符串都增加了请求范围的额外访问权限。

scope = scope-token *( SP scope-token )  
scope-token = 1*( %x21 / %x23-5B / %x5D-7E )

授权服务器可以根据策略或资源所有者的指示，完全或部分忽略客户端请求的范围。如果发放的访问令牌范围与客户端请求的不同，授权服务器必须在响应中包含“scope”参数，告知实际授予的范围。

如果客户端在请求授权时省略“scope”参数，授权服务器必须使用预定义的默认值处理请求，或拒绝请求并返回无效范围的错误。授权服务器应记录其范围要求和默认值（如有定义）。

4. 获取授权

客户端向资源所有者请求授权，获得授权后使用授权授予请求访问令牌。OAuth定义了四种授权类型：授权码、隐式、资源所有者密码凭据和客户端凭据，还提供扩展机制定义其他授权类型。

4.1. 授权码授权

授权码授权类型用于获取访问令牌和刷新令牌，特别适合机密客户端。由于这是基于重定向的流程，客户端必须能与资源所有者的用户代理（通常是网页浏览器）交互，并能接收来自授权服务器的请求（通过重定向）。

（流程图略）

流程包括以下步骤：

(A) 客户端通过引导资源所有者的用户代理到授权端点，启动流程。请求中包括客户端ID、请求的范围、状态信息和重定向URI（授权成功或失败后，授权服务器会将用户代理重定向回此URI）。

(B) 授权服务器通过用户代理验证资源所有者身份，并决定是否授予或拒绝访问请求。

(C) 如果资源所有者同意，授权服务器使用之前提供的重定向URI，将用户代理重定向回客户端，URI中包含授权码和之前提供的状态。

(D) 客户端通过在请求中包含授权码，向授权服务器的令牌端点请求访问令牌。请求中客户端必须进行认证，并包括用于验证的重定向URI。

(E) 授权服务器验证客户端身份、授权码和重定向URI的匹配，若有效，则返回访问令牌和（可选）刷新令牌。

4.1.1. 授权请求

客户端通过在授权端点URI的查询部分添加参数，构造请求URI，参数采用“application/x-www-form-urlencoded”格式（参见附录B）：

- response_type（必填）：值必须为“code”。
- client_id（必填）：如第2.2节所述。
- redirect_uri（可选）：如第3.1.2节所述。
- scope（可选）：如第3.3节所述。
- state（推荐）：由客户端使用的、不透明的值，用于维护请求和回调之间的状态。授权服务器在重定向用户代理时会包含此值。应使用此参数防止跨站请求伪造（详见第10.12节）。

客户端通过HTTP重定向或其他用户代理支持的方式，将资源所有者引导到构造的URI。

示例（TLS请求，换行仅为显示方便）：

GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1  
Host: server.example.com

授权服务器验证请求参数的完整性和有效性。若有效，验证资源所有者身份并获取授权决定（通过询问资源所有者或其他方式）。

授权决定后，授权服务器通过HTTP重定向或其他方式，将用户代理引导回客户端提供的重定向URI，附带授权码和状态。

4.1.2. 授权响应

如果资源所有者同意授权，授权服务器会生成授权码，并通过在重定向URI的查询部分添加参数（采用“application/x-www-form-urlencoded”格式）返回给客户端：

- code（必填）：由授权服务器生成的授权码。授权码应短时间内失效，以降低泄露风险。建议最大有效期为10分钟。客户端不得多次使用同一授权码。若多次使用，授权服务器应拒绝请求，并（可能）撤销之前基于该码发放的所有令牌。授权码绑定到客户端ID和重定向URI。

- state（如果在请求中提供，则必填）：与请求中一致的值。

示例（HTTP响应）：

HTTP/1.1 302 Found  
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=xyz

客户端应忽略未识别的响应参数。授权码的长度未在规范中定义，客户端应避免假设码的大小。授权服务器应记录其发放值的大小。

4.1.2.1. 错误响应

若请求因重定向URI缺失、无效或不匹配，或客户端ID缺失或无效，授权服务器应通知资源所有者错误，但不得自动重定向用户代理到无效的重定向URI。

若资源所有者拒绝授权或请求因其他原因失败，授权服务器应在重定向URI的查询参数中添加错误信息（采用“application/x-www-form-urlencoded”格式）：

- error（必填）：单个ASCII错误码，可能值包括：

  - invalid_request：请求缺少必需参数、参数值无效、参数重复或格式错误。
  - unauthorized_client：客户端未被授权使用此方法请求授权码。
  - access_denied：资源所有者或授权服务器拒绝请求。
  - unsupported_response_type：授权服务器不支持此请求中的响应类型。
  - invalid_scope：请求的范围无效、未知或格式错误。
  - server_error：授权服务器遇到意外情况，无法完成请求（此错误码存在的原因是HTTP 500状态码不能通过重定向返回）。
  - temporarily_unavailable：授权服务器暂时无法处理请求（HTTP 503状态码不能通过重定向返回）。

“error”参数的值不得包含超出字符集%20-21 / %23-5B / %5D-7E的字符。

错误描述
可选。人类可读的ASCII [USASCII]文本，提供额外信息，用于协助客户端开发者理解发生的错误。
“error_description”参数的值不得包含字符集之外的字符：%x20-21 / %x23-5B / %x5D-7E。

错误URI
可选。标识一个人类可读的网页，提供关于错误的信息，用于向客户端开发者提供额外的错误信息。
“error_uri”参数的值必须符合URI引用语法，因此不得包含字符集之外的字符：%x21 / %x23-5B / %x5D-7E。

硬特（Hardt）  标准轨道  [第28页]

RFC 6749  OAuth 2.0  2012年10月

状态
如果在客户端授权请求中包含“state”参数，则为必填。必须是从客户端收到的确切值。

例如，授权服务器通过发送以下HTTP响应重定向用户代理：

HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz

4.1.3. 访问令牌请求

客户端通过在HTTP请求实体主体中使用“application/x-www-form-urlencoded”格式（参见附录B），以UTF-8字符编码，向令牌端点发送请求，包含以下参数：

grant_type
必填。值必须设为“authorization_code”。

code
必填。从授权服务器接收到的授权码。

redirect_uri
必填。如果在授权请求中包含“redirect_uri”参数（详见第4.1.1节），则此参数也必须提供，且其值必须与授权请求中的值完全一致。

client_id
必填。如果客户端未按照第3.2.1节所述进行身份验证，则必须提供。

如果客户端类型为机密型或已获得客户端凭据（或被分配了其他认证要求），则客户端必须按照第3.2.1节所述与授权服务器进行身份验证。

例如，客户端使用TLS发起以下HTTP请求（为了显示方便，添加了额外换行）：

POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb

授权服务器必须：
- 要求对机密客户端或任何已获得客户端凭据（或其他认证要求）的客户端进行身份验证；
- 如果包含客户端身份验证，则进行验证；
- 确保授权码是发放给已验证的机密客户端的，或者如果是公共客户端，则确保代码是发放给请求中的“client_id”；
- 验证授权码的有效性；
- 如果在授权请求中包含“redirect_uri”参数，则必须存在，并且其值必须与授权请求中的值一致。

4.1.4. 访问令牌响应

如果访问令牌请求有效且已获授权，授权服务器将发放访问令牌和可选的刷新令牌（详见第5.1节）。如果客户端身份验证失败或无效，授权服务器将返回错误响应（详见第5.2节）。

示例成功响应：

HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}

4.2. 隐式授权（Implicit Grant）

隐式授权类型用于获取访问令牌（不支持发放刷新令牌），并针对已知操作特定重定向URI的公共客户端进行优化。这些客户端通常在浏览器中使用JavaScript等脚本语言实现。

由于这是基于重定向的流程，客户端必须能够与资源所有者的用户代理（通常是网页浏览器）交互，并能接收来自授权服务器的请求（通过重定向）。

不同于授权码授权类型，后者客户端会分别请求授权和访问令牌，隐式授权类型中，客户端在授权请求的结果中直接获得访问令牌。

隐式授权不包括客户端身份验证，依赖于资源所有者的存在和重定向URI的注册。由于访问令牌被编码在重定向URI中，可能会暴露给资源所有者和同一设备上的其他应用。

流程示意图（图4）描述了隐式授权的步骤，包括用户、资源所有者、用户代理、客户端、授权服务器和Web托管客户端的交互。

流程步骤包括：
- (A) 客户端引导资源所有者的用户代理到授权端点，附带客户端ID、请求范围、状态和重定向URI；
- (B) 授权服务器验证资源所有者（通过用户代理）并决定是否授权；
- (C) 如果授权，授权服务器将用户代理重定向回客户端，URI中包含访问令牌（在片段中）；
- (D) 用户代理访问Web托管客户端资源，保留片段信息；
- (E) Web托管客户端返回网页（通常是带有脚本的HTML文档），脚本可以访问完整的重定向URI并提取访问令牌；
- (F) 用户代理执行脚本，提取访问令牌；
- (G) 用户代理将访问令牌传递给客户端。

有关隐式授权的背景信息（第1.3.2节）和安全注意事项（第10.3节和第10.16节），请参阅相关章节。

4.2.1. 授权请求

客户端通过在授权端点URI的查询部分添加参数（使用“application/x-www-form-urlencoded”格式，参见附录B）构造请求URI，包括：

response_type
必填。值必须设为“token”。

client_id
必填。详见第2.2节。

redirect_uri
可选。详见第3.1.2节。

scope
可选。详见第3.3节。

state
建议。客户端用来在请求和回调之间维护状态的不透明值。授权服务器在将用户代理重定向回客户端时会包含此值。应使用此参数防止跨站请求伪造（详见第10.12节）。

客户端通过HTTP重定向响应或其他用户代理支持的方式，将资源所有者引导到构造的URI。

例如，客户端使用TLS发起如下请求（为显示方便，添加了额外换行）：

GET /authorize?response_type=token&client_id=s6BhdRkqt3&state=xyz
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
Host: server.example.com

授权服务器验证请求，确保所有必需参数存在且有效。必须验证重定向URI是否与客户端注册的URI一致（详见第3.1.2节）。

请求有效后，授权服务器验证资源所有者身份，获取授权决定（通过询问资源所有者或其他方式）。

授权决定后，授权服务器通过HTTP重定向或其他方式，将用户引导到提供的客户端重定向URI。

4.2.2. 访问令牌响应

如果资源所有者授权请求，授权服务器将发放访问令牌，并通过在重定向URI的片段部分添加参数（使用“application/x-www-form-urlencoded”格式，参见附录B）将其传递给客户端，包括：

access_token
必填。由授权服务器发放的访问令牌。

token_type
必填。发放的令牌类型（详见第7.1节），大小写不敏感。

expires_in
建议。访问令牌的有效期（秒）。例如，“3600”表示一小时后过期。如果省略，授权服务器应通过其他方式提供过期时间或记录默认值。

scope
可选（如果与客户端请求的范围相同则可省略，否则为必填）。详见第3.3节。

state
如果在客户端授权请求中包含“state”参数，则必须返回相同的值。

授权服务器不得发放刷新令牌。

示例：授权服务器通过以下HTTP响应重定向用户（为显示方便，添加了换行）：

HTTP/1.1 302 Found
Location: http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA
&state=xyz&token_type=example&expires_in=3600

开发者应注意，某些用户代理不支持在HTTP“Location”响应头中包含片段部分。此类客户端可能需要采用其他重定向方法，例如返回包含“继续”按钮的HTML页面，按钮链接到重定向URI。

客户端必须忽略未识别的响应参数。访问令牌字符串的长度未在本规范中定义，客户端应避免对值大小做出假设。授权服务器应记录其发放值的大小。

4.2.2.1. 错误响应

如果请求因重定向URI缺失、无效或不匹配，或客户端标识符缺失或无效，授权服务器应通知资源所有者错误，并不得自动重定向用户代理到无效的重定向URI。

如果资源所有者拒绝授权请求，或请求因其他原因失败（非重定向URI无效），授权服务器应通过在重定向URI的片段中添加参数（使用“application/x-www-form-urlencoded”格式，参见附录B）通知客户端，参数包括：

error
必填。一个ASCII [USASCII]错误代码，取值如下：

invalid_request
请求缺少必需参数、参数值无效、参数重复或格式错误。

unauthorized_client
客户端未被授权使用此方法请求访问令牌。

access_denied
资源所有者或授权服务器拒绝请求。

unsupported_response_type
授权服务器不支持使用此方法获取访问令牌。

invalid_scope
请求的范围无效、未知或格式错误。

server_error
授权服务器遇到未预料的情况，无法完成请求。（此错误码是因为HTTP 500内部服务器错误状态码不能通过HTTP重定向返回给客户端。）

temporarily_unavailable
授权服务器暂时无法处理请求，可能由于过载或维护。（此错误码是因为HTTP 503服务不可用状态码不能通过HTTP重定向返回。）

“error”参数的值不得包含字符集之外的字符：%x20-21 / %x23-5B / %x5D-7E。

error_description
可选。人类可读的ASCII [USASCII]文本，提供额外信息，用于协助客户端开发者理解发生的错误。
“error_description”参数的值不得包含字符集之外的字符：%x20-21 / %x23-5B / %x5D-7E。

错误URI
         可选。用于标识包含关于错误信息的可读网页的URI，旨在为客户端开发者提供关于错误的更多信息。
         "error_uri"参数的值必须符合URI引用语法，因此不得包含字符集之外的字符：%x21 / %x23-5B / %x5D-7E。

状态
         如果在客户端授权请求中包含了"state"参数，则为必填。应为从客户端收到的确切值。

例如，授权服务器通过发送以下HTTP响应来重定向用户代理：

HTTP/1.1 302 Found
Location: https://client.example.com/cb#error=access_denied&state=xyz

4.3. 资源所有者密码凭证授权（Resource Owner Password Credentials Grant）

资源所有者密码凭证授权类型适用于资源所有者与客户端之间存在信任关系的场景，例如设备操作系统或高度权限的应用程序。授权服务器在启用此授权类型时应格外谨慎，只在其他流程不可行时才允许使用。

此授权类型适用于能够获取资源所有者凭证（用户名和密码，通常通过交互式表单）的客户端。也用于将使用直接认证方案（如HTTP Basic或Digest认证）的现有客户端迁移到OAuth，将存储的凭证转换为访问令牌。

流程示意图：
```
+----------+
| 资源     |
| 所有者   |
|          |
+----------+
     v
     |  资源所有者
    (A) 密码凭证
     |
     v
+---------+                                  +---------------+
|         |>--(B)---- 资源所有者凭证 --------->|               |
|         |         密码凭证                   | 授权服务器    |
| 客户端  |                                  |               |
|         |<--(C)---- 访问令牌 ----------------|               |
|         |    (可选刷新令牌)                |               |
+---------+                                  +---------------+
```

图5：资源所有者密码凭证流程

流程步骤：
(A) 资源所有者向客户端提供其用户名和密码。
(B) 客户端向授权服务器的令牌端点请求访问令牌，包含从资源所有者处获得的凭证。在请求时，客户端需进行身份验证。
(C) 授权服务器验证客户端身份和资源所有者凭证，若有效，则颁发访问令牌。

4.3.1. 授权请求与响应
客户端获取资源所有者凭证的方法超出本规范范围。客户端在获得访问令牌后必须丢弃凭证。

4.3.2. 访问令牌请求
客户端通过在HTTP请求实体中使用"application/x-www-form-urlencoded"格式（参见附录B）添加以下参数，字符编码为UTF-8，向令牌端点发起请求：

grant_type
         必填。值必须为"password"。

username
         必填。资源所有者的用户名。

password
         必填。资源所有者的密码。

scope
         可选。访问请求的范围，详见第3.3节。

如果客户端类型为机密型或已获得客户端凭证（或被分配了其他认证要求），则必须按照第3.2.1节的描述进行身份验证。

示例：客户端使用传输层安全（TLS）发起HTTP请求（为便于显示，添加了额外换行）：

```
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=password&username=johndoe&password=A3ddj3w
```

授权服务器必须：
- 对于机密客户端或已获得凭证的客户端（或有其他认证要求的客户端），要求进行身份验证；
- 如果请求中包含客户端身份验证信息，则进行验证；
- 使用其现有的密码验证算法验证资源所有者凭证。

由于此请求使用资源所有者的密码，授权服务器必须保护端点，防止暴力破解（例如采用速率限制或生成警报）。

4.3.3. 访问令牌响应
如果请求有效且已获授权，授权服务器将颁发访问令牌和可选的刷新令牌（详见第5.1节）。如果客户端身份验证失败或请求无效，服务器将返回错误响应（详见第5.2节）。

示例成功响应：
```
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
```

4.4. 客户端凭证授权（Client Credentials Grant）

当客户端请求访问其控制下的受保护资源，或之前已与授权服务器安排好访问其他资源所有者资源的权限时，可以仅使用其客户端凭证（或其他支持的认证方式）请求访问令牌（具体方法超出本规范范围）。

此授权类型仅应由机密客户端使用。

流程示意图：
```
+---------+                                  +---------------+
|         |                                  |               |
|         |>--(A)- 客户端身份验证 --------->| 授权服务器    |
| 客户端  |                                  |               |
|         |<--(B)---- 访问令牌 --------------|               |
|         |                                  |               |
+---------+                                  +---------------+
```

图6：客户端凭证流程

流程步骤：
(A) 客户端向授权服务器进行身份验证，并请求令牌端点发放访问令牌。
(B) 授权服务器验证客户端身份，若有效，则颁发访问令牌。

4.4.1. 授权请求与响应
由于客户端身份验证本身作为授权授予，无需额外的授权请求。

4.4.2. 访问令牌请求
客户端通过在HTTP请求实体中使用"application/x-www-form-urlencoded"格式（参见附录B）添加以下参数，字符编码为UTF-8，发起请求：

```
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
```

授权服务器必须验证客户端身份。

4.4.3. 访问令牌响应
如果请求有效且已获授权，授权服务器将颁发访问令牌（详见第5.1节）。通常不应包含刷新令牌。如果请求失败或无效，返回错误响应（详见第5.2节）。

示例成功响应：
```
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "example_parameter":"example_value"
}
```

4.5. 扩展授权（Extension Grants）

客户端通过指定绝对URI（由授权服务器定义）作为"grant_type"参数的值，使用扩展授权类型，并添加任何必要的附加参数，来使用扩展授权。

例如，为请求使用安全断言标记语言（SAML）2.0断言授权类型（定义见[OAuth-SAML2]），客户端可以发起如下TLS请求（为显示方便，添加了换行）：
```
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU...[省略]...aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
```

如果请求有效且已获授权，授权服务器将颁发访问令牌和可选的刷新令牌（详见第5.1节）。请求失败或无效时，返回错误响应（详见第5.2节）。

5. 颁发访问令牌

当请求有效且已获授权，授权服务器将颁发访问令牌和可选的刷新令牌（详见第5.1节）。请求失败或无效时，返回错误响应（详见第5.2节）。

5.1. 成功响应
授权服务器在响应实体中添加以下参数（以HTTP状态码200（OK）返回）：
- access_token
  必填。由授权服务器颁发的访问令牌。
- token_type
  必填。颁发的令牌类型，详见第7.1节。值不区分大小写。
- expires_in
  建议。访问令牌的有效期（秒）。例如，值"3600"表示令牌将在生成后一小时内过期。如果省略，授权服务器应通过其他方式提供过期时间或记录默认值。
- refresh_token
  可选。刷新令牌，可用于使用相同授权授予获取新访问令牌（详见第6节）。
- scope
  可选（如果与客户端请求的范围相同，则可省略，否则为必填）。访问令牌的范围，详见第3.3节。

参数以"application/json"媒体类型（定义见[RFC4627]）序列化为JSON结构，将每个参数作为最高层级的属性，字符串值以JSON字符串表示，数值以JSON数字表示。参数顺序无关紧要，可变。

授权服务器必须在包含令牌、凭证或其他敏感信息的响应中加入HTTP响应头"Cache-Control"（值为"no-store"）和"Pragma"（值为"no-cache"）。

示例：
```
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
```

客户端必须忽略响应中未识别的值名。授权服务器颁发的令牌和其他值的大小未定义，客户端应避免假设值的大小。授权服务器应记录其颁发值的大小。

5.2. 错误响应
授权服务器以HTTP 400（Bad Request）状态码（除非另有说明）响应，并在响应中包含以下参数：
- error
  必填。单个ASCII [USASCII]错误码，取值包括：
  - invalid_request：请求缺少必需参数、包含不支持的参数值（除grant_type外）、重复参数、包含多个凭证、使用多种机制进行客户端认证，或格式错误。
  - invalid_client：客户端认证失败（如未知客户端、未包含客户端认证信息或使用不支持的认证方法）。授权服务器可以返回HTTP 401（Unauthorized）状态码，指示支持的HTTP认证方案。如果客户端试图通过"Authorization"请求头进行认证，服务器必须返回HTTP 401，并在"WWW-Authenticate"响应头中注明所用的认证方案。
  - invalid_grant：提供的授权授予（如授权码、资源所有者凭证）或刷新令牌无效、过期、已撤销、不匹配授权请求中的重定向URI，或已发放给其他客户端。
  - unauthorized_client：已认证的客户端无权使用此授权授予类型。
  - unsupported_grant_type：授权授予类型不被授权服务器支持。
  - invalid_scope：请求的范围无效、未知、格式错误，或超出资源所有者授权的范围。

"error"参数的值不得包含字符集之外的字符：%x20-21 / %x23-5B / %x5D-7E。

- error_description
  可选。人类可读的ASCII [USASCII]文本，提供额外信息，帮助客户端开发者理解发生的错误。值不得包含字符集之外的字符。

- error_uri
  可选。标识包含关于错误信息的可读网页的URI，旨在为客户端开发者提供更多关于错误的资料。值必须符合URI引用语法，不得包含字符集之外的字符：%x21 / %x23-5B / %x5D-7E。

参数包含在HTTP响应的实体主体中，使用由[RFC4627]定义的“application/json”媒体类型。参数被序列化为一个JSON结构，将每个参数添加到最高层结构中。参数名和字符串值以JSON字符串的形式包含，数值以JSON数字的形式包含。参数的顺序不重要，可以变化。

例如：

```
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "error":"invalid_request"
}
```

硬特（Hardt）                        标准轨道                   [第46页]

RFC 6749                        OAuth 2.0                   2012年10月

6. 刷新访问令牌

如果授权服务器向客户端发放了刷新令牌，客户端可以通过在请求实体主体中使用“application/x-www-form-urlencoded”格式（参见附录B）并采用UTF-8字符编码，向令牌端点发起刷新请求，添加以下参数：

grant_type
  必须。值必须设为“refresh_token”。

refresh_token
  必须。发放给客户端的刷新令牌。

scope
  可选。访问请求的范围，如第3.3节所述。请求的范围不得包含资源所有者未最初授予的任何范围，若省略，则视为等同于资源所有者最初授予的范围。

由于刷新令牌通常是用于请求额外访问令牌的长期凭据，刷新令牌绑定到发放它的客户端。如果客户端类型是机密型或已获得客户端凭据（或被分配了其他认证要求），则客户端必须按照第3.2.1节所述进行与授权服务器的认证。

例如，客户端使用传输层安全（为了演示目的，加入了额外换行）发起如下HTTP请求：

```
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
```

授权服务器必须：

- 对于机密客户端或任何已获得客户端凭据（或其他认证要求）的客户端，要求进行客户端认证；
- 如果包含客户端认证，则验证客户端身份，并确保刷新令牌是发放给已认证客户端的；
- 验证刷新令牌的有效性。

如果验证通过且授权，授权服务器将发放一个访问令牌（详见第5.1节）。如果验证失败或请求无效，授权服务器将返回错误响应（详见第5.2节）。

授权服务器可以发放新的刷新令牌，在这种情况下，客户端必须丢弃旧的刷新令牌，用新的刷新令牌替换。授权服务器也可以在发放新刷新令牌后撤销旧的刷新令牌。如果发放了新刷新令牌，刷新令牌的范围必须与客户端在请求中提供的刷新令牌的范围相同。

7. 访问受保护资源

客户端通过提供访问令牌给资源服务器来访问受保护的资源。资源服务器必须验证访问令牌，确保其未过期且其范围覆盖请求的资源。验证访问令牌的方法（以及任何错误响应）超出了本规范的范围，但通常涉及资源服务器与授权服务器之间的交互或协调。

客户端使用访问令牌进行身份验证的方法取决于授权服务器发放的访问令牌类型。通常，使用HTTP“Authorization”请求头字段[RFC2617]，配合由访问令牌类型规范定义的认证方案（如[RFC6750]）。

7.1. 访问令牌类型

访问令牌类型为客户端提供成功使用访问令牌进行受保护资源请求所需的信息（以及特定类型的属性）。如果客户端不理解某种令牌类型，则不得使用该令牌。

例如，[RFC6750]定义的“bearer”类型通过在请求中包含访问令牌字符串实现：

```
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
```

而[OAuth-HTTP-MAC]定义的“mac”类型通过发出消息认证码（MAC）密钥，并用它签名HTTP请求的某些部分实现：

```
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: MAC id="h480djs93hd8",
                   nonce="274312:dj83hs9s",
                   mac="kDZvddkndxvhGRXZhvuDjEWhGeE="
```

以上示例仅供说明。建议开发者在使用前查阅[RFC6750]和[OAuth-HTTP-MAC]规范。

每种访问令牌类型定义了附加属性（如果有），这些属性会与“access_token”响应参数一同发送给客户端。它还定义了在请求受保护资源时包含访问令牌的HTTP认证方法。

7.2. 错误响应

如果资源访问请求失败，资源服务器应通知客户端错误。虽然具体的错误响应超出本规范范围，但第11.4节建立了一个共享的错误值注册表，用于OAuth令牌认证方案中的错误值。

为OAuth令牌认证设计的新的认证方案应定义向客户端提供错误状态码的机制，允许的错误值在本规范建立的错误注册表中注册。

这些方案可以限制有效错误码的集合为注册值的子集。如果错误码以命名参数形式返回，参数名应为“error”。

其他可用于OAuth令牌认证但非主要设计目的的方案，也可以以相同方式将其错误值绑定到注册表中。

新认证方案还可以选择定义“error_description”和“error_uri”参数，用于以类似于本规范的方式返回错误信息。

8. 扩展性

8.1. 定义访问令牌类型

访问令牌类型可以通过两种方式定义：在访问令牌类型注册表中注册（遵循第11.1节的程序），或使用唯一的绝对URI作为其名称。

使用URI名称的类型应限于供应商特定的实现，且不常用，且仅适用于特定资源服务器的实现细节。

所有其他类型必须注册。类型名必须符合type-name的ABNF定义。如果类型定义中包含新的HTTP认证方案，类型名应与该HTTP认证方案的名称相同（如[RFC2617]定义）。“example”类型保留用于示例。

```
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
```

8.2. 定义新的端点参数

用于授权端点或令牌端点的新请求或响应参数应按照第11.2节的程序在OAuth参数注册表中注册。

参数名必须符合param-name的ABNF定义，参数值的语法必须明确定义（例如，使用ABNF或引用现有参数的语法）。

```
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
```

未注册的供应商特定参数扩展（不常用且仅适用于特定实现）应使用供应商特定的前缀，避免与已注册值冲突（例如，以“companyname_”开头）。

8.3. 定义新的授权授权类型

可以通过为“grant_type”参数分配唯一的绝对URI，定义新的授权授权类型。如果扩展授权类型需要额外的令牌端点参数，则必须在第11.2节的程序中注册。

8.4. 定义新的授权端点响应类型

可以在授权端点响应类型注册表中定义并注册新的响应类型，遵循第11.3节的程序。响应类型名称必须符合response-type的ABNF定义。

```
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
```

如果响应类型包含一个或多个空格字符（%x20），则作为空格分隔的值列表进行比较，值的顺序不重要。只能注册一种值的顺序，涵盖同一组值的所有其他排列。

例如，响应类型“token code”在本规范中未定义，但扩展可以定义并注册“token code”响应类型。一旦注册，不能将相同组合注册为“code token”，但两个值都可以用来表示相同的响应类型。

8.5. 定义额外的错误码

当协议扩展（如访问令牌类型、扩展参数或扩展授权类型）需要在授权码授予错误响应（第4.1.2.1节）、隐式授权错误响应（第4.2.2.1节）、令牌错误响应（第5.2节）或资源访问错误响应（第7.2节）中使用额外的错误码时，可以定义这些错误码。

扩展错误码必须注册（遵循第11.4节的程序），如果它们用于已注册的访问令牌类型、已注册的端点参数或扩展授权类型。未注册扩展的错误码也可以注册。

错误码必须符合error的ABNF定义，且应尽可能以标识性名称作为前缀。例如，表示扩展参数“example”中无效值集的错误应命名为“example_invalid”。

```
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
```

9. 原生应用

原生应用是安装在资源所有者使用的设备上的客户端（如桌面应用、原生移动应用）。原生应用在安全、平台能力和整体用户体验方面需要特殊考虑。

授权端点需要客户端与资源所有者的用户代理交互。原生应用可以调用外部用户代理，也可以在应用中嵌入用户代理。例如：

- 外部用户代理：原生应用可以通过带有操作系统注册方案的重定向URI捕获授权服务器的响应，或通过手动复制粘贴凭据、运行本地Web服务器、安装用户代理扩展，或提供指向由客户端控制的服务器托管资源的重定向URI，从而使响应可供原生应用使用。

- 嵌入式用户代理：原生应用通过监控资源加载过程中发出的状态变化，或访问用户代理的cookie存储，直接与嵌入式用户代理通信以获取响应。

在选择外部或嵌入式用户代理时，开发者应考虑：

- 外部用户代理可能提高完成率，因为资源所有者可能已与授权服务器保持会话，无需重新认证。它提供熟悉的用户体验和功能。

- 嵌入式用户代理可能提供更好的可用性，因为它省去了切换上下文和打开新窗口的步骤。

- 嵌入式用户代理存在安全挑战，因为资源所有者在未识别的窗口中进行认证，没有外部用户代理中的视觉保护措施。它可能让终端用户更容易相信未识别的认证请求（增加钓鱼攻击风险）。

在选择隐式授权类型或授权码授权类型时，应考虑：

- 使用授权码授权类型的原生应用应避免使用客户端凭据，因为原生应用无法保证客户端凭据的机密性。

当使用隐式授权类型流程时，不会返回刷新令牌，这意味着在访问令牌过期后，必须重复授权流程。  

10. 安全注意事项  

作为一个灵活且可扩展的框架，OAuth的安全性考虑因素取决于多种因素。以下部分为实现者提供了关于第2.1节所描述的三种客户端类型——网页应用、用户代理基础应用和本地应用——的安全指南。  

关于OAuth安全模型的全面分析、背景信息以及协议设计的相关内容，可参考[OAuth-THREATMODEL]。  

10.1. 客户端认证  

授权服务器为网页应用客户端建立客户端凭据，用于客户端认证。建议授权服务器考虑采用比客户端密码更强的认证方式。网页应用客户端必须确保客户端密码及其他客户端凭据的机密性。  

授权服务器不得向本地应用或基于用户代理的应用客户端发放客户端密码或其他凭据用于认证。授权服务器可以为特定设备上的本地应用客户端的特定安装发放客户端密码或其他凭据。  

当无法进行客户端认证时，授权服务器应采用其他方式验证客户端身份，例如，要求注册重定向URI或让资源所有者确认身份。仅凭有效的重定向URI不足以验证客户端身份，但可以用来防止在获取资源所有者授权后，将凭据交付给伪造的客户端。  

授权服务器必须考虑与未认证客户端交互的安全风险，并采取措施限制此类客户端可能带来的其他凭据（如刷新令牌）泄露的风险。  

10.2. 客户端冒充  

如果恶意客户端未能或无法保密其客户端凭据，可能会冒充其他客户端，获取受保护资源的访问权限。  

授权服务器应尽可能进行客户端身份验证。如果因客户端性质无法验证，应要求注册所有用于接收授权响应的重定向URI，并应采用其他措施保护资源所有者免受潜在恶意客户端的攻击。例如，授权服务器可以让资源所有者协助识别客户端及其来源。  

授权服务器应强制执行明确的资源所有者身份验证，并向资源所有者提供有关客户端、请求的授权范围和有效期的信息。由资源所有者审查这些信息后，决定是否授权。  

授权服务器不应自动（无资源所有者主动交互）重复处理授权请求，除非已验证客户端身份或采取其他措施确保请求确实来自原始客户端，而非冒充者。  

10.3. 访问令牌  

访问令牌凭据（以及任何机密的访问令牌属性）必须在传输和存储过程中保持机密，仅在授权服务器、资源服务器（访问令牌有效的服务器）和发放给的客户端之间共享。访问令牌凭据必须仅通过TLS（第1.6节所述）传输，并进行服务器身份验证（符合[RFC2818]定义）。  

使用隐式授权类型时，访问令牌在URI片段中传输，可能会暴露给未授权方。  

授权服务器必须确保不能被未授权方生成、修改或猜测出有效的访问令牌。  

客户端应请求具有最低必要权限的访问令牌。授权服务器在决定如何满足请求的范围时，应考虑客户端身份，可能会发放权限较少的访问令牌。  

本规范未提供任何方法让资源服务器验证由特定客户端提交的访问令牌是否由授权服务器发放给该客户端。  

10.4. 刷新令牌  

授权服务器可以向网页应用和本地应用客户端发放刷新令牌。  

刷新令牌在传输和存储过程中必须保持机密，仅在授权服务器和接收刷新令牌的客户端之间共享。授权服务器必须维护刷新令牌与其发放的客户端之间的绑定关系。  

刷新令牌只能通过TLS（第1.6节所述）传输，并进行服务器身份验证（符合[RFC2818]）。  

每次客户端身份可验证时，授权服务器必须验证刷新令牌与客户端的绑定关系。无法验证时，应采用其他手段检测刷新令牌滥用。  

例如，授权服务器可以采用刷新令牌轮换机制，即每次发放新的刷新令牌时，之前的刷新令牌即被作废但仍由授权服务器保留。如果刷新令牌被泄露并被攻击者和合法客户端同时使用，任何一方提交的无效刷新令牌都能向授权服务器报告安全漏洞。  

授权服务器必须确保刷新令牌不能被未授权方猜测、修改或伪造出有效的刷新令牌。  

10.5. 授权码  

授权码的传输应通过安全通道进行，且客户端在重定向URI中应强制使用TLS（如果URI指向网络资源）。由于授权码通过用户代理重定向传输，可能会通过用户代理历史记录或HTTP引用头泄露。  

授权码作为明文持有者凭证，用于验证在授权服务器授予授权的资源所有者与返回给客户端完成流程的资源所有者是同一人。因此，如果客户端依赖授权码进行资源所有者的身份验证，必须要求重定向端点使用TLS。  

授权码必须短暂且一次性使用。如果授权服务器检测到多次尝试用同一授权码换取访问令牌，应尝试撤销基于被泄露授权码已授予的所有访问令牌。  

如果可以验证客户端身份，授权服务器必须验证授权码是否发放给相同的客户端。  

10.6. 授权码重定向URI操控  

在使用授权码流程请求授权时，客户端可以通过“redirect_uri”参数指定重定向URI。如果攻击者能操控重定向URI的值，可能导致授权服务器将资源所有者的用户代理重定向到攻击者控制的URI，并携带授权码。  

攻击者可以在合法客户端注册账户并发起授权流程。当攻击者的用户代理被引导到授权服务器以授予访问权限时，攻击者可以截获授权URI，并将客户端的重定向URI替换为自己控制的URI。  

随后，攻击者诱使受害者点击被篡改的链接，授权访问合法客户端。  

在授权服务器端，受害者会看到正常、有效的请求，授权后会被重定向到攻击者控制的端点，携带授权码。攻击者再用原始的重定向URI将授权码发给客户端，完成授权流程。客户端用授权码换取访问令牌，并将其关联到攻击者的客户端账户，从而获得受害者授权的受保护资源访问权限（通过客户端）。  

为防止此类攻击，授权服务器必须确保用于获取授权码的重定向URI与用以换取访问令牌时提供的重定向URI完全一致。公共客户端必须注册其重定向URI，机密客户端也应被要求注册。请求中提供的重定向URI必须经过验证，确保与注册值一致。  

10.7. 资源所有者密码凭据  

资源所有者密码凭据授权类型常用于遗留系统或迁移场景。它减少了客户端存储用户名和密码的风险，但未能消除向客户端暴露高权限凭据的风险。  

此授权类型风险较高，因为它仍然存在协议试图避免的密码反模式。客户端可能滥用密码，或密码无意中被泄露给攻击者（例如，通过日志文件或其他记录）。  

此外，由于资源所有者无法控制授权流程（其参与在交出凭据后即终止），客户端可能获得比资源所有者期望更广泛范围的访问令牌。授权服务器应考虑通过此授权类型发放的访问令牌的范围和有效期。  

建议授权服务器和客户端尽量减少使用此授权类型，优先采用其他授权方式。  

10.8. 请求机密性  

访问令牌、刷新令牌、资源所有者密码和客户端凭据不得以明文传输。授权码也不应以明文传输。  

“state”和“scope”参数不应包含敏感的客户端或资源所有者信息，避免在不安全的通道中传输或存储。  

10.9. 确保端点真实性  

为防止中间人攻击，授权服务器必须要求所有发往授权端点和令牌端点的请求使用TLS（符合[RFC2818]定义）并进行服务器身份验证。  

客户端必须验证授权服务器的TLS证书，符合[RFC6125]的要求，确保服务器身份的真实性。  

10.10. 凭据猜测攻击  

授权服务器必须防止攻击者猜测访问令牌、授权码、刷新令牌、资源所有者密码和客户端凭据。  

攻击者猜测生成的令牌（以及其他非终端用户处理的凭据）的概率必须≤2^(-128)，理想情况下应≤2^(-160)。  

授权服务器应采用其他手段保护面向终端用户的凭据。  

10.11. 钓鱼攻击  

广泛部署此类协议可能导致终端用户习惯于被重定向到要求输入密码的网站。如果用户未能验证网站的真实性，攻击者可能利用此漏洞窃取资源所有者的密码。  

服务提供商应教育用户认识钓鱼攻击的风险，并提供机制帮助用户确认网站的真实性。客户端开发者应考虑与用户代理交互的安全性（如外部或嵌入式），以及用户验证授权服务器真实性的能力。  

为降低钓鱼攻击风险，授权服务器必须在所有用户交互端点强制使用TLS。  

10.12. 跨站请求伪造（CSRF）  

跨站请求伪造（CSRF）是一种攻击方式，攻击者诱导受害者的用户代理访问恶意URI（如伪造的链接、图片或重定向），从而在受信任的服务器（通常通过有效的会话cookie）上执行未授权操作。

针对客户端重定向URI的CSRF攻击，攻击者可以注入自己的授权码或访问令牌，从而导致客户端使用与攻击者受保护资源相关联的访问令牌，而非受害者的（例如，将受害者的银行账户信息保存到由攻击者控制的受保护资源中）。

客户端必须为其重定向URI实现CSRF保护。通常通过要求任何发送到重定向URI端点的请求都包含一个绑定请求与用户代理已认证状态的值（例如，用于验证用户代理的会话Cookie的哈希值）来实现。客户端应使用“state”请求参数在发起授权请求时将此值传递给授权服务器。

一旦获得终端用户的授权，授权服务器会将终端用户的用户代理重定向回客户端，并在“state”参数中包含所需的绑定值。该绑定值使客户端能够通过匹配绑定值与用户代理的已认证状态来验证请求的有效性。用于CSRF保护的绑定值必须包含一个不可猜测的值（如第10.10节所述），并且用户代理的已认证状态（例如会话Cookie、HTML5本地存储）必须保存在仅对客户端和用户代理可访问的位置（即受同源策略保护的区域）。

针对授权服务器授权端点的CSRF攻击可能导致攻击者在未通知或未涉及终端用户的情况下，获得终端用户对恶意客户端的授权。

授权服务器必须为其授权端点实现CSRF保护，并确保恶意客户端无法在资源所有者知情和明确同意的情况下获得授权。

---

10.13. 点击劫持（Clickjacking）

在点击劫持攻击中，攻击者注册一个合法客户端，然后构建一个恶意网站，在该网站中以透明iframe加载授权服务器的授权端点网页，并在其上覆盖一组伪装的按钮，这些按钮被精心设计为正好位于授权页面上的重要按钮下方。当终端用户点击一个误导性的可见按钮时，实际上是在点击授权页面上的一个不可见按钮（例如“授权”按钮）。这使得攻击者可以欺骗资源所有者在不知情的情况下授权其客户端访问。

为防止此类攻击，原生应用应在请求终端用户授权时使用外部浏览器，而非在应用内嵌入浏览器。对于大多数较新浏览器，可以通过授权服务器使用非标准的“x-frame-options”头来强制禁止iframe。该头可以设置为“deny”或“sameorigin”，分别阻止任何框架或不同源的站点框架。对于较旧的浏览器，可以使用JavaScript的“frame-busting”技术，但可能并不在所有浏览器中都有效。

---

10.14. 代码注入与输入验证

代码注入攻击发生在应用程序未经消毒直接使用外部输入或变量，导致修改应用逻辑。这可能使攻击者获得对应用设备或数据的访问权限、引发拒绝服务，或引入各种恶意副作用。

授权服务器和客户端必须对接收到的任何值进行消毒（并在可能的情况下进行验证），特别是“state”和“redirect_uri”参数的值。

---

10.15. 开放重定向器

授权服务器、授权端点和客户端重定向端点可能配置不当，成为开放重定向器。开放重定向器是指使用参数自动将用户代理重定向到由参数值指定位置的端点，而不进行任何验证。

开放重定向器可被用于钓鱼攻击，或被攻击者利用，通过使用熟悉且受信任的目标的URI授权部分，诱导终端用户访问恶意站点。此外，如果授权服务器只允许客户端注册部分重定向URI，攻击者可以利用由客户端操作的开放重定向器，构造出通过验证但将授权码或访问令牌发送到攻击者控制的端点的重定向URI。

---

10.16. 在隐式流程中滥用访问令牌以冒充资源所有者

对于使用隐式流程的公共客户端，本规范未提供任何方法让客户端判断访问令牌是发给哪个客户端的。

资源所有者可能会出于钓鱼或其他借口，主动授权攻击者的恶意客户端访问其资源。这可能导致攻击者通过某种机制窃取令牌，然后试图用该令牌冒充资源所有者，将其提供给合法的公共客户端。

在隐式流程（response_type=token）中，攻击者可以轻松地在授权服务器的响应中切换令牌，用之前发放给攻击者的令牌替换真实的访问令牌。

与依赖后端通道传递访问令牌以识别客户端用户的本地应用通信的服务器，也可能被攻击者利用，攻击者可以创建受损应用，注入任意被窃取的访问令牌。

任何假设只有资源所有者能向其提供有效访问令牌的公共客户端，都容易受到此类攻击。

此类攻击可能会向攻击者泄露合法客户端中资源所有者的相关信息（恶意客户端），并允许攻击者以资源所有者最初授予访问权限的相同权限在合法客户端上执行操作。

对资源所有者进行客户端身份验证超出了本规范的范围。任何将授权过程用作代表终端用户进行身份验证的规范（例如第三方登录服务）都不得在没有额外安全机制（如限制访问令牌的受众）的情况下使用隐式流程，以确保客户端能判断访问令牌是否为其发放。

---

11. IANA考虑事项

11.1. OAuth访问令牌类型注册表

本规范建立了OAuth访问令牌类型注册表。

访问令牌类型须经过“规范必需”注册（[RFC5226]），在oauth-ext-review@ietf.org邮件列表上经过两周审查期，由一名或多名指定专家（Designated Experts）建议批准。为了在发布前预留值，指定专家在确认相关规范将被发布后，可以批准注册。

注册请求须发送到oauth-ext-review@ietf.org邮件列表，附带合适的主题（如“请求访问令牌类型：示例”）以供审查和评论。

在审查期内，指定专家将批准或拒绝注册请求，并将决定通知审查列表和IANA。拒绝时应附带说明和（如适用）改进建议。

IANA只接受来自指定专家的注册更新请求，所有注册请求应提交至审查邮件列表。

11.1.1. 注册模板

类型名称：
请求的名称（如“example”）。

附加的令牌端点响应参数：
与“access_token”参数一同返回的附加响应参数。新参数必须在OAuth参数注册表中单独注册（详见第11.2节）。

HTTP认证方案：
用于验证受保护资源请求的HTTP认证方案名称（如有）。

变更控制：
对于标准轨道的RFC，填写“IETF”；其他情况填写责任方的名称。也可包括其他细节（如邮寄地址、电子邮箱、主页URI）。

---

11.2. OAuth参数注册表

本规范建立了OAuth参数注册表。

用于授权端点请求、授权端点响应、令牌端点请求或令牌端点响应中包含的附加参数，须经过“规范必需”注册（[RFC5226]），在oauth-ext-review@ietf.org邮件列表上经过两周审查期，由一名或多名指定专家建议批准。为了在发布前预留值，指定专家在确认规范将被发布后，可以批准注册。

注册请求须发送到oauth-ext-review@ietf.org邮件列表，附带合适的主题（如“请求参数：示例”）以供审查和评论。

在审查期内，指定专家将批准或拒绝注册请求，并通知审查列表和IANA。拒绝时应附带说明和（如适用）改进建议。

IANA只接受来自指定专家的注册更新请求，所有请求应提交至审查邮件列表。

11.2.1. 注册模板

参数名称：
请求的名称（如“example”）。

参数使用位置：
参数可以使用的场景（授权请求、授权响应、令牌请求或令牌响应）。

变更控制：
对于标准轨道RFC，填写“IETF”；其他填写责任方的名称。也可包括其他细节（如邮寄地址、电子邮箱、主页URI）。

---

11.2.2. 初始注册内容

OAuth参数注册表的初始内容包括：

- 参数名：client_id
- 使用位置：授权请求、令牌请求
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：client_secret
- 使用位置：令牌请求
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：response_type
- 使用位置：授权请求
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：redirect_uri
- 使用位置：授权请求、令牌请求
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：scope
- 使用位置：授权请求、授权响应、令牌请求、令牌响应
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：state
- 使用位置：授权请求、授权响应
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：code
- 使用位置：授权响应、令牌请求
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：error_description
- 使用位置：授权响应、令牌响应
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：error_uri
- 使用位置：授权响应、令牌响应
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：grant_type
- 使用位置：令牌请求
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：access_token
- 使用位置：授权响应、令牌响应
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：token_type
- 使用位置：授权响应、令牌响应
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：expires_in
- 使用位置：授权响应、令牌响应
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：username
- 使用位置：令牌请求
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：password
- 使用位置：令牌请求
- 变更控制：IETF
- 规范文档：RFC 6749

- 参数名：refresh_token
- 使用位置：令牌请求、令牌响应
- 变更控制：IETF
- 规范文档：RFC 6749

---

11.3. OAuth授权端点响应类型注册表

本规范建立了OAuth授权端点响应类型注册表。

用于授权端点的其他响应类型在经过两周审查期后，须在oauth-ext-review@ietf.org邮件列表上注册，注册须有一名或多名指定专家的建议，并且必须符合[RFC5226]的“规范要求”。然而，为了在正式发布前分配值，指定专家在确认相关规范将会发布后，可以批准注册。

注册请求必须提交到oauth-ext-review@ietf.org邮件列表，供审查和评论，主题应注明（例如，“请求响应类型：example”）。

在审查期内，指定专家将决定批准或拒绝注册请求，并将决定通知审查列表和IANA。拒绝时应提供理由，并在适用时提出建议以帮助请求成功。

IANA只能接受来自指定专家的注册更新请求，所有注册请求应提交到审查邮件列表。

11.3.1. 注册模板

响应类型名称：
    请求的名称（例如，“example”）。

变更控制者：
    对于标准轨RFC，注明“IETF”。对于其他情况，提供责任方的名称。也可以包括其他细节（如邮寄地址、电子邮箱、主页URI）。

规范文档：
    指明规范响应类型的文档，最好包括可用以检索文档的URI。也可以包括相关章节的指示，但非必需。

11.3.2. 初始注册内容

OAuth授权端点响应类型注册表的初始内容如下：

- 响应类型名称：code
- 变更控制者：IETF
- 规范文档：RFC 6749

- 响应类型名称：token
- 变更控制者：IETF
- 规范文档：RFC 6749

11.4. OAuth扩展错误注册表

本规范建立了OAuth扩展错误注册表。

用于其他协议扩展（如扩展授权类型、访问令牌类型或扩展参数）中的错误代码，在经过两周审查期后，须在oauth-ext-review@ietf.org邮件列表注册，注册须有一名或多名指定专家的建议，并符合[RFC5226]的规范要求。为了在正式发布前分配值，指定专家在确认相关规范将会发布后，可以批准注册。

注册请求必须提交到oauth-ext-review@ietf.org邮件列表，供审查和评论，主题应注明（例如，“请求错误代码：example”）。

在审查期内，指定专家将决定批准或拒绝注册请求，并将决定通知审查列表和IANA。拒绝时应提供理由，并在适用时提出建议以帮助请求成功。

IANA只能接受来自指定专家的注册更新请求，所有注册请求应提交到审查邮件列表。

11.4.1. 注册模板

错误名称：
    请求的名称（例如，“example”）。错误名称的值不得包含字符集%20-21 / %23-5B / %5D-7E之外的字符。

错误使用位置：
    指明错误可能出现的位置。可能的位置包括授权码授权响应（第4.1.2.1节）、隐式授权响应（第4.2.2.1节）、令牌错误响应（第5.2节）或资源访问错误响应（第7.2节）。

相关协议扩展：
    该错误代码使用的扩展授权类型、访问令牌类型或扩展参数的名称。

变更控制者：
    对于标准轨RFC，注明“IETF”。对于其他情况，提供责任方的名称。也可以包括其他细节（如邮寄地址、电子邮箱、主页URI）。

规范文档：
    指明规范错误代码的文档，最好包括可用以检索文档的URI。也可以包括相关章节的指示，但非必需。

12. 参考文献

12.1. 规范性参考文献

[RFC2119] Bradner, S., “用以指示RFC中需求级别的关键词”, BCP 14, RFC 2119, 1997年3月。

[RFC2246] Dierks, T. 和 C. Allen, “TLS协议版本1.0”, RFC 2246, 1999年1月。

[RFC2616] Fielding, R. 等人, “超文本传输协议HTTP/1.1”, RFC 2616, 1999年6月。

[RFC2617] Franks, J. 等人, “HTTP认证：基本和摘要访问认证”, RFC 2617, 1999年6月。

[RFC2818] Rescorla, E., “通过TLS的HTTP”, RFC 2818, 2000年5月。

[RFC3629] Yergeau, F., “UTF-8，ISO 10646的变换格式”, STD 63, RFC 3629, 2003年11月。

[RFC3986] Berners-Lee, T. 等人, “统一资源标识符（URI）：通用语法”, STD 66, RFC 3986, 2005年1月。

[RFC4627] Crockford, D., “JavaScript对象表示法（JSON）的application/json媒体类型”, RFC 4627, 2006年7月。

[RFC4949] Shirey, R., “互联网安全词汇表，第2版”, RFC 4949, 2007年8月。

[RFC5226] Narten, T. 和 H. Alvestrand, “编写IANA考虑章节的指南”, BCP 26, RFC 5226, 2008年5月。

[RFC5234] Crocker, D. 和 P. Overell, “语法规范的增强BNF（ABNF）”, STD 68, RFC 5234, 2008年1月。

[RFC5246] Dierks, T. 和 E. Rescorla, “传输层安全协议（TLS）版本1.2”, RFC 5246, 2008年8月。

[RFC6125] Saint-Andre, P. 和 J. Hodges, “基于域的应用服务身份的表示与验证（X.509证书在TLS中的应用）”, RFC 6125, 2011年3月。

[USASCII] 美国国家标准协会, “编码字符集——7位美国信息交换标准码”, ANSI X3.4, 1986年。

[W3C.REC-html401-19991224] Raggett, D. 等人, “HTML 4.01规范”, 万维网联盟, REC-html401-19991224, 1999年12月, <http://www.w3.org/TR/1999/REC-html401-19991224>。

[W3C.REC-xml-20081126] Bray, T. 等人, “可扩展标记语言（XML）第5版”, 万维网联盟, REC-xml-20081126, 2008年11月, <http://www.w3.org/TR/2008/REC-xml-20081126>。

12.2. 补充性参考文献

[OAuth-HTTP-MAC] Hammer-Lahav, E. 编, “HTTP认证：MAC访问认证”, 工作进展, 2012年2月。

[OAuth-SAML2] Campbell, B. 和 C. Mortimore, “OAuth 2.0的SAML 2.0持有断言配置文件”, 工作进展, 2012年9月。

[OAuth-THREATMODEL] Lodderstedt, T. 编, McGloin, M., 和 P. Hunt, “OAuth 2.0威胁模型与安全考虑”, 工作进展, 2012年10月。

[OAuth-WRAP] Hardt, D. 编, Tom, A., Eaton, B., 和 Y. Goland, “OAuth Web资源授权配置文件”, 工作进展, 2010年1月。

[RFC5849] Hammer-Lahav, E., “OAuth 1.0协议”, RFC 5849, 2010年4月。

[RFC6750] Jones, M. 和 D. Hardt, “OAuth 2.0授权框架：持有令牌使用”, RFC 6750, 2012年10月。

（以下省略部分内容，内容与原文一致）

本规范由OAuth工作组制定，工作组由数十位积极且敬业的成员组成。特别感谢以下个人为本规范的形成提供了思想、反馈和措辞方面的贡献：

迈克尔·亚当斯（Michael Adams）、阿曼达·安加尼斯（Amanda Anganes）、安德鲁·阿诺特（Andrew Arnott）、迪克·巴尔芬茨（Dirk Balfanz）、艾登·贝尔（Aiden Bell）、约翰·布拉德利（John Bradley）、马科斯·卡塞雷斯（Marcos Caceres）、布莱恩·坎贝尔（Brian Campbell）、斯科特·坎特（Scott Cantor）、布莱恩·库克（Blaine Cook）、罗杰·克鲁（Roger Crew）、莉亚·库尔弗（Leah Culver）、比尔·德霍拉（Bill de hOra）、安德烈·德马雷（Andre DeMarre）、布莱恩·伊顿（Brian Eaton）、韦斯利·埃迪（Wesley Eddy）、沃尔特·埃尔德林（Wolter Eldering）、布莱恩·艾林（Brian Ellin）、伊戈尔·费恩伯格（Igor Faynberg）、乔治·弗莱彻（George Fletcher）、蒂姆·弗里曼（Tim Freeman）、卢卡·弗罗西尼（Luca Frosini）、埃文·吉尔伯特（Evan Gilbert）、亚隆·Y·戈兰（Yaron Y. Goland）、布伦特·戈德曼（Brent Goldman）、克里斯托弗·格罗诺夫斯基（Kristoffer Gronowski）、埃兰·哈默（Eran Hammer）、迪克·哈德特（Dick Hardt）、贾斯汀·哈特（Justin Hart）、克雷格·希思（Craig Heath）、菲尔·亨特（Phil Hunt）、迈克尔·B·琼斯（Michael B. Jones）、特里·琼斯（Terry Jones）、约翰·肯普（John Kemp）、马克·肯特（Mark Kent）、拉菲·克里科里安（Raffi Krikorian）、查森·勒哈拉（Chasen Le Hara）、拉斯穆斯·勒尔多夫（Rasmus Lerdorf）、托尔斯滕·洛德德斯蒂德（Torsten Lodderstedt）、卢惠兰（Hui-Lan Lu）、凯西·卢卡斯（Casey Lucas）、保罗·马德森（Paul Madsen）、阿拉斯泰尔·梅尔（Alastair Mair）、伊芙·马勒（Eve Maler）、詹姆斯·曼格（James Manger）、马克·麦格林（Mark McGloin）、劳伦斯·苗（Laurence Miao）、威廉·米尔斯（William Mills）、查克·莫蒂莫尔（Chuck Mortimore）、安东尼·纳达林（Anthony Nadalin）、朱利安·雷施克（Julian Reschke）、贾斯汀·里彻（Justin Richer）、彼得·圣安德烈（Peter Saint-Andre）、纳特·萨基穆拉（Nat Sakimura）、罗布·塞尔（Rob Sayre）、马里乌斯·斯库尔泰斯库（Marius Scurtescu）、奈蒂克·沙阿（Naitik Shah）、卢克·谢泼德（Luke Shepard）、弗拉德·斯克沃尔佐夫（Vlad Skvortsov）、贾斯汀·史密斯（Justin Smith）、海宾·宋（Haibin Song）、尼夫·斯坦格尔滕（Niv Steingarten）、克里斯蒂安·斯图布纳（Christian Stuebner）、杰里米·苏里尔（Jeremy Suriel）、保罗·塔尔詹（Paul Tarjan）、克里斯托弗·托马斯（Christopher Thomas）、亨利·S·汤普森（Henry S. Thompson）、艾伦·汤姆（Allen Tom）、弗兰克林·策（Franklin Tse）、尼克·沃克（Nick Walker）、肖恩·维登（Shane Weeden）以及斯凯拉·伍德沃德（Skylar Woodward）。

本文件由布莱恩·库克、彼得·圣安德烈、汉内斯·乔费尼格、巴里·莱巴和德里克·阿特金斯主持制定。领域主管包括丽莎·杜塞奥（Lisa Dusseault）、彼得·圣安德烈和斯蒂芬·法雷尔（Stephen Farrell）。

作者联系方式

迪克·哈德特（编辑）
微软公司

电子邮箱：dick.hardt@gmail.com
网址：http://dickhardt.org/
# RFC 2460 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs2001-2500/rfc2460.txt

网络工作组                                         S. Deering
建议反馈编号：2460                                         思科
废止：1883                                              R. Hinden
类别：标准轨道                                          诺基亚
                                                          1998年12月

                  互联网协议第六版（IPv6）
                        规范

本备忘录的状态

   本文件为互联网社区制定的互联网标准轨道协议，旨在征求讨论和改进建议。请参阅当前版本的《互联网官方协议标准》（STD 1），了解该协议的标准化状态和最新进展。本备忘录的分发不受限制。

版权声明

   版权所有（C）互联网协会（1998年）。保留所有权利。

摘要

   本文件规定了互联网协议的第六版（IPv6），有时也称为IP下一代（IP Next Generation或IPng）。

目录

   1. 引言......................................................2
   2. 术语......................................................3
   3. IPv6头部格式..............................................4
   4. IPv6扩展头部..............................................6
       4.1 扩展头部顺序........................................7
       4.2 选项..................................................9
       4.3 跳点选项头............................................11
       4.4 路由头...............................................12
       4.5 分片头...............................................18
       4.6 目的地选项头.........................................23
       4.7 无下一头.............................................24
   5. 数据包大小问题............................................24
   6. 流标签....................................................25
   7. 流量类别..................................................25
   8. 上层协议问题..............................................27
       8.1 上层校验和...........................................27
       8.2 最大数据包存活时间...................................28
       8.3 最大上层负载大小.....................................28
       8.4 对携带路由头的数据包的响应...........................29



Deering 和 Hinden            标准轨道                     [第1页]


RFC 2460                   IPv6 规范                1998年12月

附录A. 流标签字段的语义与用法.........30  
附录B. 选项格式指南...................32  
安全考虑.........................................35  
致谢.................................................35  
作者联系方式........................................35  
参考文献..............................................35  
自RFC-1883以来的变更..................................36  
完整版权声明...........................................39  

1. 引言

IPv6（互联网协议第六版）是一种新的互联网协议版本，旨在作为IPv4（互联网协议第4版）的继任者 [RFC-791]。IPv4向IPv6的主要变化主要包括以下几个方面：

   o  扩展的地址能力

      IPv6将IP地址长度从32位增加到128位，以支持更高层次的地址层级结构，提供更多可寻址的节点，以及更简便的地址自动配置。通过在多播地址中添加“作用域”字段，增强了多播路由的可扩展性。此外，还定义了一种新的地址类型，称为“任播地址”，用于将数据包发送到一组节点中的任意一个。

   o  头部格式简化

      一些IPv4头部字段被删除或设为可选，以减少常规数据包处理的成本，并限制IPv6头部的带宽开销。

   o  改进的扩展和选项支持

      对IP头部选项编码方式的改进，使得转发更高效，选项长度限制更宽松，并为未来引入新选项提供了更大的灵活性。

   o  流标签功能

      增加了一项新功能，用于对属于特定“流”的数据包进行标记，便于对这些数据包进行特殊处理，例如提供非默认的服务质量（QoS）或“实时”服务。

   o  认证与隐私功能

      为IPv6定义了支持认证、数据完整性以及（可选的）数据机密性的扩展。

本文件定义了基本的IPv6头部、最初的IPv6扩展头部和选项，还讨论了数据包大小问题、流标签和流量类别的语义，以及IPv6对上层协议的影响。IPv6地址的格式和语义在[ADDRARCH]中单独定义。所有IPv6实现都必须支持的ICMP的IPv6版本在[ICMPv6]中进行了说明。

2. 术语

node - 实现IPv6的设备。

路由器——一个转发IPv6数据包的节点，这些数据包不是明确发给它自己的。[见下方注释]

主机——任何非路由器的节点。[见下方注释]

上层协议——紧接在IPv6之上的协议层。例如，传输协议如TCP和UDP，控制协议如ICMP，路由协议如OSPF，以及在IPv6之上“隧道”传输的互联网或底层协议，如IPX、AppleTalk或IPv6本身。

链路——节点之间在链路层（即IPv6下方的层）进行通信的媒介或设施。例如，以太网（简单或桥接）、PPP链路、X.25、帧中继或ATM网络，以及在IPv4或IPv6之上的“隧道”——如IPv4或IPv6上的隧道。

邻居——连接在同一链路上的节点。

接口——节点连接到链路的接口。

地址——IPv6层的接口标识符，标识一个接口或一组接口。

数据包——IPv6头部加上有效载荷。

链路MTU——最大传输单元，即在链路上传输的最大数据包大小（以字节为单位）。

路径MTU——源节点到目标节点之间所有链路中最小的链路MTU。

注：虽然不常见，但也有可能配置具有多个接口的设备，使其能够转发来自某些（少于全部）接口的非目的自我数据包，并丢弃来自其他接口的非目的自我数据包。此类设备在接收来自（转发）前者接口的包以及与邻居交互时，必须遵守路由器的协议要求；在接收来自（非转发）后者接口的包以及与邻居交互时，必须遵守主机的协议要求。

3. IPv6头部格式

```
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |版本| 流量类别 |           流标签                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         有效载荷长度        |  下一个头部  |   跳数限制   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                                                               +
   |                                                               |
   +                         源地址                                +
   |                                                               |
   +                                                               +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                                                               +
   |                                                               |
   +                     目的地址                                  +
   |                                                               |
   +                                                               +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   版本              4位，表示互联网协议版本号，值为6。

   流量类别          8位，流量类别字段。详见第7节。

   流标签            20位，流标签。详见第6节。

   有效载荷长度      16位无符号整数。IPv6有效载荷的长度，即在此IPv6头之后的包的其余部分，单位为字节。（注意，任何扩展头部[第4节]都视为有效载荷的一部分，即包含在长度计数中。）

   下一个头部        8位选择器。标识紧随IPv6头部之后的头部类型。使用与IPv4协议字段[RFC-1700等]相同的值。

   跳数限制        8位无符号整数。每经过一个节点转发包时，跳数限制减1。如果减到零，则丢弃该包。

   源地址          128位，表示数据包的发起者地址。详见[ADDRARCH]。
```

目的地址：128位地址，指的是数据包的预期接收方（如果存在路由头，可能不是最终接收方）。详见[ADDRARCH]和第4.4节。




























Deering 和 Hinden            标准轨迹                     [第5页]


RFC 2460                   IPv6 规范              1998年12月


4.  IPv6 扩展头部

在IPv6中，可选的互联网层信息以单独的头部编码，这些头部可以放置在IPv6头部和上层协议头部之间。此类扩展头部的数量较少，每个都由不同的“下一个头部”值标识。如这些示例所示，一个IPv6数据包可以携带零个、一个或多个扩展头部，每个扩展头部由前一头部的“下一个头部”字段标识：

+---------------+------------------------
|  IPv6头部     | TCP头部 + 数据
|               |
| 下一个头部 =   |
|      TCP      |
+---------------+------------------------


+---------------+----------------+------------------------
|  IPv6头部     | 路由头部       | TCP头部 + 数据
|               |                |
| 下一个头部 =   |  下一个头部 =  |
|    路由       |      TCP       |
+---------------+----------------+------------------------


+---------------+----------------+-----------------+-----------------
|  IPv6头部     | 路由头部       | 分片头部        | TCP头部+数据的片段
|               |                |                 |
| 下一个头部 =   |  下一个头部 =  |  下一个头部 =  |
|    路由       |    分片        |      TCP        |
+---------------+----------------+-----------------+-----------------

除了一个例外，扩展头部不会被沿着数据包传递路径的任何节点检查或处理，直到数据包到达IPv6头部中目的地址字段所指示的节点（或多播情况下的每个节点）。在此，IPv6头部的正常多路复用（demultiplexing）会根据IPv6头部的“下一个头部”字段调用模块，处理第一个扩展头部，或者如果没有扩展头部，则处理上层协议头部。每个扩展头部的内容和语义决定是否继续处理下一个头部。因此，扩展头部必须严格按照它们在数据包中出现的顺序进行处理；例如，接收方不得扫描整个数据包以寻找特定类型的扩展头部，然后在处理所有前置头部之前处理该头部。





Deering 和 Hinden            标准轨迹                     [第6页]


RFC 2460                   IPv6 规范              1998年12月

前段提到的例外情况是指跳跃选项（Hop-by-Hop Options）头部，它携带的信息必须由沿着数据包传输路径的每个节点（包括源节点和目的节点）进行检查和处理。跳跃选项头部（如果存在）必须紧跟在IPv6头部之后。其存在与否由IPv6头部中的“Next Header”字段值为零来指示。

如果在处理某个头部时，节点需要继续处理下一个头部，但当前头部中的“Next Header”值为节点无法识别的类型，则应丢弃该数据包，并向源节点发送一条ICMP参数问题（Parameter Problem）消息，ICMP代码值为1（“遇到未识别的Next Header类型”），ICMP指针字段应包含未识别值在原始数据包中的偏移量。如果节点在除IPv6头部之外的任何其他头部中遇到“Next Header”值为零的情况，也应采取相同的措施。

每个扩展头部的长度都是8的整数倍，以保持后续头部的8字节对齐。每个扩展头部内的多字节字段应按其自然边界对齐，即宽度为n字节的字段应放置在距离头部起始位置为n的整数倍的偏移处，n可以是1、2、4或8。

完整的IPv6实现应包括以下扩展头部的实现：

- 跳跃选项（Hop-by-Hop Options）
- 路由（Routing，类型0）
- 分片（Fragment）
- 目的地选项（Destination Options）
- 认证（Authentication）
- 封装安全载荷（Encapsulating Security Payload）

前四个由本文档规定；后两个在[RFC-2402]和[RFC-2406]中分别规定。

4.1 扩展头部的顺序

当在同一数据包中使用多个扩展头部时，建议它们按照以下顺序出现：

- IPv6头部
- 跳跃选项头部
- 目的地选项头部（注1）
- 路由头部
- 分片头部
- 认证头部（注2）
- 封装安全载荷头部（注2）
- 目的地选项头部（注3）
- 上层协议头部

注1：用于由IPv6目的地址字段中第一个出现的目的地以及路由头中列出的后续目的地处理的选项。

注2：关于认证头部和封装安全载荷头部相对顺序的其他建议，详见[RFC-2406]。

注意3：仅由数据包的最终目的地处理的选项。

每个扩展头最多只能出现一次，除了目的地选项头（Destination Options header），它最多可以出现两次（一次在路由头之前，一次在上层协议头之前）。

如果上层协议头是另一个IPv6头（例如IPv6被隧道封装在IPv6中），它可以跟随其自身的扩展头，这些扩展头也应遵循相同的排序建议。

如果将来定义了其他扩展头，则必须说明它们相对于上述头部的排序限制。

IPv6节点必须接受并尝试以任何顺序处理扩展头，且可以在同一数据包中多次出现，除了跳跃选项（Hop-by-Hop Options）头，它仅限于紧跟在IPv6头之后出现。尽管如此，强烈建议IPv6数据包的源端遵守上述推荐的顺序，除非后续规范对该建议进行了修订。

---

4.2 选项

目前定义的两个扩展头——跳跃选项头（Hop-by-Hop Options）和目的地选项头（Destination Options）——都携带可变数量的类型-长度-值（TLV）编码的“选项”，其格式如下：

```
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -
   |  Option Type  |  Opt Data Len |  Option Data
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -
```

- 选项类型（Option Type）：8位标识符，表示选项的类型。
- 选项数据长度（Opt Data Len）：8位无符号整数，表示该选项数据字段的长度（以字节为单位）。
- 选项数据（Option Data）：可变长度字段，包含特定于该类型的数据信息。

在一个头部中的选项序列必须严格按照它们在头部中出现的顺序进行处理；例如，接收方不能扫描整个头部寻找某一特定类型的选项，然后在处理该选项之前处理所有前面的选项。

选项类型标识符在内部编码时，其最高的两个比特（最高两位）指示在处理过程中如果IPv6节点不识别该选项类型，应采取的行动：

- 00：跳过此选项，继续处理头部。
- 01：丢弃该数据包。
- 10：丢弃该数据包，并且无论目标地址是否为多播地址，向数据包的源地址发送一条ICMP参数问题（Parameter Problem）消息，代码为2，指向未识别的选项类型。

11 - 丢弃该数据包，且仅当该数据包的目标地址不是多播地址时，向该数据包的源地址发送一条ICMP参数问题（Parameter Problem）消息，代码为2，指向无法识别的选项类型（Option Type）。

选项类型的第三高位指定该选项的数据在传输途中是否可以发生变化。当数据包中存在认证头（Authentication header）时，对于任何在传输途中可能会变化的选项，其整个选项数据字段在计算或验证数据包的认证值时必须视为全零字节。

0 - 选项数据在传输途中不发生变化

1 - 选项数据在传输途中可能会发生变化

上述描述的三个高阶位应作为选项类型（Option Type）的一部分进行处理，而不能与选项类型分开。也就是说，某个特定的选项由完整的8位选项类型值（Option Type）唯一标识，而不仅仅是低5位。

相同的选项类型编号空间同时用于跳数（Hop-by-Hop）选项头和目的地选项（Destination Options）头。然而，某个特定选项的规范可能限制其仅用于这两者中的某一个。

单个选项可能具有特定的对齐要求，以确保选项数据字段中的多字节值位于自然边界上。选项的对齐要求用符号 xn+y 表示，意味着该选项类型必须出现在距离头部起始位置的整数倍 x 字节加 y 字节的位置。例如：

- 2n 表示在头部起始位置的任何 2 字节偏移处。
- 8n+2 表示在头部起始位置的任何 8 字节偏移处，再加上 2 字节。

当需要对齐后续选项或将包含的头部填充到8字节的倍数时，有两种填充选项必须被所有IPv6实现识别：

Pad1 选项（对齐要求：无）

```
+-+-+-+-+-+-+-+-+
|       0       |
+-+-+-+-+-+-+-+-+
```

注意！Pad1 选项的格式是特殊的——它没有长度和数值字段。

Pad1 选项用于在头部的选项区域插入一个字节的填充。如果需要多于一个字节的填充，应使用接下来的PadN选项，而不是多个Pad1选项。

PadN 选项（对齐要求：无）

补充说明：以下是对您提供的英文内容的中文翻译。

```
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -
      |       1       |  选项数据长度 |  选项数据
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -

      PadN 选项用于在头部的选项区域插入两个或更多字节的填充。对于 N 字节的填充，Opt Data Len 字段的值为 N-2，选项数据由 N-2 个值为零的字节组成。

   附录 B 包含设计新选项的格式指南。

4.3 逐跳选项头部

   逐跳选项头部用于携带每个沿途节点都必须检查的可选信息。该头部由 IPv6 头中的 Next Header 值为 0 来标识，格式如下：

    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |  Next Header  |  Hdr Ext Len  |                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
    |                                                               |
    .                                                               .
    .                            选项                                .
    .                                                               .
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Next Header          8 位选择器。标识紧随逐跳选项头部之后的头部类型。使用与 IPv4 协议字段相同的值 [RFC-1700 等]。

   Hdr Ext Len          8 位无符号整数。表示逐跳选项头部的长度（以 8 字节为单位），不包括前面这 8 个字节。

   选项               可变长度字段，其长度使得整个逐跳选项头部的长度为 8 字节的整数倍。包含一个或多个 TLV 编码的选项，详见第 4.2 节。

   本文档中定义的唯一逐跳选项是第 4.2 节中规定的 Pad1 和 PadN 选项。

Deering & Hinden            标准追踪                     [第 11 页]

RFC 2460                   IPv6 规范                1998 年 12 月

4.4 路由头部

   路由头由 IPv6 源节点使用，用于列出一条或多条中间节点，沿途必须“访问”这些节点，直到到达目的地。这一功能与 IPv4 的松散源路由和记录路由选项非常相似。路由头由前一头部中的 Next Header 值为 43 来标识，格式如下：
```

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  下一跳头部  |  头部扩展长度  |  路由类型  |  剩余段数  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
.                                                               .
.                       类型特定数据                              .
.                                                               .
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

下一跳头部（Next Header）  8位选择器，用于标识紧随路由头之后的头部类型。其值与IPv4协议字段中的值相同[RFC-1700及其后续版本]。

头部扩展长度（Hdr Ext Len）  8位无符号整数，表示路由头的长度，以8字节为单位，不包括前面第一个8字节。

路由类型（Routing Type）  8位标识符，用于指示特定的路由头变体。

剩余段数（Segments Left）  8位无符号整数，表示剩余的路由段数，即在到达最终目的地之前，仍需经过的中间节点的数量。

类型特定数据（type-specific data）  可变长度字段，其格式由路由类型决定，长度确保整个路由头的长度是8字节的整数倍。

当接收节点在处理数据包时，如果遇到具有未识别路由类型值的路由头，节点的应有行为取决于剩余段数（Segments Left）字段的值，具体如下：

- 如果剩余段数为零，节点必须忽略该路由头，继续处理数据包中的下一个头部，其类型由路由头中的下一跳头部字段（Next Header）标识。

- 如果剩余段数非零，节点必须丢弃该数据包，并向数据包的源地址发送一条ICMP参数问题（Parameter Problem）消息，代码为0，指向未识别的路由类型。

此外，如果在处理接收数据包中的路由头后，中间节点判断该数据包应转发到的链路的最大传输单元（MTU）小于数据包的大小，则必须丢弃该数据包，并向源地址发送一条ICMP数据包过大（Packet Too Big）消息。

类型0路由头的格式如下：

```
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  下一头部  |  头部扩展长度  | 路由类型=0 | 剩余段数 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            保留字段                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                                                               +
   |                                                               |
   +                          地址[1]                              +
   |                                                               |
   +                                                               +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                                                               +
   |                                                               |
   +                          地址[2]                              +
   |                                                               |
   +                                                               +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                               .                               .
   .                               .                               .
   .                               .                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                                                               +
   |                                                               |
   +                          地址[n]                              +
   |                                                               |
   +                                                               +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
```

下一头部（Next Header）是一个8位选择器，用于标识紧随路由头之后的头部类型。其值与IPv4协议字段中的值相同[RFC-1700及后续]。

头部扩展长度（Hdr Ext Len）是一个8位无符号整数，表示路由头的长度（以8字节为单位），不包括最开始的8个字节。对于类型0的路由头，Hdr Ext Len的值等于地址数乘以2。

路由类型（Routing Type）为0。

Deering 和 Hinden            标准轨道                    [第14页]


RFC 2460                   IPv6 规范              1998年12月


Segments Left（剩余段数）        8位无符号整数。表示剩余的路由段数，即在到达最终目的地之前，仍需访问的明确列出的中间节点的数量。

Reserved（保留字段）             32位保留字段。用于传输时初始化为零；在接收时忽略。

Address[1..n]（地址数组）        由128位地址组成的向量，编号从1到n。

多播地址不得出现在类型0的路由头中，或在携带类型0路由头的数据包的IPv6目的地址字段中。

在到达IPv6头中的目的地址字段所标识的节点之前，不会检查或处理路由头。在该节点中，通过对前一个头部的Next Header字段进行调度，触发路由头模块的调用，对于路由类型0，执行以下算法：

如果Segments Left（剩余段数）为0：
    继续处理包中的下一个头部，其类型由路由头中的Next Header字段标识。
否则，如果Hdr Ext Len（头部扩展长度）为奇数：
    向源地址发送一个ICMP参数问题（Parameter Problem）消息，代码为0，指向Hdr Ext Len字段，并丢弃该数据包。
否则：
    通过将Hdr Ext Len除以2，计算出地址的数量n。

    如果Segments Left大于n：
        向源地址发送一个ICMP参数问题（Parameter Problem）消息，代码为0，指向Segments Left字段，并丢弃该数据包。
    否则：
        将Segments Left减1；
        计算i，即下一个要访问的地址在地址向量中的索引，通过用n减去Segments Left得到。

        如果Address[i]或IPv6目的地址是多播地址：
            丢弃该数据包。
        否则：
            交换IPv6目的地址和Address[i]。

            如果IPv6跳数限制（Hop Limit）小于或等于1：
                向源地址发送一个ICMP时间超过（Time Exceeded）——跳数限制超出（Hop Limit Exceeded in Transit）消息，并丢弃该数据包。
            否则：
                将跳数限制减1；
                将数据包重新提交给IPv6模块，进行传输到新的目的地址。

以下是上述英文内容的中文翻译：

```
作为上述算法效果的一个示例，考虑一个源节点S向目标节点D发送一个数据包，使用路由头（Routing header）使数据包经过中间节点I1、I2和I3进行路由。每个传输路径段上相关的IPv6头部和路由头字段的值如下：

当数据包从S传输到I1时：

    源地址 = S                  头部扩展长度 = 6
    目的地址 = I1                段数剩余 = 3
                                    地址[1] = I2
                                    地址[2] = I3
                                    地址[3] = D

当数据包从I1传输到I2时：

    源地址 = S                  头部扩展长度 = 6
    目的地址 = I2                段数剩余 = 2
                                    地址[1] = I1
                                    地址[2] = I3
                                    地址[3] = D

当数据包从I2传输到I3时：

    源地址 = S                  头部扩展长度 = 6
    目的地址 = I3                段数剩余 = 1
                                    地址[1] = I1
                                    地址[2] = I2
                                    地址[3] = D

当数据包从I3传输到D时：

    源地址 = S                  头部扩展长度 = 6
    目的地址 = D                 段数剩余 = 0
                                    地址[1] = I1
                                    地址[2] = I2
                                    地址[3] = I3



Deering 和 Hinden            标准追踪                     [第17页]


RFC 2460                   IPv6 规范              1998年12月


4.5  分段头部

   分段头部由IPv6源节点使用，用于发送比路径MTU更大的数据包到目的地。（注意：与IPv4不同，IPv6中的分段仅由源节点执行，而不是由沿途的路由器执行——详见第5节。）分段头部由紧接在前一头部的Next Header字段值为44标识，其格式如下：

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Next Header  |   Reserved    |      Fragment Offset    |Res|M|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         Identification                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

Next Header          8位选择器。标识原始数据包中可分段部分的初始头部类型（如下定义）。使用与IPv4协议字段相同的值 [RFC-1700及后续]。
```

保留字段             8位保留字段。用于传输时初始化为零；在接收时忽略。

片偏移             13位无符号整数。表示紧随此头部之后的数据相对于原始分段部分起始位置的偏移量，以8个八位字节（octet）为单位。

保留字段           2位保留字段。用于传输时初始化为零；在接收时忽略。

更多片段标志（M标志）   1 = 还有更多片段；0 = 最后一个片段。

标识符             32位。详见下文描述。

为了发送一个过大而无法适应路径MTU的包，源节点可以将该包分割成多个片段，并作为单独的包逐个发送，接收端会将其重新组装。

对于每个需要分段的包，源节点会生成一个标识符（Identification）值。该值必须与最近发送的任何具有相同源地址和目标地址的分段包的标识符不同*。如果存在路由头，关心的目标地址是最终目的地的地址。

*“最近”指的是在包的最大可能存活时间内，包括从源到目的地的传输时间以及等待与同一包其他片段重新组装的时间。然而，源节点不需要知道最大包存活时间。相反，假设可以通过维护一个简单的32位“循环”计数器来满足此要求，每次需要分段时递增该计数器。是否为节点维护单一计数器或多个计数器（例如，为每个可能的源地址维护一个，或为每个活动的（源地址，目标地址）组合维护一个）是实现上的选择。

最初的、未分段的大包称为“原始包”，它被认为由两部分组成，如下图所示：

原始包：

+------------------+----------------------//-----------------------+
|  不可分段部分     |                 可分段部分                     |
|       部分        |                     部分                        |
+------------------+----------------------//-----------------------+

不可分段部分包括IPv6头部以及在到达目的地途中必须由节点处理的任何扩展头部，即包括路由头（如果存在）之前的所有头部，若没有路由头，则包括跳跃跳选项头（Hop-by-Hop Options）头，若也没有，则没有扩展头部。

碎片部分由数据包的其余部分组成，即只由最终目的节点（或节点们）需要处理的扩展头部，以及上层协议的头部和数据。

原始数据包的可碎片部分被划分为多个碎片，除了可能的最后一个（“最右边的”）碎片外，每个碎片的长度都是8个八位字节（octets）的整数倍。碎片以单独的“碎片包”形式传输，如下图所示：

原始数据包：

+------------------+--------------+--------------+--//--+----------+
|  不可碎片化部分   |    第一个碎片 |   第二个碎片 | ...... | 最后一个碎片 |
|       部分        |   碎片       |   碎片       |        |   碎片     |
+------------------+--------------+--------------+--//--+----------+

Deering 和 Hinden 规范（RFC 2460）第19页

RFC 2460 IPv6 规范（1998年12月）

碎片包示意图：

+------------------+--------+--------------+
|  不可碎片化部分   |碎片头部|    第一个碎片  |
|       部分        |        |   碎片        |
+------------------+--------+--------------+

+------------------+--------+--------------+
|  不可碎片化部分   |碎片头部|   第二个碎片   |
|       部分        |        |   碎片        |
+------------------+--------+--------------+
                     o
                     o
                     o
+------------------+--------+----------+
|  不可碎片化部分   |碎片头部|   最后一个碎片 |
|       部分        |        |   碎片        |
+------------------+--------+----------+

每个碎片包由以下部分组成：

1. 原始数据包的不可碎片化部分，其IPv6载荷长度（Payload Length）字段被修改为仅包含此碎片包的长度（不包括IPv6头部的长度），且该部分最后一个头部的Next Header字段被设置为44（代表Fragment头部）。

2. 一个碎片头部，包含：

   - Next Header字段，指示原始包中可碎片化部分的第一个头部类型。

   - Fragment Offset（碎片偏移量），表示该碎片相对于原始包中可碎片化部分起始位置的偏移，以8个八位字节为单位。第一个（“最左边的”）碎片的偏移量为0。

   - M标志（More Fragments），如果该碎片是最后一个（“最右边的”）碎片，则值为0，否则为1。

   - 由原始包生成的识别码（Identification值）。

3. 碎片本身。

碎片的长度必须被合理选择，以确保所有碎片包的大小都不超过到达目的地路径的最大传输单元（MTU）。

在目的地，分段的数据包会被重新组装成其原始的、未分段的形式，示意如下：

重新组装的原始数据包：

+------------------+----------------------//------------------------+
|  不可分段部分     |                 可分段部分                        |
|       部分        |                     部分                          |
+------------------+----------------------//------------------------+

以下规则用于指导重组过程：

1. 只有当分段数据包具有相同的源地址、目标地址和分段识别号时，才能将它们重新组装成原始数据包。

2. 重新组装后数据包的不可分段部分由所有头部组成，直到第一个分段数据包的分段头（即分段偏移为零的包）之前的部分，但有以下两个变化：
   
   - 不可分段部分最后一个头部的“下一个头部”字段（Next Header）是从第一个分段的分段头中的“下一个头部”字段获取的。
   
   - 重新组装后数据包的有效载荷长度（Payload Length）由不可分段部分的长度、最后一个分段的长度和偏移量计算得出。计算公式如下：
   
     PL.orig = PL.first - FL.first - 8 + (8 * FO.last) + FL.last
     
     其中：
     - PL.orig = 重新组装后数据包的有效载荷长度字段
     - PL.first = 第一个分段包的有效载荷长度
     - FL.first = 第一个分段包中分段头之后的长度
     - FO.last = 最后一个分段包的分段偏移（Fragment Offset）
     - FL.last = 最后一个分段包中分段头之后的长度

3. 重新组装后数据包的可分段部分由每个分段包中分段头之后的内容组成。每个分段的长度通过从包的有效载荷长度中减去位于IPv6头部和分段头之间的所有头部长度计算得出；其在可分段部分中的相对位置由其分段偏移值决定。

4. 最终的重组数据包中不包含分段头。

在重组分段数据包时，可能会出现以下错误情况：

如果在接收第一个到达的片段后60秒内未能收到足够的片段以完成该数据包的重组，则必须放弃该数据包的重组，并丢弃所有已接收的该数据包的片段。如果已接收到第一个片段（即偏移量为零的片段），则应向该片段的源发送一个 ICMP 时间超时——片段重组时间超时的消息。

如果从片段包的载荷长度字段得出的片段长度不是8个字节的倍数，并且该片段的 M 标志为1，则必须丢弃该片段，并向该片段的源发送一个 ICMP 参数问题（代码0）消息，指向片段包的载荷长度字段。

如果一个片段的长度和偏移量导致由该片段重组的整个数据包的载荷长度超过65,535字节，则必须丢弃该片段，并向该片段的源发送一个 ICMP 参数问题（代码0）消息，指向片段包的偏移量字段。

以下情况不应预期发生，但如果发生，也不视为错误：

- 不同片段的片段头之前的头部数量和内容可能不同。无论每个片段包中在片段头之前存在何种头部，都会在包到达时进行处理，然后将片段排队进行重组。只有偏移量为零的片段包中的头部会在重组后的包中保留。

- 不同片段的片段头中的“下一头部”值可能不同。只有偏移量为零的片段包中的值会用于重组。

---

Deering 和 Hinden 规范文件
标准追踪
[第22页]

RFC 2460
IPv6 规范
1998年12月

4.6 目的地选项头

目的地选项头用于携带仅需由数据包的目的节点（或节点们）检查的可选信息。目的地选项头由前导头中的“下一头部”字段值为60标识，其格式如下：

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  下一头部  |  头部扩展长度  |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
|                                                               |
.                                                               .
.                            选项                                .
.                                                               .
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

下一头部（Next Header） 8 位选择器，用于标识紧随目的地选项头之后的头部类型。其值与 IPv4 协议字段 [RFC-1700 等] 中的值相同。

头部扩展长度（Hdr Ext Len） 8 位无符号整数，表示目的地选项头的长度（以 8 字节为单位），不包括前面这 8 个字节。

选项（Options） 为可变长度字段，其长度确保整个目的地选项头的长度是 8 字节的整数倍。包含一个或多个 TLV 编码的选项，详见第 4.2 节。

本文档中定义的唯一目的地选项是第 4.2 节中规定的 Pad1 和 PadN 选项。

注意，在 IPv6 数据包中编码可选的目的地信息有两种方式：一种是在目的地选项头中作为选项，另一种是作为单独的扩展头。片段（Fragment）头和认证（Authentication）头就是后一种方式的例子。采用哪种方式取决于目标节点是否理解这些可选信息以及希望采取的行动：

- 如果希望目标节点丢弃该数据包，并且（仅当数据包的目的地址不是多播地址时）向源地址发送一个 ICMP 未识别类型消息，则可以将信息编码为单独的头部，或作为目的地选项头中的一个选项，其选项类型（Option Type）在最高位的两个比特中值为 11。选择哪种方式可能取决于占用的字节数、对齐方式或解析效率等因素。

- 如果希望采取其他任何行动，则必须将信息编码为目的地选项头中的一个选项，其选项类型在最高位的两个比特中值为 00、01 或 10，以指示所需的操作（详见第 4.2 节）。

4.7 无后续头部

在IPv6头部或任何扩展头部的“下一头部”字段中，值为59表示该头部之后没有任何内容。如果IPv6头部的“有效载荷长度”字段指示存在超出“下一头部”字段值为59的头部末端的字节，则这些字节必须被忽略，并在转发该数据包时保持不变。

5. 数据包大小问题

IPv6要求互联网中的每个链路的最大传输单元（MTU）至少为1280个八位字节。在任何不能一次性传输1280字节数据包的链路上，必须在IPv6之下的层提供链路特定的分段和重组。

具有可配置MTU的链路（例如，PPP链路[RFC-1661]）必须配置为至少1280个八位字节的MTU；建议将其配置为1500个八位字节或更大，以适应可能的封装（即隧道）而不引起IPv6层的分段。

每个节点直接连接的链路，节点必须能够接受与该链路MTU一样大的数据包。

强烈建议IPv6节点实现路径MTU发现[RFC-1981]，以便发现并利用大于1280个八位字节的路径MTU。然而，最小的IPv6实现（例如在引导ROM中）可以仅限制自己发送不超过1280个八位字节的数据包，并省略路径MTU发现的实现。

为了发送超过路径MTU大小的数据包，节点可以使用IPv6分段头在源端对数据包进行分段，并在目的端重新组装。然而，在任何能够调整其数据包以适应测量路径MTU（即，缩小到1280个八位字节）的应用中，建议不要使用这种分段。

节点必须能够接受经过分段后重新组装为最大1500个八位字节的数据包。节点也允许接受重新组装后超过1500个八位字节的分段包。依赖IPv6分段以发送大于路径MTU的数据包的上层协议或应用程序，除非确保目的地能够重新组装更大尺寸的数据包，否则不应发送超过1500个八位字节的数据包。

针对发送到IPv4目的地的IPv6数据包（即经过IPv6到IPv4转换的数据包），源IPv6节点可能会收到一条ICMP“Packet Too Big”消息，报告下一跳的MTU小于1280。在这种情况下，IPv6节点不需要将后续数据包的大小减小到小于1280，但必须在这些数据包中包含一个Fragment头，以便IPv6到IPv4的转换路由器可以获取一个合适的标识符（Identification）值，用于生成IPv4碎片。请注意，这意味着有效载荷可能需要减小到1232个八位字节（1280减去IPv6头的40个八位字节和Fragment头的8个八位字节），如果使用了额外的扩展头，则还需更小。

6. 流标签

IPv6头中的20位流标签（Flow Label）字段可以由源节点用来标记一系列数据包，以请求IPv6路由器对其进行特殊处理，例如非默认的服务质量（QoS）或“实时”服务。在撰写本文时，IPv6的这一特性仍处于试验阶段，随着互联网对流支持需求的逐步明确，可能会发生变化。不支持流标签功能的主机或路由器在发起数据包时应将该字段设置为零，在转发数据包时应保持不变，在接收数据包时应忽略该字段。

附录A描述了流标签字段当前的预期语义和用法。

7. 流量类别

IPv6头中的8位流量类别（Traffic Class）字段可由源节点和/或转发路由器用来识别和区分不同类别或优先级的IPv6数据包。在撰写本文时，已有多项试验在使用IPv4的服务类型（Type of Service）和/或优先级（Precedence）位，以提供除显式流设置之外的各种“差异化服务”。IPv6的流量类别字段旨在支持类似的功能。

希望这些试验最终能达成一致，确定哪些类型的流量分类对IP数据包最为有用。所有或部分IPv6流量类别位的语法和语义的详细定义（无论是试验性还是未来标准化的）将由单独的文档提供。

以下是对流量类别字段的一般要求：

- 节点内的IPv6服务接口必须提供一种机制，允许上层协议为由该上层协议发起的包中的流量类别（Traffic Class）位提供值。默认情况下，这8个位的值必须全部为零。

- 支持某些或全部流量类别位的特定（实验性或最终标准）用途的节点，可以根据该特定用途的需要，改变它们在发出、转发或接收的包中的值。对于不支持特定用途的流量类别位，节点应忽略并保持其不变。

- 上层协议不得假设接收包中的流量类别位的值与源端发出的值相同。

---

Deering 和 Hinden 规范追踪 [第26页]

RFC 2460 规范：IPv6 规范 1998年12月

8. 上层协议问题

8.1 上层协议校验和

任何包含IP头地址的传输层或其他上层协议在进行校验和计算时，必须为IPv6进行修改，使用128位的IPv6地址代替32位的IPv4地址。特别是，以下示意图显示了IPv6的TCP和UDP“伪头”结构：

```
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                                                               |
+                         源地址                                    +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                                                               |
+                     目标地址                                    +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                   上层数据包长度                                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      零值                     |  下一头部类型  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
```

如果IPv6数据包包含路由头，则伪头中使用的目标地址为最终目的地的地址。在源节点，该地址将位于路由头的最后一个元素中；在接收节点，目标地址将位于IPv6头的目标地址字段中。

伪头中的“下一头部”值（Next Header）标识上层协议（例如，6代表TCP，17代表UDP）。如果在IPv6头和上层协议头之间存在扩展头，则该值会与IPv6头中的“下一头部”值不同。

伪头中的“上层数据包长度”指的是上层协议头和数据的长度（例如，TCP头加TCP数据）。一些上层协议携带自己的长度信息（如UDP头中的长度字段）；对于这些协议，该长度即为伪头中使用的长度。其他协议（如TCP）不携带自己的长度信息，此时伪头中使用的长度为IPv6头中的有效载荷长度（Payload Length），减去IPv6头与上层协议头之间存在的任何扩展头的长度。

与IPv4不同，当IPv6节点发起UDP包时，UDP的校验和不是可选的。也就是说，每当发起UDP包时，IPv6节点必须对包和伪头进行UDP校验和的计算，如果计算结果为零，则必须将其改为十六进制的FFFF，以放入UDP头中。IPv6的接收端必须丢弃校验和为零的UDP包，并应记录该错误。

IPv6版本的ICMP（[ICMPv6]）在其校验和计算中包含上述伪头；这与IPv4版本的ICMP不同，后者的校验和不包括伪头。之所以做出此更改，是为了保护ICMP免受IPv6头部字段的误传或损坏，这些字段不像IPv4那样受到互联网层校验和的保护。ICMP的伪头中的“下一头部”字段值为58，标识IPv6版本的ICMP。

8.2 最大数据包生存时间

与IPv4不同，IPv6节点不要求强制限制最大数据包存活时间。这也是IPv4中的“生存时间（Time to Live）”字段在IPv6中被重命名为“跳数限制（Hop Limit）”的原因。在实际应用中，几乎没有IPv4实现遵守限制数据包存活时间的要求，因此这并不意味着实践中的变化。任何依赖互联网层（无论是IPv4还是IPv6）来限制数据包存活时间的上层协议，都应升级其机制，以自行检测和丢弃过时的数据包。

8.3 最大上层负载大小

在计算可用于上层数据的最大负载大小时，上层协议必须考虑IPv6头部相较于IPv4头部的更大尺寸。例如，在IPv4中，TCP的最大报文段（MSS）选项是通过最大数据包大小（默认值或通过路径MTU发现得出的值）减去40个字节（20个字节的最小IPv4头部和20个字节的最小TCP头部）来计算的。而在IPv6上使用TCP时，MSS必须是最大数据包大小减去60个字节，因为IPv6的最小头部（即没有扩展头部的IPv6头部）比最小IPv4头部多20个字节。

8.4 对携带路由头的包的响应

当上层协议对收到的包含路由头的包作出响应时，响应包不得包含由“反转”收到的路由头自动派生的路由头，除非已验证收到的源地址和路由头的完整性和真实性（例如，通过在收到的包中使用认证头进行验证）。换句话说，只有以下几种情况的响应包才允许包含路由头：

- 不携带路由头的响应包。

- 携带的路由头不是通过反转收到的包中的路由头派生的（例如，由本地配置提供的路由头）。

- 携带的路由头是通过反转收到的包中的路由头派生的，且只有在响应者已验证收到包中的源地址和路由头的完整性和真实性的情况下。

附录A. 流标签字段的语义与用法

一个流（flow）是指从特定源到特定（单播或多播）目的地的一系列数据包，源希望中间路由器对这些数据包进行特殊处理。这种特殊处理的方式可能通过控制协议（如资源预留协议）传达给路由器，或者通过流中数据包本身携带的信息（例如逐跳选项）实现。关于此类控制协议或选项的详细内容超出了本文档的范围。

从一个源到一个目的地可能存在多个活跃的流，以及一些不属于任何流的流量。流通过源地址和非零的流标签（flow label）这两个元素的组合唯一标识。那些不属于任何流的数据包，其流标签为零。

流标签由流的源节点分配。新的流标签必须从1到FFFFF（十六进制）范围内以伪随机且均匀的方式选择。随机分配的目的是使流标签字段中的任何一组比特都适合作为路由器用来查找与该流相关状态的哈希键。

属于同一流的所有数据包必须使用相同的源地址、目的地址和流标签。如果其中任何一个数据包包含逐跳选项（Hop-by-Hop Options）头部，那么它们都必须以相同的逐跳选项内容（不包括逐跳选项头部中的“下一头部”字段）发出。如果任何数据包包含路由（Routing）头部，那么它们都必须以相同的所有扩展头部内容（包括路由头部，排除路由头中的“下一头部”字段）发出。路由器或目的地可以选择验证这些条件是否得到满足，但不是强制的。如果检测到违反，应通过ICMP参数问题（Parameter Problem）消息（代码0）向源报告，指向流标签字段的高阶八位字节（即IPv6包中的偏移量1）。

沿着流路径建立的任何流处理状态的最大存活时间，必须作为状态建立机制（如资源预留协议或流设置逐跳选项）描述的一部分加以规定。源节点不得在任何已建立的流处理状态的最大存活时间内，为新流重新使用相同的流标签，以避免冲突。

当一个节点停止并重新启动（例如由于“崩溃”）时，它必须小心不要使用可能已在之前的流中使用过的流标签，尤其是在该流的生命周期尚未结束的情况下。这可以通过在稳定存储中记录流标签的使用情况来实现，以便在崩溃后仍能记住，或者在任何可能已建立的流的最大生命周期到期之前，避免使用任何流标签。如果已知节点重启的最短时间，可以从开始分配流标签之前所需的等待时间中减去这个时间。

并没有要求所有的包，甚至大多数包，都必须属于某个流，即携带非零的流标签。这里提出这一点，是为了提醒协议设计者和实现者不要假设情况恰恰相反。例如，设计一个性能仅在大多数包属于流时才足够好的路由器，或者设计只在属于流的包上有效的头部压缩方案，都是不明智的。

附录B. 选项格式指南

本附录提供一些关于在设计用于跳数跳选项头（Hop-by-Hop Options）或目的地选项头（Destination Options）中的新选项时，如何布局字段的建议，这些内容在第4.2节中有描述。这些指南基于以下假设：

- 一个理想的特性是，选项数据区内的多字节字段应按其自然边界对齐，即宽度为n字节的字段应放置在距离跳数跳或目的地选项头起始位置的整数倍n字节处，n可以是1、2、4或8。

- 另一个理想的特性是，跳数跳或目的地选项头应尽可能占用最少的空间，但前提是该头部的长度必须是8字节的整数倍。

- 可以假设，当存在携带选项的头部时，它们通常只携带少量的选项，通常只有一个。

这些假设建议采用以下字段布局方法：将字段按从小到大的顺序排列，中间不留填充，然后根据最大字段（最多8字节对齐）的对齐要求，推导出整个选项的对齐需求。以下示例说明了这一方法：

示例1

如果一个选项X需要两个数据字段，一个长度为8字节，另一个长度为4字节，则其布局如下：

以下是英文内容的中文翻译：

```
                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                   | 选项类型=X | 选项数据长度=12 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         4字节字段                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                         8字节字段                            +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+







Deering 和 Hinden            标准追踪                     [第32页]


RFC 2460                   IPv6 规范                     1998年12月


   它的对齐要求是8n+2，以确保8字节字段
   从封装头的起始位置起，偏移量为8的倍数+2。包含此选项的完整跳数或目的地选项头
   看起来如下：

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  下一头部 | 头部扩展长度=1 | 选项类型=X | 选项数据长度=12 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         4字节字段                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                         8字节字段                            +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   示例2

   如果一个选项Y需要三个数据字段，一个长度为4字节，一个长度为2字节，一个长度为1字节，它的布局如下：

                                                   +-+-+-+-+-+-+-+-+
                                                   | 选项类型=Y   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | 选项数据长度=7 | 1字节字段 |         2字节字段             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         4字节字段                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   它的对齐要求是4n+3，以确保4字节字段
   从封装头的起始位置起，偏移量为4的倍数+3。包含此选项的完整跳数或目的地选项头
   看起来如下：
```

以下是该英文内容的中文翻译：

```
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  下一头部  |  头部扩展长度=1  | 填充1选项=0 | 选项类型=Y |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  选项数据长度=7  | 1字节字段 |        2字节字段        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         4字节字段                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | 填充N选项=1 | 选项数据长度=2 |       0       |       0       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+








Deering 和 Hinden            标准轨迹                    [第33页]


RFC 2460                   IPv6 规范              1998年12月


   示例3

   一个包含示例1和示例2中的选项X和Y的跳点或目的地选项头部，其格式将根据哪个选项先出现而为以下两种之一：

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  下一头部  |  头部扩展长度=3  | 选项类型=X |  选项数据长度=12 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         4字节字段                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                         8字节字段                         +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | 填充N选项=1 | 选项数据长度=1 |       0       |  选项类型=Y |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  选项数据长度=7  | 1字节字段 |        2字节字段        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         4字节字段                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | 填充N选项=1 | 选项数据长度=2 |       0       |       0       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
```

以下是英文内容的中文翻译：

```
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  下一头部  | 头部扩展长度=3 | 填充1选项=0 | 选项类型=Y |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  选项数据长度=7  | 1字节字段 |        2字节字段        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         4字节字段                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | 填充N选项=1 | 选项数据长度=4 |     0     |     0     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       0       |       0       | 选项类型=X | 选项数据长度=12 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         4字节字段                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                           |
   +                     8字节字段                              +
   |                                                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+









Deering & Hinden            标准轨迹                    [第34页]


RFC 2460                   IPv6 规范              1998年12月


安全注意事项

   IPv6的安全特性在《互联网协议安全架构》 [RFC-2401] 中有所描述。

致谢

   作者衷心感谢IPng工作组、端到端协议研究组以及广大互联网社区成员的许多宝贵建议。

作者联系方式

   斯蒂芬·E·迪林（Stephen E. Deering）
   思科系统公司（Cisco Systems, Inc.）
   170 West Tasman Drive
   圣何塞，加利福尼亚州 95134-1706
   美国

   电话：+1 408 527 8213
   传真：+1 408 527 8254
   电子邮箱：deering@cisco.com


   罗伯特·M·欣登（Robert M. Hinden）
   诺基亚（Nokia）
   232 Java Drive
   桑尼维尔，加利福尼亚州 94089
   美国

   电话：+1 408 990-2004
   传真：+1 408 743-5677
   电子邮箱：hinden@iprg.nokia.com

参考文献

   [RFC-2401]   Kent, S. 和 R. Atkinson，“互联网协议的安全架构”，RFC 2401，1998年11月。

   [RFC-2402]   Kent, S. 和 R. Atkinson，“IP认证头”，RFC 2402，1998年11月。

   [RFC-2406]   Kent, S. 和 R. Atkinson，“IP封装安全协议（ESP）”，RFC 2406，1998年11月。

   [ICMPv6]     Conta, A. 和 S. Deering，“互联网协议第6版（IPv6）的ICMP”，RFC 2463，1998年12月。




Deering & Hinden            标准轨迹                    [第35页]


RFC 2460                   IPv6 规范              1998年12月


   [ADDRARCH]   Hinden, R. 和 S. Deering，“IPv6地址架构”，RFC 2373，1998年7月。

   [RFC-1981]   McCann, J.，Mogul, J. 和 S. Deering，“IPv6路径MTU发现”，RFC 1981，1996年8月。
```

以下是英文内容的中文翻译：

```
   [RFC-791]    Postel, J.，"互联网协议"，STD 5，RFC 791，
                1981年9月。

   [RFC-1700]   Reynolds, J. 和 J. Postel，"已分配编号"，STD 2，
                RFC 1700，1994年10月。另请参见：
                http://www.iana.org/numbers.html

   [RFC-1661]   Simpson, W.，"点对点协议（PPP）"，STD 51，RFC 1661，
                1994年7月。

自RFC-1883以来的更改

   本备忘录相较于RFC-1883进行了以下更改。编号对应进行更改的互联网草案版本。

    02) 移除了所有关于jumbo数据包和Jumbo Payload选项的引用（已移至单独的文档）。

    02) 将大部分流标签（Flow Label）的描述从第6节移至（新）附录A。

    02) 在附录A中的流标签描述中，将最大流标签值由FFFFF F（即六个“F”）修正为FFFFF（即五个“F”），这是因为流标签字段的大小从24位减小到20位。

    02) 将之前的附录A重新编号（或重新标记？）为附录B。

    02) 修改了安全考虑部分的措辞，以避免本规范与IPsec规范之间的依赖循环。

    02) 更新了R. Hinden的电子邮箱地址和公司隶属关系。

        --------------------------------------------------------

    01) 在第3节中，将字段名“Class”改为“Traffic Class”，并将其大小由4位增加到8位。为补偿Traffic Class字段的增加，将流标签字段的大小由24位减小到20位。

    01) 在第4.1节中，恢复了认证头（Authentication Header）和ESP头的顺序，之前在本备忘录的第00版中这两个头被错误地交换了。

    01) 在第4.4节中，删除了Type 0路由头中的严格/宽松（Strict/Loose）位图字段及严格路由功能，并取消了对Type 0路由头中可携带地址数量的限制（原限制为23个地址，原因是严格/宽松位图的大小限制）。

    01) 在第5节中，将IPv6的最小MTU值由576字节提高到1280字节，并建议具有可配置MTU的链路（如PPP链路）应配置为至少1500字节的MTU。

    01) 在第5节中，删除了节点不得在不知道目标重组缓冲区大小的情况下，发送重组后超过1500字节的分段包的要求，取而代之的是建议上层协议或应用程序不要这样做。
```

1) 用IPv6路径MTU发现规范（RFC 1981）取代了对IPv4路径MTU发现规范（RFC 1191）的引用，并删除了第5节末关于路径MTU发现的注释，因为这些细节现在已由RFC 1981涵盖。

2) 在第6节中，删除了“机会性”流设置的规范，并移除了所有关于机会性建立的流状态最大寿命为6秒的引用。

3) 在第7节中，删除了关于流量类别字段内部结构和语义的临时描述，并规定此类描述应在单独的文档中提供。

--------------------------------------------------------

4) 在第4节中，将代码值更正为表示“遇到未识别的下一头类型”在ICMP参数问题消息中的值（由2改为1）。

5) 在第3节中关于载荷长度字段的描述，以及第4.3节中关于巨型载荷长度字段的描述中，明确指出扩展头也包含在载荷长度的计数中。

Deering & Hinden  规范标准  [第37页]

RFC 2460  IPv6规范  1998年12月

6) 在第4.1节中，交换了认证头和ESP头的顺序。（注意：这是一个错误，已在第01版中撤销了此更改。）

7) 在第4.2节中，明确指出选项由完整的8位Option Type标识，而不是由Option Type的低5位标识。同时，规定用于跳数跳选项和目的地选项头的Option Type编号空间是相同的。

8) 在第4.4节中，添加了一句话，要求处理路由头的节点在遇到无法在下一跳链路中容纳的过大包时，必须发送ICMP“包太大”消息作为响应（而不是进行分片）。

9) 将IPv6优先级字段的名称改为“类别（Class）”，并用类别字段的描述取代了第7节中关于优先级的原有描述。同时，将此字段排除在第6节规定的所有包在同一流中必须保持一致的字段之外。

10) 在第8.1节的伪头中，将“载荷长度”字段的名称改为“上层数据包长度（Upper-Layer Packet Length）”。同时，澄清对于携带自身长度信息的协议（如非巨型UDP），伪头中使用的是由上层派生的长度，而非由IP层派生的长度。

添加了第8.4节，规定当上层协议响应携带路由头的接收包时，除非接收的路由头已被认证，否则不得在响应包中包含路由头的反向信息。

修正了一些拼写和语法错误。

更新了作者的联系信息。

--------------------------------------------------------

Deering 和 Hinden            标准轨迹                    [第38页]

RFC 2460                   IPv6 规范              1998年12月

完整版权声明

版权所有 (C) 互联网协会（1998年）。保留所有权利。

本文件及其翻译版本可以被复制并提供给他人，也可以准备、复制、出版和分发其评论、解释或协助实现的衍生作品，全部或部分，且不受任何限制，前提是所有此类副本和衍生作品都必须包含上述版权声明和本段内容。然而，严禁以任何方式修改本文档本身，例如删除版权声明或提及互联网协会或其他互联网组织的内容，除非是为了制定互联网标准的需要，在此情况下必须遵循互联网标准流程中定义的版权程序，或为了将其翻译成非英语语言。

上述有限的许可是永久性的，不会被互联网协会或其继任者或受让人撤销。

本文件及其中包含的信息是“按原样”提供的，互联网协会和互联网工程任务组（IETF）对其不作任何明示或暗示的保证，包括但不限于保证其使用不会侵犯任何权利或具有适销性或适合特定用途的隐含保证。

--------------------------------------------------------
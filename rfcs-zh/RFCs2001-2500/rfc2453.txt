# RFC 2453 中文翻译 (stub)
# 原文文件: ../../rfcs/RFCs2001-2500/rfc2453.txt

网络工作组                                          G. Malkin
意见请求编号：2453                                贝网络公司
废止：1723, 1388                                    1998年11月
标准：56
类别：标准轨道

                          RIP 版本2

本备忘录的状态

   本文件为互联网社区制定的互联网标准轨道协议，旨在征求讨论和改进建议。请参阅当前版本的《互联网官方协议标准》（STD 1），了解该协议的标准化状态和最新情况。本备忘录的分发不受限制。

版权声明

   版权所有（C）互联网协会（1998年）。保留所有权利。

摘要

   本文件规定了对路由信息协议（RIP）的扩展，扩展内容包括增加RIP消息中携带的有用信息量以及引入一定的安全措施，具体定义见[1]。

   一个配套文档将定义用于RIP-2的SNMP MIB对象[2]。另一个补充文档将定义对RIP-2的加密安全改进措施[3]。

致谢

   感谢IETF RIP工作组在改进RIP-2协议方面提供的帮助。关于距离向量协议的背景讨论以及部分RIP操作的描述，部分内容取自C. Hedrick的《路由信息协议》[1]。本文件的部分最终编辑由Scott Bradner完成。












Malkin                      标准轨道                     [第1页]


RFC 2453                     RIP 版本2                 1998年11月


目录
```

1.  论证依据 . . . . . . . . . . . . . . . . . . . . . . . .  3
2.  当前的RIP . . . . . . . . . . . . . . . . . . . . . . . . .  3
3.  基本协议 . . . . . . . . . . . . . . . . . . . . . . . . .  3
   3.1  引言 . . . . . . . . . . . . . . . . . . . . . . . .  3
   3.2  协议的局限性 . . . . . . . . . . . . . . . . .  5
   3.3  本文档的组织结构 . . . . . . . . . . . . . . . .  6
   3.4  距离向算法 . . . . . . . . . . . . . . . . . .  6
   3.4.1  处理拓扑变化 . . . . . . . . . . . . . . . 12
   3.4.2  防止不稳定性 . . . . . . . . . . . . . . 13
   3.4.3  分割视界（Split Horizon） . . . . . . . . 15
   3.4.4  触发更新 . . . . . . . . . . . . . . . . 17
   3.5  协议规范 . . . . . . . . . . . . . . . . . . 18
   3.6  消息格式 . . . . . . . . . . . . . . . . . 20
   3.7  地址考虑事项 . . . . . . . . . . . . . . . 22
   3.8  定时器 . . . . . . . . . . . . . . . . . . 24
   3.9  输入处理 . . . . . . . . . . . . . . . . 25
   3.9.1  请求消息 . . . . . . . . . . . . . . . 25
   3.9.2  响应消息 . . . . . . . . . . . . . . 26
   3.10  输出处理 . . . . . . . . . . . . . . . 28
   3.10.1  触发更新 . . . . . . . . . . . . . 29
   3.10.2  生成响应消息 . . . . . . . . . . 30
4.  协议扩展 . . . . . . . . . . . . . . . . . . . 31
   4.1  认证 . . . . . . . . . . . . . . . . . 31
   4.2  路由标签 . . . . . . . . . . . . . . . 32
   4.3  子网掩码 . . . . . . . . . . . . . . 32
   4.4  下一跳 . . . . . . . . . . . . . . . 33
   4.5  多播 . . . . . . . . . . . . . . . 33
   4.6  查询 . . . . . . . . . . . . . . 33
5.  兼容性 . . . . . . . . . . . . . . . . . . 34
   5.1  兼容性切换 . . . . . . . . . . . . 34
   5.2  认证 . . . . . . . . . . . . . . 34
   5.3  更大的无限值 . . . . . . . . . . 35
   5.4  无地址链路 . . . . . . . . . . 35
6.  版本1与版本2的交互 . . . . . . . . . . . 35
7.  安全性考虑 . . . . . . . . . . . . . . . 36
附录 . . . . . . . . . . . . . . . . . . . . . 37
参考文献 . . . . . . . . . . . . . . . . . 37
作者地址 . . . . . . . . . . . . . . . . 38
完整版权声明 . . . . . . . . . . . . . . 39

RFC 2453                     RIP 版本2                 1998年11月


1.  论证理由

   随着OSPF和IS-IS的出现，有人认为RIP已经过时。虽然新一代的内部网关协议（IGP）路由协议在性能上远优于RIP，但RIP仍具有一些优势。主要是在小型网络中，RIP在带宽使用、配置和管理时间方面的开销非常小。RIP也非常容易实现，尤其相较于更新的IGP协议。

   此外，市场上存在的RIP实现远多于OSPF和IS-IS的总和。预计在未来几年内，这一局面仍将持续。

   鉴于RIP在许多环境中仍将有一定的使用价值，提升RIP的实用性是合理的。尤其是考虑到这种提升带来的收益远远大于所需的变更成本。

2.  当前的RIP

   当前的RIP-1消息包含了路由器在网络中转发消息所必需的最少信息。同时，由于其设计起源，消息中还包含大量未使用的空间。

   现行的RIP-1协议没有考虑自治系统（AS）与IGP/EGP的交互、子网划分[11]以及认证机制，因为这些功能是在RIP-1之后才出现的。缺少子网掩码是对路由器来说特别严重的问题，因为路由器需要子网掩码来确定路由。如果一个RIP-1路由是网络路由（所有非网络位为0），那么子网掩码等于网络掩码。然而，如果某些非网络位被设置，路由器就无法确定子网掩码。更糟糕的是，路由器还无法判断该RIP-1路由是子网路由还是主机路由。目前，一些路由器只是简单地采用学习到该路由的接口的子网掩码，并据此判断路由类型。

3.  基本协议

3.1 引言

   RIP是一种基于Bellman-Ford（或距离向量）算法的路由协议。这一算法自ARPANET早期以来就被用于计算机网络中的路由。本文所描述的特定数据包格式和协议，基于“routed”程序，该程序包含在Berkeley发行的Unix系统中。

在像互联网这样的国际网络中，单一的路由协议几乎不可能覆盖整个网络。相反，网络通常被组织成多个自治系统（AS），每个自治系统通常由单一实体管理。每个自治系统都拥有自己的路由技术，这些技术在不同的自治系统之间可能不同。在一个自治系统内部使用的路由协议被称为内部网关协议（IGP）。用于自治系统之间传递路由信息的另一种协议被称为外部网关协议（EGP）。RIP（路由信息协议）设计用于作为中等规模自治系统中的IGP使用，并不适合更复杂的环境。关于RIP-1所适用的背景信息，请参见Braden和Postel的文献[6]。

RIP采用一种被称为距离向量算法的路由算法类别。作者所知的该类算法的最早描述见于Ford和Fulkerson的著作[8]。因此，它们有时也被称为Ford-Fulkerson算法。Bellman-Ford这个术语也被使用，源于该算法的数学基础——Bellman方程[4]。本文的介绍主要基于文献[5]。本文还包含了协议的详细规范。关于路由算法数学基础的介绍，请参见[1]。该协议所用的基本算法早在1969年在ARPANET中用于计算机路由。然而，该协议的具体起源可以追溯到施乐（Xerox）网络协议。PUP协议[7]使用网关信息协议（Gateway Information Protocol）交换路由信息。该协议的一个较新版本被采用于施乐网络系统（XNS）架构，称为路由信息协议（Routing Information Protocol）[9]。伯克利的routed程序基本上与路由信息协议相同，只是将XNS地址替换为一种更通用的地址格式，能够支持IPv4及其他类型的地址，并且路由更新限制为每30秒一次。由于两者的相似性，术语“路由信息协议”或简称“RIP”既用来指代XNS协议，也用来指代routed所使用的协议。

RIP 旨在用于基于IP的互联网。互联网由多个网络组成，这些网络通过专用的网关（即路由器）相互连接。网络可以是点对点连接，也可以是更复杂的网络，例如以太网或令牌环。主机和路由器会收到目标为某个主机的IP数据报。路由是主机或路由器决定将数据报发送到何处的方法。如果目标在直接连接到主机或路由器的网络上，它可能会直接将数据报发送到目的地。然而，较为复杂的情况是当目标不可直接到达时。

在这种情况下，主机或路由器会尝试将数据报发送到离目标更近的路由器。路由协议的目标非常简单：提供完成路由所需的信息。

3.2 协议的局限性

该协议并不能解决所有可能的路由问题。如前所述，它主要用于中等规模网络中的内部网关协议（IGP）。此外，还应提及以下具体限制：

- 该协议仅适用于最长路径（即网络直径）不超过15跳的网络。设计者认为，基本的协议设计不适用于更大的网络。请注意，这一限制的说明假设每个网络的代价为1。这也是RIP的常规配置方式。如果系统管理员选择使用更大的代价，上限15可能会成为问题。

- 该协议依赖“计数到无限”机制来解决某些异常情况（将在下一节中解释）。如果网络系统中有数百个网络，并且形成涉及所有网络的路由环路，解决该环路将需要较长时间（如果限制路由更新的频率）或大量带宽（如果在检测到变化时立即发送更新）。在这种情况下，环路会在被修正之前消耗大量网络带宽。我们相信，在实际情况下，这通常不会成为问题，除非线路很慢。即使如此，这种情况也相当少见，因为采取了多种预防措施，应该能在大多数情况下避免这些问题。

- 该协议使用固定的“度量”值来比较备选路径。不适用于需要根据实时参数（如测量延迟、可靠性或负载）选择路径的场景。为了支持这类度量的明显扩展，可能会引入协议无法应对的某些不稳定性。

马尔金 标准轨道 [第5页]

RFC 2453 RIP版本2 1998年11月

3.3 本文档的组织结构

   本文档的主体部分分为两个部分，分别占据接下来的两个章节：

        一般距离向量算法的概念发展与理论基础。

        实际协议的详细描述。

   这两个部分在很大程度上可以独立存在。第3.4节试图以非正式的方式介绍算法的数学基础。请注意，本文的介绍采用“螺旋式”方法。首先描述一个相对简单的算法，然后在后续章节中逐步加入改进。第3.5节是协议的具体描述。除非特别提及第3.4节，否则可以完全根据第3.5节中的规范来实现RIP。

3.4 距离向量算法

   路由的任务是找到从源到目标的路径。在IP“互联网模型”中，这主要归结为在源网络和目标网络之间找到一系列的路由器。只要消息或数据报保持在单一网络或子网内，任何转发问题都由该网络特定的技术负责。例如，以太网和ARPANET都定义了在各自网络内任何发送者都可以与任何指定目的地通信的方法。当消息必须从一个网络的发送者传送到另一个网络的目的地时，IP路由才变得尤为重要。在这种情况下，消息必须经过一个或多个连接不同网络的路由器。如果网络不相邻，消息可能会经过多个中间网络和连接它们的路由器。一旦消息到达与目的地在同一网络上的路由器，就会使用该网络的技术将消息传送到目的地。

   在本节中，“网络”一词是以泛指的方式使用的，涵盖单一广播网络（如以太网）、点对点线路或ARPANET。关键点在于，IP将网络视为一个整体。要么不需要转发决策（如点对点线路），要么转发过程对IP是透明的，使IP可以将整个网络视为一个完全连接的系统（如以太网或ARPANET）。请注意，在关于IP地址讨论中，“网络”一词的用法略有不同。这里所使用的“网络”是指在使用子网地址时的子网。

多种不同的方法可以用来寻找网络之间的路由。其中一种有用的分类方式是根据路由器需要交换的信息类型来划分。距离向量算法基于只交换少量信息的原则。参与路由协议的每个实体（路由器或主机）都假设保存关于系统中所有目的地的信息。通常，关于连接到某一网络的所有实体的信息会被总结为一条条单一的条目，这些条目描述了到该网络上所有目的地的路由。这种总结之所以可行，是因为就IP而言，网络内部的路由是不可见的。每个路由表中的条目都包括下一跳路由器的地址，即数据报应当被发送到的路由器，以及一个“度量”值，用以衡量到该实体的总距离。距离是一个较为广义的概念，可能包括到达实体的时间延迟、发送消息的成本（如金钱）等。距离向量算法之所以得名，是因为只要交换的信息是这些距离的列表，就可以计算出最优路径。此外，信息只在相邻实体之间交换，也就是说，只有共享同一网络的实体之间才会交换信息。

虽然路由通常基于网络信息，但有时也需要跟踪到单个主机的路由。RIP协议没有对网络和主机做正式区分，它仅描述了目的地信息的交换，这些目的地可以是网络，也可以是主机。（注意，实施者可以选择不支持主机路由，详见第3.2节。）实际上，从数学角度来看，最方便的理解方式是将路由视为从一个主机或路由器到另一个的路径。当以抽象的方式讨论算法时，将网络的路由条目视为连接到该网络的所有实体的路由条目的简写是最合适的。这种简写之所以合理，是因为我们认为网络没有在IP层面可见的内部结构。因此，通常会为某一网络中的每个实体赋予相同的距离。

前面提到，每个实体都维护一个路由数据库，其中包含系统中每个可能目的地的条目。实际的实现可能需要为每个目的地保存以下信息：

- 地址：在这些算法的IP实现中，这将是主机或网络的IP地址。

- 路由器：沿着到达目的地的路径上的第一个路由器。

- 接口：必须用来到达第一个路由器的物理网络。

- 度量：一个数字，表示到达目的地的距离。

- 定时器：自上次更新该条目以来经过的时间。

此外，还可能包括各种标志和其他内部信息。该数据库最初是用与系统直接连接的实体的描述进行初始化的。它会根据从邻居路由器接收到的信息进行更新。

主机和路由器之间交换的最重要信息载于更新消息中。每个参与路由方案的实体都会发送描述其当前路由数据库的更新消息。只利用从邻居实体获得的信息，就有可能维护整个系统的最优路由。用于实现这一点的算法将在下一节中介绍。

正如前面提到的，路由的目的是找到将数据报送达最终目的地的方法。距离向量算法基于每个路由器中的一张表，列出到系统中每个目的地的最佳路径。当然，为了定义哪条路径是最优的，我们必须有一种衡量“优劣”的方法。这被称为“度量”。

在简单的网络中，常用的度量是统计消息必须经过的路由器数量。在更复杂的网络中，度量通常用来表示消息所经历的总延迟、发送的成本，或其他可以最小化的量。主要的要求是，必须能够将度量表示为各个跳跃“成本”的总和。

正式地说，如果可以直接从实体i到实体j（即不经过其他路由器）到达，那么与i和j之间的跳跃相关联的成本为d(i,j)。在所有网络上的实体都被视为相同的正常情况下，d(i,j)对于同一网络上的所有目的地都是相同的，代表使用该网络的成本。为了得到完整路径的度量，只需将组成路径的各个跳跃的成本相加即可。

Malkin                      标准追踪                     [第8页]

RFC 2453                     RIP第2版                 1998年11月

如果可以直接从实体i到实体j（即不经过其他路由器），那么与i和j之间的跳跃相关联的成本为d(i,j)。在所有网络上的实体都被视为相同的正常情况下，d(i,j)对于同一网络上的所有目的地都是相同的，代表使用该网络的成本。为了得到完整路径的度量，只需将组成路径的各个跳跃的成本相加即可。对于本备忘录的目的，假设这些成本是正整数。

让 D(i,j) 表示从实体 i 到实体 j 的最佳路径的度量。它应当对每一对实体都定义。d(i,j) 表示单个步骤的成本。正式地，令 d(i,j) 表示直接从实体 i 到实体 j 的成本。如果 i 和 j 不是直接邻居，则 d(i,j) 为无穷大。（注意，d(i,i) 也是无穷大，也就是说，我们不认为节点到自身存在直接连接。）由于成本是可相加的，很容易证明，最优的度量必须满足以下条件：

      D(i,i) = 0，                     对所有 i
      D(i,j) = 最小值 [d(i,k) + D(k,j)]，  其他情况
                      k

并且，最优路径的起点是从 i 出发，选择那些使得 d(i,k) + D(k,j) 最小的邻居 k。（这些可以通过归纳路径中的步骤数来证明。）注意，我们可以将第二个等式的 k 限制为 i 的直接邻居。对于其他 k，d(i,k) 为无穷大，因此涉及它们的项永远不可能是最小值。

事实证明，可以通过一个简单的算法基于上述原理计算这个度量。实体 i 会让它的邻居 k 将他们到目的地 j 的距离估计值发送给它。当 i 收到 k 的估计后，会将 d(i,k) 加到每个估计值上。这实际上是从 i 到 k 之间网络的传输成本。然后，i 会定期比较所有邻居的值，选择最小的那个。

在文献 [2] 中证明了，在没有拓扑变化的情况下，这个算法会在有限时间内收敛到正确的 D(i,j) 估计值。作者对实体之间传递信息的顺序或重新计算最小值的时间几乎没有假设。基本上，只要实体不停地发送更新或重新计算度量，网络不可能无限期延迟消息（路由实体的崩溃即为拓扑变化）。此外，他们的证明没有对 D(i,j) 的初始估计值做任何假设，除了它们必须是非负的。这个相对较弱的假设足够重要，因为我们不需要对何时发送更新做出假设，因此可以异步运行该算法。也就是说，每个实体可以根据自己的时钟发送更新。只要网络没有全部丢弃这些更新，它们就可以被接受。由于不需要对起始条件做假设，算法也能应对拓扑变化。当系统发生变化时，路由算法会开始向新的平衡状态移动，以旧的状态作为起点。重要的是，该算法会在有限时间内收敛。

无论起点在哪里，时间都不会成为限制。否则，某些类型的变化可能会导致算法无法收敛。

上述算法的描述（以及证明）假设每个实体都保存来自其每个邻居的估计值的副本，并且会不时对所有邻居的估计值取最小值。实际上，真实的实现并不一定这样做。它们只会记住目前为止看到的最佳指标，以及发送该指标的邻居的身份。当它们看到更好的（更小的）指标时，就会用新的信息替换旧的。这使得它们可以逐步计算出最小值，而无需存储所有邻居的数据。

此外，文本中描述的算法与实际协议（如RIP）使用的算法之间还有一个差别：上面描述的算法会让每个实体包含一个自己对应的条目，显示距离为零。实际上，这通常并不这样做。请记住，网络上的所有实体通常用一个网络的单一条目来总结。考虑一个连接到网络A的主机或路由器G的情况。C代表使用网络A的代价（通常是一个度量值为1的指标）。（请注意，我们假设网络的内部结构对IP来说是不可见的，因此在网络内任意两个实体之间的通信成本是相同的。）原则上，G应该从网络A上的每个其他实体H接收一条消息，显示从H到自己的距离为0。然后，G会将C + 0作为到H的距离。为了避免让G查看所有这些相同的消息，它只需在其表中为网络A创建一条条目，并赋予其指标C。这个网络A的条目可以看作是对网络A上所有其他实体的条目的总结。唯一不能用这个共同条目总结的实体是G自己，因为从G到G的代价是0，而不是C。但由于我们从不需要这些0的条目，因此只用网络A的单一条目就可以了。还要注意，这种策略的另一个含义是：因为我们不需要使用0的条目，非路由器的主机无需发送任何更新消息。显然，不作为路由器的主机（即只连接到一个网络的主机）没有其他有用的信息可以贡献，除了它们自己的条目D(i,i)=0。由于它们只有一个接口，很容易看出，通过它们到其他网络的路由只会经过该接口，然后立即返回。因此，这样的路由成本至少比最优成本高C。既然我们不需要这些0的条目，非路由器无需参与路由协议。

让我们总结一下主机或路由器 G 所执行的操作。对于系统中的每个目的地，G 都会保持一个关于该目的地的度量（即到达该目的地的总成本）的最新估计，以及基于该度量的邻居路由器的身份。

如果目的地位于与 G 直接相连的网络上，那么 G 只需使用一条显示使用该网络的成本的条目，并且不需要任何路由器即可到达该目的地。可以很容易地证明，一旦计算收敛到正确的度量，记录的邻居实际上就是通往目的地路径上的第一个路由器。（如果有多个同样优良的路径，则是其中一条路径上的第一个路由器。）这种由目的地、度量和路由器组成的组合，通常被称为“到该目的地的路由”，使用该路由器和该度量。

4. 目前的方法只提供了降低度量的机制，因为现有的度量会一直保持，直到出现更小的值。也可能最初的估计值过低，因此必须有一种方法来增加度量。事实证明，使用以下规则就足够了：假设到某个目的地的当前路由的度量为 D，并且使用路由器 G。如果从除 G 之外的其他来源收到一组新信息，则只有在新度量优于 D 时才更新该路由；但如果从 G 自身收到新信息，则无论如何都要将 D 更新为新值。很容易证明，采用此规则的增量更新过程会产生与记住所有邻居的最新信息并进行显式最小值计算相同的路由。（注意，至今的讨论假设网络配置是静态的，不考虑系统可能发生故障的情况。）

总结一下，到目前为止所开发的基本距离向量算法。（注意，这并不是 RIP 协议的完整描述，仍有一些改进需要加入。）以下过程由每个参与路由协议的实体执行。这必须包括系统中的所有路由器。非路由器的主机也可以参与。

- 维护一张表，表中为系统中的每个可能的目的地都设有一条条目。该条目包含到该目的地的距离 D，以及通往该网络的第一台路由器 G。从概念上讲，表中还应有一条自己本身的条目，度量为 0，但实际上并未包含。

- 定期向每个邻居发送路由更新。该更新是一组消息，包含路由表中的所有信息。每条信息都对应一个目的地，显示到该目的地的距离。

- 当从邻居 G' 收到路由更新时，将与 G' 共享的网络的代价加入到该网络的成本中（即更新到达的网络）。将得到的距离记为 D'。然后，将新计算的距离与当前路由表中的条目进行比较。如果 N 的新距离 D' 小于现有值 D，则采用新路由，即将 N 的表项中的度量值改为 D'，下一跳路由器改为 G'。如果 G' 就是提供现有路由的路由器 G，即 G' = G，则即使新距离比旧距离大，也要使用新度量。

3.4.1 处理拓扑变化

上述讨论假设网络拓扑是固定的。实际上，路由器和线路经常会出现故障或恢复。为了应对这种情况，我们需要对算法做一些修改。

理论上的算法涉及对所有直接邻居的最小值进行计算。如果拓扑发生变化，邻居集合也会变化。因此，下次进行计算时，变化会被反映出来。然而，如前所述，实际实现中使用的是增量式的最小值算法，只记住到某个目的地的最佳路由。如果参与该路由的路由器崩溃，或者与其的网络连接中断，计算可能永远无法反映出变化。到目前为止的算法依赖于路由器在其度量发生变化时通知邻居。如果路由器崩溃，就无法通知邻居。

为了解决这类问题，距离向量协议必须设置一些超时机制来失效路由。具体细节取决于不同的协议。例如，在 RIP 中，每个参与路由的路由器每30秒向所有邻居发送一次更新消息。假设网络 N 的当前路由是通过路由器 G。如果在180秒内没有收到 G 的任何消息，就可以假设 G 已崩溃或连接到它的网络已变得不可用。因此，我们将该路由标记为无效。当从其他邻居那里收到一条有效的到 N 的路由时，原本无效的路由会被替换。注意，即使每30秒会收到一次消息，我们仍会等待180秒才将路由标记为超时。这是因为网络偶尔会丢失消息，因此单次未收到消息不应立即使路由失效。

正如我们将在下文中看到的，拥有一种通知邻居当前某个网络没有有效路由的方法是非常有用的。 RIP 以及其他几种类似协议通过正常的更新消息来实现这一点，即将该网络标记为不可达。 为了表示一个不可达的目的地，会选择一个特定的度量值；这个值比我们预期看到的最大有效度量值还要大。在现有的 RIP 实现中，使用的值是 16。 这个值通常被称为“无穷大”，因为它大于最大有效度量值。 16 这个数字看起来可能有些令人惊讶地小，但之所以选择这个数值，原因很快就会揭示。在大多数实现中，内部也采用相同的约定来标记一条路由为无效。

3.4.2 防止不稳定

到目前为止所介绍的算法总是能让一个主机或路由器计算出正确的路由表。然而，这还不足以使其在实际中变得有用。上述提到的证明只表明路由表会在有限时间内收敛到正确的值，但并不保证这个时间足够短以便实用，也没有说明网络变得不可达后，度量值会发生什么变化。

扩展数学模型以处理网络变得不可达的问题其实很容易。上面建议的约定可以实现这一点。我们选择一个较大的度量值来代表“无穷大”。这个值必须足够大，以确保没有任何实际的度量值会达到这个数。在本例中，我们将使用值 16。假设某个网络变得不可达，所有直接邻接的路由器都会超时，并将该网络的度量值设为 16。为了分析的方便，可以假设所有邻居路由器都配备了新硬件，直接连接到已消失的网络，连接代价为 16。由于这是唯一连接到该网络的路径，系统中的其他路由器会收敛到通过这些邻居之一的新的路由。很容易看出，一旦收敛完成，所有路由器对已消失网络的度量值都至少为 16。距离原始邻居一跳的路由器的度量值会至少为 17；两跳远的路由器的度量值会至少为 18，等等。由于这些度量值都大于最大度量值，它们都会被设为 16。显然，系统现在会在所有路由器上收敛到对已消失网络的度量值为 16。

很遗憾，关于收敛需要多长时间的问题并没有一个简单的答案。在继续之前，先看一个例子（取自[2]）。请注意，我们接下来要展示的内容在正确实现RIP的情况下不会发生。我们试图说明为什么需要某些特性。在下面的例子中，字母代表路由器，线条代表网络。

（图示：）

Malkin                      标准追踪                    [第13页]

RFC 2453                     RIP版本2                 1998年11月

     A-----B
      \   / \
       \ /  |
        C  /    所有网络的代价都是1，除了
        | /     从C到D的直接链路，代价为10
        |/      
        D
        |<=== 目标网络

每个路由器都会有一张表，显示到每个网络的路由。

然而，为了便于说明，我们只显示每个路由器到图底标记的网络的路由。

           D：直接连接，代价1
           B：通过D路由，代价2
           C：通过B路由，代价3
           A：通过B路由，代价3

现在假设从B到D的链路发生故障。路由应当调整，改用从C到D的链路。不幸的是，这一变化需要一段时间才能完成。当B注意到到D的路由不再可用时，路由的变化开始。为了简化，下图假设所有路由器同时发送更新。图中显示了在每个路由器的路由表中，目标网络的度量值。

时间 ------>

       D：直接连接，1   1   1   1  ...  1   1
       B：不可达  C, 4   C, 5   C, 6       C, 11   C, 12
       C：B, 3   A, 4   A, 5   A, 6       A, 11   D, 11
       A：B, 3   C, 4   C, 5   C, 6       C, 11   C, 12

（说明：）
dir = 直接连接
unreach = 不可达

问题在于：B能够通过超时机制清除其失效的路由，但该路由的残留信息在系统中会持续很长时间。起初，A和C仍然认为可以通过B到达D，因此它们不断发送度量为3的更新。在下一轮中，B会声称它可以通过A或C到达D，当然这是不可能的。A和C所声称的路由现在已经不存在，但它们还不知道这一点。即使它们发现通过B的路由已经消失，它们仍然认为可以通过对方找到路由。最终，系统会收敛，就像所有数学模型所预言的那样，但这个过程可能需要一些时间。最坏的情况是网络变得……

完全无法从系统的某些部分访问。在这种情况下，度量值可能会以类似上述的模式缓慢增加，直到最终达到无限大。因此，这个问题被称为“计数到无限”。

你现在应该明白为什么“无限”被选得尽可能小。如果一个网络变得完全无法访问，我们希望尽快停止计数到无限的过程。无限必须足够大，以确保没有实际的路由会达到那么大。但它也不应比必要的更大。因此，选择无限的值是在网络规模和在发生计数到无限时收敛速度之间的权衡。RIP的设计者认为，该协议不太可能在直径超过15的网络中实用。

为了防止类似的问题，可以采取几种措施。RIP采用的措施包括“分割视界（split horizon）”和“毒化反转（poisoned reverse）”，以及“触发更新（triggered updates）”。

3.4.3 分割视界（Split horizon）

注意，上述问题的一部分原因在于A和C之间存在一种相互欺骗的模式。每一方都声称可以通过对方到达D。这可以通过在信息传递时更加谨慎来避免。特别是，向邻居声明某个目标网络可达性时，永远不要声明从哪个邻居学到的路由也可以到达该目标。“分割视界”是一种避免在向学习到该路由的邻居发送更新时包含该路由的方案。简单的分割视界方案会在向某个邻居发送更新时省略从该邻居学到的路由。而“毒化反转的分割视界”则会在更新中包含这些路由，但将它们的度量值设置为无限大。

如果A认为可以通过C到达D，那么它发给C的消息应表明D不可达。如果通过C的路由是真实的，那么C要么直接连接到D，要么通过其他路由器连接到D。C的路由不可能返回到A，因为那会形成环路。通过告诉C D不可达，A实际上是在防范C可能会混淆，误以为有一条通过A的路由。这对于点对点线路来说是显而易见的。但考虑到A和C可能通过以太网等广播网络连接，且网络上还有其他路由器。如果A通过C有一条路由，它在与网络上的其他路由器通信时也应表明D不可达。网络上的其他路由器可以自己到达C，从不需要通过A到达C。如果A的最佳路由确实是通过C，那么网络上的其他路由器无需知道A可以到达D。这是幸运的，因为这意味着用相同的更新消息可以避免不必要的信息传播。

RFC 2453                     RIP 版本2                 1998年11月

用于C的更新消息可以在同一网络上的所有其他路由器中使用。因此，更新消息可以通过广播方式发送。

一般来说，带有毒性反转的分割视界比简单的分割视界更安全。如果两个路由器相互指向彼此的路由，广告反向路由时使用16的度量值将立即打破环路。如果不广告反向路由，错误的路由将不得不等待超时后消除。然而，毒性反转也有一个缺点：它会增加路由消息的大小。考虑一个连接多个不同建筑的校园骨干网的情况。在每个建筑中，都有一台路由器将骨干网连接到本地网络。考虑这些路由器应在骨干网络上传播哪些路由更新。网络的其他部分实际上只需要知道每个路由器连接了哪些本地网络。使用简单的分割视界，只有这些路由会出现在由路由器发出的更新消息中。如果使用带有毒性反转的分割视界，路由器必须提及所有从骨干网学到的路由，并将度量值设为16。如果系统规模较大，这可能导致更新消息变得很大，几乎所有条目都指示不可达的网络。

在静态意义上，广告反向路由并以16的度量值提供没有额外信息。如果在一个广播网络上有许多路由器，这些额外的条目会占用大量带宽。它们存在的原因是为了改善动态行为。当拓扑发生变化时，提及那些不应经过该路由器的路由以及应经过的路由，可以加快收敛速度。然而，在某些情况下，网络管理员可能更倾向于接受较慢的收敛速度，以最小化路由开销。因此，实现者可以选择实现简单的分割视界，而不是带有毒性反转的分割视界，或者提供一个配置选项，让网络管理员选择使用哪种行为。也可以实现混合方案，即广告一些反向路由时使用16的度量值，而省略其他的。例如，在涉及路由变化后的一段时间内，对某些反向路由使用度量值16，之后在更新中省略它们。

路由器要求的RFC [11]规定，所有RIP的实现必须使用分割视界，并且应当也使用带有毒性反转的分割视界，尽管可以有一个开关来禁用毒性反转。

Malkin                      标准轨迹                    [第16页]

RFC 2453                     RIP 版本2                 1998年11月

3.4.4  触发更新

带有毒性反转的分割视界将防止仅涉及两个路由器的路由环路。然而，仍有可能出现三个路由器相互欺骗的情况。例如，A可能认为它通过B有一条路由，B通过C有一条路由，C通过A有一条路由。分割视界无法阻止这种环路。这种环路只有在度量值达到无穷大时才会被解决，届时相关网络会被宣布为不可达。触发更新试图加快这种收敛速度。为了实现触发更新，我们只需添加一条规则：当一个路由器更改某条路由的度量值时，它必须几乎立即发送更新消息，即使还不是常规更新的时间。（不同协议的时间细节会有所不同。一些距离向量协议，包括RIP，规定了一个较短的时间延迟，以避免触发更新引发过多的网络流量。）请注意，这与计算新度量值的规则相结合。例如，假设某个路由器到目的地N的路由经过路由器G。如果来自G的更新到达，接收的路由器必须相信新信息，无论新度量值是高于还是低于旧值。如果结果导致度量值发生变化，接收的路由器将向所有直接连接的主机和路由器发送触发更新。它们又可能向各自的邻居发送更新。这样就形成了触发更新的级联。很容易判断哪些路由器和主机参与了这个级联。例如，假设路由器G超时了到目的地N的路由，G会向所有邻居发送触发更新。然而，只有那些通过G路由到N的邻居才会相信新信息。其他路由器和主机会将其视为一条比已使用的路由更差的新路由信息，从而忽略它。通过G的路由的邻居会更新它们的度量值，并向所有邻居发送触发更新。同样，只有通过它们的邻居才会关注。如此，触发更新会沿着所有通向G的路径向后传播，将度量值更新为无穷大。这种传播会在到达网络中某一部分时停止，那里的到目的地N的路由采用了其他路径。

如果系统能够在触发更新级联发生时保持静止，就可以证明无限循环永远不会发生。坏的路由会立即被移除，因此不会形成路由环路。

不幸的是，情况并不那么美好。在触发更新被发送的同时，常规更新也可能同时发生。尚未收到触发更新的路由器仍会基于已不存在的路由信息进行广播。这意味着，在某个路由器完成触发更新后，它可能会收到来自尚未得知路由已被删除的其他路由器的普通更新。这可能会重新建立一个孤立的、错误路由的残余。如果触发更新发生得足够快，这种情况的发生几率非常低，但仍有可能出现“无限循环”的问题。

路由信息协议（RFC [11]）规定，所有 RIP 实现必须实现对已删除路由的触发更新，也可以实现对新路由或路由变更的触发更新。RIP 实现还必须限制触发更新的传输速率（详见第3.10.1节）。

3.5 协议规范

RIP 旨在允许路由器在基于 IPv4 的网络中交换信息，以计算最佳路由。任何使用 RIP 的路由器都应具有连接到一个或多个网络的接口，否则它就不是真正的路由器。这些网络被称为其“直接连接的网络”。该协议依赖于访问关于这些网络的某些信息，其中最重要的是其度量值。网络的 RIP 度量值是一个介于 1 到 15 之间的整数。该值的设置方式未在本协议中规定；然而，由于最大路径限制为 15，通常会使用值为 1。实现应允许系统管理员为每个网络设置度量值。除了度量值外，每个网络还应有一个 IPv4 目标地址和子网掩码，这些由系统管理员以未在本协议中规定的方式进行设置。

任何使用 RIP 的主机都应具有连接到一个或多个网络的接口。这些网络被称为其“直接连接的网络”。该协议依赖于访问关于这些网络的某些信息，其中最重要的是其“成本”或“度量”。网络的度量值是一个介于 1 到 15 之间的整数，设置方式未在本协议中规定。大多数现有实现通常都使用度量值为 1。新的实现应允许系统管理员为每个网络设置成本。除了成本外，每个网络还应有一个 IPv4 网络编号和子网掩码，这些由系统管理员以未在本协议中规定的方式进行设置。

请注意，第3.7节中规定的规则假设每个IPv4网络都只有一个子网掩码，并且只知道直接连接网络的子网掩码。可能存在一些系统在单一网络内对不同子网使用不同的子网掩码。此外，也可能存在某些情况下，系统需要知道远程网络的子网掩码。如果网络中所有路由器都运行本文档中介绍的扩展，则允许在整个网络范围内分发包含不同子网掩码的路由信息。然而，如果网络中的所有路由器未都运行这些扩展，则必须限制包含不同子网掩码的路由信息的分发，以避免互操作性问题。关于子网分发的规则，请参见第3.7节和第4.3节。

每个实现RIP的路由器都假设拥有一张路由表。该表为系统中所有可达的目的地各有一条条目。每个条目至少包含以下信息：

- 目的地的IPv4地址。

- 一个度量值，表示从该路由器到该目的地传输数据报的总成本。该成本是到达目的地所经过网络的成本之和。

- 通往目的地路径上的下一个路由器的IPv4地址（即下一跳）。如果目的地位于直接连接的网络之一，则不需要此项。

- 一个标志，用以指示关于该路由的信息是否最近发生了变化。我们将其称为“路由变化标志”。

- 与该路由相关的各种定时器。有关定时器的详细信息，请参见第3.6节。

直接连接网络的条目由路由器根据未在本协议中具体说明的方法收集的信息设置。直接连接网络的度量值设为该网络的成本。通常，成本为1。在这种情况下，RIP的度量值简化为跳数。若希望显示某些网络优于其他网络（例如，基于带宽或可靠性差异），则可以使用更复杂的度量。

为了支持本文档中详细描述的扩展，每个条目还必须包含子网掩码。子网掩码使路由器（结合目的地的IPv4地址）能够识别单一网络中的不同子网，以及远程网络的子网掩码。

实现者也可以选择允许系统管理员输入额外的路由。这些路由很可能是指向路由系统范围之外的主机或网络的路由。它们被称为“静态路由”。除这些初始目的地之外的条目由后续章节中描述的算法添加和更新。

为了让协议提供完整的路由信息，自治系统（AS）中的每个路由器都必须参与该协议。在使用多种内部网关协议（IGP）的情况下，必须至少有一台路由器能够在不同协议之间泄露路由信息。

3.6 消息格式

RIP是一个基于UDP的协议。每个使用RIP的路由器都拥有一个路由进程，该进程在UDP端口号520（即RIP-1/RIP-2端口）上发送和接收数据报。所有发往其他路由器RIP进程的通信都发送到RIP端口。所有路由更新消息也都从RIP端口发出。未请求的路由更新消息的源端口和目标端口都等于RIP端口。响应请求而发送的更新消息则发往请求发出的端口。特定的查询可以从非RIP端口发出，但必须指向目标机器上的RIP端口。

RIP数据包格式如下：

```
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |  命令（1）     |  版本（1）     |       必须为零（2）          |
  +---------------+---------------+-------------------------------+
  |                                                               |
  ~                         RIP条目（20）                         ~
  |                                                               |
  +---------------+---------------+---------------+---------------+
```

RIP中可能包含1到25个（含）RIP条目。一个RIP-1条目的格式如下：

以下是英文内容的中文翻译：

```
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | 地址族标识符（2字节） |      必须为零（2字节）        |
      +-------------------------------+-------------------------------+
      |                        IPv4地址（4字节）                     |
      +--------------------------------------------------------------+
      |                        必须为零（4字节）                     |
      +--------------------------------------------------------------+
      |                        必须为零（4字节）                     |
      +--------------------------------------------------------------+
      |                           指标（4字节）                       |
      +--------------------------------------------------------------+

   字段大小以字节为单位。除非另有说明，字段中包含二进制整数，采用网络字节序（大端字节序），最高有效字节在前。每个竖线“|”代表一位。

   每个消息都包含一个RIP头部，该头部由命令和版本号组成。本节描述协议的第1版；第4节描述第2版的扩展。命令字段用于指定此消息的用途。第1版和第2版实现的命令包括：

   1 - 请求（request）  请求响应系统发送其全部或部分路由表。

   2 - 响应（response）  包含发送方全部或部分路由表的消息。此消息可以作为对请求的响应，也可以是由发送方主动生成的未请求路由更新。

   对于这两种消息类型，在第1版中，数据报的其余部分包含一组路由条目（RTEs）。每个RTE包含一个地址族标识符（AFI）、目标IPv4地址以及到达该目标的代价（指标）。

   AFI是地址的类型。对于RIP-1，通常只支持AF_INET（值为2）。

   指标字段包含一个介于1到15（含）之间的值，表示到目标的当前度量；或者值为16（无限大），表示该目标不可达。

Malkin                      标准轨迹                        [第21页]

RFC 2453                     RIP第2版                     1998年11月

3.7 地址考虑因素
```

距离向量路由可以用来描述到单个主机或网络的路由。RIP协议允许这两种可能性。请求和应答消息中出现的目的地可以是网络、主机，或用来表示默认地址的特殊代码。一般而言，实际使用的路由类型将取决于特定网络所采用的路由策略。许多网络设置为不需要为单个主机维护路由信息。如果某个网络或子网中的每个节点都可以通过相同的路由器访问，那么在路由表中没有必要提及单个主机。然而，包含点对点线路的网络有时需要路由器跟踪到某些节点的路由。这是否必要取决于系统中使用的地址和路由方法。因此，一些实现可能选择不支持主机路由。如果不支持主机路由，当在应答消息中收到时，应将其丢弃（参见第3.7.2节）。

RIP-1数据包格式没有区分各种类型的地址。标记为“地址”的字段可以包含以下任何一种：

- 主机地址
- 子网编号
- 网络编号
- 零（默认路由）

使用RIP-1的实体假设在路由数据报时会使用最具体的可用信息。也就是说，在路由一个数据报时，首先应检查其目标地址是否在节点地址列表中。然后，应检查它是否与任何已知的子网或网络编号匹配。最后，如果都不匹配，则使用默认路由。

当节点评估通过RIP-1接收的信息时，其对地址的解释取决于是否知道适用于该网络的子网掩码。如果知道子网掩码，就可以确定地址的含义。例如，考虑网络128.6，它的子网掩码为255.255.255.0。因此，128.6.0.0是网络编号，128.6.4.0是子网编号，128.6.4.1是节点地址。然而，如果节点不知道子网掩码，评估地址可能会变得模糊。如果地址中的节点部分非零，就没有明确的方法判断该地址是表示子网编号还是节点地址。由于没有子网掩码，子网编号将毫无用处，因此在这种情况下，地址被假定为表示节点。为了避免这种歧义，在使用第1版时，节点不得向不能预期知道相应子网掩码的节点发送子网路由。通常，主机只知道直接连接网络的子网掩码。因此，除非做了特殊规定，……

到子网的路由不得被发送到该子网所属的网络之外。RIP-2（参见第4节）通过在路由条目中包含子网掩码，消除了子网/主机的歧义。

这种“子网过滤”由子网网络的“边界”路由器执行。这些路由器连接该网络与其他网络。在子网网络内部，每个子网都被视为一个独立的网络。每个子网的路由条目由RIP进行传播。然而，边界路由器只向其他网络的节点发送整个网络的单一条目。这意味着边界路由器会向不同的邻居发送不同的信息。对于连接到子网网络的邻居，它会生成一份所有直接连接子网的列表，使用子网编号；对于连接到其他网络的邻居，它只会为整个网络生成一个条目，显示与该网络相关的度量值。这个度量值通常是路由器所连接的子网中最小的度量值。

同样，边界路由器不得在向其他网络发送的消息中提及连接到直接网络的节点的主机路由。这些路由将被整个网络的单一条目所取代。

路由器需求的RFC [11]规定，所有RIP的实现都应支持主机路由，但如果不支持，则必须忽略任何接收到的主机路由。

特殊地址0.0.0.0用于描述默认路由。当在RIP更新中列出每个可能的网络不方便，且系统中一个或多个紧密连接的路由器准备处理未明确列出的网络的流量时，就会使用默认路由。这些路由器应为地址0.0.0.0创建RIP条目，就像它们连接到的网络一样。关于路由器如何为0.0.0.0创建条目的决定留给实现者。最常见的是，系统管理员会提供一种方式，指定哪些路由器应为0.0.0.0创建条目；当然，也可以采用其他机制。例如，某个实现者可能会决定，所有支持BGP的路由器都应被声明为默认路由器。允许网络管理员选择在这些条目中使用的度量值可能会很有用。如果存在多个默认路由器，这可以表达对某个路由器的偏好。对于0.0.0.0的条目，RIP的处理方式与实际存在该地址的网络完全相同。系统管理员应确保到0.0.0.0的路由不会传播得比预期更远。通常，每个自治系统都有其偏好的默认路由。

马尔金 标准轨道 [第23页]

RFC 2453 RIP版本2 1998年11月

路由器。因此，涉及0.0.0.0的路由通常不应离开自治系统的边界。本文件未规定强制执行此规则的机制。

3.8 定时器

本节描述由定时器触发的所有事件。

每隔30秒，RIP进程被唤醒，向每个邻居路由器发送一条未请求的响应消息，内容包含完整的路由表（参见第3.9节的分割视角）。当一个网络上有许多路由器时，它们倾向于同步操作，即同时发出更新。这种同步可能发生在每次30秒定时器受到系统负载影响时。更新消息同步是不理想的，因为这可能导致广播网络上的不必要碰撞。因此，要求实现采取以下两种预防措施之一：

- 30秒的更新由一个时钟触发，该时钟的速率不受系统负载或上一次更新所需时间的影响。

- 每次设置30秒定时器时，加入一个小的随机偏移时间（+/- 0到5秒）。(实现者可以考虑根据最新研究结果[10]，采用更大的变化范围)

每个路由关联两个定时器：“超时”定时器和“垃圾收集”定时器。超时定时器到期后，路由不再有效；但为了通知邻居该路由已被删除，仍会在路由表中保留一段时间。当垃圾收集定时器到期时，路由最终会从路由表中移除。

超时定时器在建立路由时初始化，每次收到该路由的更新消息时也会重新初始化。如果自上次初始化超时定时器起经过180秒，则认为该路由已过期，随后开始执行下述删除流程。

删除可能由两种原因引起：超时到期，或由于收到来自当前路由器的更新而将度量值设为16（见第3.7.2节关于处理其他路由器更新的讨论）。无论哪种情况，都会发生以下事件：

- 设置垃圾收集定时器为120秒。

- 将该路由的度量值设为16（无限大），使其从服务中移除。

- 设置路由变更标志，表示该条目已被更改。

- 通知输出进程触发响应。

在垃圾回收计时器到期之前，该路由会包含在该路由器发送的所有更新中。当垃圾回收计时器到期时，该路由将从路由表中删除。

如果在垃圾回收计时器运行期间建立了到该网络的新路由，则新路由将取代即将被删除的路由。在这种情况下，必须清除垃圾回收计时器。

触发更新也使用一个小的计时器；然而，这在第3.9.1节中会有更详细的描述。

3.9 输入处理

本节将描述在RIP端口接收的数据报的处理方式。处理方式将取决于命令字段中的值。

有关版本号处理的详细信息，请参见第4.6节和第5.1节。

3.9.1 请求消息

请求（Request）用于请求包含全部或部分路由器路由表的响应。通常，请求作为广播（RIP-2为多播）从RIP端口发出，由刚启动并希望尽快填充其路由表的路由器发出。然而，也可能存在某些情况（例如路由器监控），只需要某个单一路由器的路由表。在这种情况下，请求应直接从一个非RIP端口的UDP端口发送到该路由器。如果收到这样的请求，路由器会直接响应请求者的地址和端口。

请求会逐条处理。如果没有条目，则不会发出响应。有一个特殊情况：如果请求中恰好只有一条条目，并且其地址族标识符为零，度量值为无穷大（即16），那么这就是请求发送整个路由表。在这种情况下，会调用输出过程，将路由表发送到请求者的地址/端口。除这个特殊情况外，处理过程相当简单。逐一检查请求中的每个路由条目，在路由器的路由数据库中查找目标地址，如果存在路由，则将该路由的度量值填入RTE的度量字段中。如果没有到指定目标的明确路由，则在度量字段中填入无穷大。一旦所有条目都已填写完毕，将命令从Request改为Response，并将数据报返回给请求者。

请注意，对于特定条目请求和整表请求，处理方式有所不同。如果请求的是完整的路由表，则会进行正常的输出处理，包括Split Horizon（请参见第3.9节关于Split Horizon的内容）。如果请求的是特定条目，则会在路由表中查找相应条目，并原样返回信息；不会进行Split Horizon处理。之所以做出这样的区分，是因为预期这些请求可能用于不同的目的。当路由器首次启动时，它会在每个连接的网络上多播一个请求，要求获取完整的路由表。假设这些完整的路由表将用于更新请求者的路由表，因此必须进行Split Horizon处理。还假设对特定网络的请求仅由诊断软件发出，并不用于路由。在这种情况下，请求者希望知道路由表的确切内容，不希望任何信息被隐藏或修改。

3.9.2 响应消息

收到响应可能有多种原因：

- 对特定查询的响应
- 常规更新（主动响应）
- 由路由变化引发的触发更新

无论响应的产生原因如何，处理方式都是相同的。

由于响应的处理可能会更新路由器的路由表，因此必须仔细验证响应的有效性。如果响应不是来自RIP端口，则应忽略。还应检查数据报的IPv4源地址，确认其是否来自有效的邻居；源地址必须位于直接连接的网络上。同样值得检查的是，响应是否来自路由器自己的地址。在广播网络上，接口可能会立即收到自己广播/多播的副本。如果路由器将自己的输出作为新的输入处理，可能会引起混淆，因此此类数据报必须被忽略。

在整个数据报验证无误后，应逐个处理响应中的路由条目（RTEs）。再次强调，首先进行验证。指标错误或格式错误通常表明邻居行为异常，应引起管理员注意。例如，如果指标大于无穷，应忽略该条目，但应记录事件。基本的验证步骤包括：

- 目标地址是否有效（例如，单播地址；不是网络0或127）
- 指标是否有效（即，介于1到16之间，包括16）

如果任何检查失败，应忽略该条目并继续处理下一个。同样，记录错误通常是个不错的做法。

一旦条目被验证后，更新该度量值，方法是将消息到达的网络的成本加到当前的度量值上。如果结果大于无穷大，则使用无穷大。也就是说，

度量值 = 最小值（当前度量值 + 网络成本， 无穷大）

接下来，检查是否已经存在到目的地址的明确路由。如果没有这样的路由，且该度量值不是无穷大（没有必要添加不可用的路由），则将此路由添加到路由表中。添加路由到路由表包括：

- 将目的地址设置为路由条目中的目的地址

- 将度量值设置为刚刚计算出的新度量值（如上所述）

- 将下一跳地址设置为发来数据报的路由器的地址

- 初始化该路由的超时计时器。如果该路由的垃圾收集计时器正在运行，则停止它（关于计时器的讨论请参见第3.6节）

- 设置路由变更标志

- 通知输出进程以触发更新（请参见第3.8.1节）

如果已存在到该目的地址的路由，则将下一跳地址与发来数据报的路由器的地址进行比较。如果该数据报来自与现有路由相同的路由器，则重新初始化超时计时器。接着，比较度量值。如果该数据报来自与现有路由相同的路由器，且新度量值不同于旧的，或者新度量值比旧的更低，则执行以下操作：

- 采纳该数据报中的路由（即用新度量值替换旧的，并在必要时调整下一跳地址）

- 设置路由变更标志，并通知输出进程以触发更新

- 如果新度量值为无穷大，则启动删除过程（如上所述）；否则，重新初始化超时计时器

如果新度量值为无穷大，则开始删除该路由，该路由将不再用于路由数据包。请注意，只有在度量值首次被设置为无穷大时，才会启动删除过程。如果度量值已经是无穷大，则不会启动新的删除过程。

如果新指标与旧指标相同，最简单的做法是无需采取额外措施（除了按照上述规定重新初始化超时）；但也可以应用一种启发式方法。通常，如果新路由的指标与现有路由相同，替换路由是没有意义的，因为这会导致路由不断地切换，产生无法忍受的触发更新次数。然而，如果现有路由显示出超时的迹象，可能更好立即切换到一个同样优良的备选路由，而不是等待超时发生。因此，如果新指标与旧指标相同，应检查现有路由的超时时间。如果超时时间至少已接近到期时间的一半，就应切换到新路由。这种启发式方法是可选的，但强烈推荐。

任何未通过这些测试的条目都将被忽略，因为它们不优于当前的路由。

3.10 输出处理

本节描述用于创建包含全部或部分路由表的响应消息的处理过程。此处理可以通过以下任一方式触发：

- 通过输入处理，当接收到请求（此响应将单播给请求者；详见第3.7.1节）

- 通过常规路由更新（每30秒广播/多播一次）路由器

- 通过触发更新（当路由发生变化时广播/多播）

当需要向所有邻居发送响应（即常规或触发更新）时，响应消息会被定向发送到每个点对点连接的远端路由器，并在所有支持广播的连接网络上进行广播（对于RIP-2为多播）。因此，为每个直接连接的网络准备一份响应，并将其发送到相应的地址（直接地址或广播/多播地址）。在大多数情况下，这可以到达所有邻居路由器。然而，也存在某些情况可能不够理想，比如网络不是广播网络（例如ARPANET），或涉及“哑”路由器的场景。在这些情况下，可能需要明确列出邻居路由器的列表，并向每个邻居单独发送数据报。是否需要采用这种机制，以及如何定义邻居列表，由实现者自行决定。

触发更新需要特殊处理，原因有两个。首先，经验表明，触发更新可能会对容量有限的网络或拥有许多路由器的网络造成过载。因此，协议要求实现者采取措施限制触发更新的频率。在发送触发更新后，应设置一个随机的定时器，时间在1到5秒之间。如果在定时器到期之前发生了其他会引发更新的变化，则在定时器到期时只触发一次更新。之后，定时器应重新设置为另一个1到5秒之间的随机值。如果在触发更新发送之前，已有定期更新到期，则应抑制触发更新的发送。

第二，触发更新不需要包含整个路由表。原则上，只需要包含那些发生变化的路由。因此，作为触发更新一部分生成的消息，必须至少包括那些其路由变化标志已被设置的路由。实现者可以自行决定是否包含额外的路由，但强烈不建议发送完整的路由更新。当处理触发更新时，应为每个直接连接的网络生成相应的消息。生成触发更新时，也应进行Split Horizon处理（见第3.9节），与正常更新一样。如果在对某个网络进行Split Horizon处理后，某条发生变化的路由在该网络上看起来未变（例如，它显示为无限度量），则无需发送该路由。如果在该网络上没有需要发送的路由，则可以省略该更新。一旦所有触发更新都已生成，应清除所有的路由变化标志。

如果在生成输出的同时允许输入处理，则必须进行适当的互锁。在生成触发更新消息的过程中，不应因处理输入而改变路由变化标志。

触发更新与其他更新消息的唯一区别在于可能省略未发生变化的路由。其余机制（在下一节中描述）必须应用于所有更新。

3.10.2 生成响应消息

本节描述如何为特定的直接连接网络生成响应消息：

将版本号设置为1或2。决定发送哪个版本的机制是特定实现的；然而，如果这是对请求的响应，响应的版本应与请求的版本一致。将命令设置为“响应”。将标记为“必须为零”的字节设为零。开始填写RTE（路由条目）。请记住，一个响应最多只能包含25个RTE；如果超过这个数量，应发送当前的响应并开始一个新的响应。组成响应的数据报没有定义的数量限制。

为了填写RTE，检查路由表中的每条路由。如果正在生成触发更新，则只需包含那些路由更改标志已设置的条目。如果经过“分割视界”处理后，某条路由不应包含在内，则跳过它。如果应包含该路由，则将目的地址和度量值放入RTE中。即使某条路由的度量值为无限，也必须在数据报中包含。

Malkin                      标准轨迹                    [第30页]

RFC 2453                     RIP第2版                 1998年11月

4. 协议扩展

本节并不改变RIP协议本身，而是提供了消息格式的扩展，允许路由器共享重要的附加信息。

RIP-1和RIP-2消息使用相同的头部格式（见第3.4节）。RIP-2的20字节路由条目（RTE）格式为：

```
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Address Family Identifier (2) |        Route Tag (2)          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         IP Address (4)                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Subnet Mask (4)                       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Next Hop (4)                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Metric (4)                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
```

地址族标识符、IP地址和度量值的含义均如第3.4节所定义。版本字段将指定为2，用于携带认证信息或包含在任何新定义字段中的信息的RIP消息。

4.1 认证

由于认证是每条消息的功能，并且在消息头中只有一个两个字节（2字节）的字段可用，而任何合理的认证方案都需要超过两个字节，因此，RIP版本2的认证方案将使用整个RIP条目的空间。如果消息中第一个（也是唯一的第一个）条目的地址族标识符（Address Family Identifier）为0xFFFF，那么该条目的其余部分将包含认证信息。这意味着，消息的其余部分最多可以包含24个RIP条目。如果未启用认证，则消息中的任何条目都不应具有地址族标识符为0xFFFF的值。包含认证条目的RIP消息将以以下格式开始：

```
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Command (1)   | Version (1)   |            unused             |
   +---------------+---------------+-------------------------------+
   |             0xFFFF            |    Authentication Type (2)    |
   +-------------------------------+-------------------------------+
   ~                       Authentication (16)                     ~
   +---------------------------------------------------------------+
```

目前，唯一的认证类型是简单密码，类型编号为2。剩余的16个字节包含明文密码。如果密码少于16个字节，则必须左对齐，并用空字节（0x00）在右侧填充。

4.2 路由标签（Route Tag）

路由标签（RT）字段是赋予路由的一个属性，必须在路由中保留并重新通告。路由标签的预期用途是提供一种区分“内部”RIP路由（RIP路由域内的网络）和“外部”RIP路由（可能从外部网关协议EGP或其他内部网关协议导入的路由）的方法。

支持除RIP之外协议的路由器应可配置，以允许为从不同来源导入的路由设置路由标签。例如，从EGP或BGP导入的路由应能够将其路由标签设置为任意值，或至少设置为学习该路由的自治系统编号。

路由标签的其他用途也是有效的，只要RIP域中的所有路由器都能一致使用它。这为制定BGP-RIP协议交互的文档提供了可能性，该文档将描述在中转网络中同步路由的方法。

4.3 子网掩码

子网掩码字段包含应用于IP地址的子网掩码，用以获得地址中的非主机部分。如果该字段为零，则表示该条目未包含子网掩码。

在一个接口上，当一个RIP-1路由器可能接收并处理RIP-2路由条目的信息时，适用以下规则：

1) 一个网络内部的信息绝不应被广告到另一个网络；

2) 关于更具体子网的信息不能被广告到RIP-1路由器会将其视为主机路由的地方；

3) 超网路由（子网掩码比“自然”网络掩码更少具体的路由）不得在可能被RIP-1路由器误解的地方进行广告。

4.4 下一跳

指向目的地的下一跳IP地址，即应将数据包转发到该地址。若在此字段中指定值为0.0.0.0，表示路由应通过RIP广告的发起者进行。作为下一跳的地址必须在广告所使用的逻辑子网中直接可达。

下一跳字段的目的是避免数据包在系统中经过多余的跳数进行路由。特别是在网络中的所有路由器未都运行RIP时，这一功能尤为有用。附录A中提供了一个简单的示例。请注意，下一跳是一个“建议”字段，也就是说，如果忽略提供的信息，可能会选择一条次优但绝对有效的路由。如果接收到的下一跳地址不可直接到达，应将其视为0.0.0.0。

4.5 多播

为了减少那些未监听RIP-2消息的主机上的不必要负载，将使用IP多播地址进行定期广播。IP多播地址为224.0.0.9。注意，不需要IGMP，因为这些是路由器之间的消息，不会被转发。

在非广播多路访问（NBMA）网络上，可以使用单播地址。然而，如果收到针对RIP-2多播地址的响应，应予以接受。

为了保持向后兼容，使用多播地址的功能将是可配置的，如第5.1节所述。如果启用多播，应在所有支持多播的接口上使用。

4.6 查询

如果一个RIP-2路由器收到RIP-1请求，它应以RIP-1响应作出回应。如果路由器配置为只发送RIP-2消息，则不应对RIP-1请求作出响应。

（此处省略后续内容）

RFC [1] 在其版本号处理规范中展现了相当的前瞻性。它规定，版本为0的RIP消息应被丢弃，版本为1的RIP消息如果任何“必须为零”(MBZ)字段非零，则应被丢弃，而任何版本大于1的RIP消息不应仅因为MBZ字段包含非零值而被丢弃。这意味着新版本的RIP与遵循该规范部分的现有RIP实现完全向后兼容。

5.1 兼容性开关

为了两个原因，必须设置兼容性开关。第一，现场存在一些不遵循RFC [1]描述的RIP-1实现。第二，使用多播会阻止RIP-1系统接收RIP-2更新（在某些情况下这可能是一个期望的特性）。该开关应可在每个接口基础上配置。

该开关有四个设置：RIP-1，仅发送RIP-1消息；RIP-1兼容模式，广播RIP-2消息；RIP-2，进行RIP-2多播；以及“无”，禁用RIP消息的发送。建议默认设置为RIP-1或RIP-2，而非RIP-1兼容模式。这是因为在某些拓扑结构中可能会出现潜在问题。只有在网络管理员充分理解其所有后果时，才应使用RIP-1兼容模式。

为确保完整性，路由器还应实现一个接收控制开关，用以决定是否接受RIP-1、RIP-2、两者或都不接受。该开关也应可在每个接口上配置。建议其默认设置应与发送更新时选择的默认设置保持一致。

5.2 认证

应使用以下算法对RIP消息进行认证。如果路由器未配置为认证RIP-2消息，则接受RIP-1和未认证的RIP-2消息；认证的RIP-2消息将被丢弃。如果路由器配置为认证RIP-2消息，则接受通过认证测试的RIP-1和RIP-2消息；未认证或认证失败的RIP-2消息将被丢弃。为了最大程度的安全性，在启用认证时，应忽略RIP-1消息（参见第4.1节）；否则，带有认证信息的消息的路由信息将由未认证的RIP-1路由器传播。

由于认证条目被标记为地址族标识符（Address Family Identifier）为0xFFFF，RIP-1系统会忽略此条目，因为它属于非IP的地址族。因此，应注意，使用认证并不能阻止RIP-1系统看到RIP-2消息。如果需要，可以通过多播方式实现，如第4.5节和第5.1节所述。

5.3 更大的无限值

在谈及兼容性时，有一项请求：增加无限值。主要原因是这样做会破坏向后兼容性。更大的无限值显然会让旧版本的RIP感到困惑。它们最多会像忽略指标值为16的路由一样忽略此类路由。还有一种提议是将指标（Metric）设为单个八位字节，并重用高三个八位字节，但这会破坏将指标作为四个八位字节实体处理的实现。

5.4 无地址链路

与RIP-1一样，无地址链路在RIP-2中也不被支持。

6. 版本1与版本2的交互

由于版本1的数据包不包含子网信息，在包含版本1和版本2网络的环境中，路由器应将其语义限制为版本1的方式。否则，可能会创建黑洞路由（即不存在的网络路由）或在版本1环境中生成过多的路由信息。

一些实现尝试自动将相邻的路由组汇总成单一条目，目的是减少总路由条目数，这被称为自动汇总（auto-summarization）。

具体而言，在网络中同时使用版本1和版本2时，应在整个网络中使用单一的子网掩码。此外，应禁用此类网络的自动汇总机制，且实现必须提供禁用自动汇总的机制。

---

Malkin                      标准追踪                     [第35页]

RFC 2453                     RIP版本2                   1998年11月

7. 安全考虑

基本的RIP协议并不具备安全性。为了使RIP-2与更现代的路由协议保持一致，协议增强中引入了一种可扩展的认证机制。该机制在第4.1节和第5.2节中描述。安全性还通过[3]中描述的机制得到了进一步增强。

---

Malkin                      标准追踪                     [第36页]

RFC 2453                     RIP版本2                   1998年11月

附录A

这是关于在RIP条目中使用下一跳（next hop）字段的一个简单示例。

-----   -----   -----           -----   -----   -----
|IR1|   |IR2|   |IR3|           |XR1|   |XR2|   |XR3|
--+--   --+--   --+--           --+--   --+--   --+--
  |       |       |               |       |       |
--+-------+-------+---------------+-------+-------+--
  <-------------RIP-2--------------->

假设IR1、IR2和IR3都是“内部”路由器，属于同一管理区域（例如一个校园），并选择使用RIP-2作为其内部网关协议（IGP）。而XR1、XR2和XR3则属于不同的管理区域（例如一个区域网络，校园是其成员），并使用其他路由协议（例如OSPF）。XR1、XR2和XR3之间交换路由信息，使它们知道到网络N1和N2的最佳路径是通过XR1，到N3、N4和N5的路径是通过XR2，到N6和N7的路径是通过XR3。通过正确设置下一跳字段（将N3/N4/N5的下一跳设为XR2，N6/N7的下一跳设为XR3），只有XR1需要与IR1/IR2/IR3交换RIP-2路由，从而实现无需通过XR1的额外跳数进行路由。如果没有下一跳字段（例如使用RIP-1），则XR2和XR3也必须参与RIP-2协议，以消除额外的跳数。

参考文献

[1] Hedrick, C., “Routing Information Protocol”, STD 34, RFC 1058, 罗格斯大学，1988年6月。

[2] Malkin, G., 和 F. Baker, “RIP Version 2 MIB Extension”, RFC 1389, 1993年1月。

[3] Baker, F., 和 R. Atkinson, “RIP-II MD5 Authentication”, RFC 2082, 1997年1月。

[4] Bellman, R. E., “动态规划”, 普林斯顿大学出版社，1957年。

[5] Bertsekas, D. P., 和 Gallaher, R. G., “数据网络”, 普林蒂斯-霍尔，1987年。

[6] Braden, R., 和 Postel, J., “互联网网关的需求”, STD 4, RFC 1009, 1987年6月。

[7] Boggs, D. R., Shoch, J. F., Taft, E. A., 和 Metcalfe, R. M., “Pup: 一个互联网络架构”, IEEE通信杂志，1980年4月。

[8] Ford, L. R. Jr., 和 Fulkerson, D. R., “网络中的流”, 普林斯顿大学出版社，1962年。

[9] Xerox公司，“互联网传输协议”, Xerox系统集成标准XSIS 028112, 1981年12月。

[10] Floyd, S., 和 V. Jacobson, “周期性路由消息的同步”, ACM Sigcom '93研讨会，1993年9月。

[11] Baker, F., “IPv4路由器的需求”, RFC 1812, 1995年6月。

作者联系方式

Gary Scott Malkin  
Bay Networks  
8 Federal Street  
Billerica, MA 01821

电话： (978) 916-4237  
电子邮箱： gmalkin@baynetworks.com

RFC 2453                     RIP 版本2                 1998年11月

完整版权声明

版权所有 (C) 互联网协会（1998年）。保留所有权利。

本文件及其翻译版本可以被复制并提供给他人，也可以对其进行派生作品的制作，这些派生作品可以对原文进行评论、解释或协助其实现，可以全部或部分复制、出版和分发，且不受任何限制，前提是所有此类副本和派生作品都必须包含上述版权声明和本段内容。然而，严禁以任何方式修改本文件，例如删除版权声明或对互联网协会或其他互联网组织的引用，除非出于制定互联网标准的目的，在此情况下必须遵循互联网标准流程中定义的版权程序，或出于将其翻译成非英语语言的需要。

上述授予的有限权限是永久性的，不会被互联网协会或其继任者或受让人撤销。

本文件及其中包含的信息是“按原样”提供的，互联网协会和互联网工程任务组（IETF）对其不作任何明示或暗示的保证，包括但不限于保证其使用不会侵犯任何权利，或对其适销性或特定用途的适用性作出任何保证。